<?php

declare(strict_types=1);
/**
 * fincode API.
 *
 * fincodeのAPIリファレンスです。\\ fincodeは決済情報のほか様々なリソースを管理できるため、リソース指向なREST APIをベースとしたインターフェイス設計のもとでAPIを提供しています。\\ APIの呼び出しにはAPIキーによる認証が必要であり、リクエストの際に`Authorization`ヘッダーに有効なAPIキーをセットすることで認証できます。
 *
 * The version of the OpenAPI document: 1.2.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Fincode;

class Configuration
{
    public const BOOLEAN_FORMAT_INT = 'int';
    public const BOOLEAN_FORMAT_STRING = 'string';
    private static ?self $defaultConfiguration = null;
    /**
     * Associate array to store API key(s).
     *
     * @var array<string, string>
     */
    protected array $apiKeys = [];
    /**
     * Associate array to store API prefix (e.g. Bearer).
     *
     * @var list<string, string>
     */
    protected array $apiKeyPrefixes = [];
    /**
     * Access token for OAuth/Bearer authentication.
     */
    protected string $accessToken = '';
    /**
     * Boolean format for query string.
     *
     * @var self::*
     */
    protected string $booleanFormatForQueryString = self::BOOLEAN_FORMAT_INT;
    /**
     * Username for HTTP basic authentication.
     */
    protected string $username = '';
    /**
     * Password for HTTP basic authentication.
     */
    protected string $password = '';
    /**
     * The host.
     */
    protected string $host = 'https://api.fincode.jp';
    /**
     * User agent of the HTTP request, set to "OpenAPI-Generator/{version}/PHP" by default.
     */
    protected string $userAgent = 'OpenAPI-Generator/1.0.0/PHP';
    /**
     * Debug switch (default set to false).
     */
    protected bool $debug = false;
    /**
     * Debug file location (log to STDOUT by default).
     */
    protected string $debugFile = 'php://output';
    /**
     * Debug file location (log to STDOUT by default).
     */
    protected string $tempFolderPath;

    /**
     * Constructor.
     */
    public function __construct()
    {
        $this->tempFolderPath = sys_get_temp_dir();
    }

    /**
     * Sets API key.
     *
     * @param string $apiKeyIdentifier API key identifier (authentication scheme)
     * @param string $key              API key or token
     *
     * @return $this
     */
    public function setApiKey(string $apiKeyIdentifier, string $key): static
    {
        $this->apiKeys[$apiKeyIdentifier] = $key;

        return $this;
    }

    /**
     * Gets API key.
     *
     * @param string $apiKeyIdentifier API key identifier (authentication scheme)
     *
     * @return string|null API key or token
     */
    public function getApiKey(string $apiKeyIdentifier): ?string
    {
        return $this->apiKeys[$apiKeyIdentifier] ?? null;
    }

    /**
     * Sets the prefix for API key (e.g. Bearer).
     *
     * @param string $apiKeyIdentifier API key identifier (authentication scheme)
     * @param string $prefix           API key prefix, e.g. Bearer
     *
     * @return $this
     */
    public function setApiKeyPrefix(string $apiKeyIdentifier, string $prefix): static
    {
        $this->apiKeyPrefixes[$apiKeyIdentifier] = $prefix;

        return $this;
    }

    /**
     * Gets API key prefix.
     *
     * @param string $apiKeyIdentifier API key identifier (authentication scheme)
     */
    public function getApiKeyPrefix(string $apiKeyIdentifier): ?string
    {
        return $this->apiKeyPrefixes[$apiKeyIdentifier] ?? null;
    }

    /**
     * Sets the access token for OAuth.
     *
     * @param string $accessToken Token for OAuth
     */
    public function setAccessToken(string $accessToken): static
    {
        $this->accessToken = $accessToken;

        return $this;
    }

    /**
     * Gets the access token for OAuth.
     *
     * @return string Access token for OAuth
     */
    public function getAccessToken(): string
    {
        return $this->accessToken;
    }

    /**
     * Sets boolean format for query string.
     *
     * @param self::* $booleanFormat Boolean format for query string
     */
    public function setBooleanFormatForQueryString(string $booleanFormat): static
    {
        $this->booleanFormatForQueryString = $booleanFormat;

        return $this;
    }

    /**
     * Gets boolean format for query string.
     *
     * @return string Boolean format for query string
     */
    public function getBooleanFormatForQueryString(): string
    {
        return $this->booleanFormatForQueryString;
    }

    /**
     * Sets the username for HTTP basic authentication.
     *
     * @param string $username Username for HTTP basic authentication
     */
    public function setUsername(string $username): static
    {
        $this->username = $username;

        return $this;
    }

    /**
     * Gets the username for HTTP basic authentication.
     *
     * @return string Username for HTTP basic authentication
     */
    public function getUsername(): string
    {
        return $this->username;
    }

    /**
     * Sets the password for HTTP basic authentication.
     *
     * @param string $password Password for HTTP basic authentication
     */
    public function setPassword($password): static
    {
        $this->password = $password;

        return $this;
    }

    /**
     * Gets the password for HTTP basic authentication.
     *
     * @return string Password for HTTP basic authentication
     */
    public function getPassword(): string
    {
        return $this->password;
    }

    /**
     * Sets the host.
     *
     * @param string $host Host
     */
    public function setHost($host): static
    {
        $this->host = $host;

        return $this;
    }

    /**
     * Gets the host.
     *
     * @return string Host
     */
    public function getHost(): string
    {
        return $this->host;
    }

    /**
     * Sets the user agent of the api client.
     *
     * @param string $userAgent the user agent of the api client
     *
     * @throws \InvalidArgumentException
     */
    public function setUserAgent(string $userAgent): static
    {
        $this->userAgent = $userAgent;

        return $this;
    }

    /**
     * Gets the user agent of the api client.
     *
     * @return string user agent
     */
    public function getUserAgent(): string
    {
        return $this->userAgent;
    }

    /**
     * Sets debug flag.
     *
     * @param bool $debug Debug flag
     */
    public function setDebug(bool $debug): static
    {
        $this->debug = $debug;

        return $this;
    }

    /**
     * Gets the debug flag.
     */
    public function getDebug(): bool
    {
        return $this->debug;
    }

    /**
     * Sets the debug file.
     *
     * @param string $debugFile Debug file
     */
    public function setDebugFile(string $debugFile): static
    {
        $this->debugFile = $debugFile;

        return $this;
    }

    /**
     * Gets the debug file.
     */
    public function getDebugFile(): string
    {
        return $this->debugFile;
    }

    /**
     * Sets the temp folder path.
     *
     * @param string $tempFolderPath Temp folder path
     */
    public function setTempFolderPath(string $tempFolderPath): static
    {
        $this->tempFolderPath = $tempFolderPath;

        return $this;
    }

    /**
     * Gets the temp folder path.
     *
     * @return string Temp folder path
     */
    public function getTempFolderPath(): string
    {
        return $this->tempFolderPath;
    }

    /**
     * Gets the default configuration instance.
     */
    public static function getDefaultConfiguration(): self
    {
        if (null === self::$defaultConfiguration) {
            self::$defaultConfiguration = new self();
        }

        return self::$defaultConfiguration;
    }

    /**
     * Sets the default configuration instance.
     *
     * @param Configuration $config An instance of the Configuration Object
     */
    public static function setDefaultConfiguration(self $config): void
    {
        self::$defaultConfiguration = $config;
    }

    /**
     * Gets the essential information for debugging.
     *
     * @return string The report for debugging
     */
    public static function toDebugReport(): string
    {
        $report = 'PHP SDK (OpenAPI\Fincode) Debug Report:'.PHP_EOL;
        $report .= '    OS: '.php_uname().PHP_EOL;
        $report .= '    PHP Version: '.PHP_VERSION.PHP_EOL;
        $report .= '    The version of the OpenAPI document: 1.2.0'.PHP_EOL;
        $report .= '    Temp Folder Path: '.self::getDefaultConfiguration()->getTempFolderPath().PHP_EOL;

        return $report;
    }

    /**
     * Get API key (with prefix if set).
     *
     * @param string $apiKeyIdentifier name of apikey
     *
     * @return string|null API key with the prefix
     */
    public function getApiKeyWithPrefix(string $apiKeyIdentifier): ?string
    {
        $prefix = $this->getApiKeyPrefix($apiKeyIdentifier);
        $apiKey = $this->getApiKey($apiKeyIdentifier);
        if (null === $apiKey) {
            return null;
        }
        if (null === $prefix) {
            $keyWithPrefix = $apiKey;
        } else {
            $keyWithPrefix = $prefix.' '.$apiKey;
        }

        return $keyWithPrefix;
    }

    /**
     * Returns an array of host settings.
     *
     * @return list<array{
     *     url: string, description: string,
     *     variables?: array<string, array{description: string, default_value: string, enum_values?: list<string>}>,
     * }> an array of host settings
     */
    public function getHostSettings(): array
    {
        return [['url' => 'https://api.fincode.jp', 'description' => '本番環境'], ['url' => 'https://api.test.fincode.jp', 'description' => 'テスト環境']];
    }

    /**
     * Returns URL based on host settings, index and variables.
     *
     * @param list<array{
     *     url: string, description: string,
     *     variables?: array<string, array{description: string, default_value: string, enum_values?: list<string>}>,
     * }>                $hostsSettings array of host settings, generated from getHostSettings() or equivalent from the API clients
     * @param int        $hostIndex index of the host settings
     * @param array|null $variables hash of variable and the corresponding value (optional)
     *
     * @return string URL based on host settings
     */
    public static function getHostString(array $hostsSettings, int $hostIndex, ?array $variables = null): string
    {
        if (null === $variables) {
            $variables = [];
        }
        // check array index out of bound
        if ($hostIndex < 0 || $hostIndex >= count($hostsSettings)) {
            throw new \InvalidArgumentException('Invalid index $hostIndex when selecting the host. Must be less than '.count($hostsSettings));
        }
        $host = $hostsSettings[$hostIndex];
        $url = $host['url'];
        // go through variable and assign a value
        foreach ($host['variables'] ?? [] as $name => $variable) {
            if (array_key_exists($name, $variables)) {
                // check to see if it's in the variables provided by the user
                if (!isset($variable['enum_values']) || in_array($variables[$name], $variable['enum_values'], true)) {
                    // check to see if the value is in the enum
                    $url = str_replace('{'.$name.'}', $variables[$name], $url);
                } else {
                    throw new \InvalidArgumentException('The variable `$name` in the host URL has invalid value '.$variables[$name].'. Must be '.join(',', $variable['enum_values']).'.');
                }
            } else {
                // use default value
                $url = str_replace('{'.$name.'}', $variable['default_value'], $url);
            }
        }

        return $url;
    }

    /**
     * Returns URL based on the index and variables.
     *
     * @param int        $index     index of the host settings
     * @param array|null $variables hash of variable and the corresponding value (optional)
     *
     * @return string URL based on host settings
     */
    public function getHostFromSettings(int $index, ?array $variables = null): string
    {
        return self::getHostString($this->getHostSettings(), $index, $variables);
    }
}
