<?php

declare(strict_types=1);
/**
 * fincode API.
 *
 * fincodeのAPIリファレンスです。\\ fincodeは決済情報のほか様々なリソースを管理できるため、リソース指向なREST APIをベースとしたインターフェイス設計のもとでAPIを提供しています。\\ APIの呼び出しにはAPIキーによる認証が必要であり、リクエストの際に`Authorization`ヘッダーに有効なAPIキーをセットすることで認証できます。
 *
 * The version of the OpenAPI document: 1.2.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Fincode\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\GuzzleException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Promise\PromiseInterface;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Fincode\ApiException;
use OpenAPI\Fincode\Configuration;
use OpenAPI\Fincode\HeaderSelector;
use OpenAPI\Fincode\ObjectSerializer;

class Class3DApi
{
    /**
     * @var array<string, list<string>>
     */
    public const contentTypes = ['confirmThreeDSecureecureAuthentication' => ['application/json'], 'executeThreeDSecureecureAuthentication' => ['application/json']];

    /**
     * @param int $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(private readonly ClientInterface $client = new Client(), private readonly Configuration $config = new Configuration(), private readonly HeaderSelector $headerSelector = new HeaderSelector(), private int $hostIndex = 0)
    {
    }

    /**
     * Set the host index.
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex(int $hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index.
     *
     * @return int Host index
     */
    public function getHostIndex(): int
    {
        return $this->hostIndex;
    }

    public function getConfig(): Configuration
    {
        return $this->config;
    }

    /**
     * confirmThreeDSecureecureAuthentication: 3Dセキュア 認証結果確定.
     *
     * @param string $accessId     取引ID (required)
     * @param string $tenantShopId &lt;span class&#x3D;\&quot;smallText color--red-400\&quot;&gt;※ プラットフォームのメインショップのみ指定可&lt;/span&gt;\\ テナントショップID。\\ このテナントショップの決済情報のうち、指定した&#x60;access_id&#x60;のカード決済の3Dセキュア認証の結果を確定します。 (optional)
     * @param string $contentType  The value for the Content-Type header. Check self::contentTypes['confirmThreeDSecureecureAuthentication'] to see the possible values for this operation
     *
     * @return \OpenAPI\Fincode\Model\ThreeDSecureConfirmingResponse|\OpenAPI\Fincode\Model\FincodeAPIErrorResponse
     *
     * @throws ApiException              on non-2xx response
     * @throws GuzzleException
     * @throws \InvalidArgumentException
     */
    public function confirmThreeDSecureecureAuthentication(mixed $accessId, mixed $tenantShopId = null, string $contentType = self::contentTypes['confirmThreeDSecureecureAuthentication'][0]): mixed
    {
        list($response) = $this->confirmThreeDSecureecureAuthenticationWithHttpInfo($accessId, $tenantShopId, $contentType);

        return $response;
    }

    /**
     * confirmThreeDSecureecureAuthenticationWithHttpInfo: 3Dセキュア 認証結果確定.
     *
     * @param string $accessId     取引ID (required)
     * @param string $tenantShopId &lt;span class&#x3D;\&quot;smallText color--red-400\&quot;&gt;※ プラットフォームのメインショップのみ指定可&lt;/span&gt;\\ テナントショップID。\\ このテナントショップの決済情報のうち、指定した&#x60;access_id&#x60;のカード決済の3Dセキュア認証の結果を確定します。 (optional)
     * @param string $contentType  The value for the Content-Type header. Check self::contentTypes['confirmThreeDSecureecureAuthentication'] to see the possible values for this operation
     *
     * @return array{
     *     \OpenAPI\Fincode\Model\ThreeDSecureConfirmingResponse|\OpenAPI\Fincode\Model\FincodeAPIErrorResponse,
     *     int,
     *     list<string>,
     * } Array of response body, status, and response headers
     *
     * @throws ApiException              on non-2xx response
     * @throws GuzzleException
     * @throws \InvalidArgumentException
     */
    public function confirmThreeDSecureecureAuthenticationWithHttpInfo(mixed $accessId, mixed $tenantShopId = null, string $contentType = self::contentTypes['confirmThreeDSecureecureAuthentication'][0]): array
    {
        $request = $this->confirmThreeDSecureecureAuthenticationRequest($accessId, $tenantShopId, $contentType);
        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException("[{$e->getCode()}] {$e->getMessage()}", (int) $e->getCode(), $e->getResponse() ? $e->getResponse()->getHeaders() : null, $e->getResponse() ? (string) $e->getResponse()->getBody() : null);
            } catch (ConnectException $e) {
                throw new ApiException("[{$e->getCode()}] {$e->getMessage()}", (int) $e->getCode(), null, null);
            }
            $statusCode = $response->getStatusCode();
            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, (string) $request->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
            }
            switch ($statusCode) {
                case 200:
                    if ('\OpenAPI\Fincode\Model\ThreeDSecureConfirmingResponse' === '\SplFileObject') {
                        $content = $response->getBody();
                    // stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Fincode\Model\ThreeDSecureConfirmingResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [ObjectSerializer::deserialize($content, '\OpenAPI\Fincode\Model\ThreeDSecureConfirmingResponse', []), $response->getStatusCode(), $response->getHeaders()];
                case 400:
                    if ('\OpenAPI\Fincode\Model\FincodeAPIErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody();
                    // stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Fincode\Model\FincodeAPIErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [ObjectSerializer::deserialize($content, '\OpenAPI\Fincode\Model\FincodeAPIErrorResponse', []), $response->getStatusCode(), $response->getHeaders()];
            }
            $returnType = '\OpenAPI\Fincode\Model\ThreeDSecureConfirmingResponse';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody();
            // stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('string' !== $returnType) {
                    $content = json_decode($content);
                }
            }

            return [ObjectSerializer::deserialize($content, $returnType, []), $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\OpenAPI\Fincode\Model\ThreeDSecureConfirmingResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\OpenAPI\Fincode\Model\FincodeAPIErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * confirmThreeDSecureecureAuthenticationAsync: 3Dセキュア 認証結果確定.
     *
     * @param string $accessId     取引ID (required)
     * @param string $tenantShopId &lt;span class&#x3D;\&quot;smallText color--red-400\&quot;&gt;※ プラットフォームのメインショップのみ指定可&lt;/span&gt;\\ テナントショップID。\\ このテナントショップの決済情報のうち、指定した&#x60;access_id&#x60;のカード決済の3Dセキュア認証の結果を確定します。 (optional)
     * @param string $contentType  The value for the Content-Type header. Check self::contentTypes['confirmThreeDSecureecureAuthentication'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     */
    public function confirmThreeDSecureecureAuthenticationAsync(mixed $accessId, mixed $tenantShopId = null, string $contentType = self::contentTypes['confirmThreeDSecureecureAuthentication'][0]): PromiseInterface
    {
        return $this->confirmThreeDSecureecureAuthenticationAsyncWithHttpInfo($accessId, $tenantShopId, $contentType)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * confirmThreeDSecureecureAuthenticationAsyncWithHttpInfo: 3Dセキュア 認証結果確定.
     *
     * @param string $accessId     取引ID (required)
     * @param string $tenantShopId &lt;span class&#x3D;\&quot;smallText color--red-400\&quot;&gt;※ プラットフォームのメインショップのみ指定可&lt;/span&gt;\\ テナントショップID。\\ このテナントショップの決済情報のうち、指定した&#x60;access_id&#x60;のカード決済の3Dセキュア認証の結果を確定します。 (optional)
     * @param string $contentType  The value for the Content-Type header. Check self::contentTypes['confirmThreeDSecureecureAuthentication'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     */
    public function confirmThreeDSecureecureAuthenticationAsyncWithHttpInfo(mixed $accessId, mixed $tenantShopId = null, string $contentType = self::contentTypes['confirmThreeDSecureecureAuthentication'][0]): PromiseInterface
    {
        $returnType = '\OpenAPI\Fincode\Model\ThreeDSecureConfirmingResponse';
        $request = $this->confirmThreeDSecureecureAuthenticationRequest($accessId, $tenantShopId, $contentType);

        return $this->client->sendAsync($request, $this->createHttpClientOption())->then(function ($response) use ($returnType) {
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody();
            // stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('string' !== $returnType) {
                    $content = json_decode($content);
                }
            }

            return [ObjectSerializer::deserialize($content, $returnType, []), $response->getStatusCode(), $response->getHeaders()];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
        });
    }

    /**
     * Create request for operation 'confirmThreeDSecureecureAuthentication'.
     *
     * @param string $accessId     取引ID (required)
     * @param string $tenantShopId &lt;span class&#x3D;\&quot;smallText color--red-400\&quot;&gt;※ プラットフォームのメインショップのみ指定可&lt;/span&gt;\\ テナントショップID。\\ このテナントショップの決済情報のうち、指定した&#x60;access_id&#x60;のカード決済の3Dセキュア認証の結果を確定します。 (optional)
     * @param string $contentType  The value for the Content-Type header. Check self::contentTypes['confirmThreeDSecureecureAuthentication'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     */
    public function confirmThreeDSecureecureAuthenticationRequest(mixed $accessId, mixed $tenantShopId = null, string $contentType = self::contentTypes['confirmThreeDSecureecureAuthentication'][0]): Request
    {
        // verify the required parameter 'accessId' is set
        if (null === $accessId || is_array($accessId) && 0 === count($accessId)) {
            throw new \InvalidArgumentException('Missing the required parameter $accessId when calling confirmThreeDSecureecureAuthentication');
        }
        $resourcePath = '/v1/secure2/{access_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;
        // header params
        if (null !== $tenantShopId) {
            $headerParams['Tenant-Shop-Id'] = ObjectSerializer::toHeaderValue($tenantShopId);
        }
        // path params
        if (null !== $accessId) {
            $resourcePath = str_replace('{access_id}', ObjectSerializer::toPathValue($accessId), $resourcePath);
        }
        $headers = $this->headerSelector->selectHeaders(['application/json'], $contentType, $multipart);
        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = ['name' => $formParamName, 'contents' => $formParamValueItem];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }
        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }
        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }
        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !empty($this->config->getPassword())) {
            $headers['Authorization'] = 'Basic '.base64_encode($this->config->getUsername().':'.$this->config->getPassword());
        }
        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($defaultHeaders, $headerParams, $headers);
        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request('GET', $operationHost.$resourcePath.($query ? "?{$query}" : ''), $headers, $httpBody);
    }

    /**
     * executeThreeDSecureecureAuthentication: 3Dセキュア 認証実行.
     *
     * @param string                                                $accessId                       取引ID (required)
     * @param string                                                $tenantShopId                   &lt;span class&#x3D;\&quot;smallText color--red-400\&quot;&gt;※ プラットフォームのメインショップのみ指定可&lt;/span&gt;\\ テナントショップID。\\ このテナントショップの決済情報のうち、指定した&#x60;access_id&#x60;のカード決済の3Dセキュア認証を開始します。 (optional)
     * @param \OpenAPI\Fincode\Model\ThreeDSecureAuthorizingRequest $threeDSecureAuthorizingRequest threeDSecureAuthorizingRequest (optional)
     * @param string                                                $contentType                    The value for the Content-Type header. Check self::contentTypes['executeThreeDSecureecureAuthentication'] to see the possible values for this operation
     *
     * @return \OpenAPI\Fincode\Model\ThreeDSecureAuthorizingResponse|\OpenAPI\Fincode\Model\FincodeAPIErrorResponse
     *
     * @throws ApiException              on non-2xx response
     * @throws GuzzleException
     * @throws \InvalidArgumentException
     */
    public function executeThreeDSecureecureAuthentication(mixed $accessId, mixed $tenantShopId = null, mixed $threeDSecureAuthorizingRequest = null, string $contentType = self::contentTypes['executeThreeDSecureecureAuthentication'][0]): mixed
    {
        list($response) = $this->executeThreeDSecureecureAuthenticationWithHttpInfo($accessId, $tenantShopId, $threeDSecureAuthorizingRequest, $contentType);

        return $response;
    }

    /**
     * executeThreeDSecureecureAuthenticationWithHttpInfo: 3Dセキュア 認証実行.
     *
     * @param string                                                $accessId                       取引ID (required)
     * @param string                                                $tenantShopId                   &lt;span class&#x3D;\&quot;smallText color--red-400\&quot;&gt;※ プラットフォームのメインショップのみ指定可&lt;/span&gt;\\ テナントショップID。\\ このテナントショップの決済情報のうち、指定した&#x60;access_id&#x60;のカード決済の3Dセキュア認証を開始します。 (optional)
     * @param \OpenAPI\Fincode\Model\ThreeDSecureAuthorizingRequest $threeDSecureAuthorizingRequest (optional)
     * @param string                                                $contentType                    The value for the Content-Type header. Check self::contentTypes['executeThreeDSecureecureAuthentication'] to see the possible values for this operation
     *
     * @return array{
     *     \OpenAPI\Fincode\Model\ThreeDSecureAuthorizingResponse|\OpenAPI\Fincode\Model\FincodeAPIErrorResponse,
     *     int,
     *     list<string>,
     * } Array of response body, status, and response headers
     *
     * @throws ApiException              on non-2xx response
     * @throws GuzzleException
     * @throws \InvalidArgumentException
     */
    public function executeThreeDSecureecureAuthenticationWithHttpInfo(mixed $accessId, mixed $tenantShopId = null, mixed $threeDSecureAuthorizingRequest = null, string $contentType = self::contentTypes['executeThreeDSecureecureAuthentication'][0]): array
    {
        $request = $this->executeThreeDSecureecureAuthenticationRequest($accessId, $tenantShopId, $threeDSecureAuthorizingRequest, $contentType);
        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException("[{$e->getCode()}] {$e->getMessage()}", (int) $e->getCode(), $e->getResponse() ? $e->getResponse()->getHeaders() : null, $e->getResponse() ? (string) $e->getResponse()->getBody() : null);
            } catch (ConnectException $e) {
                throw new ApiException("[{$e->getCode()}] {$e->getMessage()}", (int) $e->getCode(), null, null);
            }
            $statusCode = $response->getStatusCode();
            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, (string) $request->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
            }
            switch ($statusCode) {
                case 200:
                    if ('\OpenAPI\Fincode\Model\ThreeDSecureAuthorizingResponse' === '\SplFileObject') {
                        $content = $response->getBody();
                    // stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Fincode\Model\ThreeDSecureAuthorizingResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [ObjectSerializer::deserialize($content, '\OpenAPI\Fincode\Model\ThreeDSecureAuthorizingResponse', []), $response->getStatusCode(), $response->getHeaders()];
                case 400:
                    if ('\OpenAPI\Fincode\Model\FincodeAPIErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody();
                    // stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Fincode\Model\FincodeAPIErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [ObjectSerializer::deserialize($content, '\OpenAPI\Fincode\Model\FincodeAPIErrorResponse', []), $response->getStatusCode(), $response->getHeaders()];
            }
            $returnType = '\OpenAPI\Fincode\Model\ThreeDSecureAuthorizingResponse';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody();
            // stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('string' !== $returnType) {
                    $content = json_decode($content);
                }
            }

            return [ObjectSerializer::deserialize($content, $returnType, []), $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\OpenAPI\Fincode\Model\ThreeDSecureAuthorizingResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\OpenAPI\Fincode\Model\FincodeAPIErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * executeThreeDSecureecureAuthenticationAsync: 3Dセキュア 認証実行.
     *
     * @param string                                                $accessId                       取引ID (required)
     * @param string                                                $tenantShopId                   &lt;span class&#x3D;\&quot;smallText color--red-400\&quot;&gt;※ プラットフォームのメインショップのみ指定可&lt;/span&gt;\\ テナントショップID。\\ このテナントショップの決済情報のうち、指定した&#x60;access_id&#x60;のカード決済の3Dセキュア認証を開始します。 (optional)
     * @param \OpenAPI\Fincode\Model\ThreeDSecureAuthorizingRequest $threeDSecureAuthorizingRequest (optional)
     * @param string                                                $contentType                    The value for the Content-Type header. Check self::contentTypes['executeThreeDSecureecureAuthentication'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     */
    public function executeThreeDSecureecureAuthenticationAsync(mixed $accessId, mixed $tenantShopId = null, mixed $threeDSecureAuthorizingRequest = null, string $contentType = self::contentTypes['executeThreeDSecureecureAuthentication'][0]): PromiseInterface
    {
        return $this->executeThreeDSecureecureAuthenticationAsyncWithHttpInfo($accessId, $tenantShopId, $threeDSecureAuthorizingRequest, $contentType)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * executeThreeDSecureecureAuthenticationAsyncWithHttpInfo: 3Dセキュア 認証実行.
     *
     * @param string                                                $accessId                       取引ID (required)
     * @param string                                                $tenantShopId                   &lt;span class&#x3D;\&quot;smallText color--red-400\&quot;&gt;※ プラットフォームのメインショップのみ指定可&lt;/span&gt;\\ テナントショップID。\\ このテナントショップの決済情報のうち、指定した&#x60;access_id&#x60;のカード決済の3Dセキュア認証を開始します。 (optional)
     * @param \OpenAPI\Fincode\Model\ThreeDSecureAuthorizingRequest $threeDSecureAuthorizingRequest (optional)
     * @param string                                                $contentType                    The value for the Content-Type header. Check self::contentTypes['executeThreeDSecureecureAuthentication'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     */
    public function executeThreeDSecureecureAuthenticationAsyncWithHttpInfo(mixed $accessId, mixed $tenantShopId = null, mixed $threeDSecureAuthorizingRequest = null, string $contentType = self::contentTypes['executeThreeDSecureecureAuthentication'][0]): PromiseInterface
    {
        $returnType = '\OpenAPI\Fincode\Model\ThreeDSecureAuthorizingResponse';
        $request = $this->executeThreeDSecureecureAuthenticationRequest($accessId, $tenantShopId, $threeDSecureAuthorizingRequest, $contentType);

        return $this->client->sendAsync($request, $this->createHttpClientOption())->then(function ($response) use ($returnType) {
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody();
            // stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('string' !== $returnType) {
                    $content = json_decode($content);
                }
            }

            return [ObjectSerializer::deserialize($content, $returnType, []), $response->getStatusCode(), $response->getHeaders()];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
        });
    }

    /**
     * Create request for operation 'executeThreeDSecureecureAuthentication'.
     *
     * @param string                                                $accessId                       取引ID (required)
     * @param string                                                $tenantShopId                   &lt;span class&#x3D;\&quot;smallText color--red-400\&quot;&gt;※ プラットフォームのメインショップのみ指定可&lt;/span&gt;\\ テナントショップID。\\ このテナントショップの決済情報のうち、指定した&#x60;access_id&#x60;のカード決済の3Dセキュア認証を開始します。 (optional)
     * @param \OpenAPI\Fincode\Model\ThreeDSecureAuthorizingRequest $threeDSecureAuthorizingRequest (optional)
     * @param string                                                $contentType                    The value for the Content-Type header. Check self::contentTypes['executeThreeDSecureecureAuthentication'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     */
    public function executeThreeDSecureecureAuthenticationRequest(mixed $accessId, mixed $tenantShopId = null, mixed $threeDSecureAuthorizingRequest = null, string $contentType = self::contentTypes['executeThreeDSecureecureAuthentication'][0]): Request
    {
        // verify the required parameter 'accessId' is set
        if (null === $accessId || is_array($accessId) && 0 === count($accessId)) {
            throw new \InvalidArgumentException('Missing the required parameter $accessId when calling executeThreeDSecureecureAuthentication');
        }
        $resourcePath = '/v1/secure2/{access_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;
        // header params
        if (null !== $tenantShopId) {
            $headerParams['Tenant-Shop-Id'] = ObjectSerializer::toHeaderValue($tenantShopId);
        }
        // path params
        if (null !== $accessId) {
            $resourcePath = str_replace('{access_id}', ObjectSerializer::toPathValue($accessId), $resourcePath);
        }
        $headers = $this->headerSelector->selectHeaders(['application/json'], $contentType, $multipart);
        // for model (json/xml)
        if (isset($threeDSecureAuthorizingRequest)) {
            if (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($threeDSecureAuthorizingRequest));
            } else {
                $httpBody = $threeDSecureAuthorizingRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = ['name' => $formParamName, 'contents' => $formParamValueItem];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }
        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }
        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }
        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !empty($this->config->getPassword())) {
            $headers['Authorization'] = 'Basic '.base64_encode($this->config->getUsername().':'.$this->config->getPassword());
        }
        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($defaultHeaders, $headerParams, $headers);
        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request('PUT', $operationHost.$resourcePath.($query ? "?{$query}" : ''), $headers, $httpBody);
    }

    /**
     * Create http client option.
     *
     * @return array of http client options
     *
     * @throws \RuntimeException on file opening failure
     */
    protected function createHttpClientOption(): array
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: '.$this->config->getDebugFile());
            }
        }

        return $options;
    }
}
