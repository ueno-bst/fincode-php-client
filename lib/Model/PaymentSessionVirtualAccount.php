<?php

declare(strict_types=1);
/**
 * fincode API.
 *
 * fincodeのAPIリファレンスです。\\ fincodeは決済情報のほか様々なリソースを管理できるため、リソース指向なREST APIをベースとしたインターフェイス設計のもとでAPIを提供しています。\\ APIの呼び出しにはAPIキーによる認証が必要であり、リクエストの際に`Authorization`ヘッダーに有効なAPIキーをセットすることで認証できます。
 *
 * The version of the OpenAPI document: 1.2.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Fincode\Model;

use OpenAPI\Fincode\ObjectSerializer;

/**
 * @implements \ArrayAccess<string, mixed>
 */
class PaymentSessionVirtualAccount implements ModelInterface, \ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;
    /**
     * The original name of the model.
     */
    protected static string $openAPIModelName = 'PaymentSession.VirtualAccount';
    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var array<string, string>
     */
    protected static array $openAPITypes = ['virtualaccountReceptionUrl' => 'string', 'paymentTermDay' => 'int', 'virtualaccountReceptionMailSendFlag' => 'string'];
    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var array<string, string|null>
     */
    protected static array $openAPIFormats = ['virtualaccountReceptionUrl' => null, 'paymentTermDay' => 'int64', 'virtualaccountReceptionMailSendFlag' => null];
    /**
     * Array of nullable properties. Used for (de)serialization.
     *
     * @var array<string, bool>
     */
    protected static array $openAPINullables = ['virtualaccountReceptionUrl' => true, 'paymentTermDay' => false, 'virtualaccountReceptionMailSendFlag' => false];
    /**
     * If a nullable field gets set to null, insert it here.
     *
     * @var array<string, bool>
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return array<string, string|null>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties.
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null.
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null.
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable.
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }
    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = ['virtualaccountReceptionUrl' => 'virtualaccount_reception_url', 'paymentTermDay' => 'payment_term_day', 'virtualaccountReceptionMailSendFlag' => 'virtualaccount_reception_mail_send_flag'];
    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var array<string, string>
     */
    protected static array $setters = ['virtualaccountReceptionUrl' => 'setVirtualaccountReceptionUrl', 'paymentTermDay' => 'setPaymentTermDay', 'virtualaccountReceptionMailSendFlag' => 'setVirtualaccountReceptionMailSendFlag'];
    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var array<string, string>
     */
    protected static array $getters = ['virtualaccountReceptionUrl' => 'getVirtualaccountReceptionUrl', 'paymentTermDay' => 'getPaymentTermDay', 'virtualaccountReceptionMailSendFlag' => 'getVirtualaccountReceptionMailSendFlag'];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }
    public const VIRTUALACCOUNT_RECEPTION_MAIL_SEND_FLAG__0 = '0';
    public const VIRTUALACCOUNT_RECEPTION_MAIL_SEND_FLAG__1 = '1';

    /**
     * Gets allowable values of the enum.
     *
     * @return list<string>
     */
    public function getVirtualaccountReceptionMailSendFlagAllowableValues(): array
    {
        return [self::VIRTUALACCOUNT_RECEPTION_MAIL_SEND_FLAG__0, self::VIRTUALACCOUNT_RECEPTION_MAIL_SEND_FLAG__1];
    }
    /**
     * Associative array for storing property values.
     *
     * @phpstan-var array<string, mixed>
     *
     * @psalm-var array<string, mixed>
     */
    protected array $container = [];

    /**
     * Constructor.
     *
     * @param array<string, mixed> $data Associated array of property values
     *                                   initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('virtualaccountReceptionUrl', $data ?? [], null);
        $this->setIfExists('paymentTermDay', $data ?? [], null);
        $this->setIfExists('virtualaccountReceptionMailSendFlag', $data ?? [], null);
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array.
     *
     * @param array<string, mixed> $fields
     */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }
        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return list<string> invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];
        if (!is_null($this->container['virtualaccountReceptionUrl']) && mb_strlen($this->container['virtualaccountReceptionUrl']) > 256) {
            $invalidProperties[] = "invalid value for 'virtualaccountReceptionUrl', the character length must be smaller than or equal to 256.";
        }
        $allowedValues = $this->getVirtualaccountReceptionMailSendFlagAllowableValues();
        if (!is_null($this->container['virtualaccountReceptionMailSendFlag']) && !in_array($this->container['virtualaccountReceptionMailSendFlag'], $allowedValues, true)) {
            $invalidProperties[] = sprintf("invalid value '%s' for 'virtualaccountReceptionMailSendFlag', must be one of '%s'", $this->container['virtualaccountReceptionMailSendFlag'], implode("', '", $allowedValues));
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return 0 === count($this->listInvalidProperties());
    }

    /**
     * Gets virtualaccountReceptionUrl.
     *
     * @return string|null
     */
    public function getVirtualaccountReceptionUrl(): mixed
    {
        return $this->container['virtualaccountReceptionUrl'];
    }

    /**
     * Sets virtualaccountReceptionUrl.
     *
     * @param string|null $virtualaccountReceptionUrl 銀行振込 支払い画面URL
     */
    public function setVirtualaccountReceptionUrl(mixed $virtualaccountReceptionUrl): static
    {
        if (is_null($virtualaccountReceptionUrl)) {
            $this->openAPINullablesSetToNull[] = 'virtualaccountReceptionUrl';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('virtualaccountReceptionUrl', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($virtualaccountReceptionUrl) && mb_strlen($virtualaccountReceptionUrl) > 256) {
            throw new \InvalidArgumentException('invalid length for $virtualaccountReceptionUrl when calling PaymentSessionVirtualAccount., must be smaller than or equal to 256.');
        }
        $this->container['virtualaccountReceptionUrl'] = $virtualaccountReceptionUrl;

        return $this;
    }

    /**
     * Gets paymentTermDay.
     *
     * @return int|null
     */
    public function getPaymentTermDay(): mixed
    {
        return $this->container['paymentTermDay'];
    }

    /**
     * Sets paymentTermDay.
     *
     * @param int $paymentTermDay 支払期限日数\\ \\ 実行日から見て、支払期限日数後の翌日AMに期限切れになります。\\ 例）2024/4/1に、`支払期限日数=2`で決済実行した場合、2024/4/4 AMに期限切れ
     */
    public function setPaymentTermDay(mixed $paymentTermDay): static
    {
        if (is_null($paymentTermDay)) {
            throw new \InvalidArgumentException('non-nullable paymentTermDay cannot be null');
        }
        $this->container['paymentTermDay'] = $paymentTermDay;

        return $this;
    }

    /**
     * Gets virtualaccountReceptionMailSendFlag.
     *
     * @return string|null
     */
    public function getVirtualaccountReceptionMailSendFlag(): mixed
    {
        return $this->container['virtualaccountReceptionMailSendFlag'];
    }

    /**
     * Sets virtualaccountReceptionMailSendFlag.
     *
     * @param string $virtualaccountReceptionMailSendFlag 銀行振込 支払い画面案内メール送信フラグ\\ 銀行振込の支払い画面案内メールを送信するかどうかを設定します。  - `0`：送信しない - `1`：送信する
     */
    public function setVirtualaccountReceptionMailSendFlag(mixed $virtualaccountReceptionMailSendFlag): static
    {
        if (is_null($virtualaccountReceptionMailSendFlag)) {
            throw new \InvalidArgumentException('non-nullable virtualaccountReceptionMailSendFlag cannot be null');
        }
        $allowedValues = $this->getVirtualaccountReceptionMailSendFlagAllowableValues();
        if (!in_array($virtualaccountReceptionMailSendFlag, $allowedValues, true)) {
            throw new \InvalidArgumentException(sprintf("Invalid value '%s' for 'virtualaccountReceptionMailSendFlag', must be one of '%s'", $virtualaccountReceptionMailSendFlag, implode("', '", $allowedValues)));
        }
        $this->container['virtualaccountReceptionMailSendFlag'] = $virtualaccountReceptionMailSendFlag;

        return $this;
    }

    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @see https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    public function jsonSerialize(): mixed
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object.
     */
    public function __toString(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
    }

    /**
     * Gets a header-safe presentation of the object.
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
