<?php

declare(strict_types=1);
/**
 * fincode API.
 *
 * fincodeのAPIリファレンスです。\\ fincodeは決済情報のほか様々なリソースを管理できるため、リソース指向なREST APIをベースとしたインターフェイス設計のもとでAPIを提供しています。\\ APIの呼び出しにはAPIキーによる認証が必要であり、リクエストの際に`Authorization`ヘッダーに有効なAPIキーをセットすることで認証できます。
 *
 * The version of the OpenAPI document: 1.2.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Fincode\Model;

use OpenAPI\Fincode\ObjectSerializer;

/**
 * @implements \ArrayAccess<string, mixed>
 */
class ExecutePayment200Response implements ModelInterface, \ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;
    /**
     * The original name of the model.
     */
    protected static string $openAPIModelName = 'executePayment_200_response';
    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var array<string, string>
     */
    protected static array $openAPITypes = ['shopId' => 'string', 'id' => 'string', 'accessId' => 'string', 'amount' => 'int', 'tax' => 'int', 'totalAmount' => 'int', 'clientField1' => 'string', 'clientField2' => 'string', 'clientField3' => 'string', 'processDate' => 'string', 'customerId' => 'string', 'customerGroupId' => 'string', 'errorCode' => 'string', 'created' => 'string', 'updated' => 'string', 'payType' => '\OpenAPI\Fincode\Model\PayType', 'jobCode' => '\OpenAPI\Fincode\Model\PayPayPaymentJobCode', 'status' => '\OpenAPI\Fincode\Model\PaymentStatus', 'cardId' => 'string', 'brand' => '\OpenAPI\Fincode\Model\CardBrand', 'cardNo' => 'string', 'expire' => 'string', 'holderName' => 'string', 'cardNoHash' => 'string', 'method' => '\OpenAPI\Fincode\Model\CardPayMethod', 'payTimes' => '\OpenAPI\Fincode\Model\CardPayTimesResponse', 'bulkPaymentId' => 'string', 'subscriptionId' => 'string', 'tdsType' => '\OpenAPI\Fincode\Model\TdsType', 'tds2Type' => '\OpenAPI\Fincode\Model\Tds2Type', 'tds2RetUrl' => 'string', 'returnUrl' => 'string', 'returnUrlOnFailure' => 'string', 'tds2Status' => '\OpenAPI\Fincode\Model\ThreeDSecure2Status', 'merchantName' => 'string', 'forward' => 'string', 'issuer' => 'string', 'transactionId' => 'string', 'approve' => 'string', 'authMaxDate' => 'string', 'itemCode' => 'string', 'sendUrl' => 'string', 'acs' => 'string', 'acsUrl' => 'string', 'redirectUrl' => 'string', 'paymentTermDay' => 'int', 'paymentTerm' => 'string', 'paymentDate' => 'string', 'barcode' => 'string', 'barcodeFormat' => 'string', 'barcodeWidth' => 'string', 'barcodeHeight' => 'string', 'overpaymentFlag' => 'string', 'cancelOverpaymentFlag' => 'string', 'konbiniCode' => '\OpenAPI\Fincode\Model\KonbiniCode', 'konbiniStoreCode' => 'mixed', 'deviceName' => 'string', 'osVersion' => 'mixed', 'winWidth' => 'string', 'winHeight' => 'string', 'xdpi' => 'mixed', 'ydpi' => 'mixed', 'result' => '\OpenAPI\Fincode\Model\KonbiniPaymentProcessResult', 'orderSerial' => 'string', 'invoiceId' => 'string', 'codeUrl' => 'string', 'codeExpiryDate' => 'string', 'redirectType' => 'string', 'orderDescription' => 'string', 'captureDescription' => 'string', 'updateDescription' => 'string', 'cancelDescription' => 'string', 'storeId' => 'string', 'codeId' => 'string', 'paymentId' => 'string', 'paypayResultCode' => 'string', 'merchantPaymentId' => 'string', 'merchantCaptureId' => 'string', 'merchantUpdateId' => 'string', 'merchantRevertId' => 'string', 'merchantRefundId' => 'string', 'resultCode' => '\OpenAPI\Fincode\Model\DirectDebitResultCode', 'targetDate' => 'string', 'withdrawalDate' => 'string', 'requestAcceptEndDate' => 'string', 'transferReturnDate' => 'string', 'paymentMethodId' => 'string', 'bankCode' => 'string', 'bankName' => 'string', 'branchCode' => 'string', 'branchName' => 'string', 'remarks' => 'string', 'billingAmount' => 'int', 'billingTax' => 'int', 'billingTotalAmount' => 'int', 'vaBranchCode' => 'string', 'vaBranchName' => 'string', 'vaAccountNumber' => 'string', 'vaAccountName' => 'string', 'virtualAccountId' => 'string', 'accountAssignmentDate' => 'string', 'transactionDate' => 'string', 'valueDate' => 'string', 'remitterAccountName' => 'string', 'remitterBankName' => 'string', 'remitterBranchName' => 'string', 'expireOverpaymentFlag' => 'string'];
    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var array<string, string|null>
     */
    protected static array $openAPIFormats = ['shopId' => null, 'id' => null, 'accessId' => null, 'amount' => null, 'tax' => null, 'totalAmount' => 'int64', 'clientField1' => null, 'clientField2' => null, 'clientField3' => null, 'processDate' => null, 'customerId' => null, 'customerGroupId' => null, 'errorCode' => null, 'created' => null, 'updated' => null, 'payType' => null, 'jobCode' => null, 'status' => null, 'cardId' => null, 'brand' => null, 'cardNo' => null, 'expire' => null, 'holderName' => null, 'cardNoHash' => null, 'method' => null, 'payTimes' => null, 'bulkPaymentId' => null, 'subscriptionId' => null, 'tdsType' => null, 'tds2Type' => null, 'tds2RetUrl' => null, 'returnUrl' => null, 'returnUrlOnFailure' => null, 'tds2Status' => null, 'merchantName' => null, 'forward' => null, 'issuer' => null, 'transactionId' => null, 'approve' => null, 'authMaxDate' => null, 'itemCode' => null, 'sendUrl' => null, 'acs' => null, 'acsUrl' => null, 'redirectUrl' => null, 'paymentTermDay' => 'int64', 'paymentTerm' => null, 'paymentDate' => null, 'barcode' => null, 'barcodeFormat' => null, 'barcodeWidth' => null, 'barcodeHeight' => null, 'overpaymentFlag' => null, 'cancelOverpaymentFlag' => null, 'konbiniCode' => null, 'konbiniStoreCode' => null, 'deviceName' => null, 'osVersion' => null, 'winWidth' => null, 'winHeight' => null, 'xdpi' => null, 'ydpi' => null, 'result' => null, 'orderSerial' => null, 'invoiceId' => null, 'codeUrl' => null, 'codeExpiryDate' => null, 'redirectType' => null, 'orderDescription' => null, 'captureDescription' => null, 'updateDescription' => null, 'cancelDescription' => null, 'storeId' => null, 'codeId' => null, 'paymentId' => null, 'paypayResultCode' => null, 'merchantPaymentId' => null, 'merchantCaptureId' => null, 'merchantUpdateId' => null, 'merchantRevertId' => null, 'merchantRefundId' => null, 'resultCode' => null, 'targetDate' => null, 'withdrawalDate' => null, 'requestAcceptEndDate' => null, 'transferReturnDate' => null, 'paymentMethodId' => null, 'bankCode' => null, 'bankName' => null, 'branchCode' => null, 'branchName' => null, 'remarks' => null, 'billingAmount' => 'int64', 'billingTax' => 'int64', 'billingTotalAmount' => 'int64', 'vaBranchCode' => null, 'vaBranchName' => null, 'vaAccountNumber' => null, 'vaAccountName' => null, 'virtualAccountId' => null, 'accountAssignmentDate' => null, 'transactionDate' => null, 'valueDate' => null, 'remitterAccountName' => null, 'remitterBankName' => null, 'remitterBranchName' => null, 'expireOverpaymentFlag' => null];
    /**
     * Array of nullable properties. Used for (de)serialization.
     *
     * @var array<string, bool>
     */
    protected static array $openAPINullables = ['shopId' => false, 'id' => false, 'accessId' => false, 'amount' => false, 'tax' => false, 'totalAmount' => false, 'clientField1' => true, 'clientField2' => true, 'clientField3' => true, 'processDate' => false, 'customerId' => true, 'customerGroupId' => true, 'errorCode' => true, 'created' => false, 'updated' => true, 'payType' => false, 'jobCode' => false, 'status' => false, 'cardId' => true, 'brand' => true, 'cardNo' => true, 'expire' => true, 'holderName' => true, 'cardNoHash' => true, 'method' => false, 'payTimes' => true, 'bulkPaymentId' => true, 'subscriptionId' => true, 'tdsType' => true, 'tds2Type' => true, 'tds2RetUrl' => true, 'returnUrl' => true, 'returnUrlOnFailure' => true, 'tds2Status' => true, 'merchantName' => true, 'forward' => true, 'issuer' => true, 'transactionId' => true, 'approve' => true, 'authMaxDate' => true, 'itemCode' => true, 'sendUrl' => true, 'acs' => true, 'acsUrl' => true, 'redirectUrl' => true, 'paymentTermDay' => false, 'paymentTerm' => true, 'paymentDate' => true, 'barcode' => true, 'barcodeFormat' => true, 'barcodeWidth' => true, 'barcodeHeight' => true, 'overpaymentFlag' => false, 'cancelOverpaymentFlag' => false, 'konbiniCode' => true, 'konbiniStoreCode' => true, 'deviceName' => true, 'osVersion' => true, 'winWidth' => true, 'winHeight' => true, 'xdpi' => true, 'ydpi' => true, 'result' => false, 'orderSerial' => true, 'invoiceId' => true, 'codeUrl' => true, 'codeExpiryDate' => true, 'redirectType' => true, 'orderDescription' => true, 'captureDescription' => true, 'updateDescription' => true, 'cancelDescription' => true, 'storeId' => true, 'codeId' => true, 'paymentId' => true, 'paypayResultCode' => true, 'merchantPaymentId' => true, 'merchantCaptureId' => true, 'merchantUpdateId' => true, 'merchantRevertId' => true, 'merchantRefundId' => true, 'resultCode' => true, 'targetDate' => true, 'withdrawalDate' => true, 'requestAcceptEndDate' => true, 'transferReturnDate' => true, 'paymentMethodId' => false, 'bankCode' => true, 'bankName' => true, 'branchCode' => true, 'branchName' => true, 'remarks' => true, 'billingAmount' => false, 'billingTax' => true, 'billingTotalAmount' => false, 'vaBranchCode' => true, 'vaBranchName' => true, 'vaAccountNumber' => true, 'vaAccountName' => true, 'virtualAccountId' => true, 'accountAssignmentDate' => true, 'transactionDate' => true, 'valueDate' => true, 'remitterAccountName' => true, 'remitterBankName' => true, 'remitterBranchName' => true, 'expireOverpaymentFlag' => false];
    /**
     * If a nullable field gets set to null, insert it here.
     *
     * @var array<string, bool>
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return array<string, string|null>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties.
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null.
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null.
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable.
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }
    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = ['shopId' => 'shop_id', 'id' => 'id', 'accessId' => 'access_id', 'amount' => 'amount', 'tax' => 'tax', 'totalAmount' => 'total_amount', 'clientField1' => 'client_field_1', 'clientField2' => 'client_field_2', 'clientField3' => 'client_field_3', 'processDate' => 'process_date', 'customerId' => 'customer_id', 'customerGroupId' => 'customer_group_id', 'errorCode' => 'error_code', 'created' => 'created', 'updated' => 'updated', 'payType' => 'pay_type', 'jobCode' => 'job_code', 'status' => 'status', 'cardId' => 'card_id', 'brand' => 'brand', 'cardNo' => 'card_no', 'expire' => 'expire', 'holderName' => 'holder_name', 'cardNoHash' => 'card_no_hash', 'method' => 'method', 'payTimes' => 'pay_times', 'bulkPaymentId' => 'bulk_payment_id', 'subscriptionId' => 'subscription_id', 'tdsType' => 'tds_type', 'tds2Type' => 'tds2_type', 'tds2RetUrl' => 'tds2_ret_url', 'returnUrl' => 'return_url', 'returnUrlOnFailure' => 'return_url_on_failure', 'tds2Status' => 'tds2_status', 'merchantName' => 'merchant_name', 'forward' => 'forward', 'issuer' => 'issuer', 'transactionId' => 'transaction_id', 'approve' => 'approve', 'authMaxDate' => 'auth_max_date', 'itemCode' => 'item_code', 'sendUrl' => 'send_url', 'acs' => 'acs', 'acsUrl' => 'acs_url', 'redirectUrl' => 'redirect_url', 'paymentTermDay' => 'payment_term_day', 'paymentTerm' => 'payment_term', 'paymentDate' => 'payment_date', 'barcode' => 'barcode', 'barcodeFormat' => 'barcode_format', 'barcodeWidth' => 'barcode_width', 'barcodeHeight' => 'barcode_height', 'overpaymentFlag' => 'overpayment_flag', 'cancelOverpaymentFlag' => 'cancel_overpayment_flag', 'konbiniCode' => 'konbini_code', 'konbiniStoreCode' => 'konbini_store_code', 'deviceName' => 'device_name', 'osVersion' => 'os_version', 'winWidth' => 'win_width', 'winHeight' => 'win_height', 'xdpi' => 'xdpi', 'ydpi' => 'ydpi', 'result' => 'result', 'orderSerial' => 'order_serial', 'invoiceId' => 'invoice_id', 'codeUrl' => 'code_url', 'codeExpiryDate' => 'code_expiry_date', 'redirectType' => 'redirect_type', 'orderDescription' => 'order_description', 'captureDescription' => 'capture_description', 'updateDescription' => 'update_description', 'cancelDescription' => 'cancel_description', 'storeId' => 'store_id', 'codeId' => 'code_id', 'paymentId' => 'payment_id', 'paypayResultCode' => 'paypay_result_code', 'merchantPaymentId' => 'merchant_payment_id', 'merchantCaptureId' => 'merchant_capture_id', 'merchantUpdateId' => 'merchant_update_id', 'merchantRevertId' => 'merchant_revert_id', 'merchantRefundId' => 'merchant_refund_id', 'resultCode' => 'result_code', 'targetDate' => 'target_date', 'withdrawalDate' => 'withdrawal_date', 'requestAcceptEndDate' => 'request_accept_end_date', 'transferReturnDate' => 'transfer_return_date', 'paymentMethodId' => 'payment_method_id', 'bankCode' => 'bank_code', 'bankName' => 'bank_name', 'branchCode' => 'branch_code', 'branchName' => 'branch_name', 'remarks' => 'remarks', 'billingAmount' => 'billing_amount', 'billingTax' => 'billing_tax', 'billingTotalAmount' => 'billing_total_amount', 'vaBranchCode' => 'va_branch_code', 'vaBranchName' => 'va_branch_name', 'vaAccountNumber' => 'va_account_number', 'vaAccountName' => 'va_account_name', 'virtualAccountId' => 'virtual_account_id', 'accountAssignmentDate' => 'account_assignment_date', 'transactionDate' => 'transaction_date', 'valueDate' => 'value_date', 'remitterAccountName' => 'remitter_account_name', 'remitterBankName' => 'remitter_bank_name', 'remitterBranchName' => 'remitter_branch_name', 'expireOverpaymentFlag' => 'expire_overpayment_flag'];
    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var array<string, string>
     */
    protected static array $setters = ['shopId' => 'setShopId', 'id' => 'setId', 'accessId' => 'setAccessId', 'amount' => 'setAmount', 'tax' => 'setTax', 'totalAmount' => 'setTotalAmount', 'clientField1' => 'setClientField1', 'clientField2' => 'setClientField2', 'clientField3' => 'setClientField3', 'processDate' => 'setProcessDate', 'customerId' => 'setCustomerId', 'customerGroupId' => 'setCustomerGroupId', 'errorCode' => 'setErrorCode', 'created' => 'setCreated', 'updated' => 'setUpdated', 'payType' => 'setPayType', 'jobCode' => 'setJobCode', 'status' => 'setStatus', 'cardId' => 'setCardId', 'brand' => 'setBrand', 'cardNo' => 'setCardNo', 'expire' => 'setExpire', 'holderName' => 'setHolderName', 'cardNoHash' => 'setCardNoHash', 'method' => 'setMethod', 'payTimes' => 'setPayTimes', 'bulkPaymentId' => 'setBulkPaymentId', 'subscriptionId' => 'setSubscriptionId', 'tdsType' => 'setTdsType', 'tds2Type' => 'setTds2Type', 'tds2RetUrl' => 'setTds2RetUrl', 'returnUrl' => 'setReturnUrl', 'returnUrlOnFailure' => 'setReturnUrlOnFailure', 'tds2Status' => 'setTds2Status', 'merchantName' => 'setMerchantName', 'forward' => 'setForward', 'issuer' => 'setIssuer', 'transactionId' => 'setTransactionId', 'approve' => 'setApprove', 'authMaxDate' => 'setAuthMaxDate', 'itemCode' => 'setItemCode', 'sendUrl' => 'setSendUrl', 'acs' => 'setAcs', 'acsUrl' => 'setAcsUrl', 'redirectUrl' => 'setRedirectUrl', 'paymentTermDay' => 'setPaymentTermDay', 'paymentTerm' => 'setPaymentTerm', 'paymentDate' => 'setPaymentDate', 'barcode' => 'setBarcode', 'barcodeFormat' => 'setBarcodeFormat', 'barcodeWidth' => 'setBarcodeWidth', 'barcodeHeight' => 'setBarcodeHeight', 'overpaymentFlag' => 'setOverpaymentFlag', 'cancelOverpaymentFlag' => 'setCancelOverpaymentFlag', 'konbiniCode' => 'setKonbiniCode', 'konbiniStoreCode' => 'setKonbiniStoreCode', 'deviceName' => 'setDeviceName', 'osVersion' => 'setOsVersion', 'winWidth' => 'setWinWidth', 'winHeight' => 'setWinHeight', 'xdpi' => 'setXdpi', 'ydpi' => 'setYdpi', 'result' => 'setResult', 'orderSerial' => 'setOrderSerial', 'invoiceId' => 'setInvoiceId', 'codeUrl' => 'setCodeUrl', 'codeExpiryDate' => 'setCodeExpiryDate', 'redirectType' => 'setRedirectType', 'orderDescription' => 'setOrderDescription', 'captureDescription' => 'setCaptureDescription', 'updateDescription' => 'setUpdateDescription', 'cancelDescription' => 'setCancelDescription', 'storeId' => 'setStoreId', 'codeId' => 'setCodeId', 'paymentId' => 'setPaymentId', 'paypayResultCode' => 'setPaypayResultCode', 'merchantPaymentId' => 'setMerchantPaymentId', 'merchantCaptureId' => 'setMerchantCaptureId', 'merchantUpdateId' => 'setMerchantUpdateId', 'merchantRevertId' => 'setMerchantRevertId', 'merchantRefundId' => 'setMerchantRefundId', 'resultCode' => 'setResultCode', 'targetDate' => 'setTargetDate', 'withdrawalDate' => 'setWithdrawalDate', 'requestAcceptEndDate' => 'setRequestAcceptEndDate', 'transferReturnDate' => 'setTransferReturnDate', 'paymentMethodId' => 'setPaymentMethodId', 'bankCode' => 'setBankCode', 'bankName' => 'setBankName', 'branchCode' => 'setBranchCode', 'branchName' => 'setBranchName', 'remarks' => 'setRemarks', 'billingAmount' => 'setBillingAmount', 'billingTax' => 'setBillingTax', 'billingTotalAmount' => 'setBillingTotalAmount', 'vaBranchCode' => 'setVaBranchCode', 'vaBranchName' => 'setVaBranchName', 'vaAccountNumber' => 'setVaAccountNumber', 'vaAccountName' => 'setVaAccountName', 'virtualAccountId' => 'setVirtualAccountId', 'accountAssignmentDate' => 'setAccountAssignmentDate', 'transactionDate' => 'setTransactionDate', 'valueDate' => 'setValueDate', 'remitterAccountName' => 'setRemitterAccountName', 'remitterBankName' => 'setRemitterBankName', 'remitterBranchName' => 'setRemitterBranchName', 'expireOverpaymentFlag' => 'setExpireOverpaymentFlag'];
    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var array<string, string>
     */
    protected static array $getters = ['shopId' => 'getShopId', 'id' => 'getId', 'accessId' => 'getAccessId', 'amount' => 'getAmount', 'tax' => 'getTax', 'totalAmount' => 'getTotalAmount', 'clientField1' => 'getClientField1', 'clientField2' => 'getClientField2', 'clientField3' => 'getClientField3', 'processDate' => 'getProcessDate', 'customerId' => 'getCustomerId', 'customerGroupId' => 'getCustomerGroupId', 'errorCode' => 'getErrorCode', 'created' => 'getCreated', 'updated' => 'getUpdated', 'payType' => 'getPayType', 'jobCode' => 'getJobCode', 'status' => 'getStatus', 'cardId' => 'getCardId', 'brand' => 'getBrand', 'cardNo' => 'getCardNo', 'expire' => 'getExpire', 'holderName' => 'getHolderName', 'cardNoHash' => 'getCardNoHash', 'method' => 'getMethod', 'payTimes' => 'getPayTimes', 'bulkPaymentId' => 'getBulkPaymentId', 'subscriptionId' => 'getSubscriptionId', 'tdsType' => 'getTdsType', 'tds2Type' => 'getTds2Type', 'tds2RetUrl' => 'getTds2RetUrl', 'returnUrl' => 'getReturnUrl', 'returnUrlOnFailure' => 'getReturnUrlOnFailure', 'tds2Status' => 'getTds2Status', 'merchantName' => 'getMerchantName', 'forward' => 'getForward', 'issuer' => 'getIssuer', 'transactionId' => 'getTransactionId', 'approve' => 'getApprove', 'authMaxDate' => 'getAuthMaxDate', 'itemCode' => 'getItemCode', 'sendUrl' => 'getSendUrl', 'acs' => 'getAcs', 'acsUrl' => 'getAcsUrl', 'redirectUrl' => 'getRedirectUrl', 'paymentTermDay' => 'getPaymentTermDay', 'paymentTerm' => 'getPaymentTerm', 'paymentDate' => 'getPaymentDate', 'barcode' => 'getBarcode', 'barcodeFormat' => 'getBarcodeFormat', 'barcodeWidth' => 'getBarcodeWidth', 'barcodeHeight' => 'getBarcodeHeight', 'overpaymentFlag' => 'getOverpaymentFlag', 'cancelOverpaymentFlag' => 'getCancelOverpaymentFlag', 'konbiniCode' => 'getKonbiniCode', 'konbiniStoreCode' => 'getKonbiniStoreCode', 'deviceName' => 'getDeviceName', 'osVersion' => 'getOsVersion', 'winWidth' => 'getWinWidth', 'winHeight' => 'getWinHeight', 'xdpi' => 'getXdpi', 'ydpi' => 'getYdpi', 'result' => 'getResult', 'orderSerial' => 'getOrderSerial', 'invoiceId' => 'getInvoiceId', 'codeUrl' => 'getCodeUrl', 'codeExpiryDate' => 'getCodeExpiryDate', 'redirectType' => 'getRedirectType', 'orderDescription' => 'getOrderDescription', 'captureDescription' => 'getCaptureDescription', 'updateDescription' => 'getUpdateDescription', 'cancelDescription' => 'getCancelDescription', 'storeId' => 'getStoreId', 'codeId' => 'getCodeId', 'paymentId' => 'getPaymentId', 'paypayResultCode' => 'getPaypayResultCode', 'merchantPaymentId' => 'getMerchantPaymentId', 'merchantCaptureId' => 'getMerchantCaptureId', 'merchantUpdateId' => 'getMerchantUpdateId', 'merchantRevertId' => 'getMerchantRevertId', 'merchantRefundId' => 'getMerchantRefundId', 'resultCode' => 'getResultCode', 'targetDate' => 'getTargetDate', 'withdrawalDate' => 'getWithdrawalDate', 'requestAcceptEndDate' => 'getRequestAcceptEndDate', 'transferReturnDate' => 'getTransferReturnDate', 'paymentMethodId' => 'getPaymentMethodId', 'bankCode' => 'getBankCode', 'bankName' => 'getBankName', 'branchCode' => 'getBranchCode', 'branchName' => 'getBranchName', 'remarks' => 'getRemarks', 'billingAmount' => 'getBillingAmount', 'billingTax' => 'getBillingTax', 'billingTotalAmount' => 'getBillingTotalAmount', 'vaBranchCode' => 'getVaBranchCode', 'vaBranchName' => 'getVaBranchName', 'vaAccountNumber' => 'getVaAccountNumber', 'vaAccountName' => 'getVaAccountName', 'virtualAccountId' => 'getVirtualAccountId', 'accountAssignmentDate' => 'getAccountAssignmentDate', 'transactionDate' => 'getTransactionDate', 'valueDate' => 'getValueDate', 'remitterAccountName' => 'getRemitterAccountName', 'remitterBankName' => 'getRemitterBankName', 'remitterBranchName' => 'getRemitterBranchName', 'expireOverpaymentFlag' => 'getExpireOverpaymentFlag'];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }
    public const BARCODE_FORMAT_JPG = 'jpg';
    public const BARCODE_FORMAT_PNG = 'png';
    public const BARCODE_FORMAT_BMP = 'bmp';
    public const OVERPAYMENT_FLAG__0 = '0';
    public const OVERPAYMENT_FLAG__1 = '1';
    public const CANCEL_OVERPAYMENT_FLAG__0 = '0';
    public const CANCEL_OVERPAYMENT_FLAG__1 = '1';
    public const REDIRECT_TYPE__1 = '1';
    public const REDIRECT_TYPE__2 = '2';
    public const EXPIRE_OVERPAYMENT_FLAG__0 = '0';
    public const EXPIRE_OVERPAYMENT_FLAG__1 = '1';

    /**
     * Gets allowable values of the enum.
     *
     * @return list<string>
     */
    public function getBarcodeFormatAllowableValues(): array
    {
        return [self::BARCODE_FORMAT_JPG, self::BARCODE_FORMAT_PNG, self::BARCODE_FORMAT_BMP];
    }

    /**
     * Gets allowable values of the enum.
     *
     * @return list<string>
     */
    public function getOverpaymentFlagAllowableValues(): array
    {
        return [self::OVERPAYMENT_FLAG__0, self::OVERPAYMENT_FLAG__1];
    }

    /**
     * Gets allowable values of the enum.
     *
     * @return list<string>
     */
    public function getCancelOverpaymentFlagAllowableValues(): array
    {
        return [self::CANCEL_OVERPAYMENT_FLAG__0, self::CANCEL_OVERPAYMENT_FLAG__1];
    }

    /**
     * Gets allowable values of the enum.
     *
     * @return list<string>
     */
    public function getRedirectTypeAllowableValues(): array
    {
        return [self::REDIRECT_TYPE__1, self::REDIRECT_TYPE__2];
    }

    /**
     * Gets allowable values of the enum.
     *
     * @return list<string>
     */
    public function getExpireOverpaymentFlagAllowableValues(): array
    {
        return [self::EXPIRE_OVERPAYMENT_FLAG__0, self::EXPIRE_OVERPAYMENT_FLAG__1];
    }
    /**
     * Associative array for storing property values.
     *
     * @phpstan-var array<string, mixed>
     *
     * @psalm-var array<string, mixed>
     */
    protected array $container = [];

    /**
     * Constructor.
     *
     * @param array<string, mixed> $data Associated array of property values
     *                                   initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('shopId', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('accessId', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('tax', $data ?? [], null);
        $this->setIfExists('totalAmount', $data ?? [], null);
        $this->setIfExists('clientField1', $data ?? [], null);
        $this->setIfExists('clientField2', $data ?? [], null);
        $this->setIfExists('clientField3', $data ?? [], null);
        $this->setIfExists('processDate', $data ?? [], null);
        $this->setIfExists('customerId', $data ?? [], null);
        $this->setIfExists('customerGroupId', $data ?? [], null);
        $this->setIfExists('errorCode', $data ?? [], null);
        $this->setIfExists('created', $data ?? [], null);
        $this->setIfExists('updated', $data ?? [], null);
        $this->setIfExists('payType', $data ?? [], null);
        $this->setIfExists('jobCode', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('cardId', $data ?? [], null);
        $this->setIfExists('brand', $data ?? [], null);
        $this->setIfExists('cardNo', $data ?? [], null);
        $this->setIfExists('expire', $data ?? [], null);
        $this->setIfExists('holderName', $data ?? [], null);
        $this->setIfExists('cardNoHash', $data ?? [], null);
        $this->setIfExists('method', $data ?? [], null);
        $this->setIfExists('payTimes', $data ?? [], null);
        $this->setIfExists('bulkPaymentId', $data ?? [], null);
        $this->setIfExists('subscriptionId', $data ?? [], null);
        $this->setIfExists('tdsType', $data ?? [], null);
        $this->setIfExists('tds2Type', $data ?? [], null);
        $this->setIfExists('tds2RetUrl', $data ?? [], null);
        $this->setIfExists('returnUrl', $data ?? [], null);
        $this->setIfExists('returnUrlOnFailure', $data ?? [], null);
        $this->setIfExists('tds2Status', $data ?? [], null);
        $this->setIfExists('merchantName', $data ?? [], null);
        $this->setIfExists('forward', $data ?? [], null);
        $this->setIfExists('issuer', $data ?? [], null);
        $this->setIfExists('transactionId', $data ?? [], null);
        $this->setIfExists('approve', $data ?? [], null);
        $this->setIfExists('authMaxDate', $data ?? [], null);
        $this->setIfExists('itemCode', $data ?? [], null);
        $this->setIfExists('sendUrl', $data ?? [], null);
        $this->setIfExists('acs', $data ?? [], null);
        $this->setIfExists('acsUrl', $data ?? [], null);
        $this->setIfExists('redirectUrl', $data ?? [], null);
        $this->setIfExists('paymentTermDay', $data ?? [], null);
        $this->setIfExists('paymentTerm', $data ?? [], null);
        $this->setIfExists('paymentDate', $data ?? [], null);
        $this->setIfExists('barcode', $data ?? [], null);
        $this->setIfExists('barcodeFormat', $data ?? [], null);
        $this->setIfExists('barcodeWidth', $data ?? [], null);
        $this->setIfExists('barcodeHeight', $data ?? [], null);
        $this->setIfExists('overpaymentFlag', $data ?? [], null);
        $this->setIfExists('cancelOverpaymentFlag', $data ?? [], null);
        $this->setIfExists('konbiniCode', $data ?? [], null);
        $this->setIfExists('konbiniStoreCode', $data ?? [], null);
        $this->setIfExists('deviceName', $data ?? [], null);
        $this->setIfExists('osVersion', $data ?? [], null);
        $this->setIfExists('winWidth', $data ?? [], null);
        $this->setIfExists('winHeight', $data ?? [], null);
        $this->setIfExists('xdpi', $data ?? [], null);
        $this->setIfExists('ydpi', $data ?? [], null);
        $this->setIfExists('result', $data ?? [], null);
        $this->setIfExists('orderSerial', $data ?? [], null);
        $this->setIfExists('invoiceId', $data ?? [], null);
        $this->setIfExists('codeUrl', $data ?? [], null);
        $this->setIfExists('codeExpiryDate', $data ?? [], null);
        $this->setIfExists('redirectType', $data ?? [], null);
        $this->setIfExists('orderDescription', $data ?? [], null);
        $this->setIfExists('captureDescription', $data ?? [], null);
        $this->setIfExists('updateDescription', $data ?? [], null);
        $this->setIfExists('cancelDescription', $data ?? [], null);
        $this->setIfExists('storeId', $data ?? [], null);
        $this->setIfExists('codeId', $data ?? [], null);
        $this->setIfExists('paymentId', $data ?? [], null);
        $this->setIfExists('paypayResultCode', $data ?? [], null);
        $this->setIfExists('merchantPaymentId', $data ?? [], null);
        $this->setIfExists('merchantCaptureId', $data ?? [], null);
        $this->setIfExists('merchantUpdateId', $data ?? [], null);
        $this->setIfExists('merchantRevertId', $data ?? [], null);
        $this->setIfExists('merchantRefundId', $data ?? [], null);
        $this->setIfExists('resultCode', $data ?? [], null);
        $this->setIfExists('targetDate', $data ?? [], null);
        $this->setIfExists('withdrawalDate', $data ?? [], null);
        $this->setIfExists('requestAcceptEndDate', $data ?? [], null);
        $this->setIfExists('transferReturnDate', $data ?? [], null);
        $this->setIfExists('paymentMethodId', $data ?? [], null);
        $this->setIfExists('bankCode', $data ?? [], null);
        $this->setIfExists('bankName', $data ?? [], null);
        $this->setIfExists('branchCode', $data ?? [], null);
        $this->setIfExists('branchName', $data ?? [], null);
        $this->setIfExists('remarks', $data ?? [], null);
        $this->setIfExists('billingAmount', $data ?? [], null);
        $this->setIfExists('billingTax', $data ?? [], null);
        $this->setIfExists('billingTotalAmount', $data ?? [], null);
        $this->setIfExists('vaBranchCode', $data ?? [], null);
        $this->setIfExists('vaBranchName', $data ?? [], null);
        $this->setIfExists('vaAccountNumber', $data ?? [], null);
        $this->setIfExists('vaAccountName', $data ?? [], null);
        $this->setIfExists('virtualAccountId', $data ?? [], null);
        $this->setIfExists('accountAssignmentDate', $data ?? [], null);
        $this->setIfExists('transactionDate', $data ?? [], null);
        $this->setIfExists('valueDate', $data ?? [], null);
        $this->setIfExists('remitterAccountName', $data ?? [], null);
        $this->setIfExists('remitterBankName', $data ?? [], null);
        $this->setIfExists('remitterBranchName', $data ?? [], null);
        $this->setIfExists('expireOverpaymentFlag', $data ?? [], null);
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array.
     *
     * @param array<string, mixed> $fields
     */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }
        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return list<string> invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];
        if (!is_null($this->container['shopId']) && mb_strlen($this->container['shopId']) > 13) {
            $invalidProperties[] = "invalid value for 'shopId', the character length must be smaller than or equal to 13.";
        }
        if (!is_null($this->container['shopId']) && mb_strlen($this->container['shopId']) < 13) {
            $invalidProperties[] = "invalid value for 'shopId', the character length must be bigger than or equal to 13.";
        }
        if (!is_null($this->container['id']) && mb_strlen($this->container['id']) > 30) {
            $invalidProperties[] = "invalid value for 'id', the character length must be smaller than or equal to 30.";
        }
        if (!is_null($this->container['id']) && mb_strlen($this->container['id']) < 1) {
            $invalidProperties[] = "invalid value for 'id', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['accessId']) && mb_strlen($this->container['accessId']) > 24) {
            $invalidProperties[] = "invalid value for 'accessId', the character length must be smaller than or equal to 24.";
        }
        if (!is_null($this->container['accessId']) && mb_strlen($this->container['accessId']) < 24) {
            $invalidProperties[] = "invalid value for 'accessId', the character length must be bigger than or equal to 24.";
        }
        if (!is_null($this->container['clientField1']) && mb_strlen($this->container['clientField1']) > 100) {
            $invalidProperties[] = "invalid value for 'clientField1', the character length must be smaller than or equal to 100.";
        }
        if (!is_null($this->container['clientField1']) && mb_strlen($this->container['clientField1']) < 1) {
            $invalidProperties[] = "invalid value for 'clientField1', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['clientField2']) && mb_strlen($this->container['clientField2']) > 100) {
            $invalidProperties[] = "invalid value for 'clientField2', the character length must be smaller than or equal to 100.";
        }
        if (!is_null($this->container['clientField2']) && mb_strlen($this->container['clientField2']) < 1) {
            $invalidProperties[] = "invalid value for 'clientField2', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['clientField3']) && mb_strlen($this->container['clientField3']) > 100) {
            $invalidProperties[] = "invalid value for 'clientField3', the character length must be smaller than or equal to 100.";
        }
        if (!is_null($this->container['clientField3']) && mb_strlen($this->container['clientField3']) < 1) {
            $invalidProperties[] = "invalid value for 'clientField3', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['customerId']) && mb_strlen($this->container['customerId']) > 60) {
            $invalidProperties[] = "invalid value for 'customerId', the character length must be smaller than or equal to 60.";
        }
        if (!is_null($this->container['customerId']) && mb_strlen($this->container['customerId']) < 1) {
            $invalidProperties[] = "invalid value for 'customerId', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['customerGroupId']) && mb_strlen($this->container['customerGroupId']) > 13) {
            $invalidProperties[] = "invalid value for 'customerGroupId', the character length must be smaller than or equal to 13.";
        }
        if (!is_null($this->container['customerGroupId']) && mb_strlen($this->container['customerGroupId']) < 13) {
            $invalidProperties[] = "invalid value for 'customerGroupId', the character length must be bigger than or equal to 13.";
        }
        if (!is_null($this->container['errorCode']) && mb_strlen($this->container['errorCode']) > 11) {
            $invalidProperties[] = "invalid value for 'errorCode', the character length must be smaller than or equal to 11.";
        }
        if (!is_null($this->container['errorCode']) && mb_strlen($this->container['errorCode']) < 11) {
            $invalidProperties[] = "invalid value for 'errorCode', the character length must be bigger than or equal to 11.";
        }
        if (!is_null($this->container['cardId']) && mb_strlen($this->container['cardId']) > 25) {
            $invalidProperties[] = "invalid value for 'cardId', the character length must be smaller than or equal to 25.";
        }
        if (!is_null($this->container['cardId']) && mb_strlen($this->container['cardId']) < 25) {
            $invalidProperties[] = "invalid value for 'cardId', the character length must be bigger than or equal to 25.";
        }
        if (!is_null($this->container['cardNo']) && mb_strlen($this->container['cardNo']) > 16) {
            $invalidProperties[] = "invalid value for 'cardNo', the character length must be smaller than or equal to 16.";
        }
        if (!is_null($this->container['expire']) && mb_strlen($this->container['expire']) > 4) {
            $invalidProperties[] = "invalid value for 'expire', the character length must be smaller than or equal to 4.";
        }
        if (!is_null($this->container['expire']) && mb_strlen($this->container['expire']) < 4) {
            $invalidProperties[] = "invalid value for 'expire', the character length must be bigger than or equal to 4.";
        }
        if (!is_null($this->container['expire']) && !preg_match('/^\\d{2}\\d{2}$/', $this->container['expire'])) {
            $invalidProperties[] = "invalid value for 'expire', must be conform to the pattern /^\\d{2}\\d{2}\$/.";
        }
        if (!is_null($this->container['holderName']) && mb_strlen($this->container['holderName']) > 50) {
            $invalidProperties[] = "invalid value for 'holderName', the character length must be smaller than or equal to 50.";
        }
        if (!is_null($this->container['holderName']) && mb_strlen($this->container['holderName']) < 1) {
            $invalidProperties[] = "invalid value for 'holderName', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['cardNoHash']) && mb_strlen($this->container['cardNoHash']) > 64) {
            $invalidProperties[] = "invalid value for 'cardNoHash', the character length must be smaller than or equal to 64.";
        }
        if (!is_null($this->container['cardNoHash']) && mb_strlen($this->container['cardNoHash']) < 1) {
            $invalidProperties[] = "invalid value for 'cardNoHash', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['bulkPaymentId']) && mb_strlen($this->container['bulkPaymentId']) > 25) {
            $invalidProperties[] = "invalid value for 'bulkPaymentId', the character length must be smaller than or equal to 25.";
        }
        if (!is_null($this->container['bulkPaymentId']) && mb_strlen($this->container['bulkPaymentId']) < 25) {
            $invalidProperties[] = "invalid value for 'bulkPaymentId', the character length must be bigger than or equal to 25.";
        }
        if (!is_null($this->container['subscriptionId']) && mb_strlen($this->container['subscriptionId']) > 25) {
            $invalidProperties[] = "invalid value for 'subscriptionId', the character length must be smaller than or equal to 25.";
        }
        if (!is_null($this->container['subscriptionId']) && mb_strlen($this->container['subscriptionId']) < 1) {
            $invalidProperties[] = "invalid value for 'subscriptionId', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['tds2RetUrl']) && mb_strlen($this->container['tds2RetUrl']) > 256) {
            $invalidProperties[] = "invalid value for 'tds2RetUrl', the character length must be smaller than or equal to 256.";
        }
        if (!is_null($this->container['returnUrl']) && mb_strlen($this->container['returnUrl']) > 256) {
            $invalidProperties[] = "invalid value for 'returnUrl', the character length must be smaller than or equal to 256.";
        }
        if (!is_null($this->container['returnUrlOnFailure']) && mb_strlen($this->container['returnUrlOnFailure']) > 256) {
            $invalidProperties[] = "invalid value for 'returnUrlOnFailure', the character length must be smaller than or equal to 256.";
        }
        if (!is_null($this->container['merchantName']) && mb_strlen($this->container['merchantName']) > 25) {
            $invalidProperties[] = "invalid value for 'merchantName', the character length must be smaller than or equal to 25.";
        }
        if (!is_null($this->container['forward']) && mb_strlen($this->container['forward']) > 7) {
            $invalidProperties[] = "invalid value for 'forward', the character length must be smaller than or equal to 7.";
        }
        if (!is_null($this->container['forward']) && mb_strlen($this->container['forward']) < 1) {
            $invalidProperties[] = "invalid value for 'forward', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['issuer']) && mb_strlen($this->container['issuer']) > 7) {
            $invalidProperties[] = "invalid value for 'issuer', the character length must be smaller than or equal to 7.";
        }
        if (!is_null($this->container['issuer']) && mb_strlen($this->container['issuer']) < 1) {
            $invalidProperties[] = "invalid value for 'issuer', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['transactionId']) && mb_strlen($this->container['transactionId']) > 28) {
            $invalidProperties[] = "invalid value for 'transactionId', the character length must be smaller than or equal to 28.";
        }
        if (!is_null($this->container['transactionId']) && mb_strlen($this->container['transactionId']) < 28) {
            $invalidProperties[] = "invalid value for 'transactionId', the character length must be bigger than or equal to 28.";
        }
        if (!is_null($this->container['approve']) && mb_strlen($this->container['approve']) > 7) {
            $invalidProperties[] = "invalid value for 'approve', the character length must be smaller than or equal to 7.";
        }
        if (!is_null($this->container['approve']) && mb_strlen($this->container['approve']) < 1) {
            $invalidProperties[] = "invalid value for 'approve', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['itemCode']) && mb_strlen($this->container['itemCode']) > 7) {
            $invalidProperties[] = "invalid value for 'itemCode', the character length must be smaller than or equal to 7.";
        }
        if (!is_null($this->container['itemCode']) && mb_strlen($this->container['itemCode']) < 7) {
            $invalidProperties[] = "invalid value for 'itemCode', the character length must be bigger than or equal to 7.";
        }
        if (!is_null($this->container['acs']) && mb_strlen($this->container['acs']) > 1) {
            $invalidProperties[] = "invalid value for 'acs', the character length must be smaller than or equal to 1.";
        }
        if (!is_null($this->container['acs']) && mb_strlen($this->container['acs']) < 1) {
            $invalidProperties[] = "invalid value for 'acs', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['redirectUrl']) && mb_strlen($this->container['redirectUrl']) > 256) {
            $invalidProperties[] = "invalid value for 'redirectUrl', the character length must be smaller than or equal to 256.";
        }
        if (!is_null($this->container['redirectUrl']) && mb_strlen($this->container['redirectUrl']) < 1) {
            $invalidProperties[] = "invalid value for 'redirectUrl', the character length must be bigger than or equal to 1.";
        }
        $allowedValues = $this->getBarcodeFormatAllowableValues();
        if (!is_null($this->container['barcodeFormat']) && !in_array($this->container['barcodeFormat'], $allowedValues, true)) {
            $invalidProperties[] = sprintf("invalid value '%s' for 'barcodeFormat', must be one of '%s'", $this->container['barcodeFormat'], implode("', '", $allowedValues));
        }
        if (!is_null($this->container['barcodeWidth']) && mb_strlen($this->container['barcodeWidth']) > 9) {
            $invalidProperties[] = "invalid value for 'barcodeWidth', the character length must be smaller than or equal to 9.";
        }
        if (!is_null($this->container['barcodeWidth']) && mb_strlen($this->container['barcodeWidth']) < 1) {
            $invalidProperties[] = "invalid value for 'barcodeWidth', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['barcodeHeight']) && mb_strlen($this->container['barcodeHeight']) > 9) {
            $invalidProperties[] = "invalid value for 'barcodeHeight', the character length must be smaller than or equal to 9.";
        }
        if (!is_null($this->container['barcodeHeight']) && mb_strlen($this->container['barcodeHeight']) < 1) {
            $invalidProperties[] = "invalid value for 'barcodeHeight', the character length must be bigger than or equal to 1.";
        }
        $allowedValues = $this->getOverpaymentFlagAllowableValues();
        if (!is_null($this->container['overpaymentFlag']) && !in_array($this->container['overpaymentFlag'], $allowedValues, true)) {
            $invalidProperties[] = sprintf("invalid value '%s' for 'overpaymentFlag', must be one of '%s'", $this->container['overpaymentFlag'], implode("', '", $allowedValues));
        }
        $allowedValues = $this->getCancelOverpaymentFlagAllowableValues();
        if (!is_null($this->container['cancelOverpaymentFlag']) && !in_array($this->container['cancelOverpaymentFlag'], $allowedValues, true)) {
            $invalidProperties[] = sprintf("invalid value '%s' for 'cancelOverpaymentFlag', must be one of '%s'", $this->container['cancelOverpaymentFlag'], implode("', '", $allowedValues));
        }
        if (!is_null($this->container['konbiniStoreCode']) && mb_strlen($this->container['konbiniStoreCode']) > 8) {
            $invalidProperties[] = "invalid value for 'konbiniStoreCode', the character length must be smaller than or equal to 8.";
        }
        if (!is_null($this->container['konbiniStoreCode']) && mb_strlen($this->container['konbiniStoreCode']) < 1) {
            $invalidProperties[] = "invalid value for 'konbiniStoreCode', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['deviceName']) && mb_strlen($this->container['deviceName']) > 20) {
            $invalidProperties[] = "invalid value for 'deviceName', the character length must be smaller than or equal to 20.";
        }
        if (!is_null($this->container['deviceName']) && mb_strlen($this->container['deviceName']) < 1) {
            $invalidProperties[] = "invalid value for 'deviceName', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['osVersion']) && mb_strlen($this->container['osVersion']) > 10) {
            $invalidProperties[] = "invalid value for 'osVersion', the character length must be smaller than or equal to 10.";
        }
        if (!is_null($this->container['osVersion']) && mb_strlen($this->container['osVersion']) < 1) {
            $invalidProperties[] = "invalid value for 'osVersion', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['winWidth']) && mb_strlen($this->container['winWidth']) > 5) {
            $invalidProperties[] = "invalid value for 'winWidth', the character length must be smaller than or equal to 5.";
        }
        if (!is_null($this->container['winWidth']) && mb_strlen($this->container['winWidth']) < 1) {
            $invalidProperties[] = "invalid value for 'winWidth', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['winHeight']) && mb_strlen($this->container['winHeight']) > 5) {
            $invalidProperties[] = "invalid value for 'winHeight', the character length must be smaller than or equal to 5.";
        }
        if (!is_null($this->container['winHeight']) && mb_strlen($this->container['winHeight']) < 1) {
            $invalidProperties[] = "invalid value for 'winHeight', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['xdpi']) && mb_strlen($this->container['xdpi']) > 6) {
            $invalidProperties[] = "invalid value for 'xdpi', the character length must be smaller than or equal to 6.";
        }
        if (!is_null($this->container['xdpi']) && mb_strlen($this->container['xdpi']) < 1) {
            $invalidProperties[] = "invalid value for 'xdpi', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['ydpi']) && mb_strlen($this->container['ydpi']) > 6) {
            $invalidProperties[] = "invalid value for 'ydpi', the character length must be smaller than or equal to 6.";
        }
        if (!is_null($this->container['ydpi']) && mb_strlen($this->container['ydpi']) < 1) {
            $invalidProperties[] = "invalid value for 'ydpi', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['orderSerial']) && mb_strlen($this->container['orderSerial']) > 18) {
            $invalidProperties[] = "invalid value for 'orderSerial', the character length must be smaller than or equal to 18.";
        }
        if (!is_null($this->container['orderSerial']) && mb_strlen($this->container['orderSerial']) < 1) {
            $invalidProperties[] = "invalid value for 'orderSerial', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['invoiceId']) && mb_strlen($this->container['invoiceId']) > 20) {
            $invalidProperties[] = "invalid value for 'invoiceId', the character length must be smaller than or equal to 20.";
        }
        if (!is_null($this->container['invoiceId']) && mb_strlen($this->container['invoiceId']) < 1) {
            $invalidProperties[] = "invalid value for 'invoiceId', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['codeUrl']) && mb_strlen($this->container['codeUrl']) > 256) {
            $invalidProperties[] = "invalid value for 'codeUrl', the character length must be smaller than or equal to 256.";
        }
        if (!is_null($this->container['codeUrl']) && mb_strlen($this->container['codeUrl']) < 1) {
            $invalidProperties[] = "invalid value for 'codeUrl', the character length must be bigger than or equal to 1.";
        }
        $allowedValues = $this->getRedirectTypeAllowableValues();
        if (!is_null($this->container['redirectType']) && !in_array($this->container['redirectType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf("invalid value '%s' for 'redirectType', must be one of '%s'", $this->container['redirectType'], implode("', '", $allowedValues));
        }
        if (!is_null($this->container['orderDescription']) && mb_strlen($this->container['orderDescription']) > 100) {
            $invalidProperties[] = "invalid value for 'orderDescription', the character length must be smaller than or equal to 100.";
        }
        if (!is_null($this->container['captureDescription']) && mb_strlen($this->container['captureDescription']) > 100) {
            $invalidProperties[] = "invalid value for 'captureDescription', the character length must be smaller than or equal to 100.";
        }
        if (!is_null($this->container['updateDescription']) && mb_strlen($this->container['updateDescription']) > 100) {
            $invalidProperties[] = "invalid value for 'updateDescription', the character length must be smaller than or equal to 100.";
        }
        if (!is_null($this->container['cancelDescription']) && mb_strlen($this->container['cancelDescription']) > 100) {
            $invalidProperties[] = "invalid value for 'cancelDescription', the character length must be smaller than or equal to 100.";
        }
        if (!is_null($this->container['storeId']) && mb_strlen($this->container['storeId']) > 18) {
            $invalidProperties[] = "invalid value for 'storeId', the character length must be smaller than or equal to 18.";
        }
        if (!is_null($this->container['storeId']) && mb_strlen($this->container['storeId']) < 1) {
            $invalidProperties[] = "invalid value for 'storeId', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['codeId']) && mb_strlen($this->container['codeId']) > 64) {
            $invalidProperties[] = "invalid value for 'codeId', the character length must be smaller than or equal to 64.";
        }
        if (!is_null($this->container['codeId']) && mb_strlen($this->container['codeId']) < 1) {
            $invalidProperties[] = "invalid value for 'codeId', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['paymentId']) && mb_strlen($this->container['paymentId']) > 64) {
            $invalidProperties[] = "invalid value for 'paymentId', the character length must be smaller than or equal to 64.";
        }
        if (!is_null($this->container['paymentId']) && mb_strlen($this->container['paymentId']) < 1) {
            $invalidProperties[] = "invalid value for 'paymentId', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['paypayResultCode']) && mb_strlen($this->container['paypayResultCode']) > 256) {
            $invalidProperties[] = "invalid value for 'paypayResultCode', the character length must be smaller than or equal to 256.";
        }
        if (!is_null($this->container['paypayResultCode']) && mb_strlen($this->container['paypayResultCode']) < 1) {
            $invalidProperties[] = "invalid value for 'paypayResultCode', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['merchantPaymentId']) && mb_strlen($this->container['merchantPaymentId']) > 64) {
            $invalidProperties[] = "invalid value for 'merchantPaymentId', the character length must be smaller than or equal to 64.";
        }
        if (!is_null($this->container['merchantPaymentId']) && mb_strlen($this->container['merchantPaymentId']) < 1) {
            $invalidProperties[] = "invalid value for 'merchantPaymentId', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['merchantCaptureId']) && mb_strlen($this->container['merchantCaptureId']) > 64) {
            $invalidProperties[] = "invalid value for 'merchantCaptureId', the character length must be smaller than or equal to 64.";
        }
        if (!is_null($this->container['merchantCaptureId']) && mb_strlen($this->container['merchantCaptureId']) < 1) {
            $invalidProperties[] = "invalid value for 'merchantCaptureId', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['merchantUpdateId']) && mb_strlen($this->container['merchantUpdateId']) > 64) {
            $invalidProperties[] = "invalid value for 'merchantUpdateId', the character length must be smaller than or equal to 64.";
        }
        if (!is_null($this->container['merchantUpdateId']) && mb_strlen($this->container['merchantUpdateId']) < 1) {
            $invalidProperties[] = "invalid value for 'merchantUpdateId', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['merchantRevertId']) && mb_strlen($this->container['merchantRevertId']) > 64) {
            $invalidProperties[] = "invalid value for 'merchantRevertId', the character length must be smaller than or equal to 64.";
        }
        if (!is_null($this->container['merchantRevertId']) && mb_strlen($this->container['merchantRevertId']) < 1) {
            $invalidProperties[] = "invalid value for 'merchantRevertId', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['merchantRefundId']) && mb_strlen($this->container['merchantRefundId']) > 64) {
            $invalidProperties[] = "invalid value for 'merchantRefundId', the character length must be smaller than or equal to 64.";
        }
        if (!is_null($this->container['merchantRefundId']) && mb_strlen($this->container['merchantRefundId']) < 1) {
            $invalidProperties[] = "invalid value for 'merchantRefundId', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['paymentMethodId']) && mb_strlen($this->container['paymentMethodId']) > 25) {
            $invalidProperties[] = "invalid value for 'paymentMethodId', the character length must be smaller than or equal to 25.";
        }
        if (!is_null($this->container['paymentMethodId']) && mb_strlen($this->container['paymentMethodId']) < 25) {
            $invalidProperties[] = "invalid value for 'paymentMethodId', the character length must be bigger than or equal to 25.";
        }
        if (!is_null($this->container['bankCode']) && mb_strlen($this->container['bankCode']) > 4) {
            $invalidProperties[] = "invalid value for 'bankCode', the character length must be smaller than or equal to 4.";
        }
        if (!is_null($this->container['bankCode']) && mb_strlen($this->container['bankCode']) < 4) {
            $invalidProperties[] = "invalid value for 'bankCode', the character length must be bigger than or equal to 4.";
        }
        if (!is_null($this->container['bankName']) && mb_strlen($this->container['bankName']) > 45) {
            $invalidProperties[] = "invalid value for 'bankName', the character length must be smaller than or equal to 45.";
        }
        if (!is_null($this->container['bankName']) && mb_strlen($this->container['bankName']) < 1) {
            $invalidProperties[] = "invalid value for 'bankName', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['branchCode']) && mb_strlen($this->container['branchCode']) > 3) {
            $invalidProperties[] = "invalid value for 'branchCode', the character length must be smaller than or equal to 3.";
        }
        if (!is_null($this->container['branchCode']) && mb_strlen($this->container['branchCode']) < 3) {
            $invalidProperties[] = "invalid value for 'branchCode', the character length must be bigger than or equal to 3.";
        }
        if (!is_null($this->container['branchName']) && mb_strlen($this->container['branchName']) > 45) {
            $invalidProperties[] = "invalid value for 'branchName', the character length must be smaller than or equal to 45.";
        }
        if (!is_null($this->container['branchName']) && mb_strlen($this->container['branchName']) < 1) {
            $invalidProperties[] = "invalid value for 'branchName', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['remarks']) && mb_strlen($this->container['remarks']) > 9) {
            $invalidProperties[] = "invalid value for 'remarks', the character length must be smaller than or equal to 9.";
        }
        if (!is_null($this->container['remarks']) && mb_strlen($this->container['remarks']) < 1) {
            $invalidProperties[] = "invalid value for 'remarks', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['vaBranchCode']) && mb_strlen($this->container['vaBranchCode']) > 3) {
            $invalidProperties[] = "invalid value for 'vaBranchCode', the character length must be smaller than or equal to 3.";
        }
        if (!is_null($this->container['vaBranchCode']) && mb_strlen($this->container['vaBranchCode']) < 1) {
            $invalidProperties[] = "invalid value for 'vaBranchCode', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['vaBranchName']) && mb_strlen($this->container['vaBranchName']) > 15) {
            $invalidProperties[] = "invalid value for 'vaBranchName', the character length must be smaller than or equal to 15.";
        }
        if (!is_null($this->container['vaAccountNumber']) && mb_strlen($this->container['vaAccountNumber']) > 7) {
            $invalidProperties[] = "invalid value for 'vaAccountNumber', the character length must be smaller than or equal to 7.";
        }
        if (!is_null($this->container['vaAccountNumber']) && mb_strlen($this->container['vaAccountNumber']) < 7) {
            $invalidProperties[] = "invalid value for 'vaAccountNumber', the character length must be bigger than or equal to 7.";
        }
        if (!is_null($this->container['vaAccountName']) && mb_strlen($this->container['vaAccountName']) > 40) {
            $invalidProperties[] = "invalid value for 'vaAccountName', the character length must be smaller than or equal to 40.";
        }
        if (!is_null($this->container['virtualAccountId']) && mb_strlen($this->container['virtualAccountId']) > 10) {
            $invalidProperties[] = "invalid value for 'virtualAccountId', the character length must be smaller than or equal to 10.";
        }
        if (!is_null($this->container['virtualAccountId']) && mb_strlen($this->container['virtualAccountId']) < 10) {
            $invalidProperties[] = "invalid value for 'virtualAccountId', the character length must be bigger than or equal to 10.";
        }
        if (!is_null($this->container['remitterAccountName']) && mb_strlen($this->container['remitterAccountName']) > 48) {
            $invalidProperties[] = "invalid value for 'remitterAccountName', the character length must be smaller than or equal to 48.";
        }
        if (!is_null($this->container['remitterBankName']) && mb_strlen($this->container['remitterBankName']) > 30) {
            $invalidProperties[] = "invalid value for 'remitterBankName', the character length must be smaller than or equal to 30.";
        }
        if (!is_null($this->container['remitterBranchName']) && mb_strlen($this->container['remitterBranchName']) > 15) {
            $invalidProperties[] = "invalid value for 'remitterBranchName', the character length must be smaller than or equal to 15.";
        }
        $allowedValues = $this->getExpireOverpaymentFlagAllowableValues();
        if (!is_null($this->container['expireOverpaymentFlag']) && !in_array($this->container['expireOverpaymentFlag'], $allowedValues, true)) {
            $invalidProperties[] = sprintf("invalid value '%s' for 'expireOverpaymentFlag', must be one of '%s'", $this->container['expireOverpaymentFlag'], implode("', '", $allowedValues));
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return 0 === count($this->listInvalidProperties());
    }

    /**
     * Gets shopId.
     *
     * @return string|null
     */
    public function getShopId(): mixed
    {
        return $this->container['shopId'];
    }

    /**
     * Sets shopId.
     *
     * @param string $shopId ショップID
     */
    public function setShopId(mixed $shopId): static
    {
        if (is_null($shopId)) {
            throw new \InvalidArgumentException('non-nullable shopId cannot be null');
        }
        if (mb_strlen($shopId) > 13) {
            throw new \InvalidArgumentException('invalid length for $shopId when calling ExecutePayment200Response., must be smaller than or equal to 13.');
        }
        if (mb_strlen($shopId) < 13) {
            throw new \InvalidArgumentException('invalid length for $shopId when calling ExecutePayment200Response., must be bigger than or equal to 13.');
        }
        $this->container['shopId'] = $shopId;

        return $this;
    }

    /**
     * Gets id.
     *
     * @return string|null
     */
    public function getId(): mixed
    {
        return $this->container['id'];
    }

    /**
     * Sets id.
     *
     * @param string $id オーダーID\\ 決済情報のIDです
     */
    public function setId(mixed $id): static
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        if (mb_strlen($id) > 30) {
            throw new \InvalidArgumentException('invalid length for $id when calling ExecutePayment200Response., must be smaller than or equal to 30.');
        }
        if (mb_strlen($id) < 1) {
            throw new \InvalidArgumentException('invalid length for $id when calling ExecutePayment200Response., must be bigger than or equal to 1.');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets accessId.
     *
     * @return string|null
     */
    public function getAccessId(): mixed
    {
        return $this->container['accessId'];
    }

    /**
     * Sets accessId.
     *
     * @param string $accessId 取引ID
     */
    public function setAccessId(mixed $accessId): static
    {
        if (is_null($accessId)) {
            throw new \InvalidArgumentException('non-nullable accessId cannot be null');
        }
        if (mb_strlen($accessId) > 24) {
            throw new \InvalidArgumentException('invalid length for $accessId when calling ExecutePayment200Response., must be smaller than or equal to 24.');
        }
        if (mb_strlen($accessId) < 24) {
            throw new \InvalidArgumentException('invalid length for $accessId when calling ExecutePayment200Response., must be bigger than or equal to 24.');
        }
        $this->container['accessId'] = $accessId;

        return $this;
    }

    /**
     * Gets amount.
     *
     * @return int|null
     */
    public function getAmount(): mixed
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount.
     *
     * @param int $amount 利用金額
     */
    public function setAmount(mixed $amount): static
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets tax.
     *
     * @return int|null
     */
    public function getTax(): mixed
    {
        return $this->container['tax'];
    }

    /**
     * Sets tax.
     *
     * @param int $tax 税送料
     */
    public function setTax(mixed $tax): static
    {
        if (is_null($tax)) {
            throw new \InvalidArgumentException('non-nullable tax cannot be null');
        }
        $this->container['tax'] = $tax;

        return $this;
    }

    /**
     * Gets totalAmount.
     *
     * @return int|null
     */
    public function getTotalAmount(): mixed
    {
        return $this->container['totalAmount'];
    }

    /**
     * Sets totalAmount.
     *
     * @param int $totalAmount 合計金額\\ `amount`と`tax`の合計値です
     */
    public function setTotalAmount(mixed $totalAmount): static
    {
        if (is_null($totalAmount)) {
            throw new \InvalidArgumentException('non-nullable totalAmount cannot be null');
        }
        $this->container['totalAmount'] = $totalAmount;

        return $this;
    }

    /**
     * Gets clientField1.
     *
     * @return string|null
     */
    public function getClientField1(): mixed
    {
        return $this->container['clientField1'];
    }

    /**
     * Sets clientField1.
     *
     * @param string|null $clientField1 加盟店自由項目 1
     */
    public function setClientField1(mixed $clientField1): static
    {
        if (is_null($clientField1)) {
            $this->openAPINullablesSetToNull[] = 'clientField1';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('clientField1', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($clientField1) && mb_strlen($clientField1) > 100) {
            throw new \InvalidArgumentException('invalid length for $clientField1 when calling ExecutePayment200Response., must be smaller than or equal to 100.');
        }
        if (!is_null($clientField1) && mb_strlen($clientField1) < 1) {
            throw new \InvalidArgumentException('invalid length for $clientField1 when calling ExecutePayment200Response., must be bigger than or equal to 1.');
        }
        $this->container['clientField1'] = $clientField1;

        return $this;
    }

    /**
     * Gets clientField2.
     *
     * @return string|null
     */
    public function getClientField2(): mixed
    {
        return $this->container['clientField2'];
    }

    /**
     * Sets clientField2.
     *
     * @param string|null $clientField2 加盟店自由項目 2
     */
    public function setClientField2(mixed $clientField2): static
    {
        if (is_null($clientField2)) {
            $this->openAPINullablesSetToNull[] = 'clientField2';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('clientField2', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($clientField2) && mb_strlen($clientField2) > 100) {
            throw new \InvalidArgumentException('invalid length for $clientField2 when calling ExecutePayment200Response., must be smaller than or equal to 100.');
        }
        if (!is_null($clientField2) && mb_strlen($clientField2) < 1) {
            throw new \InvalidArgumentException('invalid length for $clientField2 when calling ExecutePayment200Response., must be bigger than or equal to 1.');
        }
        $this->container['clientField2'] = $clientField2;

        return $this;
    }

    /**
     * Gets clientField3.
     *
     * @return string|null
     */
    public function getClientField3(): mixed
    {
        return $this->container['clientField3'];
    }

    /**
     * Sets clientField3.
     *
     * @param string|null $clientField3 加盟店自由項目 3
     */
    public function setClientField3(mixed $clientField3): static
    {
        if (is_null($clientField3)) {
            $this->openAPINullablesSetToNull[] = 'clientField3';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('clientField3', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($clientField3) && mb_strlen($clientField3) > 100) {
            throw new \InvalidArgumentException('invalid length for $clientField3 when calling ExecutePayment200Response., must be smaller than or equal to 100.');
        }
        if (!is_null($clientField3) && mb_strlen($clientField3) < 1) {
            throw new \InvalidArgumentException('invalid length for $clientField3 when calling ExecutePayment200Response., must be bigger than or equal to 1.');
        }
        $this->container['clientField3'] = $clientField3;

        return $this;
    }

    /**
     * Gets processDate.
     *
     * @return string|null
     */
    public function getProcessDate(): mixed
    {
        return $this->container['processDate'];
    }

    /**
     * Sets processDate.
     *
     * @param string $processDate 決済 処理日時\\ 決済の各種処理（決済実行、キャンセルなど）が行われた日時です
     */
    public function setProcessDate(mixed $processDate): static
    {
        if (is_null($processDate)) {
            throw new \InvalidArgumentException('non-nullable processDate cannot be null');
        }
        $this->container['processDate'] = $processDate;

        return $this;
    }

    /**
     * Gets customerId.
     *
     * @return string|null
     */
    public function getCustomerId(): mixed
    {
        return $this->container['customerId'];
    }

    /**
     * Sets customerId.
     *
     * @param string|null $customerId 顧客ID\\ この決済の請求先となる顧客情報のIDです
     */
    public function setCustomerId(mixed $customerId): static
    {
        if (is_null($customerId)) {
            $this->openAPINullablesSetToNull[] = 'customerId';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customerId', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($customerId) && mb_strlen($customerId) > 60) {
            throw new \InvalidArgumentException('invalid length for $customerId when calling ExecutePayment200Response., must be smaller than or equal to 60.');
        }
        if (!is_null($customerId) && mb_strlen($customerId) < 1) {
            throw new \InvalidArgumentException('invalid length for $customerId when calling ExecutePayment200Response., must be bigger than or equal to 1.');
        }
        $this->container['customerId'] = $customerId;

        return $this;
    }

    /**
     * Gets customerGroupId.
     *
     * @return string|null
     */
    public function getCustomerGroupId(): mixed
    {
        return $this->container['customerGroupId'];
    }

    /**
     * Sets customerGroupId.
     *
     * @param string|null $customerGroupId 顧客情報共有グループID\\ プラットフォームショップにおいて顧客情報が共有されている場合、顧客が所属する共有グループのIDです
     */
    public function setCustomerGroupId(mixed $customerGroupId): static
    {
        if (is_null($customerGroupId)) {
            $this->openAPINullablesSetToNull[] = 'customerGroupId';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customerGroupId', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($customerGroupId) && mb_strlen($customerGroupId) > 13) {
            throw new \InvalidArgumentException('invalid length for $customerGroupId when calling ExecutePayment200Response., must be smaller than or equal to 13.');
        }
        if (!is_null($customerGroupId) && mb_strlen($customerGroupId) < 13) {
            throw new \InvalidArgumentException('invalid length for $customerGroupId when calling ExecutePayment200Response., must be bigger than or equal to 13.');
        }
        $this->container['customerGroupId'] = $customerGroupId;

        return $this;
    }

    /**
     * Gets errorCode.
     *
     * @return string|null
     */
    public function getErrorCode(): mixed
    {
        return $this->container['errorCode'];
    }

    /**
     * Sets errorCode.
     *
     * @param string|null $errorCode この決済において発生したエラーのうち、一番最新のエラーのエラーコードです。\\ [各エラーコードの定義はこちらを参照](https://docs.fincode.jp/develop_support/error)して確認できます。
     */
    public function setErrorCode(mixed $errorCode): static
    {
        if (is_null($errorCode)) {
            $this->openAPINullablesSetToNull[] = 'errorCode';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('errorCode', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($errorCode) && mb_strlen($errorCode) > 11) {
            throw new \InvalidArgumentException('invalid length for $errorCode when calling ExecutePayment200Response., must be smaller than or equal to 11.');
        }
        if (!is_null($errorCode) && mb_strlen($errorCode) < 11) {
            throw new \InvalidArgumentException('invalid length for $errorCode when calling ExecutePayment200Response., must be bigger than or equal to 11.');
        }
        $this->container['errorCode'] = $errorCode;

        return $this;
    }

    /**
     * Gets created.
     *
     * @return string|null
     */
    public function getCreated(): mixed
    {
        return $this->container['created'];
    }

    /**
     * Sets created.
     *
     * @param string $created 作成日\\ 形式：`yyyy/MM/dd HH:mm:ss.SSS`
     */
    public function setCreated(mixed $created): static
    {
        if (is_null($created)) {
            throw new \InvalidArgumentException('non-nullable created cannot be null');
        }
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets updated.
     *
     * @return string|null
     */
    public function getUpdated(): mixed
    {
        return $this->container['updated'];
    }

    /**
     * Sets updated.
     *
     * @param string|null $updated 更新日\\ 形式：`yyyy/MM/dd HH:mm:ss.SSS`
     */
    public function setUpdated(mixed $updated): static
    {
        if (is_null($updated)) {
            $this->openAPINullablesSetToNull[] = 'updated';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('updated', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['updated'] = $updated;

        return $this;
    }

    /**
     * Gets payType.
     *
     * @return PayType|null
     */
    public function getPayType(): mixed
    {
        return $this->container['payType'];
    }

    /**
     * Sets payType.
     *
     * @param PayType $payType 決済種別\\ この決済で利用する決済手段です。  - `Virtualaccount`: 銀行振込
     */
    public function setPayType(mixed $payType): static
    {
        if (is_null($payType)) {
            throw new \InvalidArgumentException('non-nullable payType cannot be null');
        }
        $this->container['payType'] = $payType;

        return $this;
    }

    /**
     * Gets jobCode.
     *
     * @return PayPayPaymentJobCode|null
     */
    public function getJobCode(): mixed
    {
        return $this->container['jobCode'];
    }

    /**
     * Sets jobCode.
     *
     * @param PayPayPaymentJobCode $jobCode jobCode
     */
    public function setJobCode(mixed $jobCode): static
    {
        if (is_null($jobCode)) {
            throw new \InvalidArgumentException('non-nullable jobCode cannot be null');
        }
        $this->container['jobCode'] = $jobCode;

        return $this;
    }

    /**
     * Gets status.
     *
     * @return PaymentStatus|null
     */
    public function getStatus(): mixed
    {
        return $this->container['status'];
    }

    /**
     * Sets status.
     *
     * @param PaymentStatus $status 決済ステータス  - `UNPROCESSED`: 未処理<br /><span class=\"smallText\">請求はまだ実行されていません。</span> - `AWAITING_CUSTOMER_PAYMENT`: 購入者の支払い待ち<br /><span class=\"smallText\">購入者によるバーチャル口座への振込を待っている状態。</span> - `CAPTURED`: 売上確定<br /><span class=\"smallText\">振込が完了し、売上が確定しています。</span> - `CANCELED`: キャンセル<br /><span class=\"smallText\">この決済はキャンセルされました。</span> - `EXPIRED`: 決済の期限切れ<br /><span class=\"smallText\">この決済は期限が切れています。</span>
     */
    public function setStatus(mixed $status): static
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets cardId.
     *
     * @return string|null
     */
    public function getCardId(): mixed
    {
        return $this->container['cardId'];
    }

    /**
     * Sets cardId.
     *
     * @param string|null $cardId カードID\\ この決済に使用されたカード情報のIDです
     */
    public function setCardId(mixed $cardId): static
    {
        if (is_null($cardId)) {
            $this->openAPINullablesSetToNull[] = 'cardId';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cardId', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($cardId) && mb_strlen($cardId) > 25) {
            throw new \InvalidArgumentException('invalid length for $cardId when calling ExecutePayment200Response., must be smaller than or equal to 25.');
        }
        if (!is_null($cardId) && mb_strlen($cardId) < 25) {
            throw new \InvalidArgumentException('invalid length for $cardId when calling ExecutePayment200Response., must be bigger than or equal to 25.');
        }
        $this->container['cardId'] = $cardId;

        return $this;
    }

    /**
     * Gets brand.
     *
     * @return CardBrand|null
     */
    public function getBrand(): mixed
    {
        return $this->container['brand'];
    }

    /**
     * Sets brand.
     *
     * @param CardBrand|null $brand brand
     */
    public function setBrand(mixed $brand): static
    {
        if (is_null($brand)) {
            $this->openAPINullablesSetToNull[] = 'brand';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('brand', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['brand'] = $brand;

        return $this;
    }

    /**
     * Gets cardNo.
     *
     * @return string|null
     */
    public function getCardNo(): mixed
    {
        return $this->container['cardNo'];
    }

    /**
     * Sets cardNo.
     *
     * @param string|null $cardNo マスク済みカード番号。\\ <span class=\"smallText\"> 下4桁以外をマスクしたカード番号です。\\ Apple Payでは実際のカード番号ではなくデバイスアカウント番号と呼ばれる番号で決済が行われるため、このフィールドで返される値はデバイスアカウント番号をマスクしたものになります。\\ </span> 形式：`************1234`
     */
    public function setCardNo(mixed $cardNo): static
    {
        if (is_null($cardNo)) {
            $this->openAPINullablesSetToNull[] = 'cardNo';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cardNo', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($cardNo) && mb_strlen($cardNo) > 16) {
            throw new \InvalidArgumentException('invalid length for $cardNo when calling ExecutePayment200Response., must be smaller than or equal to 16.');
        }
        $this->container['cardNo'] = $cardNo;

        return $this;
    }

    /**
     * Gets expire.
     *
     * @return string|null
     */
    public function getExpire(): mixed
    {
        return $this->container['expire'];
    }

    /**
     * Sets expire.
     *
     * @param string|null $expire カード有効期限。\\ 形式：`YYMM`
     */
    public function setExpire(mixed $expire): static
    {
        if (is_null($expire)) {
            $this->openAPINullablesSetToNull[] = 'expire';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('expire', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($expire) && mb_strlen($expire) > 4) {
            throw new \InvalidArgumentException('invalid length for $expire when calling ExecutePayment200Response., must be smaller than or equal to 4.');
        }
        if (!is_null($expire) && mb_strlen($expire) < 4) {
            throw new \InvalidArgumentException('invalid length for $expire when calling ExecutePayment200Response., must be bigger than or equal to 4.');
        }
        if (!is_null($expire) && is_string($expire) && !preg_match('/^\\d{2}\\d{2}$/', $expire)) {
            throw new \InvalidArgumentException('invalid value for $expire when calling ExecutePayment200Response., must conform to the pattern /^\\d{2}\\d{2}$/.');
        }
        $this->container['expire'] = $expire;

        return $this;
    }

    /**
     * Gets holderName.
     *
     * @return string|null
     */
    public function getHolderName(): mixed
    {
        return $this->container['holderName'];
    }

    /**
     * Sets holderName.
     *
     * @param string|null $holderName カード名義人名
     */
    public function setHolderName(mixed $holderName): static
    {
        if (is_null($holderName)) {
            $this->openAPINullablesSetToNull[] = 'holderName';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('holderName', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($holderName) && mb_strlen($holderName) > 50) {
            throw new \InvalidArgumentException('invalid length for $holderName when calling ExecutePayment200Response., must be smaller than or equal to 50.');
        }
        if (!is_null($holderName) && mb_strlen($holderName) < 1) {
            throw new \InvalidArgumentException('invalid length for $holderName when calling ExecutePayment200Response., must be bigger than or equal to 1.');
        }
        $this->container['holderName'] = $holderName;

        return $this;
    }

    /**
     * Gets cardNoHash.
     *
     * @return string|null
     */
    public function getCardNoHash(): mixed
    {
        return $this->container['cardNoHash'];
    }

    /**
     * Sets cardNoHash.
     *
     * @param string|null $cardNoHash カード番号をもとに生成されたハッシュ値。\\ <span class=\"smallText\"> おなじカード番号に対しては常に同じ値が返されます。\\ カード情報非保持の原則に基づき、fincodeユーザーはマスクされていないカード番号の代わりにこの値を保持することができます。 </span>
     */
    public function setCardNoHash(mixed $cardNoHash): static
    {
        if (is_null($cardNoHash)) {
            $this->openAPINullablesSetToNull[] = 'cardNoHash';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cardNoHash', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($cardNoHash) && mb_strlen($cardNoHash) > 64) {
            throw new \InvalidArgumentException('invalid length for $cardNoHash when calling ExecutePayment200Response., must be smaller than or equal to 64.');
        }
        if (!is_null($cardNoHash) && mb_strlen($cardNoHash) < 1) {
            throw new \InvalidArgumentException('invalid length for $cardNoHash when calling ExecutePayment200Response., must be bigger than or equal to 1.');
        }
        $this->container['cardNoHash'] = $cardNoHash;

        return $this;
    }

    /**
     * Gets method.
     *
     * @return CardPayMethod|null
     */
    public function getMethod(): mixed
    {
        return $this->container['method'];
    }

    /**
     * Sets method.
     *
     * @param CardPayMethod $method method
     */
    public function setMethod(mixed $method): static
    {
        if (is_null($method)) {
            throw new \InvalidArgumentException('non-nullable method cannot be null');
        }
        $this->container['method'] = $method;

        return $this;
    }

    /**
     * Gets payTimes.
     *
     * @return CardPayTimesResponse|null
     */
    public function getPayTimes(): mixed
    {
        return $this->container['payTimes'];
    }

    /**
     * Sets payTimes.
     *
     * @param CardPayTimesResponse|null $payTimes payTimes
     */
    public function setPayTimes(mixed $payTimes): static
    {
        if (is_null($payTimes)) {
            $this->openAPINullablesSetToNull[] = 'payTimes';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payTimes', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payTimes'] = $payTimes;

        return $this;
    }

    /**
     * Gets bulkPaymentId.
     *
     * @return string|null
     */
    public function getBulkPaymentId(): mixed
    {
        return $this->container['bulkPaymentId'];
    }

    /**
     * Sets bulkPaymentId.
     *
     * @param string|null $bulkPaymentId 一括決済ID\\ この決済情報が一括決済機能を用いて登録されたものである場合、このフィールドに一括決済IDが設定されます
     */
    public function setBulkPaymentId(mixed $bulkPaymentId): static
    {
        if (is_null($bulkPaymentId)) {
            $this->openAPINullablesSetToNull[] = 'bulkPaymentId';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bulkPaymentId', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($bulkPaymentId) && mb_strlen($bulkPaymentId) > 25) {
            throw new \InvalidArgumentException('invalid length for $bulkPaymentId when calling ExecutePayment200Response., must be smaller than or equal to 25.');
        }
        if (!is_null($bulkPaymentId) && mb_strlen($bulkPaymentId) < 25) {
            throw new \InvalidArgumentException('invalid length for $bulkPaymentId when calling ExecutePayment200Response., must be bigger than or equal to 25.');
        }
        $this->container['bulkPaymentId'] = $bulkPaymentId;

        return $this;
    }

    /**
     * Gets subscriptionId.
     *
     * @return string|null
     */
    public function getSubscriptionId(): mixed
    {
        return $this->container['subscriptionId'];
    }

    /**
     * Sets subscriptionId.
     *
     * @param string|null $subscriptionId サブスクリプションID\\ この決済情報がブスクリプションにより生成されたものである場合、このフィールドにサブスクリプションIDが設定されます
     */
    public function setSubscriptionId(mixed $subscriptionId): static
    {
        if (is_null($subscriptionId)) {
            $this->openAPINullablesSetToNull[] = 'subscriptionId';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('subscriptionId', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($subscriptionId) && mb_strlen($subscriptionId) > 25) {
            throw new \InvalidArgumentException('invalid length for $subscriptionId when calling ExecutePayment200Response., must be smaller than or equal to 25.');
        }
        if (!is_null($subscriptionId) && mb_strlen($subscriptionId) < 1) {
            throw new \InvalidArgumentException('invalid length for $subscriptionId when calling ExecutePayment200Response., must be bigger than or equal to 1.');
        }
        $this->container['subscriptionId'] = $subscriptionId;

        return $this;
    }

    /**
     * Gets tdsType.
     *
     * @return TdsType|null
     */
    public function getTdsType(): mixed
    {
        return $this->container['tdsType'];
    }

    /**
     * Sets tdsType.
     *
     * @param TdsType|null $tdsType tdsType
     */
    public function setTdsType(mixed $tdsType): static
    {
        if (is_null($tdsType)) {
            $this->openAPINullablesSetToNull[] = 'tdsType';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tdsType', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tdsType'] = $tdsType;

        return $this;
    }

    /**
     * Gets tds2Type.
     *
     * @return Tds2Type|null
     */
    public function getTds2Type(): mixed
    {
        return $this->container['tds2Type'];
    }

    /**
     * Sets tds2Type.
     *
     * @param Tds2Type|null $tds2Type tds2Type
     */
    public function setTds2Type(mixed $tds2Type): static
    {
        if (is_null($tds2Type)) {
            $this->openAPINullablesSetToNull[] = 'tds2Type';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tds2Type', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tds2Type'] = $tds2Type;

        return $this;
    }

    /**
     * Gets tds2RetUrl.
     *
     * @return string|null
     */
    public function getTds2RetUrl(): mixed
    {
        return $this->container['tds2RetUrl'];
    }

    /**
     * Sets tds2RetUrl.
     *
     * @param string|null $tds2RetUrl 3Dセキュア認証における戻りURL   3Dセキュア認証に必要なAPIの呼び出しやコールバック処理をすべて加盟店で実装する場合のみ使用します。   fincodeは3Dセキュア認証処理の過程において、このURLにPOSTメソッド、`Content-Type:application/x-www-form-urlencoded`で値を返します。    - `MD`: クエリパラメータとして返されます。 `access_id`と等しい値です。 - `event`: フォームデータとして返されます。この値を判定し後続の処理を分岐します。 - `param`: フォームデータとして返されます。[3Dセキュア認証API](https://docs.fincode.jp/api#tag/ThreeDSecureecure/executeThreeDSecureecureAuth)で使用します。 - `requestorTransId`: フォームデータとして返されます。（後続処理では使用しません。）  返却されるそれぞれの値についての[詳細はDocsで確認](https://docs.fincode.jp/payment/fraud_protection/3d_secure_2)できます。
     */
    public function setTds2RetUrl(mixed $tds2RetUrl): static
    {
        if (is_null($tds2RetUrl)) {
            $this->openAPINullablesSetToNull[] = 'tds2RetUrl';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tds2RetUrl', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($tds2RetUrl) && mb_strlen($tds2RetUrl) > 256) {
            throw new \InvalidArgumentException('invalid length for $tds2RetUrl when calling ExecutePayment200Response., must be smaller than or equal to 256.');
        }
        $this->container['tds2RetUrl'] = $tds2RetUrl;

        return $this;
    }

    /**
     * Gets returnUrl.
     *
     * @return string|null
     */
    public function getReturnUrl(): mixed
    {
        return $this->container['returnUrl'];
    }

    /**
     * Sets returnUrl.
     *
     * @param string|null $returnUrl 加盟店戻りURL（成功時）   購入者のブラウザとfincode間で3Dセキュア認証を自動で行う場合に、 3Dセキュア認証処理後、決済に成功した際にリダイレクトされるURLです。   POSTメソッドでリダイレクトされます。  リクエストで指定がない場合はデフォルトの成功ページのURLが設定されます。   また、`tds2_ret_url`を指定していない場合のみ返却されます。
     */
    public function setReturnUrl(mixed $returnUrl): static
    {
        if (is_null($returnUrl)) {
            $this->openAPINullablesSetToNull[] = 'returnUrl';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('returnUrl', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($returnUrl) && mb_strlen($returnUrl) > 256) {
            throw new \InvalidArgumentException('invalid length for $returnUrl when calling ExecutePayment200Response., must be smaller than or equal to 256.');
        }
        $this->container['returnUrl'] = $returnUrl;

        return $this;
    }

    /**
     * Gets returnUrlOnFailure.
     *
     * @return string|null
     */
    public function getReturnUrlOnFailure(): mixed
    {
        return $this->container['returnUrlOnFailure'];
    }

    /**
     * Sets returnUrlOnFailure.
     *
     * @param string|null $returnUrlOnFailure 加盟店戻りURL（失敗時）   購入者のブラウザとfincode間で3Dセキュア認証を自動で行う場合に、 3Dセキュア認証に失敗、または決済に失敗した際にリダイレクトされるURLです。   POSTメソッドでリダイレクトされます。  リクエストで指定がない場合はデフォルトの失敗ページのURLが設定されます。   また、`tds2_ret_url`を指定していない場合のみ返却されます。
     */
    public function setReturnUrlOnFailure(mixed $returnUrlOnFailure): static
    {
        if (is_null($returnUrlOnFailure)) {
            $this->openAPINullablesSetToNull[] = 'returnUrlOnFailure';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('returnUrlOnFailure', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($returnUrlOnFailure) && mb_strlen($returnUrlOnFailure) > 256) {
            throw new \InvalidArgumentException('invalid length for $returnUrlOnFailure when calling ExecutePayment200Response., must be smaller than or equal to 256.');
        }
        $this->container['returnUrlOnFailure'] = $returnUrlOnFailure;

        return $this;
    }

    /**
     * Gets tds2Status.
     *
     * @return ThreeDSecure2Status|null
     */
    public function getTds2Status(): mixed
    {
        return $this->container['tds2Status'];
    }

    /**
     * Sets tds2Status.
     *
     * @param ThreeDSecure2Status|null $tds2Status tds2Status
     */
    public function setTds2Status(mixed $tds2Status): static
    {
        if (is_null($tds2Status)) {
            $this->openAPINullablesSetToNull[] = 'tds2Status';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tds2Status', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tds2Status'] = $tds2Status;

        return $this;
    }

    /**
     * Gets merchantName.
     *
     * @return string|null
     */
    public function getMerchantName(): mixed
    {
        return $this->container['merchantName'];
    }

    /**
     * Sets merchantName.
     *
     * @param string|null $merchantName <span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\ 加盟店名。\\ 3Dセキュア認証の際に表示されるショップ名や加盟店名を指定できます。\\ 使用可能な文字は以下の通りです。 - 半角英数 - 半角記号： !\"#$%&'()*+,-./:;<=>?@[\\]`^_{|}~ - 半角スペース  未指定の場合、 カード決済の契約時にfincodeが下記の形式に従って設定した値が自動的に使用されます。\\ \\ 形式：`{{ショップID}}-{{英数字からなる固定値}}`
     */
    public function setMerchantName(mixed $merchantName): static
    {
        if (is_null($merchantName)) {
            $this->openAPINullablesSetToNull[] = 'merchantName';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('merchantName', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($merchantName) && mb_strlen($merchantName) > 25) {
            throw new \InvalidArgumentException('invalid length for $merchantName when calling ExecutePayment200Response., must be smaller than or equal to 25.');
        }
        $this->container['merchantName'] = $merchantName;

        return $this;
    }

    /**
     * Gets forward.
     *
     * @return string|null
     */
    public function getForward(): mixed
    {
        return $this->container['forward'];
    }

    /**
     * Sets forward.
     *
     * @param string|null $forward 仕向け先
     */
    public function setForward(mixed $forward): static
    {
        if (is_null($forward)) {
            $this->openAPINullablesSetToNull[] = 'forward';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('forward', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($forward) && mb_strlen($forward) > 7) {
            throw new \InvalidArgumentException('invalid length for $forward when calling ExecutePayment200Response., must be smaller than or equal to 7.');
        }
        if (!is_null($forward) && mb_strlen($forward) < 1) {
            throw new \InvalidArgumentException('invalid length for $forward when calling ExecutePayment200Response., must be bigger than or equal to 1.');
        }
        $this->container['forward'] = $forward;

        return $this;
    }

    /**
     * Gets issuer.
     *
     * @return string|null
     */
    public function getIssuer(): mixed
    {
        return $this->container['issuer'];
    }

    /**
     * Sets issuer.
     *
     * @param string|null $issuer イシュア
     */
    public function setIssuer(mixed $issuer): static
    {
        if (is_null($issuer)) {
            $this->openAPINullablesSetToNull[] = 'issuer';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('issuer', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($issuer) && mb_strlen($issuer) > 7) {
            throw new \InvalidArgumentException('invalid length for $issuer when calling ExecutePayment200Response., must be smaller than or equal to 7.');
        }
        if (!is_null($issuer) && mb_strlen($issuer) < 1) {
            throw new \InvalidArgumentException('invalid length for $issuer when calling ExecutePayment200Response., must be bigger than or equal to 1.');
        }
        $this->container['issuer'] = $issuer;

        return $this;
    }

    /**
     * Gets transactionId.
     *
     * @return string|null
     */
    public function getTransactionId(): mixed
    {
        return $this->container['transactionId'];
    }

    /**
     * Sets transactionId.
     *
     * @param string|null $transactionId トランザクションID
     */
    public function setTransactionId(mixed $transactionId): static
    {
        if (is_null($transactionId)) {
            $this->openAPINullablesSetToNull[] = 'transactionId';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('transactionId', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($transactionId) && mb_strlen($transactionId) > 28) {
            throw new \InvalidArgumentException('invalid length for $transactionId when calling ExecutePayment200Response., must be smaller than or equal to 28.');
        }
        if (!is_null($transactionId) && mb_strlen($transactionId) < 28) {
            throw new \InvalidArgumentException('invalid length for $transactionId when calling ExecutePayment200Response., must be bigger than or equal to 28.');
        }
        $this->container['transactionId'] = $transactionId;

        return $this;
    }

    /**
     * Gets approve.
     *
     * @return string|null
     */
    public function getApprove(): mixed
    {
        return $this->container['approve'];
    }

    /**
     * Sets approve.
     *
     * @param string|null $approve 承認番号
     */
    public function setApprove(mixed $approve): static
    {
        if (is_null($approve)) {
            $this->openAPINullablesSetToNull[] = 'approve';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('approve', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($approve) && mb_strlen($approve) > 7) {
            throw new \InvalidArgumentException('invalid length for $approve when calling ExecutePayment200Response., must be smaller than or equal to 7.');
        }
        if (!is_null($approve) && mb_strlen($approve) < 1) {
            throw new \InvalidArgumentException('invalid length for $approve when calling ExecutePayment200Response., must be bigger than or equal to 1.');
        }
        $this->container['approve'] = $approve;

        return $this;
    }

    /**
     * Gets authMaxDate.
     *
     * @return string|null
     */
    public function getAuthMaxDate(): mixed
    {
        return $this->container['authMaxDate'];
    }

    /**
     * Sets authMaxDate.
     *
     * @param string|null $authMaxDate 仮売上期限\\ 形式： `yyyy/MM/dd`
     */
    public function setAuthMaxDate(mixed $authMaxDate): static
    {
        if (is_null($authMaxDate)) {
            $this->openAPINullablesSetToNull[] = 'authMaxDate';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('authMaxDate', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['authMaxDate'] = $authMaxDate;

        return $this;
    }

    /**
     * Gets itemCode.
     *
     * @return string|null
     */
    public function getItemCode(): mixed
    {
        return $this->container['itemCode'];
    }

    /**
     * Sets itemCode.
     *
     * @param string|null $itemCode 商品コード
     */
    public function setItemCode(mixed $itemCode): static
    {
        if (is_null($itemCode)) {
            $this->openAPINullablesSetToNull[] = 'itemCode';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('itemCode', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($itemCode) && mb_strlen($itemCode) > 7) {
            throw new \InvalidArgumentException('invalid length for $itemCode when calling ExecutePayment200Response., must be smaller than or equal to 7.');
        }
        if (!is_null($itemCode) && mb_strlen($itemCode) < 7) {
            throw new \InvalidArgumentException('invalid length for $itemCode when calling ExecutePayment200Response., must be bigger than or equal to 7.');
        }
        $this->container['itemCode'] = $itemCode;

        return $this;
    }

    /**
     * Gets sendUrl.
     *
     * @return string|null
     */
    public function getSendUrl(): mixed
    {
        return $this->container['sendUrl'];
    }

    /**
     * Sets sendUrl.
     *
     * @param string|null $sendUrl ※ 閉塞機能
     */
    public function setSendUrl(mixed $sendUrl): static
    {
        if (is_null($sendUrl)) {
            $this->openAPINullablesSetToNull[] = 'sendUrl';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sendUrl', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sendUrl'] = $sendUrl;

        return $this;
    }

    /**
     * Gets acs.
     *
     * @return string|null
     *
     * @deprecated
     */
    public function getAcs(): mixed
    {
        return $this->container['acs'];
    }

    /**
     * Sets acs.
     *
     * @param string|null $acs ※ 閉塞機能
     *
     * @deprecated
     */
    public function setAcs(mixed $acs): static
    {
        if (is_null($acs)) {
            $this->openAPINullablesSetToNull[] = 'acs';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('acs', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($acs) && mb_strlen($acs) > 1) {
            throw new \InvalidArgumentException('invalid length for $acs when calling ExecutePayment200Response., must be smaller than or equal to 1.');
        }
        if (!is_null($acs) && mb_strlen($acs) < 1) {
            throw new \InvalidArgumentException('invalid length for $acs when calling ExecutePayment200Response., must be bigger than or equal to 1.');
        }
        $this->container['acs'] = $acs;

        return $this;
    }

    /**
     * Gets acsUrl.
     *
     * @return string|null
     */
    public function getAcsUrl(): mixed
    {
        return $this->container['acsUrl'];
    }

    /**
     * Sets acsUrl.
     *
     * @param string|null $acsUrl 3Dセキュア認証初期化URL   決済実行後に購入者に遷移させる3Dセキュア認証ページのURLです。    3Dセキュア認証に必要なAPIの呼び出しやコールバック処理をすべて加盟店で実装する場合に使用します。   このURLに遷移後3Dセキュア認証が開始し、`tds2_ret_url`に後続処理のためのデータがPOSTメソッドで送信されます。   `tds2_ret_url`が指定された場合のみ返却されます。
     */
    public function setAcsUrl(mixed $acsUrl): static
    {
        if (is_null($acsUrl)) {
            $this->openAPINullablesSetToNull[] = 'acsUrl';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('acsUrl', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['acsUrl'] = $acsUrl;

        return $this;
    }

    /**
     * Gets redirectUrl.
     *
     * @return string|null
     */
    public function getRedirectUrl(): mixed
    {
        return $this->container['redirectUrl'];
    }

    /**
     * Sets redirectUrl.
     *
     * @param string|null $redirectUrl リダイレクトURL\\ 決済が完了した際のPayPayからのリダイレクト先URL
     */
    public function setRedirectUrl(mixed $redirectUrl): static
    {
        if (is_null($redirectUrl)) {
            $this->openAPINullablesSetToNull[] = 'redirectUrl';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('redirectUrl', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($redirectUrl) && mb_strlen($redirectUrl) > 256) {
            throw new \InvalidArgumentException('invalid length for $redirectUrl when calling ExecutePayment200Response., must be smaller than or equal to 256.');
        }
        if (!is_null($redirectUrl) && mb_strlen($redirectUrl) < 1) {
            throw new \InvalidArgumentException('invalid length for $redirectUrl when calling ExecutePayment200Response., must be bigger than or equal to 1.');
        }
        $this->container['redirectUrl'] = $redirectUrl;

        return $this;
    }

    /**
     * Gets paymentTermDay.
     *
     * @return int|null
     */
    public function getPaymentTermDay(): mixed
    {
        return $this->container['paymentTermDay'];
    }

    /**
     * Sets paymentTermDay.
     *
     * @param int $paymentTermDay 支払期限日数\\ \\ 実行日から見て、支払期限日数後の翌日AMに期限切れになります。\\ 例）2024/4/1に、`支払期限日数=2`で決済実行した場合、2024/4/4 AMに期限切れ
     */
    public function setPaymentTermDay(mixed $paymentTermDay): static
    {
        if (is_null($paymentTermDay)) {
            throw new \InvalidArgumentException('non-nullable paymentTermDay cannot be null');
        }
        $this->container['paymentTermDay'] = $paymentTermDay;

        return $this;
    }

    /**
     * Gets paymentTerm.
     *
     * @return string|null
     */
    public function getPaymentTerm(): mixed
    {
        return $this->container['paymentTerm'];
    }

    /**
     * Sets paymentTerm.
     *
     * @param string|null $paymentTerm 支払期限\\ 形式： `yyyy/MM/dd HH:mm:ss.SSS`
     */
    public function setPaymentTerm(mixed $paymentTerm): static
    {
        if (is_null($paymentTerm)) {
            $this->openAPINullablesSetToNull[] = 'paymentTerm';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('paymentTerm', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['paymentTerm'] = $paymentTerm;

        return $this;
    }

    /**
     * Gets paymentDate.
     *
     * @return string|null
     */
    public function getPaymentDate(): mixed
    {
        return $this->container['paymentDate'];
    }

    /**
     * Sets paymentDate.
     *
     * @param string|null $paymentDate 支払日時\\ 形式： `yyyy/MM/dd HH:mm:ss.SSS`
     */
    public function setPaymentDate(mixed $paymentDate): static
    {
        if (is_null($paymentDate)) {
            $this->openAPINullablesSetToNull[] = 'paymentDate';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('paymentDate', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['paymentDate'] = $paymentDate;

        return $this;
    }

    /**
     * Gets barcode.
     *
     * @return string|null
     */
    public function getBarcode(): mixed
    {
        return $this->container['barcode'];
    }

    /**
     * Sets barcode.
     *
     * @param string|null $barcode バーコード画像 Base64エンコード済み画像データ\\ コンビニ店頭での支払いに使用するバーコード画像のBase64エンコード済みデータです。このデータをデコードして表示します。\\ バーコード画像はレギュレーションに従って表示する必要があります。詳細は[Docs > レギュレーションと注意事項](https://docs.fincode.jp/payment/konbini/note)から参照できます。
     */
    public function setBarcode(mixed $barcode): static
    {
        if (is_null($barcode)) {
            $this->openAPINullablesSetToNull[] = 'barcode';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('barcode', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['barcode'] = $barcode;

        return $this;
    }

    /**
     * Gets barcodeFormat.
     *
     * @return string|null
     */
    public function getBarcodeFormat(): mixed
    {
        return $this->container['barcodeFormat'];
    }

    /**
     * Sets barcodeFormat.
     *
     * @param string|null $barcodeFormat バーコード画像 フォーマット\\ 発行されたバーコード画像（`barcode`）のフォーマットです
     */
    public function setBarcodeFormat(mixed $barcodeFormat): static
    {
        if (is_null($barcodeFormat)) {
            $this->openAPINullablesSetToNull[] = 'barcodeFormat';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('barcodeFormat', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getBarcodeFormatAllowableValues();
        if (!is_null($barcodeFormat) && !in_array($barcodeFormat, $allowedValues, true)) {
            throw new \InvalidArgumentException(sprintf("Invalid value '%s' for 'barcodeFormat', must be one of '%s'", $barcodeFormat, implode("', '", $allowedValues)));
        }
        $this->container['barcodeFormat'] = $barcodeFormat;

        return $this;
    }

    /**
     * Gets barcodeWidth.
     *
     * @return string|null
     */
    public function getBarcodeWidth(): mixed
    {
        return $this->container['barcodeWidth'];
    }

    /**
     * Sets barcodeWidth.
     *
     * @param string|null $barcodeWidth バーコード画像 横幅（px）\\ 発行されたバーコード画像（`barcode`）の横幅です
     */
    public function setBarcodeWidth(mixed $barcodeWidth): static
    {
        if (is_null($barcodeWidth)) {
            $this->openAPINullablesSetToNull[] = 'barcodeWidth';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('barcodeWidth', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($barcodeWidth) && mb_strlen($barcodeWidth) > 9) {
            throw new \InvalidArgumentException('invalid length for $barcodeWidth when calling ExecutePayment200Response., must be smaller than or equal to 9.');
        }
        if (!is_null($barcodeWidth) && mb_strlen($barcodeWidth) < 1) {
            throw new \InvalidArgumentException('invalid length for $barcodeWidth when calling ExecutePayment200Response., must be bigger than or equal to 1.');
        }
        $this->container['barcodeWidth'] = $barcodeWidth;

        return $this;
    }

    /**
     * Gets barcodeHeight.
     *
     * @return string|null
     */
    public function getBarcodeHeight(): mixed
    {
        return $this->container['barcodeHeight'];
    }

    /**
     * Sets barcodeHeight.
     *
     * @param string|null $barcodeHeight バーコード画像 縦幅（px）\\ 発行されたバーコード画像（`barcode`）の縦幅です
     */
    public function setBarcodeHeight(mixed $barcodeHeight): static
    {
        if (is_null($barcodeHeight)) {
            $this->openAPINullablesSetToNull[] = 'barcodeHeight';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('barcodeHeight', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($barcodeHeight) && mb_strlen($barcodeHeight) > 9) {
            throw new \InvalidArgumentException('invalid length for $barcodeHeight when calling ExecutePayment200Response., must be smaller than or equal to 9.');
        }
        if (!is_null($barcodeHeight) && mb_strlen($barcodeHeight) < 1) {
            throw new \InvalidArgumentException('invalid length for $barcodeHeight when calling ExecutePayment200Response., must be bigger than or equal to 1.');
        }
        $this->container['barcodeHeight'] = $barcodeHeight;

        return $this;
    }

    /**
     * Gets overpaymentFlag.
     *
     * @return string|null
     */
    public function getOverpaymentFlag(): mixed
    {
        return $this->container['overpaymentFlag'];
    }

    /**
     * Sets overpaymentFlag.
     *
     * @param string $overpaymentFlag 多重支払フラグ\\ この決済に対して複数回支払いが行われた場合`1`になります。  - `0`: 0回、または1回の支払いが行われた - `1`: 2回以上、同一のバーチャル口座に対して支払いが行われた
     */
    public function setOverpaymentFlag(mixed $overpaymentFlag): static
    {
        if (is_null($overpaymentFlag)) {
            throw new \InvalidArgumentException('non-nullable overpaymentFlag cannot be null');
        }
        $allowedValues = $this->getOverpaymentFlagAllowableValues();
        if (!in_array($overpaymentFlag, $allowedValues, true)) {
            throw new \InvalidArgumentException(sprintf("Invalid value '%s' for 'overpaymentFlag', must be one of '%s'", $overpaymentFlag, implode("', '", $allowedValues)));
        }
        $this->container['overpaymentFlag'] = $overpaymentFlag;

        return $this;
    }

    /**
     * Gets cancelOverpaymentFlag.
     *
     * @return string|null
     */
    public function getCancelOverpaymentFlag(): mixed
    {
        return $this->container['cancelOverpaymentFlag'];
    }

    /**
     * Sets cancelOverpaymentFlag.
     *
     * @param string $cancelOverpaymentFlag キャンセル後支払フラグ\\ この決済をキャンセルした後に購入者がバーチャル口座に対して支払いを行った場合`1`になります。  - `0`: キャンセル後支払は行われていない - `1`: キャンセル後支払が行われた
     */
    public function setCancelOverpaymentFlag(mixed $cancelOverpaymentFlag): static
    {
        if (is_null($cancelOverpaymentFlag)) {
            throw new \InvalidArgumentException('non-nullable cancelOverpaymentFlag cannot be null');
        }
        $allowedValues = $this->getCancelOverpaymentFlagAllowableValues();
        if (!in_array($cancelOverpaymentFlag, $allowedValues, true)) {
            throw new \InvalidArgumentException(sprintf("Invalid value '%s' for 'cancelOverpaymentFlag', must be one of '%s'", $cancelOverpaymentFlag, implode("', '", $allowedValues)));
        }
        $this->container['cancelOverpaymentFlag'] = $cancelOverpaymentFlag;

        return $this;
    }

    /**
     * Gets konbiniCode.
     *
     * @return KonbiniCode|null
     */
    public function getKonbiniCode(): mixed
    {
        return $this->container['konbiniCode'];
    }

    /**
     * Sets konbiniCode.
     *
     * @param KonbiniCode|null $konbiniCode konbiniCode
     */
    public function setKonbiniCode(mixed $konbiniCode): static
    {
        if (is_null($konbiniCode)) {
            $this->openAPINullablesSetToNull[] = 'konbiniCode';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('konbiniCode', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['konbiniCode'] = $konbiniCode;

        return $this;
    }

    /**
     * Gets konbiniStoreCode.
     *
     * @return mixed|null
     */
    public function getKonbiniStoreCode(): mixed
    {
        return $this->container['konbiniStoreCode'];
    }

    /**
     * Sets konbiniStoreCode.
     *
     * @param mixed|null $konbiniStoreCode コンビニ店舗コード\\ コンビニ事業者ごとに独自体系の店舗コードです
     */
    public function setKonbiniStoreCode(mixed $konbiniStoreCode): static
    {
        if (is_null($konbiniStoreCode)) {
            $this->openAPINullablesSetToNull[] = 'konbiniStoreCode';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('konbiniStoreCode', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($konbiniStoreCode) && mb_strlen($konbiniStoreCode) > 8) {
            throw new \InvalidArgumentException('invalid length for $konbiniStoreCode when calling ExecutePayment200Response., must be smaller than or equal to 8.');
        }
        if (!is_null($konbiniStoreCode) && mb_strlen($konbiniStoreCode) < 1) {
            throw new \InvalidArgumentException('invalid length for $konbiniStoreCode when calling ExecutePayment200Response., must be bigger than or equal to 1.');
        }
        $this->container['konbiniStoreCode'] = $konbiniStoreCode;

        return $this;
    }

    /**
     * Gets deviceName.
     *
     * @return string|null
     */
    public function getDeviceName(): mixed
    {
        return $this->container['deviceName'];
    }

    /**
     * Sets deviceName.
     *
     * @param string|null $deviceName デバイス名\\ バーコード表示を行うデバイスの名前を指定します。  - Androidの場合： [ユーザーエージェントクライアントヒントAPI](https://developer.mozilla.org/ja/docs/Web/API/User-Agent_Client_Hints_API)またはNavigator: userAgentプロパティ（非推奨）で取得できる文字列から取得したデバイス名を指定します。 - iPhoneの場合： 固定文字列`iPhone`を指定します。
     */
    public function setDeviceName(mixed $deviceName): static
    {
        if (is_null($deviceName)) {
            $this->openAPINullablesSetToNull[] = 'deviceName';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('deviceName', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($deviceName) && mb_strlen($deviceName) > 20) {
            throw new \InvalidArgumentException('invalid length for $deviceName when calling ExecutePayment200Response., must be smaller than or equal to 20.');
        }
        if (!is_null($deviceName) && mb_strlen($deviceName) < 1) {
            throw new \InvalidArgumentException('invalid length for $deviceName when calling ExecutePayment200Response., must be bigger than or equal to 1.');
        }
        $this->container['deviceName'] = $deviceName;

        return $this;
    }

    /**
     * Gets osVersion.
     *
     * @return mixed|null
     */
    public function getOsVersion(): mixed
    {
        return $this->container['osVersion'];
    }

    /**
     * Sets osVersion.
     *
     * @param mixed|null $osVersion OSバージョン
     */
    public function setOsVersion(mixed $osVersion): static
    {
        if (is_null($osVersion)) {
            $this->openAPINullablesSetToNull[] = 'osVersion';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('osVersion', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($osVersion) && mb_strlen($osVersion) > 10) {
            throw new \InvalidArgumentException('invalid length for $osVersion when calling ExecutePayment200Response., must be smaller than or equal to 10.');
        }
        if (!is_null($osVersion) && mb_strlen($osVersion) < 1) {
            throw new \InvalidArgumentException('invalid length for $osVersion when calling ExecutePayment200Response., must be bigger than or equal to 1.');
        }
        $this->container['osVersion'] = $osVersion;

        return $this;
    }

    /**
     * Gets winWidth.
     *
     * @return string|null
     */
    public function getWinWidth(): mixed
    {
        return $this->container['winWidth'];
    }

    /**
     * Sets winWidth.
     *
     * @param string|null $winWidth デバイス画面幅\\ バーコード表示を行うデバイスの画面幅を指定します。  - Androidの場合： `window.screen.width`で取得した値に `pixel_ratio`（ピクセル比）の値を乗じたものを指定します。 - iPhoneの場合： `window.screen.width`で取得した値を指定します。
     */
    public function setWinWidth(mixed $winWidth): static
    {
        if (is_null($winWidth)) {
            $this->openAPINullablesSetToNull[] = 'winWidth';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('winWidth', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($winWidth) && mb_strlen($winWidth) > 5) {
            throw new \InvalidArgumentException('invalid length for $winWidth when calling ExecutePayment200Response., must be smaller than or equal to 5.');
        }
        if (!is_null($winWidth) && mb_strlen($winWidth) < 1) {
            throw new \InvalidArgumentException('invalid length for $winWidth when calling ExecutePayment200Response., must be bigger than or equal to 1.');
        }
        $this->container['winWidth'] = $winWidth;

        return $this;
    }

    /**
     * Gets winHeight.
     *
     * @return string|null
     */
    public function getWinHeight(): mixed
    {
        return $this->container['winHeight'];
    }

    /**
     * Sets winHeight.
     *
     * @param string|null $winHeight デバイス画面の高さ\\ バーコード表示を行うデバイス画面の高さを指定します。  - Androidの場合： `window.screen.height`で取得した値に `pixel_ratio`（ピクセル比）の値を乗じたものを指定します。 - iPhoneの場合： `window.screen.height`で取得した値を指定します。
     */
    public function setWinHeight(mixed $winHeight): static
    {
        if (is_null($winHeight)) {
            $this->openAPINullablesSetToNull[] = 'winHeight';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('winHeight', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($winHeight) && mb_strlen($winHeight) > 5) {
            throw new \InvalidArgumentException('invalid length for $winHeight when calling ExecutePayment200Response., must be smaller than or equal to 5.');
        }
        if (!is_null($winHeight) && mb_strlen($winHeight) < 1) {
            throw new \InvalidArgumentException('invalid length for $winHeight when calling ExecutePayment200Response., must be bigger than or equal to 1.');
        }
        $this->container['winHeight'] = $winHeight;

        return $this;
    }

    /**
     * Gets xdpi.
     *
     * @return mixed|null
     */
    public function getXdpi(): mixed
    {
        return $this->container['xdpi'];
    }

    /**
     * Sets xdpi.
     *
     * @param mixed|null $xdpi 画面横幅のDPI
     */
    public function setXdpi(mixed $xdpi): static
    {
        if (is_null($xdpi)) {
            $this->openAPINullablesSetToNull[] = 'xdpi';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('xdpi', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($xdpi) && mb_strlen($xdpi) > 6) {
            throw new \InvalidArgumentException('invalid length for $xdpi when calling ExecutePayment200Response., must be smaller than or equal to 6.');
        }
        if (!is_null($xdpi) && mb_strlen($xdpi) < 1) {
            throw new \InvalidArgumentException('invalid length for $xdpi when calling ExecutePayment200Response., must be bigger than or equal to 1.');
        }
        $this->container['xdpi'] = $xdpi;

        return $this;
    }

    /**
     * Gets ydpi.
     *
     * @return mixed|null
     */
    public function getYdpi(): mixed
    {
        return $this->container['ydpi'];
    }

    /**
     * Sets ydpi.
     *
     * @param mixed|null $ydpi 画面縦幅のDPI
     */
    public function setYdpi(mixed $ydpi): static
    {
        if (is_null($ydpi)) {
            $this->openAPINullablesSetToNull[] = 'ydpi';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ydpi', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($ydpi) && mb_strlen($ydpi) > 6) {
            throw new \InvalidArgumentException('invalid length for $ydpi when calling ExecutePayment200Response., must be smaller than or equal to 6.');
        }
        if (!is_null($ydpi) && mb_strlen($ydpi) < 1) {
            throw new \InvalidArgumentException('invalid length for $ydpi when calling ExecutePayment200Response., must be bigger than or equal to 1.');
        }
        $this->container['ydpi'] = $ydpi;

        return $this;
    }

    /**
     * Gets result.
     *
     * @return KonbiniPaymentProcessResult|null
     */
    public function getResult(): mixed
    {
        return $this->container['result'];
    }

    /**
     * Sets result.
     *
     * @param KonbiniPaymentProcessResult $result result
     */
    public function setResult(mixed $result): static
    {
        if (is_null($result)) {
            throw new \InvalidArgumentException('non-nullable result cannot be null');
        }
        $this->container['result'] = $result;

        return $this;
    }

    /**
     * Gets orderSerial.
     *
     * @return string|null
     */
    public function getOrderSerial(): mixed
    {
        return $this->container['orderSerial'];
    }

    /**
     * Sets orderSerial.
     *
     * @param string|null $orderSerial 注文管理ID
     */
    public function setOrderSerial(mixed $orderSerial): static
    {
        if (is_null($orderSerial)) {
            $this->openAPINullablesSetToNull[] = 'orderSerial';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('orderSerial', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($orderSerial) && mb_strlen($orderSerial) > 18) {
            throw new \InvalidArgumentException('invalid length for $orderSerial when calling ExecutePayment200Response., must be smaller than or equal to 18.');
        }
        if (!is_null($orderSerial) && mb_strlen($orderSerial) < 1) {
            throw new \InvalidArgumentException('invalid length for $orderSerial when calling ExecutePayment200Response., must be bigger than or equal to 1.');
        }
        $this->container['orderSerial'] = $orderSerial;

        return $this;
    }

    /**
     * Gets invoiceId.
     *
     * @return string|null
     */
    public function getInvoiceId(): mixed
    {
        return $this->container['invoiceId'];
    }

    /**
     * Sets invoiceId.
     *
     * @param string|null $invoiceId 請求ID
     */
    public function setInvoiceId(mixed $invoiceId): static
    {
        if (is_null($invoiceId)) {
            $this->openAPINullablesSetToNull[] = 'invoiceId';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('invoiceId', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($invoiceId) && mb_strlen($invoiceId) > 20) {
            throw new \InvalidArgumentException('invalid length for $invoiceId when calling ExecutePayment200Response., must be smaller than or equal to 20.');
        }
        if (!is_null($invoiceId) && mb_strlen($invoiceId) < 1) {
            throw new \InvalidArgumentException('invalid length for $invoiceId when calling ExecutePayment200Response., must be bigger than or equal to 1.');
        }
        $this->container['invoiceId'] = $invoiceId;

        return $this;
    }

    /**
     * Gets codeUrl.
     *
     * @return string|null
     */
    public function getCodeUrl(): mixed
    {
        return $this->container['codeUrl'];
    }

    /**
     * Sets codeUrl.
     *
     * @param string|null $codeUrl payPay支払いURL\\ 購入者をこのURLにリダイレクトすることでPayPay上での取引を開始します
     */
    public function setCodeUrl(mixed $codeUrl): static
    {
        if (is_null($codeUrl)) {
            $this->openAPINullablesSetToNull[] = 'codeUrl';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('codeUrl', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($codeUrl) && mb_strlen($codeUrl) > 256) {
            throw new \InvalidArgumentException('invalid length for $codeUrl when calling ExecutePayment200Response., must be smaller than or equal to 256.');
        }
        if (!is_null($codeUrl) && mb_strlen($codeUrl) < 1) {
            throw new \InvalidArgumentException('invalid length for $codeUrl when calling ExecutePayment200Response., must be bigger than or equal to 1.');
        }
        $this->container['codeUrl'] = $codeUrl;

        return $this;
    }

    /**
     * Gets codeExpiryDate.
     *
     * @return string|null
     */
    public function getCodeExpiryDate(): mixed
    {
        return $this->container['codeExpiryDate'];
    }

    /**
     * Sets codeExpiryDate.
     *
     * @param string|null $codeExpiryDate 支払期限\\ 形式： `yyyy/MM/dd HH:mm:ss.SSS`
     */
    public function setCodeExpiryDate(mixed $codeExpiryDate): static
    {
        if (is_null($codeExpiryDate)) {
            $this->openAPINullablesSetToNull[] = 'codeExpiryDate';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('codeExpiryDate', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['codeExpiryDate'] = $codeExpiryDate;

        return $this;
    }

    /**
     * Gets redirectType.
     *
     * @return string|null
     */
    public function getRedirectType(): mixed
    {
        return $this->container['redirectType'];
    }

    /**
     * Sets redirectType.
     *
     * @param string|null $redirectType リダイレクト先種別\\ `redirect_url`の種別  - `1`： Webページ／Webアプリケーション - `2`： ネイティブアプリ
     */
    public function setRedirectType(mixed $redirectType): static
    {
        if (is_null($redirectType)) {
            $this->openAPINullablesSetToNull[] = 'redirectType';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('redirectType', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getRedirectTypeAllowableValues();
        if (!is_null($redirectType) && !in_array($redirectType, $allowedValues, true)) {
            throw new \InvalidArgumentException(sprintf("Invalid value '%s' for 'redirectType', must be one of '%s'", $redirectType, implode("', '", $allowedValues)));
        }
        $this->container['redirectType'] = $redirectType;

        return $this;
    }

    /**
     * Gets orderDescription.
     *
     * @return string|null
     */
    public function getOrderDescription(): mixed
    {
        return $this->container['orderDescription'];
    }

    /**
     * Sets orderDescription.
     *
     * @param string|null $orderDescription 注文内容の説明\\ 購入者のPayPayアプリ上で表示される注文内容の説明
     */
    public function setOrderDescription(mixed $orderDescription): static
    {
        if (is_null($orderDescription)) {
            $this->openAPINullablesSetToNull[] = 'orderDescription';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('orderDescription', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($orderDescription) && mb_strlen($orderDescription) > 100) {
            throw new \InvalidArgumentException('invalid length for $orderDescription when calling ExecutePayment200Response., must be smaller than or equal to 100.');
        }
        $this->container['orderDescription'] = $orderDescription;

        return $this;
    }

    /**
     * Gets captureDescription.
     *
     * @return string|null
     */
    public function getCaptureDescription(): mixed
    {
        return $this->container['captureDescription'];
    }

    /**
     * Sets captureDescription.
     *
     * @param string|null $captureDescription 売上確定の説明\\ 購入者のPayPayアプリ上で表示される売上確定の説明
     */
    public function setCaptureDescription(mixed $captureDescription): static
    {
        if (is_null($captureDescription)) {
            $this->openAPINullablesSetToNull[] = 'captureDescription';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('captureDescription', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($captureDescription) && mb_strlen($captureDescription) > 100) {
            throw new \InvalidArgumentException('invalid length for $captureDescription when calling ExecutePayment200Response., must be smaller than or equal to 100.');
        }
        $this->container['captureDescription'] = $captureDescription;

        return $this;
    }

    /**
     * Gets updateDescription.
     *
     * @return string|null
     */
    public function getUpdateDescription(): mixed
    {
        return $this->container['updateDescription'];
    }

    /**
     * Sets updateDescription.
     *
     * @param string|null $updateDescription 金額変更の説明\\ 購入者のPayPayアプリ上で表示される金額変更の説明
     */
    public function setUpdateDescription(mixed $updateDescription): static
    {
        if (is_null($updateDescription)) {
            $this->openAPINullablesSetToNull[] = 'updateDescription';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('updateDescription', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($updateDescription) && mb_strlen($updateDescription) > 100) {
            throw new \InvalidArgumentException('invalid length for $updateDescription when calling ExecutePayment200Response., must be smaller than or equal to 100.');
        }
        $this->container['updateDescription'] = $updateDescription;

        return $this;
    }

    /**
     * Gets cancelDescription.
     *
     * @return string|null
     */
    public function getCancelDescription(): mixed
    {
        return $this->container['cancelDescription'];
    }

    /**
     * Sets cancelDescription.
     *
     * @param string|null $cancelDescription キャンセルの説明\\ 購入者のPayPayアプリ上で表示されるキャンセルの説明
     */
    public function setCancelDescription(mixed $cancelDescription): static
    {
        if (is_null($cancelDescription)) {
            $this->openAPINullablesSetToNull[] = 'cancelDescription';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cancelDescription', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($cancelDescription) && mb_strlen($cancelDescription) > 100) {
            throw new \InvalidArgumentException('invalid length for $cancelDescription when calling ExecutePayment200Response., must be smaller than or equal to 100.');
        }
        $this->container['cancelDescription'] = $cancelDescription;

        return $this;
    }

    /**
     * Gets storeId.
     *
     * @return string|null
     */
    public function getStoreId(): mixed
    {
        return $this->container['storeId'];
    }

    /**
     * Sets storeId.
     *
     * @param string|null $storeId 店舗ID\\ PayPayによって発行された店舗ID
     */
    public function setStoreId(mixed $storeId): static
    {
        if (is_null($storeId)) {
            $this->openAPINullablesSetToNull[] = 'storeId';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('storeId', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($storeId) && mb_strlen($storeId) > 18) {
            throw new \InvalidArgumentException('invalid length for $storeId when calling ExecutePayment200Response., must be smaller than or equal to 18.');
        }
        if (!is_null($storeId) && mb_strlen($storeId) < 1) {
            throw new \InvalidArgumentException('invalid length for $storeId when calling ExecutePayment200Response., must be bigger than or equal to 1.');
        }
        $this->container['storeId'] = $storeId;

        return $this;
    }

    /**
     * Gets codeId.
     *
     * @return string|null
     */
    public function getCodeId(): mixed
    {
        return $this->container['codeId'];
    }

    /**
     * Sets codeId.
     *
     * @param string|null $codeId PayPayの支払いコードID
     */
    public function setCodeId(mixed $codeId): static
    {
        if (is_null($codeId)) {
            $this->openAPINullablesSetToNull[] = 'codeId';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('codeId', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($codeId) && mb_strlen($codeId) > 64) {
            throw new \InvalidArgumentException('invalid length for $codeId when calling ExecutePayment200Response., must be smaller than or equal to 64.');
        }
        if (!is_null($codeId) && mb_strlen($codeId) < 1) {
            throw new \InvalidArgumentException('invalid length for $codeId when calling ExecutePayment200Response., must be bigger than or equal to 1.');
        }
        $this->container['codeId'] = $codeId;

        return $this;
    }

    /**
     * Gets paymentId.
     *
     * @return string|null
     */
    public function getPaymentId(): mixed
    {
        return $this->container['paymentId'];
    }

    /**
     * Sets paymentId.
     *
     * @param string|null $paymentId PayPay 決済ID
     */
    public function setPaymentId(mixed $paymentId): static
    {
        if (is_null($paymentId)) {
            $this->openAPINullablesSetToNull[] = 'paymentId';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('paymentId', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($paymentId) && mb_strlen($paymentId) > 64) {
            throw new \InvalidArgumentException('invalid length for $paymentId when calling ExecutePayment200Response., must be smaller than or equal to 64.');
        }
        if (!is_null($paymentId) && mb_strlen($paymentId) < 1) {
            throw new \InvalidArgumentException('invalid length for $paymentId when calling ExecutePayment200Response., must be bigger than or equal to 1.');
        }
        $this->container['paymentId'] = $paymentId;

        return $this;
    }

    /**
     * Gets paypayResultCode.
     *
     * @return string|null
     */
    public function getPaypayResultCode(): mixed
    {
        return $this->container['paypayResultCode'];
    }

    /**
     * Sets paypayResultCode.
     *
     * @param string|null $paypayResultCode PayPay処理結果コード
     */
    public function setPaypayResultCode(mixed $paypayResultCode): static
    {
        if (is_null($paypayResultCode)) {
            $this->openAPINullablesSetToNull[] = 'paypayResultCode';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('paypayResultCode', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($paypayResultCode) && mb_strlen($paypayResultCode) > 256) {
            throw new \InvalidArgumentException('invalid length for $paypayResultCode when calling ExecutePayment200Response., must be smaller than or equal to 256.');
        }
        if (!is_null($paypayResultCode) && mb_strlen($paypayResultCode) < 1) {
            throw new \InvalidArgumentException('invalid length for $paypayResultCode when calling ExecutePayment200Response., must be bigger than or equal to 1.');
        }
        $this->container['paypayResultCode'] = $paypayResultCode;

        return $this;
    }

    /**
     * Gets merchantPaymentId.
     *
     * @return string|null
     */
    public function getMerchantPaymentId(): mixed
    {
        return $this->container['merchantPaymentId'];
    }

    /**
     * Sets merchantPaymentId.
     *
     * @param string|null $merchantPaymentId PayPay トランザクションID
     */
    public function setMerchantPaymentId(mixed $merchantPaymentId): static
    {
        if (is_null($merchantPaymentId)) {
            $this->openAPINullablesSetToNull[] = 'merchantPaymentId';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('merchantPaymentId', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($merchantPaymentId) && mb_strlen($merchantPaymentId) > 64) {
            throw new \InvalidArgumentException('invalid length for $merchantPaymentId when calling ExecutePayment200Response., must be smaller than or equal to 64.');
        }
        if (!is_null($merchantPaymentId) && mb_strlen($merchantPaymentId) < 1) {
            throw new \InvalidArgumentException('invalid length for $merchantPaymentId when calling ExecutePayment200Response., must be bigger than or equal to 1.');
        }
        $this->container['merchantPaymentId'] = $merchantPaymentId;

        return $this;
    }

    /**
     * Gets merchantCaptureId.
     *
     * @return string|null
     */
    public function getMerchantCaptureId(): mixed
    {
        return $this->container['merchantCaptureId'];
    }

    /**
     * Sets merchantCaptureId.
     *
     * @param string|null $merchantCaptureId PayPay 売上確定ID
     */
    public function setMerchantCaptureId(mixed $merchantCaptureId): static
    {
        if (is_null($merchantCaptureId)) {
            $this->openAPINullablesSetToNull[] = 'merchantCaptureId';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('merchantCaptureId', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($merchantCaptureId) && mb_strlen($merchantCaptureId) > 64) {
            throw new \InvalidArgumentException('invalid length for $merchantCaptureId when calling ExecutePayment200Response., must be smaller than or equal to 64.');
        }
        if (!is_null($merchantCaptureId) && mb_strlen($merchantCaptureId) < 1) {
            throw new \InvalidArgumentException('invalid length for $merchantCaptureId when calling ExecutePayment200Response., must be bigger than or equal to 1.');
        }
        $this->container['merchantCaptureId'] = $merchantCaptureId;

        return $this;
    }

    /**
     * Gets merchantUpdateId.
     *
     * @return string|null
     */
    public function getMerchantUpdateId(): mixed
    {
        return $this->container['merchantUpdateId'];
    }

    /**
     * Sets merchantUpdateId.
     *
     * @param string|null $merchantUpdateId PayPay 金額変更ID
     */
    public function setMerchantUpdateId(mixed $merchantUpdateId): static
    {
        if (is_null($merchantUpdateId)) {
            $this->openAPINullablesSetToNull[] = 'merchantUpdateId';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('merchantUpdateId', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($merchantUpdateId) && mb_strlen($merchantUpdateId) > 64) {
            throw new \InvalidArgumentException('invalid length for $merchantUpdateId when calling ExecutePayment200Response., must be smaller than or equal to 64.');
        }
        if (!is_null($merchantUpdateId) && mb_strlen($merchantUpdateId) < 1) {
            throw new \InvalidArgumentException('invalid length for $merchantUpdateId when calling ExecutePayment200Response., must be bigger than or equal to 1.');
        }
        $this->container['merchantUpdateId'] = $merchantUpdateId;

        return $this;
    }

    /**
     * Gets merchantRevertId.
     *
     * @return string|null
     */
    public function getMerchantRevertId(): mixed
    {
        return $this->container['merchantRevertId'];
    }

    /**
     * Sets merchantRevertId.
     *
     * @param string|null $merchantRevertId PayPay キャンセルID
     */
    public function setMerchantRevertId(mixed $merchantRevertId): static
    {
        if (is_null($merchantRevertId)) {
            $this->openAPINullablesSetToNull[] = 'merchantRevertId';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('merchantRevertId', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($merchantRevertId) && mb_strlen($merchantRevertId) > 64) {
            throw new \InvalidArgumentException('invalid length for $merchantRevertId when calling ExecutePayment200Response., must be smaller than or equal to 64.');
        }
        if (!is_null($merchantRevertId) && mb_strlen($merchantRevertId) < 1) {
            throw new \InvalidArgumentException('invalid length for $merchantRevertId when calling ExecutePayment200Response., must be bigger than or equal to 1.');
        }
        $this->container['merchantRevertId'] = $merchantRevertId;

        return $this;
    }

    /**
     * Gets merchantRefundId.
     *
     * @return string|null
     */
    public function getMerchantRefundId(): mixed
    {
        return $this->container['merchantRefundId'];
    }

    /**
     * Sets merchantRefundId.
     *
     * @param string|null $merchantRefundId PayPay 返金ID
     */
    public function setMerchantRefundId(mixed $merchantRefundId): static
    {
        if (is_null($merchantRefundId)) {
            $this->openAPINullablesSetToNull[] = 'merchantRefundId';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('merchantRefundId', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($merchantRefundId) && mb_strlen($merchantRefundId) > 64) {
            throw new \InvalidArgumentException('invalid length for $merchantRefundId when calling ExecutePayment200Response., must be smaller than or equal to 64.');
        }
        if (!is_null($merchantRefundId) && mb_strlen($merchantRefundId) < 1) {
            throw new \InvalidArgumentException('invalid length for $merchantRefundId when calling ExecutePayment200Response., must be bigger than or equal to 1.');
        }
        $this->container['merchantRefundId'] = $merchantRefundId;

        return $this;
    }

    /**
     * Gets resultCode.
     *
     * @return DirectDebitResultCode|null
     */
    public function getResultCode(): mixed
    {
        return $this->container['resultCode'];
    }

    /**
     * Sets resultCode.
     *
     * @param DirectDebitResultCode|null $resultCode resultCode
     */
    public function setResultCode(mixed $resultCode): static
    {
        if (is_null($resultCode)) {
            $this->openAPINullablesSetToNull[] = 'resultCode';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('resultCode', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['resultCode'] = $resultCode;

        return $this;
    }

    /**
     * Gets targetDate.
     *
     * @return string|null
     */
    public function getTargetDate(): mixed
    {
        return $this->container['targetDate'];
    }

    /**
     * Sets targetDate.
     *
     * @param string|null $targetDate 振替指定日\\ 振替を行う日を指定します。下記の日付を指定できます。  - `yyyy/MM/05`: 5日 - `yyyy/MM/06`: 6日 - `yyyy/MM/23`: 23日 - `yyyy/MM/27`: 27日  形式： `yyyy/MM/dd`\\ 実際の振替は営業日に行われるため、必ずしも指定した日付に引き落としはされません。\\ 詳細は[Docs > 口座振替年間スケジュール](https://docs.fincode.jp/payment/directdebit/schedule)の「振替日」の列で確認できます。
     */
    public function setTargetDate(mixed $targetDate): static
    {
        if (is_null($targetDate)) {
            $this->openAPINullablesSetToNull[] = 'targetDate';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('targetDate', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['targetDate'] = $targetDate;

        return $this;
    }

    /**
     * Gets withdrawalDate.
     *
     * @return string|null
     */
    public function getWithdrawalDate(): mixed
    {
        return $this->container['withdrawalDate'];
    }

    /**
     * Sets withdrawalDate.
     *
     * @param string|null $withdrawalDate 引き落とし日\\ 実際に購入者の口座から引き落としが行われた実績日です。\\ \\ 形式： `yyyy/MM/dd`
     */
    public function setWithdrawalDate(mixed $withdrawalDate): static
    {
        if (is_null($withdrawalDate)) {
            $this->openAPINullablesSetToNull[] = 'withdrawalDate';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('withdrawalDate', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['withdrawalDate'] = $withdrawalDate;

        return $this;
    }

    /**
     * Gets requestAcceptEndDate.
     *
     * @return string|null
     */
    public function getRequestAcceptEndDate(): mixed
    {
        return $this->container['requestAcceptEndDate'];
    }

    /**
     * Sets requestAcceptEndDate.
     *
     * @param string|null $requestAcceptEndDate 請求依頼受付期間 終了日\\ 振替依頼を受け付ける最終日。この日付の23:59までに振替依頼（決済実行）を受け付けます。\\ \\ 形式： `yyyy/MM/dd`\\ 詳細は[Docs > 口座振替年間スケジュール](https://docs.fincode.jp/payment/directdebit/schedule)の「請求依頼受付期間終了日」の列で確認できます。
     */
    public function setRequestAcceptEndDate(mixed $requestAcceptEndDate): static
    {
        if (is_null($requestAcceptEndDate)) {
            $this->openAPINullablesSetToNull[] = 'requestAcceptEndDate';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('requestAcceptEndDate', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['requestAcceptEndDate'] = $requestAcceptEndDate;

        return $this;
    }

    /**
     * Gets transferReturnDate.
     *
     * @return string|null
     */
    public function getTransferReturnDate(): mixed
    {
        return $this->container['transferReturnDate'];
    }

    /**
     * Sets transferReturnDate.
     *
     * @param string|null $transferReturnDate 請求結果反映 予定日\\ \\ 形式： `yyyy/MM/dd`\\ 詳細は[Docs > 口座振替年間スケジュール](https://docs.fincode.jp/payment/directdebit/schedule)の「振替結果返却日」の列で確認できます。
     */
    public function setTransferReturnDate(mixed $transferReturnDate): static
    {
        if (is_null($transferReturnDate)) {
            $this->openAPINullablesSetToNull[] = 'transferReturnDate';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('transferReturnDate', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['transferReturnDate'] = $transferReturnDate;

        return $this;
    }

    /**
     * Gets paymentMethodId.
     *
     * @return string|null
     */
    public function getPaymentMethodId(): mixed
    {
        return $this->container['paymentMethodId'];
    }

    /**
     * Sets paymentMethodId.
     *
     * @param string $paymentMethodId 決済手段ID
     */
    public function setPaymentMethodId(mixed $paymentMethodId): static
    {
        if (is_null($paymentMethodId)) {
            throw new \InvalidArgumentException('non-nullable paymentMethodId cannot be null');
        }
        if (mb_strlen($paymentMethodId) > 25) {
            throw new \InvalidArgumentException('invalid length for $paymentMethodId when calling ExecutePayment200Response., must be smaller than or equal to 25.');
        }
        if (mb_strlen($paymentMethodId) < 25) {
            throw new \InvalidArgumentException('invalid length for $paymentMethodId when calling ExecutePayment200Response., must be bigger than or equal to 25.');
        }
        $this->container['paymentMethodId'] = $paymentMethodId;

        return $this;
    }

    /**
     * Gets bankCode.
     *
     * @return string|null
     */
    public function getBankCode(): mixed
    {
        return $this->container['bankCode'];
    }

    /**
     * Sets bankCode.
     *
     * @param string|null $bankCode 金融機関コード\\ fincodeの口座振替に対応している金融機関のコードのリストは[Docs > 利用可能な金融機関（口座振替）](https://docs.fincode.jp/payment/directdebit/restriction)で参照できます。
     */
    public function setBankCode(mixed $bankCode): static
    {
        if (is_null($bankCode)) {
            $this->openAPINullablesSetToNull[] = 'bankCode';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bankCode', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($bankCode) && mb_strlen($bankCode) > 4) {
            throw new \InvalidArgumentException('invalid length for $bankCode when calling ExecutePayment200Response., must be smaller than or equal to 4.');
        }
        if (!is_null($bankCode) && mb_strlen($bankCode) < 4) {
            throw new \InvalidArgumentException('invalid length for $bankCode when calling ExecutePayment200Response., must be bigger than or equal to 4.');
        }
        $this->container['bankCode'] = $bankCode;

        return $this;
    }

    /**
     * Gets bankName.
     *
     * @return string|null
     */
    public function getBankName(): mixed
    {
        return $this->container['bankName'];
    }

    /**
     * Sets bankName.
     *
     * @param string|null $bankName 金融機関名
     */
    public function setBankName(mixed $bankName): static
    {
        if (is_null($bankName)) {
            $this->openAPINullablesSetToNull[] = 'bankName';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bankName', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($bankName) && mb_strlen($bankName) > 45) {
            throw new \InvalidArgumentException('invalid length for $bankName when calling ExecutePayment200Response., must be smaller than or equal to 45.');
        }
        if (!is_null($bankName) && mb_strlen($bankName) < 1) {
            throw new \InvalidArgumentException('invalid length for $bankName when calling ExecutePayment200Response., must be bigger than or equal to 1.');
        }
        $this->container['bankName'] = $bankName;

        return $this;
    }

    /**
     * Gets branchCode.
     *
     * @return string|null
     */
    public function getBranchCode(): mixed
    {
        return $this->container['branchCode'];
    }

    /**
     * Sets branchCode.
     *
     * @param string|null $branchCode 支店コード
     */
    public function setBranchCode(mixed $branchCode): static
    {
        if (is_null($branchCode)) {
            $this->openAPINullablesSetToNull[] = 'branchCode';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('branchCode', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($branchCode) && mb_strlen($branchCode) > 3) {
            throw new \InvalidArgumentException('invalid length for $branchCode when calling ExecutePayment200Response., must be smaller than or equal to 3.');
        }
        if (!is_null($branchCode) && mb_strlen($branchCode) < 3) {
            throw new \InvalidArgumentException('invalid length for $branchCode when calling ExecutePayment200Response., must be bigger than or equal to 3.');
        }
        $this->container['branchCode'] = $branchCode;

        return $this;
    }

    /**
     * Gets branchName.
     *
     * @return string|null
     */
    public function getBranchName(): mixed
    {
        return $this->container['branchName'];
    }

    /**
     * Sets branchName.
     *
     * @param string|null $branchName 支店名
     */
    public function setBranchName(mixed $branchName): static
    {
        if (is_null($branchName)) {
            $this->openAPINullablesSetToNull[] = 'branchName';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('branchName', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($branchName) && mb_strlen($branchName) > 45) {
            throw new \InvalidArgumentException('invalid length for $branchName when calling ExecutePayment200Response., must be smaller than or equal to 45.');
        }
        if (!is_null($branchName) && mb_strlen($branchName) < 1) {
            throw new \InvalidArgumentException('invalid length for $branchName when calling ExecutePayment200Response., must be bigger than or equal to 1.');
        }
        $this->container['branchName'] = $branchName;

        return $this;
    }

    /**
     * Gets remarks.
     *
     * @return string|null
     */
    public function getRemarks(): mixed
    {
        return $this->container['remarks'];
    }

    /**
     * Sets remarks.
     *
     * @param string|null $remarks ご利用明細表示内容  - フォーマット：半角英数カナ／全角英数カナ／一部の記号／半角全角スペース - デフォルト： `ショップ名カナの先頭9文字`  ※ 利用可能な記号  - 半角：`.`、`(`、`)`、`–` - 全角：`．`、`（`、`）`、`ー`
     */
    public function setRemarks(mixed $remarks): static
    {
        if (is_null($remarks)) {
            $this->openAPINullablesSetToNull[] = 'remarks';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('remarks', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($remarks) && mb_strlen($remarks) > 9) {
            throw new \InvalidArgumentException('invalid length for $remarks when calling ExecutePayment200Response., must be smaller than or equal to 9.');
        }
        if (!is_null($remarks) && mb_strlen($remarks) < 1) {
            throw new \InvalidArgumentException('invalid length for $remarks when calling ExecutePayment200Response., must be bigger than or equal to 1.');
        }
        $this->container['remarks'] = $remarks;

        return $this;
    }

    /**
     * Gets billingAmount.
     *
     * @return int|null
     */
    public function getBillingAmount(): mixed
    {
        return $this->container['billingAmount'];
    }

    /**
     * Sets billingAmount.
     *
     * @param int $billingAmount 振込依頼金額
     */
    public function setBillingAmount(mixed $billingAmount): static
    {
        if (is_null($billingAmount)) {
            throw new \InvalidArgumentException('non-nullable billingAmount cannot be null');
        }
        $this->container['billingAmount'] = $billingAmount;

        return $this;
    }

    /**
     * Gets billingTax.
     *
     * @return int|null
     */
    public function getBillingTax(): mixed
    {
        return $this->container['billingTax'];
    }

    /**
     * Sets billingTax.
     *
     * @param int|null $billingTax 振込依頼金額（税送料）
     */
    public function setBillingTax(mixed $billingTax): static
    {
        if (is_null($billingTax)) {
            $this->openAPINullablesSetToNull[] = 'billingTax';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('billingTax', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['billingTax'] = $billingTax;

        return $this;
    }

    /**
     * Gets billingTotalAmount.
     *
     * @return int|null
     */
    public function getBillingTotalAmount(): mixed
    {
        return $this->container['billingTotalAmount'];
    }

    /**
     * Sets billingTotalAmount.
     *
     * @param int $billingTotalAmount 振込依頼金額 合計\\ 振込依頼金額と振込依頼金額（税送料）の合計金額です
     */
    public function setBillingTotalAmount(mixed $billingTotalAmount): static
    {
        if (is_null($billingTotalAmount)) {
            throw new \InvalidArgumentException('non-nullable billingTotalAmount cannot be null');
        }
        $this->container['billingTotalAmount'] = $billingTotalAmount;

        return $this;
    }

    /**
     * Gets vaBranchCode.
     *
     * @return string|null
     */
    public function getVaBranchCode(): mixed
    {
        return $this->container['vaBranchCode'];
    }

    /**
     * Sets vaBranchCode.
     *
     * @param string|null $vaBranchCode 支店コード\\ \\ 発行されたバーチャル口座の支店コードです
     */
    public function setVaBranchCode(mixed $vaBranchCode): static
    {
        if (is_null($vaBranchCode)) {
            $this->openAPINullablesSetToNull[] = 'vaBranchCode';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('vaBranchCode', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($vaBranchCode) && mb_strlen($vaBranchCode) > 3) {
            throw new \InvalidArgumentException('invalid length for $vaBranchCode when calling ExecutePayment200Response., must be smaller than or equal to 3.');
        }
        if (!is_null($vaBranchCode) && mb_strlen($vaBranchCode) < 1) {
            throw new \InvalidArgumentException('invalid length for $vaBranchCode when calling ExecutePayment200Response., must be bigger than or equal to 1.');
        }
        $this->container['vaBranchCode'] = $vaBranchCode;

        return $this;
    }

    /**
     * Gets vaBranchName.
     *
     * @return string|null
     */
    public function getVaBranchName(): mixed
    {
        return $this->container['vaBranchName'];
    }

    /**
     * Sets vaBranchName.
     *
     * @param string|null $vaBranchName 支店名\\ \\ 発行されたバーチャル口座の支店名です
     */
    public function setVaBranchName(mixed $vaBranchName): static
    {
        if (is_null($vaBranchName)) {
            $this->openAPINullablesSetToNull[] = 'vaBranchName';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('vaBranchName', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($vaBranchName) && mb_strlen($vaBranchName) > 15) {
            throw new \InvalidArgumentException('invalid length for $vaBranchName when calling ExecutePayment200Response., must be smaller than or equal to 15.');
        }
        $this->container['vaBranchName'] = $vaBranchName;

        return $this;
    }

    /**
     * Gets vaAccountNumber.
     *
     * @return string|null
     */
    public function getVaAccountNumber(): mixed
    {
        return $this->container['vaAccountNumber'];
    }

    /**
     * Sets vaAccountNumber.
     *
     * @param string|null $vaAccountNumber 口座番号\\ \\ 発行されたバーチャル口座の口座番号です
     */
    public function setVaAccountNumber(mixed $vaAccountNumber): static
    {
        if (is_null($vaAccountNumber)) {
            $this->openAPINullablesSetToNull[] = 'vaAccountNumber';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('vaAccountNumber', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($vaAccountNumber) && mb_strlen($vaAccountNumber) > 7) {
            throw new \InvalidArgumentException('invalid length for $vaAccountNumber when calling ExecutePayment200Response., must be smaller than or equal to 7.');
        }
        if (!is_null($vaAccountNumber) && mb_strlen($vaAccountNumber) < 7) {
            throw new \InvalidArgumentException('invalid length for $vaAccountNumber when calling ExecutePayment200Response., must be bigger than or equal to 7.');
        }
        $this->container['vaAccountNumber'] = $vaAccountNumber;

        return $this;
    }

    /**
     * Gets vaAccountName.
     *
     * @return string|null
     */
    public function getVaAccountName(): mixed
    {
        return $this->container['vaAccountName'];
    }

    /**
     * Sets vaAccountName.
     *
     * @param string|null $vaAccountName 口座名義\\ \\ 発行されたバーチャル口座の口座名義です
     */
    public function setVaAccountName(mixed $vaAccountName): static
    {
        if (is_null($vaAccountName)) {
            $this->openAPINullablesSetToNull[] = 'vaAccountName';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('vaAccountName', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($vaAccountName) && mb_strlen($vaAccountName) > 40) {
            throw new \InvalidArgumentException('invalid length for $vaAccountName when calling ExecutePayment200Response., must be smaller than or equal to 40.');
        }
        $this->container['vaAccountName'] = $vaAccountName;

        return $this;
    }

    /**
     * Gets virtualAccountId.
     *
     * @return string|null
     */
    public function getVirtualAccountId(): mixed
    {
        return $this->container['virtualAccountId'];
    }

    /**
     * Sets virtualAccountId.
     *
     * @param string|null $virtualAccountId バーチャル口座ID\\ \\ 発行されたバーチャル口座のIDです
     */
    public function setVirtualAccountId(mixed $virtualAccountId): static
    {
        if (is_null($virtualAccountId)) {
            $this->openAPINullablesSetToNull[] = 'virtualAccountId';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('virtualAccountId', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($virtualAccountId) && mb_strlen($virtualAccountId) > 10) {
            throw new \InvalidArgumentException('invalid length for $virtualAccountId when calling ExecutePayment200Response., must be smaller than or equal to 10.');
        }
        if (!is_null($virtualAccountId) && mb_strlen($virtualAccountId) < 10) {
            throw new \InvalidArgumentException('invalid length for $virtualAccountId when calling ExecutePayment200Response., must be bigger than or equal to 10.');
        }
        $this->container['virtualAccountId'] = $virtualAccountId;

        return $this;
    }

    /**
     * Gets accountAssignmentDate.
     *
     * @return string|null
     */
    public function getAccountAssignmentDate(): mixed
    {
        return $this->container['accountAssignmentDate'];
    }

    /**
     * Sets accountAssignmentDate.
     *
     * @param string|null $accountAssignmentDate バーチャル口座 割当日時\\ 形式： `yyyy/MM/dd HH:mm:ss.SSS`
     */
    public function setAccountAssignmentDate(mixed $accountAssignmentDate): static
    {
        if (is_null($accountAssignmentDate)) {
            $this->openAPINullablesSetToNull[] = 'accountAssignmentDate';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('accountAssignmentDate', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['accountAssignmentDate'] = $accountAssignmentDate;

        return $this;
    }

    /**
     * Gets transactionDate.
     *
     * @return string|null
     */
    public function getTransactionDate(): mixed
    {
        return $this->container['transactionDate'];
    }

    /**
     * Sets transactionDate.
     *
     * @param string|null $transactionDate 取引日\\ \\ 形式： `yyyy/MM/dd`
     */
    public function setTransactionDate(mixed $transactionDate): static
    {
        if (is_null($transactionDate)) {
            $this->openAPINullablesSetToNull[] = 'transactionDate';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('transactionDate', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['transactionDate'] = $transactionDate;

        return $this;
    }

    /**
     * Gets valueDate.
     *
     * @return string|null
     */
    public function getValueDate(): mixed
    {
        return $this->container['valueDate'];
    }

    /**
     * Sets valueDate.
     *
     * @param string|null $valueDate 起算日\\ \\ 銀行で入金が処理された営業日\\ 形式： `yyyy/MM/dd`
     */
    public function setValueDate(mixed $valueDate): static
    {
        if (is_null($valueDate)) {
            $this->openAPINullablesSetToNull[] = 'valueDate';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('valueDate', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['valueDate'] = $valueDate;

        return $this;
    }

    /**
     * Gets remitterAccountName.
     *
     * @return string|null
     */
    public function getRemitterAccountName(): mixed
    {
        return $this->container['remitterAccountName'];
    }

    /**
     * Sets remitterAccountName.
     *
     * @param string|null $remitterAccountName 振込依頼人 氏名\\ \\ 振込依頼人（購入者）の氏名です
     */
    public function setRemitterAccountName(mixed $remitterAccountName): static
    {
        if (is_null($remitterAccountName)) {
            $this->openAPINullablesSetToNull[] = 'remitterAccountName';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('remitterAccountName', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($remitterAccountName) && mb_strlen($remitterAccountName) > 48) {
            throw new \InvalidArgumentException('invalid length for $remitterAccountName when calling ExecutePayment200Response., must be smaller than or equal to 48.');
        }
        $this->container['remitterAccountName'] = $remitterAccountName;

        return $this;
    }

    /**
     * Gets remitterBankName.
     *
     * @return string|null
     */
    public function getRemitterBankName(): mixed
    {
        return $this->container['remitterBankName'];
    }

    /**
     * Sets remitterBankName.
     *
     * @param string|null $remitterBankName 振込依頼人 銀行名\\ \\ 振込依頼人（購入者）の銀行名です
     */
    public function setRemitterBankName(mixed $remitterBankName): static
    {
        if (is_null($remitterBankName)) {
            $this->openAPINullablesSetToNull[] = 'remitterBankName';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('remitterBankName', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($remitterBankName) && mb_strlen($remitterBankName) > 30) {
            throw new \InvalidArgumentException('invalid length for $remitterBankName when calling ExecutePayment200Response., must be smaller than or equal to 30.');
        }
        $this->container['remitterBankName'] = $remitterBankName;

        return $this;
    }

    /**
     * Gets remitterBranchName.
     *
     * @return string|null
     */
    public function getRemitterBranchName(): mixed
    {
        return $this->container['remitterBranchName'];
    }

    /**
     * Sets remitterBranchName.
     *
     * @param string|null $remitterBranchName 振込依頼人 支店名\\ \\ 振込依頼人（購入者）の支店名です
     */
    public function setRemitterBranchName(mixed $remitterBranchName): static
    {
        if (is_null($remitterBranchName)) {
            $this->openAPINullablesSetToNull[] = 'remitterBranchName';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('remitterBranchName', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($remitterBranchName) && mb_strlen($remitterBranchName) > 15) {
            throw new \InvalidArgumentException('invalid length for $remitterBranchName when calling ExecutePayment200Response., must be smaller than or equal to 15.');
        }
        $this->container['remitterBranchName'] = $remitterBranchName;

        return $this;
    }

    /**
     * Gets expireOverpaymentFlag.
     *
     * @return string|null
     */
    public function getExpireOverpaymentFlag(): mixed
    {
        return $this->container['expireOverpaymentFlag'];
    }

    /**
     * Sets expireOverpaymentFlag.
     *
     * @param string $expireOverpaymentFlag 期限切れ後支払フラグ\\ この決済の支払期限が過ぎた後に購入者がバーチャル口座に対して支払いを行った場合`1`になります。  - `0`: 期限切れ後支払は行われていない - `1`: 期限切れ後支払が行われた
     */
    public function setExpireOverpaymentFlag(mixed $expireOverpaymentFlag): static
    {
        if (is_null($expireOverpaymentFlag)) {
            throw new \InvalidArgumentException('non-nullable expireOverpaymentFlag cannot be null');
        }
        $allowedValues = $this->getExpireOverpaymentFlagAllowableValues();
        if (!in_array($expireOverpaymentFlag, $allowedValues, true)) {
            throw new \InvalidArgumentException(sprintf("Invalid value '%s' for 'expireOverpaymentFlag', must be one of '%s'", $expireOverpaymentFlag, implode("', '", $allowedValues)));
        }
        $this->container['expireOverpaymentFlag'] = $expireOverpaymentFlag;

        return $this;
    }

    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @see https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    public function jsonSerialize(): mixed
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object.
     */
    public function __toString(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
    }

    /**
     * Gets a header-safe presentation of the object.
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
