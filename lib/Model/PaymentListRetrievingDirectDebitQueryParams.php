<?php

declare(strict_types=1);
/**
 * fincode API.
 *
 * fincodeのAPIリファレンスです。\\ fincodeは決済情報のほか様々なリソースを管理できるため、リソース指向なREST APIをベースとしたインターフェイス設計のもとでAPIを提供しています。\\ APIの呼び出しにはAPIキーによる認証が必要であり、リクエストの際に`Authorization`ヘッダーに有効なAPIキーをセットすることで認証できます。
 *
 * The version of the OpenAPI document: 1.2.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Fincode\Model;

use OpenAPI\Fincode\ObjectSerializer;

/**
 * @implements \ArrayAccess<string, mixed>
 */
class PaymentListRetrievingDirectDebitQueryParams implements ModelInterface, \ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;
    /**
     * The original name of the model.
     */
    protected static string $openAPIModelName = 'Payment.ListRetrieving.DirectDebit.QueryParams';
    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var array<string, string>
     */
    protected static array $openAPITypes = ['targetDateFrom' => 'string', 'targetDateTo' => 'string', 'withdrawalDateFrom' => 'string', 'withdrawalDateTo' => 'string', 'resultCode' => '\OpenAPI\Fincode\Model\DirectDebitResultCode', 'payPattern' => 'string', 'subscriptionId' => 'string', 'updatedFrom' => 'string', 'updatedTo' => 'string', 'sort' => 'string'];
    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var array<string, string|null>
     */
    protected static array $openAPIFormats = ['targetDateFrom' => null, 'targetDateTo' => null, 'withdrawalDateFrom' => null, 'withdrawalDateTo' => null, 'resultCode' => null, 'payPattern' => null, 'subscriptionId' => null, 'updatedFrom' => null, 'updatedTo' => null, 'sort' => null];
    /**
     * Array of nullable properties. Used for (de)serialization.
     *
     * @var array<string, bool>
     */
    protected static array $openAPINullables = ['targetDateFrom' => true, 'targetDateTo' => true, 'withdrawalDateFrom' => true, 'withdrawalDateTo' => true, 'resultCode' => false, 'payPattern' => false, 'subscriptionId' => false, 'updatedFrom' => false, 'updatedTo' => false, 'sort' => true];
    /**
     * If a nullable field gets set to null, insert it here.
     *
     * @var array<string, bool>
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return array<string, string|null>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties.
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null.
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null.
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable.
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }
    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = ['targetDateFrom' => 'target_date_from', 'targetDateTo' => 'target_date_to', 'withdrawalDateFrom' => 'withdrawal_date_from', 'withdrawalDateTo' => 'withdrawal_date_to', 'resultCode' => 'result_code', 'payPattern' => 'pay_pattern', 'subscriptionId' => 'subscription_id', 'updatedFrom' => 'updated_from', 'updatedTo' => 'updated_to', 'sort' => 'sort'];
    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var array<string, string>
     */
    protected static array $setters = ['targetDateFrom' => 'setTargetDateFrom', 'targetDateTo' => 'setTargetDateTo', 'withdrawalDateFrom' => 'setWithdrawalDateFrom', 'withdrawalDateTo' => 'setWithdrawalDateTo', 'resultCode' => 'setResultCode', 'payPattern' => 'setPayPattern', 'subscriptionId' => 'setSubscriptionId', 'updatedFrom' => 'setUpdatedFrom', 'updatedTo' => 'setUpdatedTo', 'sort' => 'setSort'];
    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var array<string, string>
     */
    protected static array $getters = ['targetDateFrom' => 'getTargetDateFrom', 'targetDateTo' => 'getTargetDateTo', 'withdrawalDateFrom' => 'getWithdrawalDateFrom', 'withdrawalDateTo' => 'getWithdrawalDateTo', 'resultCode' => 'getResultCode', 'payPattern' => 'getPayPattern', 'subscriptionId' => 'getSubscriptionId', 'updatedFrom' => 'getUpdatedFrom', 'updatedTo' => 'getUpdatedTo', 'sort' => 'getSort'];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }
    public const PAY_PATTERN_ONETIME = 'onetime';
    public const PAY_PATTERN_SUBSCRIPTION = 'subscription';

    /**
     * Gets allowable values of the enum.
     *
     * @return list<string>
     */
    public function getPayPatternAllowableValues(): array
    {
        return [self::PAY_PATTERN_ONETIME, self::PAY_PATTERN_SUBSCRIPTION];
    }
    /**
     * Associative array for storing property values.
     *
     * @phpstan-var array<string, mixed>
     *
     * @psalm-var array<string, mixed>
     */
    protected array $container = [];

    /**
     * Constructor.
     *
     * @param array<string, mixed> $data Associated array of property values
     *                                   initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('targetDateFrom', $data ?? [], null);
        $this->setIfExists('targetDateTo', $data ?? [], null);
        $this->setIfExists('withdrawalDateFrom', $data ?? [], null);
        $this->setIfExists('withdrawalDateTo', $data ?? [], null);
        $this->setIfExists('resultCode', $data ?? [], null);
        $this->setIfExists('payPattern', $data ?? [], null);
        $this->setIfExists('subscriptionId', $data ?? [], null);
        $this->setIfExists('updatedFrom', $data ?? [], null);
        $this->setIfExists('updatedTo', $data ?? [], null);
        $this->setIfExists('sort', $data ?? [], null);
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array.
     *
     * @param array<string, mixed> $fields
     */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }
        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return list<string> invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];
        $allowedValues = $this->getPayPatternAllowableValues();
        if (!is_null($this->container['payPattern']) && !in_array($this->container['payPattern'], $allowedValues, true)) {
            $invalidProperties[] = sprintf("invalid value '%s' for 'payPattern', must be one of '%s'", $this->container['payPattern'], implode("', '", $allowedValues));
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return 0 === count($this->listInvalidProperties());
    }

    /**
     * Gets targetDateFrom.
     *
     * @return string|null
     */
    public function getTargetDateFrom(): mixed
    {
        return $this->container['targetDateFrom'];
    }

    /**
     * Sets targetDateFrom.
     *
     * @param string|null $targetDateFrom 振替指定日（始値）\\ 振替指定日（`target_date`）を対象に範囲検索を行います。この日付以降に振替指定日が設定されている決済情報を取得します。\\ \\ 形式： `yyyy/MM/dd`
     */
    public function setTargetDateFrom(mixed $targetDateFrom): static
    {
        if (is_null($targetDateFrom)) {
            $this->openAPINullablesSetToNull[] = 'targetDateFrom';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('targetDateFrom', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['targetDateFrom'] = $targetDateFrom;

        return $this;
    }

    /**
     * Gets targetDateTo.
     *
     * @return string|null
     */
    public function getTargetDateTo(): mixed
    {
        return $this->container['targetDateTo'];
    }

    /**
     * Sets targetDateTo.
     *
     * @param string|null $targetDateTo 振替指定日（終値）\\ 振替指定日（`target_date`）を対象に範囲検索を行います。この日付以前に振替指定日が設定されている決済情報を取得します。\\ \\ 形式： `yyyy/MM/dd`
     */
    public function setTargetDateTo(mixed $targetDateTo): static
    {
        if (is_null($targetDateTo)) {
            $this->openAPINullablesSetToNull[] = 'targetDateTo';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('targetDateTo', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['targetDateTo'] = $targetDateTo;

        return $this;
    }

    /**
     * Gets withdrawalDateFrom.
     *
     * @return string|null
     */
    public function getWithdrawalDateFrom(): mixed
    {
        return $this->container['withdrawalDateFrom'];
    }

    /**
     * Sets withdrawalDateFrom.
     *
     * @param string|null $withdrawalDateFrom 引き落とし日（始値）\\ 引き落とし日（`withdrawal_date`）を対象に範囲検索を行います。この日付以降に引き落としが行われた決済情報を取得します。\\ \\ 形式： `yyyy/MM/dd`
     */
    public function setWithdrawalDateFrom(mixed $withdrawalDateFrom): static
    {
        if (is_null($withdrawalDateFrom)) {
            $this->openAPINullablesSetToNull[] = 'withdrawalDateFrom';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('withdrawalDateFrom', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['withdrawalDateFrom'] = $withdrawalDateFrom;

        return $this;
    }

    /**
     * Gets withdrawalDateTo.
     *
     * @return string|null
     */
    public function getWithdrawalDateTo(): mixed
    {
        return $this->container['withdrawalDateTo'];
    }

    /**
     * Sets withdrawalDateTo.
     *
     * @param string|null $withdrawalDateTo 引き落とし日（終値）\\ 引き落とし日（`withdrawal_date`）を対象に範囲検索を行います。この日付以前に引き落としが行われた決済情報を取得します。\\ \\ 形式： `yyyy/MM/dd`
     */
    public function setWithdrawalDateTo(mixed $withdrawalDateTo): static
    {
        if (is_null($withdrawalDateTo)) {
            $this->openAPINullablesSetToNull[] = 'withdrawalDateTo';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('withdrawalDateTo', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['withdrawalDateTo'] = $withdrawalDateTo;

        return $this;
    }

    /**
     * Gets resultCode.
     *
     * @return DirectDebitResultCode|null
     */
    public function getResultCode(): mixed
    {
        return $this->container['resultCode'];
    }

    /**
     * Sets resultCode.
     *
     * @param DirectDebitResultCode $resultCode 振替結果コード\\ 指定した振替結果の決済情報を取得します。カンマ区切りにすることで複数指定（OR検索）できます。  - `0`: 振替成功 - `1`: 残高不足（失敗） - `2`: 預金取引無し（失敗） - `3`: 購入者事由（失敗） - `4`: 依頼書未着・不備（失敗） - `8`: ショップ事由（失敗） - `9`: その他（失敗） - `E`: データエラー（失敗） - `N`: 振替結果未着（失敗）
     */
    public function setResultCode(mixed $resultCode): static
    {
        if (is_null($resultCode)) {
            throw new \InvalidArgumentException('non-nullable resultCode cannot be null');
        }
        $this->container['resultCode'] = $resultCode;

        return $this;
    }

    /**
     * Gets payPattern.
     *
     * @return string|null
     */
    public function getPayPattern(): mixed
    {
        return $this->container['payPattern'];
    }

    /**
     * Sets payPattern.
     *
     * @param string $payPattern 課金種別\\ 指定した課金種別の決済情報を取得します。カンマ区切りにすることで複数指定（OR検索）できます。  - `onetime`: サブスクリプションでない都度払い - `subscription`: サブスクリプション
     */
    public function setPayPattern(mixed $payPattern): static
    {
        if (is_null($payPattern)) {
            throw new \InvalidArgumentException('non-nullable payPattern cannot be null');
        }
        $allowedValues = $this->getPayPatternAllowableValues();
        if (!in_array($payPattern, $allowedValues, true)) {
            throw new \InvalidArgumentException(sprintf("Invalid value '%s' for 'payPattern', must be one of '%s'", $payPattern, implode("', '", $allowedValues)));
        }
        $this->container['payPattern'] = $payPattern;

        return $this;
    }

    /**
     * Gets subscriptionId.
     *
     * @return string|null
     */
    public function getSubscriptionId(): mixed
    {
        return $this->container['subscriptionId'];
    }

    /**
     * Sets subscriptionId.
     *
     * @param string $subscriptionId サブスクリプションID\\ サブスクリプションIDを指定して、指定したサブスクリプションによって作成された決済情報を取得します
     */
    public function setSubscriptionId(mixed $subscriptionId): static
    {
        if (is_null($subscriptionId)) {
            throw new \InvalidArgumentException('non-nullable subscriptionId cannot be null');
        }
        $this->container['subscriptionId'] = $subscriptionId;

        return $this;
    }

    /**
     * Gets updatedFrom.
     *
     * @return string|null
     */
    public function getUpdatedFrom(): mixed
    {
        return $this->container['updatedFrom'];
    }

    /**
     * Sets updatedFrom.
     *
     * @param string $updatedFrom 更新日（始値）\\ \\ 更新日時（`updated`）を対象に範囲検索を行います。この日付以降に更新された決済情報を取得します。\\ 形式：`yyyy/MM/dd`
     */
    public function setUpdatedFrom(mixed $updatedFrom): static
    {
        if (is_null($updatedFrom)) {
            throw new \InvalidArgumentException('non-nullable updatedFrom cannot be null');
        }
        $this->container['updatedFrom'] = $updatedFrom;

        return $this;
    }

    /**
     * Gets updatedTo.
     *
     * @return string|null
     */
    public function getUpdatedTo(): mixed
    {
        return $this->container['updatedTo'];
    }

    /**
     * Sets updatedTo.
     *
     * @param string $updatedTo 更新日（終値）\\ \\ 更新日時（`updated`）を対象に範囲検索を行います。この日付以前に更新された決済情報を取得します。\\ 形式：`yyyy/MM/dd`
     */
    public function setUpdatedTo(mixed $updatedTo): static
    {
        if (is_null($updatedTo)) {
            throw new \InvalidArgumentException('non-nullable updatedTo cannot be null');
        }
        $this->container['updatedTo'] = $updatedTo;

        return $this;
    }

    /**
     * Gets sort.
     *
     * @return string|null
     */
    public function getSort(): mixed
    {
        return $this->container['sort'];
    }

    /**
     * Sets sort.
     *
     * @param string|null $sort ソートする項目と順序を指定します。\\ 例： `?sort=updated␣desc,created␣asc`\\ \\ ソート可能な項目  - `status`: ステータス - `process_data`: 処理日時 - `total_amount`: 合計金額 - `target_date`: 振替指定日 - `withdrawal_date`: 引き落とし日 - `created`: 作成日時 - `updated`: 更新日時
     */
    public function setSort(mixed $sort): static
    {
        if (is_null($sort)) {
            $this->openAPINullablesSetToNull[] = 'sort';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sort', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sort'] = $sort;

        return $this;
    }

    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @see https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    public function jsonSerialize(): mixed
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object.
     */
    public function __toString(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
    }

    /**
     * Gets a header-safe presentation of the object.
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
