<?php

declare(strict_types=1);
/**
 * fincode API.
 *
 * fincodeのAPIリファレンスです。\\ fincodeは決済情報のほか様々なリソースを管理できるため、リソース指向なREST APIをベースとしたインターフェイス設計のもとでAPIを提供しています。\\ APIの呼び出しにはAPIキーによる認証が必要であり、リクエストの際に`Authorization`ヘッダーに有効なAPIキーをセットすることで認証できます。
 *
 * The version of the OpenAPI document: 1.2.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Fincode\Model;

use OpenAPI\Fincode\ObjectSerializer;

/**
 * @implements \ArrayAccess<string, mixed>
 */
class ContractInfoV2 implements ModelInterface, \ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;
    /**
     * The original name of the model.
     */
    protected static string $openAPIModelName = 'ContractInfo.V2';
    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var array<string, string>
     */
    protected static array $openAPITypes = ['representativeLastName' => 'string', 'representativeLastNameKana' => 'string', 'representativeFirstName' => 'string', 'representativeFirstNameKana' => 'string', 'representativePostalCode' => 'string', 'representativePrefecture' => 'string', 'representativePrefectureKana' => 'string', 'representativeAddressMunicipality' => 'string', 'representativeAddressMunicipalityKana' => 'string', 'representativeAddressSection' => 'string', 'representativeAddressSectionKana' => 'string', 'representativeAddressChrome' => 'string', 'representativeAddressChromeKana' => 'string', 'representativeAddressBuildingName' => 'string', 'representativeAddressBuildingNameKana' => 'string', 'representativeTel' => 'string', 'representativeBirthday' => 'string', 'representativeGender' => 'int', 'staff1LastName' => 'string', 'staff1LastNameKana' => 'string', 'staff1FirstName' => 'string', 'staff1FirstNameKana' => 'string', 'staff1CompanyName' => 'string', 'staff1Belongs' => 'string', 'staff1Tel' => 'string', 'staff1Mail' => 'string', 'staff2LastName' => 'string', 'staff2LastNameKana' => 'string', 'staff2FirstName' => 'string', 'staff2FirstNameKana' => 'string', 'staff2CompanyName' => 'string', 'staff2Belongs' => 'string', 'staff2Tel' => 'string', 'staff2Mail' => 'string', 'corporate' => 'bool', 'corporateInfo' => '\OpenAPI\Fincode\Model\CorporateInfoV2'];
    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var array<string, string|null>
     */
    protected static array $openAPIFormats = ['representativeLastName' => null, 'representativeLastNameKana' => null, 'representativeFirstName' => null, 'representativeFirstNameKana' => null, 'representativePostalCode' => null, 'representativePrefecture' => null, 'representativePrefectureKana' => null, 'representativeAddressMunicipality' => null, 'representativeAddressMunicipalityKana' => null, 'representativeAddressSection' => null, 'representativeAddressSectionKana' => null, 'representativeAddressChrome' => null, 'representativeAddressChromeKana' => null, 'representativeAddressBuildingName' => null, 'representativeAddressBuildingNameKana' => null, 'representativeTel' => null, 'representativeBirthday' => null, 'representativeGender' => null, 'staff1LastName' => null, 'staff1LastNameKana' => null, 'staff1FirstName' => null, 'staff1FirstNameKana' => null, 'staff1CompanyName' => null, 'staff1Belongs' => null, 'staff1Tel' => null, 'staff1Mail' => 'email', 'staff2LastName' => null, 'staff2LastNameKana' => null, 'staff2FirstName' => null, 'staff2FirstNameKana' => null, 'staff2CompanyName' => null, 'staff2Belongs' => null, 'staff2Tel' => null, 'staff2Mail' => 'email', 'corporate' => null, 'corporateInfo' => null];
    /**
     * Array of nullable properties. Used for (de)serialization.
     *
     * @var array<string, bool>
     */
    protected static array $openAPINullables = ['representativeLastName' => true, 'representativeLastNameKana' => true, 'representativeFirstName' => true, 'representativeFirstNameKana' => true, 'representativePostalCode' => true, 'representativePrefecture' => true, 'representativePrefectureKana' => true, 'representativeAddressMunicipality' => true, 'representativeAddressMunicipalityKana' => true, 'representativeAddressSection' => true, 'representativeAddressSectionKana' => true, 'representativeAddressChrome' => true, 'representativeAddressChromeKana' => true, 'representativeAddressBuildingName' => true, 'representativeAddressBuildingNameKana' => true, 'representativeTel' => true, 'representativeBirthday' => true, 'representativeGender' => true, 'staff1LastName' => true, 'staff1LastNameKana' => true, 'staff1FirstName' => true, 'staff1FirstNameKana' => true, 'staff1CompanyName' => true, 'staff1Belongs' => true, 'staff1Tel' => true, 'staff1Mail' => true, 'staff2LastName' => true, 'staff2LastNameKana' => true, 'staff2FirstName' => true, 'staff2FirstNameKana' => true, 'staff2CompanyName' => true, 'staff2Belongs' => true, 'staff2Tel' => true, 'staff2Mail' => true, 'corporate' => true, 'corporateInfo' => true];
    /**
     * If a nullable field gets set to null, insert it here.
     *
     * @var array<string, bool>
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return array<string, string|null>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties.
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null.
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null.
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable.
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }
    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = ['representativeLastName' => 'representative_last_name', 'representativeLastNameKana' => 'representative_last_name_kana', 'representativeFirstName' => 'representative_first_name', 'representativeFirstNameKana' => 'representative_first_name_kana', 'representativePostalCode' => 'representative_postal_code', 'representativePrefecture' => 'representative_prefecture', 'representativePrefectureKana' => 'representative_prefecture_kana', 'representativeAddressMunicipality' => 'representative_address_municipality', 'representativeAddressMunicipalityKana' => 'representative_address_municipality_kana', 'representativeAddressSection' => 'representative_address_section', 'representativeAddressSectionKana' => 'representative_address_section_kana', 'representativeAddressChrome' => 'representative_address_chrome', 'representativeAddressChromeKana' => 'representative_address_chrome_kana', 'representativeAddressBuildingName' => 'representative_address_building_name', 'representativeAddressBuildingNameKana' => 'representative_address_building_name_kana', 'representativeTel' => 'representative_tel', 'representativeBirthday' => 'representative_birthday', 'representativeGender' => 'representative_gender', 'staff1LastName' => 'staff1_last_name', 'staff1LastNameKana' => 'staff1_last_name_kana', 'staff1FirstName' => 'staff1_first_name', 'staff1FirstNameKana' => 'staff1_first_name_kana', 'staff1CompanyName' => 'staff1_company_name', 'staff1Belongs' => 'staff1_belongs', 'staff1Tel' => 'staff1_tel', 'staff1Mail' => 'staff1_mail', 'staff2LastName' => 'staff2_last_name', 'staff2LastNameKana' => 'staff2_last_name_kana', 'staff2FirstName' => 'staff2_first_name', 'staff2FirstNameKana' => 'staff2_first_name_kana', 'staff2CompanyName' => 'staff2_company_name', 'staff2Belongs' => 'staff2_belongs', 'staff2Tel' => 'staff2_tel', 'staff2Mail' => 'staff2_mail', 'corporate' => 'corporate', 'corporateInfo' => 'corporate_info'];
    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var array<string, string>
     */
    protected static array $setters = ['representativeLastName' => 'setRepresentativeLastName', 'representativeLastNameKana' => 'setRepresentativeLastNameKana', 'representativeFirstName' => 'setRepresentativeFirstName', 'representativeFirstNameKana' => 'setRepresentativeFirstNameKana', 'representativePostalCode' => 'setRepresentativePostalCode', 'representativePrefecture' => 'setRepresentativePrefecture', 'representativePrefectureKana' => 'setRepresentativePrefectureKana', 'representativeAddressMunicipality' => 'setRepresentativeAddressMunicipality', 'representativeAddressMunicipalityKana' => 'setRepresentativeAddressMunicipalityKana', 'representativeAddressSection' => 'setRepresentativeAddressSection', 'representativeAddressSectionKana' => 'setRepresentativeAddressSectionKana', 'representativeAddressChrome' => 'setRepresentativeAddressChrome', 'representativeAddressChromeKana' => 'setRepresentativeAddressChromeKana', 'representativeAddressBuildingName' => 'setRepresentativeAddressBuildingName', 'representativeAddressBuildingNameKana' => 'setRepresentativeAddressBuildingNameKana', 'representativeTel' => 'setRepresentativeTel', 'representativeBirthday' => 'setRepresentativeBirthday', 'representativeGender' => 'setRepresentativeGender', 'staff1LastName' => 'setStaff1LastName', 'staff1LastNameKana' => 'setStaff1LastNameKana', 'staff1FirstName' => 'setStaff1FirstName', 'staff1FirstNameKana' => 'setStaff1FirstNameKana', 'staff1CompanyName' => 'setStaff1CompanyName', 'staff1Belongs' => 'setStaff1Belongs', 'staff1Tel' => 'setStaff1Tel', 'staff1Mail' => 'setStaff1Mail', 'staff2LastName' => 'setStaff2LastName', 'staff2LastNameKana' => 'setStaff2LastNameKana', 'staff2FirstName' => 'setStaff2FirstName', 'staff2FirstNameKana' => 'setStaff2FirstNameKana', 'staff2CompanyName' => 'setStaff2CompanyName', 'staff2Belongs' => 'setStaff2Belongs', 'staff2Tel' => 'setStaff2Tel', 'staff2Mail' => 'setStaff2Mail', 'corporate' => 'setCorporate', 'corporateInfo' => 'setCorporateInfo'];
    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var array<string, string>
     */
    protected static array $getters = ['representativeLastName' => 'getRepresentativeLastName', 'representativeLastNameKana' => 'getRepresentativeLastNameKana', 'representativeFirstName' => 'getRepresentativeFirstName', 'representativeFirstNameKana' => 'getRepresentativeFirstNameKana', 'representativePostalCode' => 'getRepresentativePostalCode', 'representativePrefecture' => 'getRepresentativePrefecture', 'representativePrefectureKana' => 'getRepresentativePrefectureKana', 'representativeAddressMunicipality' => 'getRepresentativeAddressMunicipality', 'representativeAddressMunicipalityKana' => 'getRepresentativeAddressMunicipalityKana', 'representativeAddressSection' => 'getRepresentativeAddressSection', 'representativeAddressSectionKana' => 'getRepresentativeAddressSectionKana', 'representativeAddressChrome' => 'getRepresentativeAddressChrome', 'representativeAddressChromeKana' => 'getRepresentativeAddressChromeKana', 'representativeAddressBuildingName' => 'getRepresentativeAddressBuildingName', 'representativeAddressBuildingNameKana' => 'getRepresentativeAddressBuildingNameKana', 'representativeTel' => 'getRepresentativeTel', 'representativeBirthday' => 'getRepresentativeBirthday', 'representativeGender' => 'getRepresentativeGender', 'staff1LastName' => 'getStaff1LastName', 'staff1LastNameKana' => 'getStaff1LastNameKana', 'staff1FirstName' => 'getStaff1FirstName', 'staff1FirstNameKana' => 'getStaff1FirstNameKana', 'staff1CompanyName' => 'getStaff1CompanyName', 'staff1Belongs' => 'getStaff1Belongs', 'staff1Tel' => 'getStaff1Tel', 'staff1Mail' => 'getStaff1Mail', 'staff2LastName' => 'getStaff2LastName', 'staff2LastNameKana' => 'getStaff2LastNameKana', 'staff2FirstName' => 'getStaff2FirstName', 'staff2FirstNameKana' => 'getStaff2FirstNameKana', 'staff2CompanyName' => 'getStaff2CompanyName', 'staff2Belongs' => 'getStaff2Belongs', 'staff2Tel' => 'getStaff2Tel', 'staff2Mail' => 'getStaff2Mail', 'corporate' => 'getCorporate', 'corporateInfo' => 'getCorporateInfo'];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }
    public const REPRESENTATIVE_GENDER_NUMBER_0 = 0;
    public const REPRESENTATIVE_GENDER_NUMBER_1 = 1;

    /**
     * Gets allowable values of the enum.
     *
     * @return list<string>
     */
    public function getRepresentativeGenderAllowableValues(): array
    {
        return [self::REPRESENTATIVE_GENDER_NUMBER_0, self::REPRESENTATIVE_GENDER_NUMBER_1];
    }
    /**
     * Associative array for storing property values.
     *
     * @phpstan-var array<string, mixed>
     *
     * @psalm-var array<string, mixed>
     */
    protected array $container = [];

    /**
     * Constructor.
     *
     * @param array<string, mixed> $data Associated array of property values
     *                                   initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('representativeLastName', $data ?? [], null);
        $this->setIfExists('representativeLastNameKana', $data ?? [], null);
        $this->setIfExists('representativeFirstName', $data ?? [], null);
        $this->setIfExists('representativeFirstNameKana', $data ?? [], null);
        $this->setIfExists('representativePostalCode', $data ?? [], null);
        $this->setIfExists('representativePrefecture', $data ?? [], null);
        $this->setIfExists('representativePrefectureKana', $data ?? [], null);
        $this->setIfExists('representativeAddressMunicipality', $data ?? [], null);
        $this->setIfExists('representativeAddressMunicipalityKana', $data ?? [], null);
        $this->setIfExists('representativeAddressSection', $data ?? [], null);
        $this->setIfExists('representativeAddressSectionKana', $data ?? [], null);
        $this->setIfExists('representativeAddressChrome', $data ?? [], null);
        $this->setIfExists('representativeAddressChromeKana', $data ?? [], null);
        $this->setIfExists('representativeAddressBuildingName', $data ?? [], null);
        $this->setIfExists('representativeAddressBuildingNameKana', $data ?? [], null);
        $this->setIfExists('representativeTel', $data ?? [], null);
        $this->setIfExists('representativeBirthday', $data ?? [], null);
        $this->setIfExists('representativeGender', $data ?? [], null);
        $this->setIfExists('staff1LastName', $data ?? [], null);
        $this->setIfExists('staff1LastNameKana', $data ?? [], null);
        $this->setIfExists('staff1FirstName', $data ?? [], null);
        $this->setIfExists('staff1FirstNameKana', $data ?? [], null);
        $this->setIfExists('staff1CompanyName', $data ?? [], null);
        $this->setIfExists('staff1Belongs', $data ?? [], null);
        $this->setIfExists('staff1Tel', $data ?? [], null);
        $this->setIfExists('staff1Mail', $data ?? [], null);
        $this->setIfExists('staff2LastName', $data ?? [], null);
        $this->setIfExists('staff2LastNameKana', $data ?? [], null);
        $this->setIfExists('staff2FirstName', $data ?? [], null);
        $this->setIfExists('staff2FirstNameKana', $data ?? [], null);
        $this->setIfExists('staff2CompanyName', $data ?? [], null);
        $this->setIfExists('staff2Belongs', $data ?? [], null);
        $this->setIfExists('staff2Tel', $data ?? [], null);
        $this->setIfExists('staff2Mail', $data ?? [], null);
        $this->setIfExists('corporate', $data ?? [], null);
        $this->setIfExists('corporateInfo', $data ?? [], null);
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array.
     *
     * @param array<string, mixed> $fields
     */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }
        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return list<string> invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];
        if (null === $this->container['representativeLastName']) {
            $invalidProperties[] = "'representativeLastName' can't be null";
        }
        if (mb_strlen($this->container['representativeLastName']) > 20) {
            $invalidProperties[] = "invalid value for 'representativeLastName', the character length must be smaller than or equal to 20.";
        }
        if (mb_strlen($this->container['representativeLastName']) < 1) {
            $invalidProperties[] = "invalid value for 'representativeLastName', the character length must be bigger than or equal to 1.";
        }
        if (null === $this->container['representativeLastNameKana']) {
            $invalidProperties[] = "'representativeLastNameKana' can't be null";
        }
        if (mb_strlen($this->container['representativeLastNameKana']) > 20) {
            $invalidProperties[] = "invalid value for 'representativeLastNameKana', the character length must be smaller than or equal to 20.";
        }
        if (mb_strlen($this->container['representativeLastNameKana']) < 1) {
            $invalidProperties[] = "invalid value for 'representativeLastNameKana', the character length must be bigger than or equal to 1.";
        }
        if (null === $this->container['representativeFirstName']) {
            $invalidProperties[] = "'representativeFirstName' can't be null";
        }
        if (mb_strlen($this->container['representativeFirstName']) > 20) {
            $invalidProperties[] = "invalid value for 'representativeFirstName', the character length must be smaller than or equal to 20.";
        }
        if (mb_strlen($this->container['representativeFirstName']) < 1) {
            $invalidProperties[] = "invalid value for 'representativeFirstName', the character length must be bigger than or equal to 1.";
        }
        if (null === $this->container['representativeFirstNameKana']) {
            $invalidProperties[] = "'representativeFirstNameKana' can't be null";
        }
        if (mb_strlen($this->container['representativeFirstNameKana']) > 20) {
            $invalidProperties[] = "invalid value for 'representativeFirstNameKana', the character length must be smaller than or equal to 20.";
        }
        if (mb_strlen($this->container['representativeFirstNameKana']) < 1) {
            $invalidProperties[] = "invalid value for 'representativeFirstNameKana', the character length must be bigger than or equal to 1.";
        }
        if (null === $this->container['representativePostalCode']) {
            $invalidProperties[] = "'representativePostalCode' can't be null";
        }
        if (mb_strlen($this->container['representativePostalCode']) > 8) {
            $invalidProperties[] = "invalid value for 'representativePostalCode', the character length must be smaller than or equal to 8.";
        }
        if (mb_strlen($this->container['representativePostalCode']) < 8) {
            $invalidProperties[] = "invalid value for 'representativePostalCode', the character length must be bigger than or equal to 8.";
        }
        if (!preg_match('/^\\d{3}-\\d{4}$/', $this->container['representativePostalCode'])) {
            $invalidProperties[] = "invalid value for 'representativePostalCode', must be conform to the pattern /^\\d{3}-\\d{4}\$/.";
        }
        if (null === $this->container['representativePrefecture']) {
            $invalidProperties[] = "'representativePrefecture' can't be null";
        }
        if (mb_strlen($this->container['representativePrefecture']) > 4) {
            $invalidProperties[] = "invalid value for 'representativePrefecture', the character length must be smaller than or equal to 4.";
        }
        if (mb_strlen($this->container['representativePrefecture']) < 1) {
            $invalidProperties[] = "invalid value for 'representativePrefecture', the character length must be bigger than or equal to 1.";
        }
        if (null === $this->container['representativePrefectureKana']) {
            $invalidProperties[] = "'representativePrefectureKana' can't be null";
        }
        if (mb_strlen($this->container['representativePrefectureKana']) > 6) {
            $invalidProperties[] = "invalid value for 'representativePrefectureKana', the character length must be smaller than or equal to 6.";
        }
        if (mb_strlen($this->container['representativePrefectureKana']) < 1) {
            $invalidProperties[] = "invalid value for 'representativePrefectureKana', the character length must be bigger than or equal to 1.";
        }
        if (null === $this->container['representativeAddressMunicipality']) {
            $invalidProperties[] = "'representativeAddressMunicipality' can't be null";
        }
        if (mb_strlen($this->container['representativeAddressMunicipality']) > 50) {
            $invalidProperties[] = "invalid value for 'representativeAddressMunicipality', the character length must be smaller than or equal to 50.";
        }
        if (mb_strlen($this->container['representativeAddressMunicipality']) < 1) {
            $invalidProperties[] = "invalid value for 'representativeAddressMunicipality', the character length must be bigger than or equal to 1.";
        }
        if (null === $this->container['representativeAddressMunicipalityKana']) {
            $invalidProperties[] = "'representativeAddressMunicipalityKana' can't be null";
        }
        if (mb_strlen($this->container['representativeAddressMunicipalityKana']) > 100) {
            $invalidProperties[] = "invalid value for 'representativeAddressMunicipalityKana', the character length must be smaller than or equal to 100.";
        }
        if (mb_strlen($this->container['representativeAddressMunicipalityKana']) < 1) {
            $invalidProperties[] = "invalid value for 'representativeAddressMunicipalityKana', the character length must be bigger than or equal to 1.";
        }
        if (null === $this->container['representativeAddressSection']) {
            $invalidProperties[] = "'representativeAddressSection' can't be null";
        }
        if (mb_strlen($this->container['representativeAddressSection']) > 50) {
            $invalidProperties[] = "invalid value for 'representativeAddressSection', the character length must be smaller than or equal to 50.";
        }
        if (mb_strlen($this->container['representativeAddressSection']) < 1) {
            $invalidProperties[] = "invalid value for 'representativeAddressSection', the character length must be bigger than or equal to 1.";
        }
        if (null === $this->container['representativeAddressSectionKana']) {
            $invalidProperties[] = "'representativeAddressSectionKana' can't be null";
        }
        if (mb_strlen($this->container['representativeAddressSectionKana']) > 100) {
            $invalidProperties[] = "invalid value for 'representativeAddressSectionKana', the character length must be smaller than or equal to 100.";
        }
        if (mb_strlen($this->container['representativeAddressSectionKana']) < 1) {
            $invalidProperties[] = "invalid value for 'representativeAddressSectionKana', the character length must be bigger than or equal to 1.";
        }
        if (null === $this->container['representativeAddressChrome']) {
            $invalidProperties[] = "'representativeAddressChrome' can't be null";
        }
        if (mb_strlen($this->container['representativeAddressChrome']) > 50) {
            $invalidProperties[] = "invalid value for 'representativeAddressChrome', the character length must be smaller than or equal to 50.";
        }
        if (mb_strlen($this->container['representativeAddressChrome']) < 1) {
            $invalidProperties[] = "invalid value for 'representativeAddressChrome', the character length must be bigger than or equal to 1.";
        }
        if (null === $this->container['representativeAddressChromeKana']) {
            $invalidProperties[] = "'representativeAddressChromeKana' can't be null";
        }
        if (mb_strlen($this->container['representativeAddressChromeKana']) > 100) {
            $invalidProperties[] = "invalid value for 'representativeAddressChromeKana', the character length must be smaller than or equal to 100.";
        }
        if (mb_strlen($this->container['representativeAddressChromeKana']) < 1) {
            $invalidProperties[] = "invalid value for 'representativeAddressChromeKana', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['representativeAddressBuildingName']) && mb_strlen($this->container['representativeAddressBuildingName']) > 100) {
            $invalidProperties[] = "invalid value for 'representativeAddressBuildingName', the character length must be smaller than or equal to 100.";
        }
        if (!is_null($this->container['representativeAddressBuildingName']) && mb_strlen($this->container['representativeAddressBuildingName']) < 1) {
            $invalidProperties[] = "invalid value for 'representativeAddressBuildingName', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['representativeAddressBuildingNameKana']) && mb_strlen($this->container['representativeAddressBuildingNameKana']) > 100) {
            $invalidProperties[] = "invalid value for 'representativeAddressBuildingNameKana', the character length must be smaller than or equal to 100.";
        }
        if (!is_null($this->container['representativeAddressBuildingNameKana']) && mb_strlen($this->container['representativeAddressBuildingNameKana']) < 1) {
            $invalidProperties[] = "invalid value for 'representativeAddressBuildingNameKana', the character length must be bigger than or equal to 1.";
        }
        if (null === $this->container['representativeTel']) {
            $invalidProperties[] = "'representativeTel' can't be null";
        }
        if (mb_strlen($this->container['representativeTel']) > 12) {
            $invalidProperties[] = "invalid value for 'representativeTel', the character length must be smaller than or equal to 12.";
        }
        if (mb_strlen($this->container['representativeTel']) < 11) {
            $invalidProperties[] = "invalid value for 'representativeTel', the character length must be bigger than or equal to 11.";
        }
        if (!preg_match('/^\\d{11,12}$/', $this->container['representativeTel'])) {
            $invalidProperties[] = "invalid value for 'representativeTel', must be conform to the pattern /^\\d{11,12}\$/.";
        }
        if (null === $this->container['representativeBirthday']) {
            $invalidProperties[] = "'representativeBirthday' can't be null";
        }
        if (!preg_match('/^\\d{4}\\/\\d{2}\\/\\d{2}$/', $this->container['representativeBirthday'])) {
            $invalidProperties[] = "invalid value for 'representativeBirthday', must be conform to the pattern /^\\d{4}\\/\\d{2}\\/\\d{2}\$/.";
        }
        if (null === $this->container['representativeGender']) {
            $invalidProperties[] = "'representativeGender' can't be null";
        }
        $allowedValues = $this->getRepresentativeGenderAllowableValues();
        if (!is_null($this->container['representativeGender']) && !in_array($this->container['representativeGender'], $allowedValues, true)) {
            $invalidProperties[] = sprintf("invalid value '%s' for 'representativeGender', must be one of '%s'", $this->container['representativeGender'], implode("', '", $allowedValues));
        }
        if (null === $this->container['staff1LastName']) {
            $invalidProperties[] = "'staff1LastName' can't be null";
        }
        if (mb_strlen($this->container['staff1LastName']) > 20) {
            $invalidProperties[] = "invalid value for 'staff1LastName', the character length must be smaller than or equal to 20.";
        }
        if (mb_strlen($this->container['staff1LastName']) < 1) {
            $invalidProperties[] = "invalid value for 'staff1LastName', the character length must be bigger than or equal to 1.";
        }
        if (null === $this->container['staff1LastNameKana']) {
            $invalidProperties[] = "'staff1LastNameKana' can't be null";
        }
        if (mb_strlen($this->container['staff1LastNameKana']) > 20) {
            $invalidProperties[] = "invalid value for 'staff1LastNameKana', the character length must be smaller than or equal to 20.";
        }
        if (mb_strlen($this->container['staff1LastNameKana']) < 1) {
            $invalidProperties[] = "invalid value for 'staff1LastNameKana', the character length must be bigger than or equal to 1.";
        }
        if (null === $this->container['staff1FirstName']) {
            $invalidProperties[] = "'staff1FirstName' can't be null";
        }
        if (mb_strlen($this->container['staff1FirstName']) > 20) {
            $invalidProperties[] = "invalid value for 'staff1FirstName', the character length must be smaller than or equal to 20.";
        }
        if (mb_strlen($this->container['staff1FirstName']) < 1) {
            $invalidProperties[] = "invalid value for 'staff1FirstName', the character length must be bigger than or equal to 1.";
        }
        if (null === $this->container['staff1FirstNameKana']) {
            $invalidProperties[] = "'staff1FirstNameKana' can't be null";
        }
        if (mb_strlen($this->container['staff1FirstNameKana']) > 20) {
            $invalidProperties[] = "invalid value for 'staff1FirstNameKana', the character length must be smaller than or equal to 20.";
        }
        if (mb_strlen($this->container['staff1FirstNameKana']) < 1) {
            $invalidProperties[] = "invalid value for 'staff1FirstNameKana', the character length must be bigger than or equal to 1.";
        }
        if (null === $this->container['staff1CompanyName']) {
            $invalidProperties[] = "'staff1CompanyName' can't be null";
        }
        if (mb_strlen($this->container['staff1CompanyName']) > 150) {
            $invalidProperties[] = "invalid value for 'staff1CompanyName', the character length must be smaller than or equal to 150.";
        }
        if (mb_strlen($this->container['staff1CompanyName']) < 1) {
            $invalidProperties[] = "invalid value for 'staff1CompanyName', the character length must be bigger than or equal to 1.";
        }
        if (null === $this->container['staff1Belongs']) {
            $invalidProperties[] = "'staff1Belongs' can't be null";
        }
        if (mb_strlen($this->container['staff1Belongs']) > 50) {
            $invalidProperties[] = "invalid value for 'staff1Belongs', the character length must be smaller than or equal to 50.";
        }
        if (mb_strlen($this->container['staff1Belongs']) < 1) {
            $invalidProperties[] = "invalid value for 'staff1Belongs', the character length must be bigger than or equal to 1.";
        }
        if (null === $this->container['staff1Tel']) {
            $invalidProperties[] = "'staff1Tel' can't be null";
        }
        if (mb_strlen($this->container['staff1Tel']) > 12) {
            $invalidProperties[] = "invalid value for 'staff1Tel', the character length must be smaller than or equal to 12.";
        }
        if (mb_strlen($this->container['staff1Tel']) < 11) {
            $invalidProperties[] = "invalid value for 'staff1Tel', the character length must be bigger than or equal to 11.";
        }
        if (!preg_match('/^\\d{11,12}$/', $this->container['staff1Tel'])) {
            $invalidProperties[] = "invalid value for 'staff1Tel', must be conform to the pattern /^\\d{11,12}\$/.";
        }
        if (null === $this->container['staff1Mail']) {
            $invalidProperties[] = "'staff1Mail' can't be null";
        }
        if (mb_strlen($this->container['staff1Mail']) > 254) {
            $invalidProperties[] = "invalid value for 'staff1Mail', the character length must be smaller than or equal to 254.";
        }
        if (mb_strlen($this->container['staff1Mail']) < 1) {
            $invalidProperties[] = "invalid value for 'staff1Mail', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['staff2LastName']) && mb_strlen($this->container['staff2LastName']) > 20) {
            $invalidProperties[] = "invalid value for 'staff2LastName', the character length must be smaller than or equal to 20.";
        }
        if (!is_null($this->container['staff2LastName']) && mb_strlen($this->container['staff2LastName']) < 1) {
            $invalidProperties[] = "invalid value for 'staff2LastName', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['staff2LastNameKana']) && mb_strlen($this->container['staff2LastNameKana']) > 20) {
            $invalidProperties[] = "invalid value for 'staff2LastNameKana', the character length must be smaller than or equal to 20.";
        }
        if (!is_null($this->container['staff2LastNameKana']) && mb_strlen($this->container['staff2LastNameKana']) < 1) {
            $invalidProperties[] = "invalid value for 'staff2LastNameKana', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['staff2FirstName']) && mb_strlen($this->container['staff2FirstName']) > 20) {
            $invalidProperties[] = "invalid value for 'staff2FirstName', the character length must be smaller than or equal to 20.";
        }
        if (!is_null($this->container['staff2FirstName']) && mb_strlen($this->container['staff2FirstName']) < 1) {
            $invalidProperties[] = "invalid value for 'staff2FirstName', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['staff2FirstNameKana']) && mb_strlen($this->container['staff2FirstNameKana']) > 20) {
            $invalidProperties[] = "invalid value for 'staff2FirstNameKana', the character length must be smaller than or equal to 20.";
        }
        if (!is_null($this->container['staff2FirstNameKana']) && mb_strlen($this->container['staff2FirstNameKana']) < 1) {
            $invalidProperties[] = "invalid value for 'staff2FirstNameKana', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['staff2CompanyName']) && mb_strlen($this->container['staff2CompanyName']) > 150) {
            $invalidProperties[] = "invalid value for 'staff2CompanyName', the character length must be smaller than or equal to 150.";
        }
        if (!is_null($this->container['staff2CompanyName']) && mb_strlen($this->container['staff2CompanyName']) < 1) {
            $invalidProperties[] = "invalid value for 'staff2CompanyName', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['staff2Belongs']) && mb_strlen($this->container['staff2Belongs']) > 50) {
            $invalidProperties[] = "invalid value for 'staff2Belongs', the character length must be smaller than or equal to 50.";
        }
        if (!is_null($this->container['staff2Belongs']) && mb_strlen($this->container['staff2Belongs']) < 1) {
            $invalidProperties[] = "invalid value for 'staff2Belongs', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['staff2Tel']) && mb_strlen($this->container['staff2Tel']) > 12) {
            $invalidProperties[] = "invalid value for 'staff2Tel', the character length must be smaller than or equal to 12.";
        }
        if (!is_null($this->container['staff2Tel']) && mb_strlen($this->container['staff2Tel']) < 11) {
            $invalidProperties[] = "invalid value for 'staff2Tel', the character length must be bigger than or equal to 11.";
        }
        if (!is_null($this->container['staff2Tel']) && !preg_match('/^\\d{11,12}$/', $this->container['staff2Tel'])) {
            $invalidProperties[] = "invalid value for 'staff2Tel', must be conform to the pattern /^\\d{11,12}\$/.";
        }
        if (!is_null($this->container['staff2Mail']) && mb_strlen($this->container['staff2Mail']) > 254) {
            $invalidProperties[] = "invalid value for 'staff2Mail', the character length must be smaller than or equal to 254.";
        }
        if (!is_null($this->container['staff2Mail']) && mb_strlen($this->container['staff2Mail']) < 1) {
            $invalidProperties[] = "invalid value for 'staff2Mail', the character length must be bigger than or equal to 1.";
        }
        if (null === $this->container['corporate']) {
            $invalidProperties[] = "'corporate' can't be null";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return 0 === count($this->listInvalidProperties());
    }

    /**
     * Gets representativeLastName.
     *
     * @return string
     */
    public function getRepresentativeLastName(): mixed
    {
        return $this->container['representativeLastName'];
    }

    /**
     * Sets representativeLastName.
     *
     * @param string|null $representativeLastName 代表者 姓 形式： 漢字/ひらがな/カタカナ/半角英字
     */
    public function setRepresentativeLastName(mixed $representativeLastName): static
    {
        if (is_null($representativeLastName)) {
            $this->openAPINullablesSetToNull[] = 'representativeLastName';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('representativeLastName', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($representativeLastName) && mb_strlen($representativeLastName) > 20) {
            throw new \InvalidArgumentException('invalid length for $representativeLastName when calling ContractInfoV2., must be smaller than or equal to 20.');
        }
        if (!is_null($representativeLastName) && mb_strlen($representativeLastName) < 1) {
            throw new \InvalidArgumentException('invalid length for $representativeLastName when calling ContractInfoV2., must be bigger than or equal to 1.');
        }
        $this->container['representativeLastName'] = $representativeLastName;

        return $this;
    }

    /**
     * Gets representativeLastNameKana.
     *
     * @return string
     */
    public function getRepresentativeLastNameKana(): mixed
    {
        return $this->container['representativeLastNameKana'];
    }

    /**
     * Sets representativeLastNameKana.
     *
     * @param string|null $representativeLastNameKana 代表者 姓（カナ）\\ 形式： 全角カナ
     */
    public function setRepresentativeLastNameKana(mixed $representativeLastNameKana): static
    {
        if (is_null($representativeLastNameKana)) {
            $this->openAPINullablesSetToNull[] = 'representativeLastNameKana';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('representativeLastNameKana', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($representativeLastNameKana) && mb_strlen($representativeLastNameKana) > 20) {
            throw new \InvalidArgumentException('invalid length for $representativeLastNameKana when calling ContractInfoV2., must be smaller than or equal to 20.');
        }
        if (!is_null($representativeLastNameKana) && mb_strlen($representativeLastNameKana) < 1) {
            throw new \InvalidArgumentException('invalid length for $representativeLastNameKana when calling ContractInfoV2., must be bigger than or equal to 1.');
        }
        $this->container['representativeLastNameKana'] = $representativeLastNameKana;

        return $this;
    }

    /**
     * Gets representativeFirstName.
     *
     * @return string
     */
    public function getRepresentativeFirstName(): mixed
    {
        return $this->container['representativeFirstName'];
    }

    /**
     * Sets representativeFirstName.
     *
     * @param string|null $representativeFirstName 代表者 名\\ 形式： 漢字/ひらがな/カタカナ/半角英字
     */
    public function setRepresentativeFirstName(mixed $representativeFirstName): static
    {
        if (is_null($representativeFirstName)) {
            $this->openAPINullablesSetToNull[] = 'representativeFirstName';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('representativeFirstName', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($representativeFirstName) && mb_strlen($representativeFirstName) > 20) {
            throw new \InvalidArgumentException('invalid length for $representativeFirstName when calling ContractInfoV2., must be smaller than or equal to 20.');
        }
        if (!is_null($representativeFirstName) && mb_strlen($representativeFirstName) < 1) {
            throw new \InvalidArgumentException('invalid length for $representativeFirstName when calling ContractInfoV2., must be bigger than or equal to 1.');
        }
        $this->container['representativeFirstName'] = $representativeFirstName;

        return $this;
    }

    /**
     * Gets representativeFirstNameKana.
     *
     * @return string
     */
    public function getRepresentativeFirstNameKana(): mixed
    {
        return $this->container['representativeFirstNameKana'];
    }

    /**
     * Sets representativeFirstNameKana.
     *
     * @param string|null $representativeFirstNameKana 代表者 名（カナ）\\ 形式： 全角カナ
     */
    public function setRepresentativeFirstNameKana(mixed $representativeFirstNameKana): static
    {
        if (is_null($representativeFirstNameKana)) {
            $this->openAPINullablesSetToNull[] = 'representativeFirstNameKana';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('representativeFirstNameKana', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($representativeFirstNameKana) && mb_strlen($representativeFirstNameKana) > 20) {
            throw new \InvalidArgumentException('invalid length for $representativeFirstNameKana when calling ContractInfoV2., must be smaller than or equal to 20.');
        }
        if (!is_null($representativeFirstNameKana) && mb_strlen($representativeFirstNameKana) < 1) {
            throw new \InvalidArgumentException('invalid length for $representativeFirstNameKana when calling ContractInfoV2., must be bigger than or equal to 1.');
        }
        $this->container['representativeFirstNameKana'] = $representativeFirstNameKana;

        return $this;
    }

    /**
     * Gets representativePostalCode.
     *
     * @return string
     */
    public function getRepresentativePostalCode(): mixed
    {
        return $this->container['representativePostalCode'];
    }

    /**
     * Sets representativePostalCode.
     *
     * @param string|null $representativePostalCode 代表者 住所 郵便番号\\ 形式：`xxx-xxxx`
     */
    public function setRepresentativePostalCode(mixed $representativePostalCode): static
    {
        if (is_null($representativePostalCode)) {
            $this->openAPINullablesSetToNull[] = 'representativePostalCode';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('representativePostalCode', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($representativePostalCode) && mb_strlen($representativePostalCode) > 8) {
            throw new \InvalidArgumentException('invalid length for $representativePostalCode when calling ContractInfoV2., must be smaller than or equal to 8.');
        }
        if (!is_null($representativePostalCode) && mb_strlen($representativePostalCode) < 8) {
            throw new \InvalidArgumentException('invalid length for $representativePostalCode when calling ContractInfoV2., must be bigger than or equal to 8.');
        }
        if (!is_null($representativePostalCode) && is_string($representativePostalCode) && !preg_match('/^\\d{3}-\\d{4}$/', $representativePostalCode)) {
            throw new \InvalidArgumentException('invalid value for $representativePostalCode when calling ContractInfoV2., must conform to the pattern /^\\d{3}-\\d{4}$/.');
        }
        $this->container['representativePostalCode'] = $representativePostalCode;

        return $this;
    }

    /**
     * Gets representativePrefecture.
     *
     * @return string
     */
    public function getRepresentativePrefecture(): mixed
    {
        return $this->container['representativePrefecture'];
    }

    /**
     * Sets representativePrefecture.
     *
     * @param string|null $representativePrefecture 代表者 住所 都道府県\\ 形式： 漢字
     */
    public function setRepresentativePrefecture(mixed $representativePrefecture): static
    {
        if (is_null($representativePrefecture)) {
            $this->openAPINullablesSetToNull[] = 'representativePrefecture';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('representativePrefecture', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($representativePrefecture) && mb_strlen($representativePrefecture) > 4) {
            throw new \InvalidArgumentException('invalid length for $representativePrefecture when calling ContractInfoV2., must be smaller than or equal to 4.');
        }
        if (!is_null($representativePrefecture) && mb_strlen($representativePrefecture) < 1) {
            throw new \InvalidArgumentException('invalid length for $representativePrefecture when calling ContractInfoV2., must be bigger than or equal to 1.');
        }
        $this->container['representativePrefecture'] = $representativePrefecture;

        return $this;
    }

    /**
     * Gets representativePrefectureKana.
     *
     * @return string
     */
    public function getRepresentativePrefectureKana(): mixed
    {
        return $this->container['representativePrefectureKana'];
    }

    /**
     * Sets representativePrefectureKana.
     *
     * @param string|null $representativePrefectureKana 代表者 住所 都道府県（カナ）\\ 形式： 全角カナ
     */
    public function setRepresentativePrefectureKana(mixed $representativePrefectureKana): static
    {
        if (is_null($representativePrefectureKana)) {
            $this->openAPINullablesSetToNull[] = 'representativePrefectureKana';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('representativePrefectureKana', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($representativePrefectureKana) && mb_strlen($representativePrefectureKana) > 6) {
            throw new \InvalidArgumentException('invalid length for $representativePrefectureKana when calling ContractInfoV2., must be smaller than or equal to 6.');
        }
        if (!is_null($representativePrefectureKana) && mb_strlen($representativePrefectureKana) < 1) {
            throw new \InvalidArgumentException('invalid length for $representativePrefectureKana when calling ContractInfoV2., must be bigger than or equal to 1.');
        }
        $this->container['representativePrefectureKana'] = $representativePrefectureKana;

        return $this;
    }

    /**
     * Gets representativeAddressMunicipality.
     *
     * @return string
     */
    public function getRepresentativeAddressMunicipality(): mixed
    {
        return $this->container['representativeAddressMunicipality'];
    }

    /**
     * Sets representativeAddressMunicipality.
     *
     * @param string|null $representativeAddressMunicipality 代表者 住所 市区町村\\ 形式： 漢字/ひらがな/カタカナ/半角英数
     */
    public function setRepresentativeAddressMunicipality(mixed $representativeAddressMunicipality): static
    {
        if (is_null($representativeAddressMunicipality)) {
            $this->openAPINullablesSetToNull[] = 'representativeAddressMunicipality';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('representativeAddressMunicipality', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($representativeAddressMunicipality) && mb_strlen($representativeAddressMunicipality) > 50) {
            throw new \InvalidArgumentException('invalid length for $representativeAddressMunicipality when calling ContractInfoV2., must be smaller than or equal to 50.');
        }
        if (!is_null($representativeAddressMunicipality) && mb_strlen($representativeAddressMunicipality) < 1) {
            throw new \InvalidArgumentException('invalid length for $representativeAddressMunicipality when calling ContractInfoV2., must be bigger than or equal to 1.');
        }
        $this->container['representativeAddressMunicipality'] = $representativeAddressMunicipality;

        return $this;
    }

    /**
     * Gets representativeAddressMunicipalityKana.
     *
     * @return string
     */
    public function getRepresentativeAddressMunicipalityKana(): mixed
    {
        return $this->container['representativeAddressMunicipalityKana'];
    }

    /**
     * Sets representativeAddressMunicipalityKana.
     *
     * @param string|null $representativeAddressMunicipalityKana 代表者 住所 市区町村（カナ）\\ 形式： 全角カナ
     */
    public function setRepresentativeAddressMunicipalityKana(mixed $representativeAddressMunicipalityKana): static
    {
        if (is_null($representativeAddressMunicipalityKana)) {
            $this->openAPINullablesSetToNull[] = 'representativeAddressMunicipalityKana';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('representativeAddressMunicipalityKana', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($representativeAddressMunicipalityKana) && mb_strlen($representativeAddressMunicipalityKana) > 100) {
            throw new \InvalidArgumentException('invalid length for $representativeAddressMunicipalityKana when calling ContractInfoV2., must be smaller than or equal to 100.');
        }
        if (!is_null($representativeAddressMunicipalityKana) && mb_strlen($representativeAddressMunicipalityKana) < 1) {
            throw new \InvalidArgumentException('invalid length for $representativeAddressMunicipalityKana when calling ContractInfoV2., must be bigger than or equal to 1.');
        }
        $this->container['representativeAddressMunicipalityKana'] = $representativeAddressMunicipalityKana;

        return $this;
    }

    /**
     * Gets representativeAddressSection.
     *
     * @return string
     */
    public function getRepresentativeAddressSection(): mixed
    {
        return $this->container['representativeAddressSection'];
    }

    /**
     * Sets representativeAddressSection.
     *
     * @param string|null $representativeAddressSection 代表者 住所 町域\\ 形式： 漢字/ひらがな/カタカナ/半角英数
     */
    public function setRepresentativeAddressSection(mixed $representativeAddressSection): static
    {
        if (is_null($representativeAddressSection)) {
            $this->openAPINullablesSetToNull[] = 'representativeAddressSection';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('representativeAddressSection', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($representativeAddressSection) && mb_strlen($representativeAddressSection) > 50) {
            throw new \InvalidArgumentException('invalid length for $representativeAddressSection when calling ContractInfoV2., must be smaller than or equal to 50.');
        }
        if (!is_null($representativeAddressSection) && mb_strlen($representativeAddressSection) < 1) {
            throw new \InvalidArgumentException('invalid length for $representativeAddressSection when calling ContractInfoV2., must be bigger than or equal to 1.');
        }
        $this->container['representativeAddressSection'] = $representativeAddressSection;

        return $this;
    }

    /**
     * Gets representativeAddressSectionKana.
     *
     * @return string
     */
    public function getRepresentativeAddressSectionKana(): mixed
    {
        return $this->container['representativeAddressSectionKana'];
    }

    /**
     * Sets representativeAddressSectionKana.
     *
     * @param string|null $representativeAddressSectionKana 代表者 住所 町域（カナ）\\ 形式： 全角カナ
     */
    public function setRepresentativeAddressSectionKana(mixed $representativeAddressSectionKana): static
    {
        if (is_null($representativeAddressSectionKana)) {
            $this->openAPINullablesSetToNull[] = 'representativeAddressSectionKana';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('representativeAddressSectionKana', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($representativeAddressSectionKana) && mb_strlen($representativeAddressSectionKana) > 100) {
            throw new \InvalidArgumentException('invalid length for $representativeAddressSectionKana when calling ContractInfoV2., must be smaller than or equal to 100.');
        }
        if (!is_null($representativeAddressSectionKana) && mb_strlen($representativeAddressSectionKana) < 1) {
            throw new \InvalidArgumentException('invalid length for $representativeAddressSectionKana when calling ContractInfoV2., must be bigger than or equal to 1.');
        }
        $this->container['representativeAddressSectionKana'] = $representativeAddressSectionKana;

        return $this;
    }

    /**
     * Gets representativeAddressChrome.
     *
     * @return string
     */
    public function getRepresentativeAddressChrome(): mixed
    {
        return $this->container['representativeAddressChrome'];
    }

    /**
     * Sets representativeAddressChrome.
     *
     * @param string|null $representativeAddressChrome 代表者 住所 番地\\ 形式： 漢字/ひらがな/カタカナ/半角英数
     */
    public function setRepresentativeAddressChrome(mixed $representativeAddressChrome): static
    {
        if (is_null($representativeAddressChrome)) {
            $this->openAPINullablesSetToNull[] = 'representativeAddressChrome';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('representativeAddressChrome', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($representativeAddressChrome) && mb_strlen($representativeAddressChrome) > 50) {
            throw new \InvalidArgumentException('invalid length for $representativeAddressChrome when calling ContractInfoV2., must be smaller than or equal to 50.');
        }
        if (!is_null($representativeAddressChrome) && mb_strlen($representativeAddressChrome) < 1) {
            throw new \InvalidArgumentException('invalid length for $representativeAddressChrome when calling ContractInfoV2., must be bigger than or equal to 1.');
        }
        $this->container['representativeAddressChrome'] = $representativeAddressChrome;

        return $this;
    }

    /**
     * Gets representativeAddressChromeKana.
     *
     * @return string
     */
    public function getRepresentativeAddressChromeKana(): mixed
    {
        return $this->container['representativeAddressChromeKana'];
    }

    /**
     * Sets representativeAddressChromeKana.
     *
     * @param string|null $representativeAddressChromeKana 代表者 住所 番地（カナ）
     */
    public function setRepresentativeAddressChromeKana(mixed $representativeAddressChromeKana): static
    {
        if (is_null($representativeAddressChromeKana)) {
            $this->openAPINullablesSetToNull[] = 'representativeAddressChromeKana';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('representativeAddressChromeKana', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($representativeAddressChromeKana) && mb_strlen($representativeAddressChromeKana) > 100) {
            throw new \InvalidArgumentException('invalid length for $representativeAddressChromeKana when calling ContractInfoV2., must be smaller than or equal to 100.');
        }
        if (!is_null($representativeAddressChromeKana) && mb_strlen($representativeAddressChromeKana) < 1) {
            throw new \InvalidArgumentException('invalid length for $representativeAddressChromeKana when calling ContractInfoV2., must be bigger than or equal to 1.');
        }
        $this->container['representativeAddressChromeKana'] = $representativeAddressChromeKana;

        return $this;
    }

    /**
     * Gets representativeAddressBuildingName.
     *
     * @return string|null
     */
    public function getRepresentativeAddressBuildingName(): mixed
    {
        return $this->container['representativeAddressBuildingName'];
    }

    /**
     * Sets representativeAddressBuildingName.
     *
     * @param string|null $representativeAddressBuildingName 代表者 住所 建物名\\ 形式： 漢字/ひらがな/カタカナ/半角英数
     */
    public function setRepresentativeAddressBuildingName(mixed $representativeAddressBuildingName): static
    {
        if (is_null($representativeAddressBuildingName)) {
            $this->openAPINullablesSetToNull[] = 'representativeAddressBuildingName';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('representativeAddressBuildingName', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($representativeAddressBuildingName) && mb_strlen($representativeAddressBuildingName) > 100) {
            throw new \InvalidArgumentException('invalid length for $representativeAddressBuildingName when calling ContractInfoV2., must be smaller than or equal to 100.');
        }
        if (!is_null($representativeAddressBuildingName) && mb_strlen($representativeAddressBuildingName) < 1) {
            throw new \InvalidArgumentException('invalid length for $representativeAddressBuildingName when calling ContractInfoV2., must be bigger than or equal to 1.');
        }
        $this->container['representativeAddressBuildingName'] = $representativeAddressBuildingName;

        return $this;
    }

    /**
     * Gets representativeAddressBuildingNameKana.
     *
     * @return string|null
     */
    public function getRepresentativeAddressBuildingNameKana(): mixed
    {
        return $this->container['representativeAddressBuildingNameKana'];
    }

    /**
     * Sets representativeAddressBuildingNameKana.
     *
     * @param string|null $representativeAddressBuildingNameKana 代表者 住所 建物名（カナ）\\ 形式： 全角カナ
     */
    public function setRepresentativeAddressBuildingNameKana(mixed $representativeAddressBuildingNameKana): static
    {
        if (is_null($representativeAddressBuildingNameKana)) {
            $this->openAPINullablesSetToNull[] = 'representativeAddressBuildingNameKana';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('representativeAddressBuildingNameKana', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($representativeAddressBuildingNameKana) && mb_strlen($representativeAddressBuildingNameKana) > 100) {
            throw new \InvalidArgumentException('invalid length for $representativeAddressBuildingNameKana when calling ContractInfoV2., must be smaller than or equal to 100.');
        }
        if (!is_null($representativeAddressBuildingNameKana) && mb_strlen($representativeAddressBuildingNameKana) < 1) {
            throw new \InvalidArgumentException('invalid length for $representativeAddressBuildingNameKana when calling ContractInfoV2., must be bigger than or equal to 1.');
        }
        $this->container['representativeAddressBuildingNameKana'] = $representativeAddressBuildingNameKana;

        return $this;
    }

    /**
     * Gets representativeTel.
     *
     * @return string
     */
    public function getRepresentativeTel(): mixed
    {
        return $this->container['representativeTel'];
    }

    /**
     * Sets representativeTel.
     *
     * @param string|null $representativeTel 代表者 電話番号\\ 形式： 半角数字（ハイフンなし、PHS番号不可）
     */
    public function setRepresentativeTel(mixed $representativeTel): static
    {
        if (is_null($representativeTel)) {
            $this->openAPINullablesSetToNull[] = 'representativeTel';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('representativeTel', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($representativeTel) && mb_strlen($representativeTel) > 12) {
            throw new \InvalidArgumentException('invalid length for $representativeTel when calling ContractInfoV2., must be smaller than or equal to 12.');
        }
        if (!is_null($representativeTel) && mb_strlen($representativeTel) < 11) {
            throw new \InvalidArgumentException('invalid length for $representativeTel when calling ContractInfoV2., must be bigger than or equal to 11.');
        }
        if (!is_null($representativeTel) && is_string($representativeTel) && !preg_match('/^\\d{11,12}$/', $representativeTel)) {
            throw new \InvalidArgumentException('invalid value for $representativeTel when calling ContractInfoV2., must conform to the pattern /^\\d{11,12}$/.');
        }
        $this->container['representativeTel'] = $representativeTel;

        return $this;
    }

    /**
     * Gets representativeBirthday.
     *
     * @return string
     */
    public function getRepresentativeBirthday(): mixed
    {
        return $this->container['representativeBirthday'];
    }

    /**
     * Sets representativeBirthday.
     *
     * @param string|null $representativeBirthday 代表者 生年月日\\ \\ 形式：`yyyy/MM/dd`
     */
    public function setRepresentativeBirthday(mixed $representativeBirthday): static
    {
        if (is_null($representativeBirthday)) {
            $this->openAPINullablesSetToNull[] = 'representativeBirthday';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('representativeBirthday', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($representativeBirthday) && is_string($representativeBirthday) && !preg_match('/^\\d{4}\\/\\d{2}\\/\\d{2}$/', $representativeBirthday)) {
            throw new \InvalidArgumentException('invalid value for $representativeBirthday when calling ContractInfoV2., must conform to the pattern /^\\d{4}\\/\\d{2}\\/\\d{2}$/.');
        }
        $this->container['representativeBirthday'] = $representativeBirthday;

        return $this;
    }

    /**
     * Gets representativeGender.
     *
     * @return int
     */
    public function getRepresentativeGender(): mixed
    {
        return $this->container['representativeGender'];
    }

    /**
     * Sets representativeGender.
     *
     * @param int|null $representativeGender 代表者 性別  - `0`: 男性 - `1`: 女性
     */
    public function setRepresentativeGender(mixed $representativeGender): static
    {
        if (is_null($representativeGender)) {
            $this->openAPINullablesSetToNull[] = 'representativeGender';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('representativeGender', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getRepresentativeGenderAllowableValues();
        if (!is_null($representativeGender) && !in_array($representativeGender, $allowedValues, true)) {
            throw new \InvalidArgumentException(sprintf("Invalid value '%s' for 'representativeGender', must be one of '%s'", $representativeGender, implode("', '", $allowedValues)));
        }
        $this->container['representativeGender'] = $representativeGender;

        return $this;
    }

    /**
     * Gets staff1LastName.
     *
     * @return string
     */
    public function getStaff1LastName(): mixed
    {
        return $this->container['staff1LastName'];
    }

    /**
     * Sets staff1LastName.
     *
     * @param string|null $staff1LastName 担当者1 姓\\ 形式： 漢字/ひらがな/カタカナ/半角英字\\ \\ fincodeは担当者1,2宛てに審査結果の通知や審査保留対応の連絡などを行います
     */
    public function setStaff1LastName(mixed $staff1LastName): static
    {
        if (is_null($staff1LastName)) {
            $this->openAPINullablesSetToNull[] = 'staff1LastName';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('staff1LastName', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($staff1LastName) && mb_strlen($staff1LastName) > 20) {
            throw new \InvalidArgumentException('invalid length for $staff1LastName when calling ContractInfoV2., must be smaller than or equal to 20.');
        }
        if (!is_null($staff1LastName) && mb_strlen($staff1LastName) < 1) {
            throw new \InvalidArgumentException('invalid length for $staff1LastName when calling ContractInfoV2., must be bigger than or equal to 1.');
        }
        $this->container['staff1LastName'] = $staff1LastName;

        return $this;
    }

    /**
     * Gets staff1LastNameKana.
     *
     * @return string
     */
    public function getStaff1LastNameKana(): mixed
    {
        return $this->container['staff1LastNameKana'];
    }

    /**
     * Sets staff1LastNameKana.
     *
     * @param string|null $staff1LastNameKana 担当者1 姓（カナ）\\ 形式： 全角カナ
     */
    public function setStaff1LastNameKana(mixed $staff1LastNameKana): static
    {
        if (is_null($staff1LastNameKana)) {
            $this->openAPINullablesSetToNull[] = 'staff1LastNameKana';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('staff1LastNameKana', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($staff1LastNameKana) && mb_strlen($staff1LastNameKana) > 20) {
            throw new \InvalidArgumentException('invalid length for $staff1LastNameKana when calling ContractInfoV2., must be smaller than or equal to 20.');
        }
        if (!is_null($staff1LastNameKana) && mb_strlen($staff1LastNameKana) < 1) {
            throw new \InvalidArgumentException('invalid length for $staff1LastNameKana when calling ContractInfoV2., must be bigger than or equal to 1.');
        }
        $this->container['staff1LastNameKana'] = $staff1LastNameKana;

        return $this;
    }

    /**
     * Gets staff1FirstName.
     *
     * @return string
     */
    public function getStaff1FirstName(): mixed
    {
        return $this->container['staff1FirstName'];
    }

    /**
     * Sets staff1FirstName.
     *
     * @param string|null $staff1FirstName 担当者1 名\\ 形式： 漢字/ひらがな/カタカナ/半角英字
     */
    public function setStaff1FirstName(mixed $staff1FirstName): static
    {
        if (is_null($staff1FirstName)) {
            $this->openAPINullablesSetToNull[] = 'staff1FirstName';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('staff1FirstName', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($staff1FirstName) && mb_strlen($staff1FirstName) > 20) {
            throw new \InvalidArgumentException('invalid length for $staff1FirstName when calling ContractInfoV2., must be smaller than or equal to 20.');
        }
        if (!is_null($staff1FirstName) && mb_strlen($staff1FirstName) < 1) {
            throw new \InvalidArgumentException('invalid length for $staff1FirstName when calling ContractInfoV2., must be bigger than or equal to 1.');
        }
        $this->container['staff1FirstName'] = $staff1FirstName;

        return $this;
    }

    /**
     * Gets staff1FirstNameKana.
     *
     * @return string
     */
    public function getStaff1FirstNameKana(): mixed
    {
        return $this->container['staff1FirstNameKana'];
    }

    /**
     * Sets staff1FirstNameKana.
     *
     * @param string|null $staff1FirstNameKana 担当者1 名（カナ）\\ 形式： 全角カナ
     */
    public function setStaff1FirstNameKana(mixed $staff1FirstNameKana): static
    {
        if (is_null($staff1FirstNameKana)) {
            $this->openAPINullablesSetToNull[] = 'staff1FirstNameKana';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('staff1FirstNameKana', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($staff1FirstNameKana) && mb_strlen($staff1FirstNameKana) > 20) {
            throw new \InvalidArgumentException('invalid length for $staff1FirstNameKana when calling ContractInfoV2., must be smaller than or equal to 20.');
        }
        if (!is_null($staff1FirstNameKana) && mb_strlen($staff1FirstNameKana) < 1) {
            throw new \InvalidArgumentException('invalid length for $staff1FirstNameKana when calling ContractInfoV2., must be bigger than or equal to 1.');
        }
        $this->container['staff1FirstNameKana'] = $staff1FirstNameKana;

        return $this;
    }

    /**
     * Gets staff1CompanyName.
     *
     * @return string
     */
    public function getStaff1CompanyName(): mixed
    {
        return $this->container['staff1CompanyName'];
    }

    /**
     * Sets staff1CompanyName.
     *
     * @param string|null $staff1CompanyName 担当者1 会社名\\ 形式： 漢字/ひらがな/カタカナ/半角英数
     */
    public function setStaff1CompanyName(mixed $staff1CompanyName): static
    {
        if (is_null($staff1CompanyName)) {
            $this->openAPINullablesSetToNull[] = 'staff1CompanyName';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('staff1CompanyName', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($staff1CompanyName) && mb_strlen($staff1CompanyName) > 150) {
            throw new \InvalidArgumentException('invalid length for $staff1CompanyName when calling ContractInfoV2., must be smaller than or equal to 150.');
        }
        if (!is_null($staff1CompanyName) && mb_strlen($staff1CompanyName) < 1) {
            throw new \InvalidArgumentException('invalid length for $staff1CompanyName when calling ContractInfoV2., must be bigger than or equal to 1.');
        }
        $this->container['staff1CompanyName'] = $staff1CompanyName;

        return $this;
    }

    /**
     * Gets staff1Belongs.
     *
     * @return string
     */
    public function getStaff1Belongs(): mixed
    {
        return $this->container['staff1Belongs'];
    }

    /**
     * Sets staff1Belongs.
     *
     * @param string|null $staff1Belongs 担当者1 部署名\\ 形式： 漢字/ひらがな/カタカナ/半角英数
     */
    public function setStaff1Belongs(mixed $staff1Belongs): static
    {
        if (is_null($staff1Belongs)) {
            $this->openAPINullablesSetToNull[] = 'staff1Belongs';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('staff1Belongs', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($staff1Belongs) && mb_strlen($staff1Belongs) > 50) {
            throw new \InvalidArgumentException('invalid length for $staff1Belongs when calling ContractInfoV2., must be smaller than or equal to 50.');
        }
        if (!is_null($staff1Belongs) && mb_strlen($staff1Belongs) < 1) {
            throw new \InvalidArgumentException('invalid length for $staff1Belongs when calling ContractInfoV2., must be bigger than or equal to 1.');
        }
        $this->container['staff1Belongs'] = $staff1Belongs;

        return $this;
    }

    /**
     * Gets staff1Tel.
     *
     * @return string
     */
    public function getStaff1Tel(): mixed
    {
        return $this->container['staff1Tel'];
    }

    /**
     * Sets staff1Tel.
     *
     * @param string|null $staff1Tel 担当者1 電話番号\\ 形式： 半角数字（ハイフンなし、PHS番号不可）
     */
    public function setStaff1Tel(mixed $staff1Tel): static
    {
        if (is_null($staff1Tel)) {
            $this->openAPINullablesSetToNull[] = 'staff1Tel';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('staff1Tel', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($staff1Tel) && mb_strlen($staff1Tel) > 12) {
            throw new \InvalidArgumentException('invalid length for $staff1Tel when calling ContractInfoV2., must be smaller than or equal to 12.');
        }
        if (!is_null($staff1Tel) && mb_strlen($staff1Tel) < 11) {
            throw new \InvalidArgumentException('invalid length for $staff1Tel when calling ContractInfoV2., must be bigger than or equal to 11.');
        }
        if (!is_null($staff1Tel) && is_string($staff1Tel) && !preg_match('/^\\d{11,12}$/', $staff1Tel)) {
            throw new \InvalidArgumentException('invalid value for $staff1Tel when calling ContractInfoV2., must conform to the pattern /^\\d{11,12}$/.');
        }
        $this->container['staff1Tel'] = $staff1Tel;

        return $this;
    }

    /**
     * Gets staff1Mail.
     *
     * @return string
     */
    public function getStaff1Mail(): mixed
    {
        return $this->container['staff1Mail'];
    }

    /**
     * Sets staff1Mail.
     *
     * @param string|null $staff1Mail 担当者1 メールアドレス\\ 形式： RFC 5322
     */
    public function setStaff1Mail(mixed $staff1Mail): static
    {
        if (is_null($staff1Mail)) {
            $this->openAPINullablesSetToNull[] = 'staff1Mail';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('staff1Mail', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($staff1Mail) && mb_strlen($staff1Mail) > 254) {
            throw new \InvalidArgumentException('invalid length for $staff1Mail when calling ContractInfoV2., must be smaller than or equal to 254.');
        }
        if (!is_null($staff1Mail) && mb_strlen($staff1Mail) < 1) {
            throw new \InvalidArgumentException('invalid length for $staff1Mail when calling ContractInfoV2., must be bigger than or equal to 1.');
        }
        $this->container['staff1Mail'] = $staff1Mail;

        return $this;
    }

    /**
     * Gets staff2LastName.
     *
     * @return string|null
     */
    public function getStaff2LastName(): mixed
    {
        return $this->container['staff2LastName'];
    }

    /**
     * Sets staff2LastName.
     *
     * @param string|null $staff2LastName 担当者2 姓\\ 形式： 漢字/ひらがな/カタカナ/半角英字
     */
    public function setStaff2LastName(mixed $staff2LastName): static
    {
        if (is_null($staff2LastName)) {
            $this->openAPINullablesSetToNull[] = 'staff2LastName';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('staff2LastName', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($staff2LastName) && mb_strlen($staff2LastName) > 20) {
            throw new \InvalidArgumentException('invalid length for $staff2LastName when calling ContractInfoV2., must be smaller than or equal to 20.');
        }
        if (!is_null($staff2LastName) && mb_strlen($staff2LastName) < 1) {
            throw new \InvalidArgumentException('invalid length for $staff2LastName when calling ContractInfoV2., must be bigger than or equal to 1.');
        }
        $this->container['staff2LastName'] = $staff2LastName;

        return $this;
    }

    /**
     * Gets staff2LastNameKana.
     *
     * @return string|null
     */
    public function getStaff2LastNameKana(): mixed
    {
        return $this->container['staff2LastNameKana'];
    }

    /**
     * Sets staff2LastNameKana.
     *
     * @param string|null $staff2LastNameKana 担当者2 姓（カナ）\\ 形式： 全角カナ
     */
    public function setStaff2LastNameKana(mixed $staff2LastNameKana): static
    {
        if (is_null($staff2LastNameKana)) {
            $this->openAPINullablesSetToNull[] = 'staff2LastNameKana';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('staff2LastNameKana', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($staff2LastNameKana) && mb_strlen($staff2LastNameKana) > 20) {
            throw new \InvalidArgumentException('invalid length for $staff2LastNameKana when calling ContractInfoV2., must be smaller than or equal to 20.');
        }
        if (!is_null($staff2LastNameKana) && mb_strlen($staff2LastNameKana) < 1) {
            throw new \InvalidArgumentException('invalid length for $staff2LastNameKana when calling ContractInfoV2., must be bigger than or equal to 1.');
        }
        $this->container['staff2LastNameKana'] = $staff2LastNameKana;

        return $this;
    }

    /**
     * Gets staff2FirstName.
     *
     * @return string|null
     */
    public function getStaff2FirstName(): mixed
    {
        return $this->container['staff2FirstName'];
    }

    /**
     * Sets staff2FirstName.
     *
     * @param string|null $staff2FirstName 担当者2 名\\ 形式： 漢字/ひらがな/カタカナ/半角英字
     */
    public function setStaff2FirstName(mixed $staff2FirstName): static
    {
        if (is_null($staff2FirstName)) {
            $this->openAPINullablesSetToNull[] = 'staff2FirstName';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('staff2FirstName', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($staff2FirstName) && mb_strlen($staff2FirstName) > 20) {
            throw new \InvalidArgumentException('invalid length for $staff2FirstName when calling ContractInfoV2., must be smaller than or equal to 20.');
        }
        if (!is_null($staff2FirstName) && mb_strlen($staff2FirstName) < 1) {
            throw new \InvalidArgumentException('invalid length for $staff2FirstName when calling ContractInfoV2., must be bigger than or equal to 1.');
        }
        $this->container['staff2FirstName'] = $staff2FirstName;

        return $this;
    }

    /**
     * Gets staff2FirstNameKana.
     *
     * @return string|null
     */
    public function getStaff2FirstNameKana(): mixed
    {
        return $this->container['staff2FirstNameKana'];
    }

    /**
     * Sets staff2FirstNameKana.
     *
     * @param string|null $staff2FirstNameKana 担当者2 名（カナ）\\ 形式： 全角カナ
     */
    public function setStaff2FirstNameKana(mixed $staff2FirstNameKana): static
    {
        if (is_null($staff2FirstNameKana)) {
            $this->openAPINullablesSetToNull[] = 'staff2FirstNameKana';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('staff2FirstNameKana', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($staff2FirstNameKana) && mb_strlen($staff2FirstNameKana) > 20) {
            throw new \InvalidArgumentException('invalid length for $staff2FirstNameKana when calling ContractInfoV2., must be smaller than or equal to 20.');
        }
        if (!is_null($staff2FirstNameKana) && mb_strlen($staff2FirstNameKana) < 1) {
            throw new \InvalidArgumentException('invalid length for $staff2FirstNameKana when calling ContractInfoV2., must be bigger than or equal to 1.');
        }
        $this->container['staff2FirstNameKana'] = $staff2FirstNameKana;

        return $this;
    }

    /**
     * Gets staff2CompanyName.
     *
     * @return string|null
     */
    public function getStaff2CompanyName(): mixed
    {
        return $this->container['staff2CompanyName'];
    }

    /**
     * Sets staff2CompanyName.
     *
     * @param string|null $staff2CompanyName 担当者2 会社名\\ 形式： 漢字/ひらがな/カタカナ/半角英数
     */
    public function setStaff2CompanyName(mixed $staff2CompanyName): static
    {
        if (is_null($staff2CompanyName)) {
            $this->openAPINullablesSetToNull[] = 'staff2CompanyName';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('staff2CompanyName', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($staff2CompanyName) && mb_strlen($staff2CompanyName) > 150) {
            throw new \InvalidArgumentException('invalid length for $staff2CompanyName when calling ContractInfoV2., must be smaller than or equal to 150.');
        }
        if (!is_null($staff2CompanyName) && mb_strlen($staff2CompanyName) < 1) {
            throw new \InvalidArgumentException('invalid length for $staff2CompanyName when calling ContractInfoV2., must be bigger than or equal to 1.');
        }
        $this->container['staff2CompanyName'] = $staff2CompanyName;

        return $this;
    }

    /**
     * Gets staff2Belongs.
     *
     * @return string|null
     */
    public function getStaff2Belongs(): mixed
    {
        return $this->container['staff2Belongs'];
    }

    /**
     * Sets staff2Belongs.
     *
     * @param string|null $staff2Belongs 担当者2 部署名\\ 形式： 漢字/ひらがな/カタカナ/半角英数
     */
    public function setStaff2Belongs(mixed $staff2Belongs): static
    {
        if (is_null($staff2Belongs)) {
            $this->openAPINullablesSetToNull[] = 'staff2Belongs';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('staff2Belongs', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($staff2Belongs) && mb_strlen($staff2Belongs) > 50) {
            throw new \InvalidArgumentException('invalid length for $staff2Belongs when calling ContractInfoV2., must be smaller than or equal to 50.');
        }
        if (!is_null($staff2Belongs) && mb_strlen($staff2Belongs) < 1) {
            throw new \InvalidArgumentException('invalid length for $staff2Belongs when calling ContractInfoV2., must be bigger than or equal to 1.');
        }
        $this->container['staff2Belongs'] = $staff2Belongs;

        return $this;
    }

    /**
     * Gets staff2Tel.
     *
     * @return string|null
     */
    public function getStaff2Tel(): mixed
    {
        return $this->container['staff2Tel'];
    }

    /**
     * Sets staff2Tel.
     *
     * @param string|null $staff2Tel 担当者2 電話番号\\ 形式： 半角数字（ハイフンなし、PHS番号不可）
     */
    public function setStaff2Tel(mixed $staff2Tel): static
    {
        if (is_null($staff2Tel)) {
            $this->openAPINullablesSetToNull[] = 'staff2Tel';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('staff2Tel', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($staff2Tel) && mb_strlen($staff2Tel) > 12) {
            throw new \InvalidArgumentException('invalid length for $staff2Tel when calling ContractInfoV2., must be smaller than or equal to 12.');
        }
        if (!is_null($staff2Tel) && mb_strlen($staff2Tel) < 11) {
            throw new \InvalidArgumentException('invalid length for $staff2Tel when calling ContractInfoV2., must be bigger than or equal to 11.');
        }
        if (!is_null($staff2Tel) && is_string($staff2Tel) && !preg_match('/^\\d{11,12}$/', $staff2Tel)) {
            throw new \InvalidArgumentException('invalid value for $staff2Tel when calling ContractInfoV2., must conform to the pattern /^\\d{11,12}$/.');
        }
        $this->container['staff2Tel'] = $staff2Tel;

        return $this;
    }

    /**
     * Gets staff2Mail.
     *
     * @return string|null
     */
    public function getStaff2Mail(): mixed
    {
        return $this->container['staff2Mail'];
    }

    /**
     * Sets staff2Mail.
     *
     * @param string|null $staff2Mail 担当者2 メールアドレス\\ 形式： RFC 5322
     */
    public function setStaff2Mail(mixed $staff2Mail): static
    {
        if (is_null($staff2Mail)) {
            $this->openAPINullablesSetToNull[] = 'staff2Mail';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('staff2Mail', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($staff2Mail) && mb_strlen($staff2Mail) > 254) {
            throw new \InvalidArgumentException('invalid length for $staff2Mail when calling ContractInfoV2., must be smaller than or equal to 254.');
        }
        if (!is_null($staff2Mail) && mb_strlen($staff2Mail) < 1) {
            throw new \InvalidArgumentException('invalid length for $staff2Mail when calling ContractInfoV2., must be bigger than or equal to 1.');
        }
        $this->container['staff2Mail'] = $staff2Mail;

        return $this;
    }

    /**
     * Gets corporate.
     *
     * @return bool
     */
    public function getCorporate(): mixed
    {
        return $this->container['corporate'];
    }

    /**
     * Sets corporate.
     *
     * @param bool|null $corporate 事業形態\\ \\ - `true`: 法人\\ - `false`: 個人事業主
     */
    public function setCorporate(mixed $corporate): static
    {
        if (is_null($corporate)) {
            $this->openAPINullablesSetToNull[] = 'corporate';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('corporate', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['corporate'] = $corporate;

        return $this;
    }

    /**
     * Gets corporateInfo.
     *
     * @return CorporateInfoV2|null
     */
    public function getCorporateInfo(): mixed
    {
        return $this->container['corporateInfo'];
    }

    /**
     * Sets corporateInfo.
     *
     * @param CorporateInfoV2|null $corporateInfo 法人情報 \\ `corporate`が`true`のとき必須
     */
    public function setCorporateInfo(mixed $corporateInfo): static
    {
        if (is_null($corporateInfo)) {
            $this->openAPINullablesSetToNull[] = 'corporateInfo';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('corporateInfo', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['corporateInfo'] = $corporateInfo;

        return $this;
    }

    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @see https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    public function jsonSerialize(): mixed
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object.
     */
    public function __toString(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
    }

    /**
     * Gets a header-safe presentation of the object.
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
