<?php

declare(strict_types=1);
/**
 * fincode API.
 *
 * fincodeのAPIリファレンスです。\\ fincodeは決済情報のほか様々なリソースを管理できるため、リソース指向なREST APIをベースとしたインターフェイス設計のもとでAPIを提供しています。\\ APIの呼び出しにはAPIキーによる認証が必要であり、リクエストの際に`Authorization`ヘッダーに有効なAPIキーをセットすることで認証できます。
 *
 * The version of the OpenAPI document: 1.2.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Fincode\Model;

use OpenAPI\Fincode\ObjectSerializer;

/**
 * @implements \ArrayAccess<string, mixed>
 */
class WebhookEventPaymentBulkRegistCard implements ModelInterface, \ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;
    /**
     * The original name of the model.
     */
    protected static string $openAPIModelName = 'WebhookEvent.PaymentBulk.Regist.Card';
    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var array<string, string>
     */
    protected static array $openAPITypes = ['shopId' => 'string', 'bulkPaymentId' => 'string', 'fileName' => 'string', 'status' => '\OpenAPI\Fincode\Model\PaymentBulkStatus', 'registTotalCount' => 'string', 'errorTotalCount' => 'string', 'payType' => '\OpenAPI\Fincode\Model\PaymentBulkPayType', 'bulkSearchUrl' => 'string', 'errorCode' => 'string', 'event' => '\OpenAPI\Fincode\Model\FincodeEvent'];
    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var array<string, string|null>
     */
    protected static array $openAPIFormats = ['shopId' => null, 'bulkPaymentId' => null, 'fileName' => null, 'status' => null, 'registTotalCount' => null, 'errorTotalCount' => null, 'payType' => null, 'bulkSearchUrl' => null, 'errorCode' => null, 'event' => null];
    /**
     * Array of nullable properties. Used for (de)serialization.
     *
     * @var array<string, bool>
     */
    protected static array $openAPINullables = ['shopId' => false, 'bulkPaymentId' => true, 'fileName' => false, 'status' => false, 'registTotalCount' => false, 'errorTotalCount' => false, 'payType' => false, 'bulkSearchUrl' => false, 'errorCode' => true, 'event' => false];
    /**
     * If a nullable field gets set to null, insert it here.
     *
     * @var array<string, bool>
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return array<string, string|null>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties.
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null.
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null.
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable.
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }
    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = ['shopId' => 'shop_id', 'bulkPaymentId' => 'bulk_payment_id', 'fileName' => 'file_name', 'status' => 'status', 'registTotalCount' => 'regist_total_count', 'errorTotalCount' => 'error_total_count', 'payType' => 'pay_type', 'bulkSearchUrl' => 'bulk_search_url', 'errorCode' => 'error_code', 'event' => 'event'];
    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var array<string, string>
     */
    protected static array $setters = ['shopId' => 'setShopId', 'bulkPaymentId' => 'setBulkPaymentId', 'fileName' => 'setFileName', 'status' => 'setStatus', 'registTotalCount' => 'setRegistTotalCount', 'errorTotalCount' => 'setErrorTotalCount', 'payType' => 'setPayType', 'bulkSearchUrl' => 'setBulkSearchUrl', 'errorCode' => 'setErrorCode', 'event' => 'setEvent'];
    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var array<string, string>
     */
    protected static array $getters = ['shopId' => 'getShopId', 'bulkPaymentId' => 'getBulkPaymentId', 'fileName' => 'getFileName', 'status' => 'getStatus', 'registTotalCount' => 'getRegistTotalCount', 'errorTotalCount' => 'getErrorTotalCount', 'payType' => 'getPayType', 'bulkSearchUrl' => 'getBulkSearchUrl', 'errorCode' => 'getErrorCode', 'event' => 'getEvent'];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }
    /**
     * Associative array for storing property values.
     *
     * @phpstan-var array<string, mixed>
     *
     * @psalm-var array<string, mixed>
     */
    protected array $container = [];

    /**
     * Constructor.
     *
     * @param array<string, mixed> $data Associated array of property values
     *                                   initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('shopId', $data ?? [], null);
        $this->setIfExists('bulkPaymentId', $data ?? [], null);
        $this->setIfExists('fileName', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('registTotalCount', $data ?? [], null);
        $this->setIfExists('errorTotalCount', $data ?? [], null);
        $this->setIfExists('payType', $data ?? [], null);
        $this->setIfExists('bulkSearchUrl', $data ?? [], null);
        $this->setIfExists('errorCode', $data ?? [], null);
        $this->setIfExists('event', $data ?? [], null);
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array.
     *
     * @param array<string, mixed> $fields
     */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }
        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return list<string> invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];
        if (!is_null($this->container['shopId']) && mb_strlen($this->container['shopId']) > 13) {
            $invalidProperties[] = "invalid value for 'shopId', the character length must be smaller than or equal to 13.";
        }
        if (!is_null($this->container['shopId']) && mb_strlen($this->container['shopId']) < 13) {
            $invalidProperties[] = "invalid value for 'shopId', the character length must be bigger than or equal to 13.";
        }
        if (!is_null($this->container['bulkPaymentId']) && mb_strlen($this->container['bulkPaymentId']) > 25) {
            $invalidProperties[] = "invalid value for 'bulkPaymentId', the character length must be smaller than or equal to 25.";
        }
        if (!is_null($this->container['bulkPaymentId']) && mb_strlen($this->container['bulkPaymentId']) < 25) {
            $invalidProperties[] = "invalid value for 'bulkPaymentId', the character length must be bigger than or equal to 25.";
        }
        if (!is_null($this->container['fileName']) && mb_strlen($this->container['fileName']) > 100) {
            $invalidProperties[] = "invalid value for 'fileName', the character length must be smaller than or equal to 100.";
        }
        if (!is_null($this->container['fileName']) && mb_strlen($this->container['fileName']) < 1) {
            $invalidProperties[] = "invalid value for 'fileName', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['registTotalCount']) && mb_strlen($this->container['registTotalCount']) > 10) {
            $invalidProperties[] = "invalid value for 'registTotalCount', the character length must be smaller than or equal to 10.";
        }
        if (!is_null($this->container['registTotalCount']) && mb_strlen($this->container['registTotalCount']) < 1) {
            $invalidProperties[] = "invalid value for 'registTotalCount', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['errorTotalCount']) && mb_strlen($this->container['errorTotalCount']) > 10) {
            $invalidProperties[] = "invalid value for 'errorTotalCount', the character length must be smaller than or equal to 10.";
        }
        if (!is_null($this->container['errorTotalCount']) && mb_strlen($this->container['errorTotalCount']) < 1) {
            $invalidProperties[] = "invalid value for 'errorTotalCount', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['errorCode']) && mb_strlen($this->container['errorCode']) > 11) {
            $invalidProperties[] = "invalid value for 'errorCode', the character length must be smaller than or equal to 11.";
        }
        if (!is_null($this->container['errorCode']) && mb_strlen($this->container['errorCode']) < 11) {
            $invalidProperties[] = "invalid value for 'errorCode', the character length must be bigger than or equal to 11.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return 0 === count($this->listInvalidProperties());
    }

    /**
     * Gets shopId.
     *
     * @return string|null
     */
    public function getShopId(): mixed
    {
        return $this->container['shopId'];
    }

    /**
     * Sets shopId.
     *
     * @param string $shopId ショップID
     */
    public function setShopId(mixed $shopId): static
    {
        if (is_null($shopId)) {
            throw new \InvalidArgumentException('non-nullable shopId cannot be null');
        }
        if (mb_strlen($shopId) > 13) {
            throw new \InvalidArgumentException('invalid length for $shopId when calling WebhookEventPaymentBulkRegistCard., must be smaller than or equal to 13.');
        }
        if (mb_strlen($shopId) < 13) {
            throw new \InvalidArgumentException('invalid length for $shopId when calling WebhookEventPaymentBulkRegistCard., must be bigger than or equal to 13.');
        }
        $this->container['shopId'] = $shopId;

        return $this;
    }

    /**
     * Gets bulkPaymentId.
     *
     * @return string|null
     */
    public function getBulkPaymentId(): mixed
    {
        return $this->container['bulkPaymentId'];
    }

    /**
     * Sets bulkPaymentId.
     *
     * @param string|null $bulkPaymentId 一括決済ID
     */
    public function setBulkPaymentId(mixed $bulkPaymentId): static
    {
        if (is_null($bulkPaymentId)) {
            $this->openAPINullablesSetToNull[] = 'bulkPaymentId';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bulkPaymentId', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($bulkPaymentId) && mb_strlen($bulkPaymentId) > 25) {
            throw new \InvalidArgumentException('invalid length for $bulkPaymentId when calling WebhookEventPaymentBulkRegistCard., must be smaller than or equal to 25.');
        }
        if (!is_null($bulkPaymentId) && mb_strlen($bulkPaymentId) < 25) {
            throw new \InvalidArgumentException('invalid length for $bulkPaymentId when calling WebhookEventPaymentBulkRegistCard., must be bigger than or equal to 25.');
        }
        $this->container['bulkPaymentId'] = $bulkPaymentId;

        return $this;
    }

    /**
     * Gets fileName.
     *
     * @return string|null
     */
    public function getFileName(): mixed
    {
        return $this->container['fileName'];
    }

    /**
     * Sets fileName.
     *
     * @param string $fileName 一括決済データファイル名
     */
    public function setFileName(mixed $fileName): static
    {
        if (is_null($fileName)) {
            throw new \InvalidArgumentException('non-nullable fileName cannot be null');
        }
        if (mb_strlen($fileName) > 100) {
            throw new \InvalidArgumentException('invalid length for $fileName when calling WebhookEventPaymentBulkRegistCard., must be smaller than or equal to 100.');
        }
        if (mb_strlen($fileName) < 1) {
            throw new \InvalidArgumentException('invalid length for $fileName when calling WebhookEventPaymentBulkRegistCard., must be bigger than or equal to 1.');
        }
        $this->container['fileName'] = $fileName;

        return $this;
    }

    /**
     * Gets status.
     *
     * @return PaymentBulkStatus|null
     */
    public function getStatus(): mixed
    {
        return $this->container['status'];
    }

    /**
     * Sets status.
     *
     * @param PaymentBulkStatus $status status
     */
    public function setStatus(mixed $status): static
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets registTotalCount.
     *
     * @return string|null
     */
    public function getRegistTotalCount(): mixed
    {
        return $this->container['registTotalCount'];
    }

    /**
     * Sets registTotalCount.
     *
     * @param string $registTotalCount 総件数\\ \\ この一括決済に登録された決済の件数です
     */
    public function setRegistTotalCount(mixed $registTotalCount): static
    {
        if (is_null($registTotalCount)) {
            throw new \InvalidArgumentException('non-nullable registTotalCount cannot be null');
        }
        if (mb_strlen($registTotalCount) > 10) {
            throw new \InvalidArgumentException('invalid length for $registTotalCount when calling WebhookEventPaymentBulkRegistCard., must be smaller than or equal to 10.');
        }
        if (mb_strlen($registTotalCount) < 1) {
            throw new \InvalidArgumentException('invalid length for $registTotalCount when calling WebhookEventPaymentBulkRegistCard., must be bigger than or equal to 1.');
        }
        $this->container['registTotalCount'] = $registTotalCount;

        return $this;
    }

    /**
     * Gets errorTotalCount.
     *
     * @return string|null
     */
    public function getErrorTotalCount(): mixed
    {
        return $this->container['errorTotalCount'];
    }

    /**
     * Sets errorTotalCount.
     *
     * @param string $errorTotalCount エラー件数\\ \\ この一括決済においてエラーが発生した決済の件数です
     */
    public function setErrorTotalCount(mixed $errorTotalCount): static
    {
        if (is_null($errorTotalCount)) {
            throw new \InvalidArgumentException('non-nullable errorTotalCount cannot be null');
        }
        if (mb_strlen($errorTotalCount) > 10) {
            throw new \InvalidArgumentException('invalid length for $errorTotalCount when calling WebhookEventPaymentBulkRegistCard., must be smaller than or equal to 10.');
        }
        if (mb_strlen($errorTotalCount) < 1) {
            throw new \InvalidArgumentException('invalid length for $errorTotalCount when calling WebhookEventPaymentBulkRegistCard., must be bigger than or equal to 1.');
        }
        $this->container['errorTotalCount'] = $errorTotalCount;

        return $this;
    }

    /**
     * Gets payType.
     *
     * @return PaymentBulkPayType|null
     */
    public function getPayType(): mixed
    {
        return $this->container['payType'];
    }

    /**
     * Sets payType.
     *
     * @param PaymentBulkPayType $payType payType
     */
    public function setPayType(mixed $payType): static
    {
        if (is_null($payType)) {
            throw new \InvalidArgumentException('non-nullable payType cannot be null');
        }
        $this->container['payType'] = $payType;

        return $this;
    }

    /**
     * Gets bulkSearchUrl.
     *
     * @return string|null
     */
    public function getBulkSearchUrl(): mixed
    {
        return $this->container['bulkSearchUrl'];
    }

    /**
     * Sets bulkSearchUrl.
     *
     * @param string $bulkSearchUrl この一括決済の一括決済 詳細情報一覧取得APIのURLです
     */
    public function setBulkSearchUrl(mixed $bulkSearchUrl): static
    {
        if (is_null($bulkSearchUrl)) {
            throw new \InvalidArgumentException('non-nullable bulkSearchUrl cannot be null');
        }
        $this->container['bulkSearchUrl'] = $bulkSearchUrl;

        return $this;
    }

    /**
     * Gets errorCode.
     *
     * @return string|null
     */
    public function getErrorCode(): mixed
    {
        return $this->container['errorCode'];
    }

    /**
     * Sets errorCode.
     *
     * @param string|null $errorCode この一括決済において発生したエラーのうち、一番最新のエラーのエラーコードです。\\ [各エラーコードの定義はこちらを参照](https://docs.fincode.jp/develop_support/error)して確認できます。
     */
    public function setErrorCode(mixed $errorCode): static
    {
        if (is_null($errorCode)) {
            $this->openAPINullablesSetToNull[] = 'errorCode';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('errorCode', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($errorCode) && mb_strlen($errorCode) > 11) {
            throw new \InvalidArgumentException('invalid length for $errorCode when calling WebhookEventPaymentBulkRegistCard., must be smaller than or equal to 11.');
        }
        if (!is_null($errorCode) && mb_strlen($errorCode) < 11) {
            throw new \InvalidArgumentException('invalid length for $errorCode when calling WebhookEventPaymentBulkRegistCard., must be bigger than or equal to 11.');
        }
        $this->container['errorCode'] = $errorCode;

        return $this;
    }

    /**
     * Gets event.
     *
     * @return FincodeEvent|null
     */
    public function getEvent(): mixed
    {
        return $this->container['event'];
    }

    /**
     * Sets event.
     *
     * @param FincodeEvent $event event
     */
    public function setEvent(mixed $event): static
    {
        if (is_null($event)) {
            throw new \InvalidArgumentException('non-nullable event cannot be null');
        }
        $this->container['event'] = $event;

        return $this;
    }

    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @see https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    public function jsonSerialize(): mixed
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object.
     */
    public function __toString(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
    }

    /**
     * Gets a header-safe presentation of the object.
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
