<?php

declare(strict_types=1);
/**
 * fincode API.
 *
 * fincodeのAPIリファレンスです。\\ fincodeは決済情報のほか様々なリソースを管理できるため、リソース指向なREST APIをベースとしたインターフェイス設計のもとでAPIを提供しています。\\ APIの呼び出しにはAPIキーによる認証が必要であり、リクエストの際に`Authorization`ヘッダーに有効なAPIキーをセットすることで認証できます。
 *
 * The version of the OpenAPI document: 1.2.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Fincode\Model;

use OpenAPI\Fincode\ObjectSerializer;

/**
 * @implements \ArrayAccess<string, mixed>
 */
class AccountDetail implements ModelInterface, \ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;
    /**
     * The original name of the model.
     */
    protected static string $openAPIModelName = 'AccountDetail';
    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var array<string, string>
     */
    protected static array $openAPITypes = ['detailId' => 'int', 'shopId' => 'string', 'scheduledDepositDate' => 'string', 'tradeType' => '\OpenAPI\Fincode\Model\AccountDetailTradeType', 'paymentMethod' => '\OpenAPI\Fincode\Model\AccountPaymentMethod', 'amountCorrectionType' => 'string', 'accountId' => 'int', 'orderId' => 'string', 'accessId' => 'string', 'depositAmount' => 'int', 'amount' => 'int', 'tax' => 'int', 'feeTotal' => 'int', 'feeTotalTaxin' => 'int', 'feeProfitTax' => 'int', 'feeProfit' => 'int', 'feeCost' => 'int', 'feeRateTotal' => 'float', 'fixedFee' => 'int', 'applyType' => 'int', 'webRegistrationFee' => 'int', 'webRegistrationFeeTaxin' => 'int', 'webRegistrationFeeTax' => 'int', 'platformFee' => 'int', 'platformFeeTaxin' => 'int', 'platformFeeRate' => 'float', 'fixedFeeForPlatformFee' => 'int', 'applyTypeForPlatformFee' => 'int', 'platformWebRegistrationFee' => 'int', 'platformWebRegistrationFeeTaxin' => 'int', 'platformWebRegistrationFeeTax' => 'int', 'processedDate' => 'string', 'aggregateTermStart' => 'string', 'aggregateTermEnd' => 'string', 'created' => 'string', 'updated' => 'string'];
    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var array<string, string|null>
     */
    protected static array $openAPIFormats = ['detailId' => null, 'shopId' => null, 'scheduledDepositDate' => null, 'tradeType' => null, 'paymentMethod' => null, 'amountCorrectionType' => null, 'accountId' => null, 'orderId' => null, 'accessId' => null, 'depositAmount' => null, 'amount' => null, 'tax' => null, 'feeTotal' => null, 'feeTotalTaxin' => null, 'feeProfitTax' => null, 'feeProfit' => null, 'feeCost' => null, 'feeRateTotal' => null, 'fixedFee' => null, 'applyType' => null, 'webRegistrationFee' => null, 'webRegistrationFeeTaxin' => null, 'webRegistrationFeeTax' => null, 'platformFee' => null, 'platformFeeTaxin' => null, 'platformFeeRate' => null, 'fixedFeeForPlatformFee' => null, 'applyTypeForPlatformFee' => null, 'platformWebRegistrationFee' => null, 'platformWebRegistrationFeeTaxin' => null, 'platformWebRegistrationFeeTax' => null, 'processedDate' => null, 'aggregateTermStart' => null, 'aggregateTermEnd' => null, 'created' => null, 'updated' => null];
    /**
     * Array of nullable properties. Used for (de)serialization.
     *
     * @var array<string, bool>
     */
    protected static array $openAPINullables = ['detailId' => false, 'shopId' => false, 'scheduledDepositDate' => false, 'tradeType' => false, 'paymentMethod' => false, 'amountCorrectionType' => false, 'accountId' => false, 'orderId' => false, 'accessId' => false, 'depositAmount' => false, 'amount' => false, 'tax' => false, 'feeTotal' => false, 'feeTotalTaxin' => false, 'feeProfitTax' => false, 'feeProfit' => false, 'feeCost' => false, 'feeRateTotal' => false, 'fixedFee' => true, 'applyType' => false, 'webRegistrationFee' => false, 'webRegistrationFeeTaxin' => false, 'webRegistrationFeeTax' => false, 'platformFee' => true, 'platformFeeTaxin' => false, 'platformFeeRate' => true, 'fixedFeeForPlatformFee' => true, 'applyTypeForPlatformFee' => true, 'platformWebRegistrationFee' => false, 'platformWebRegistrationFeeTaxin' => false, 'platformWebRegistrationFeeTax' => false, 'processedDate' => false, 'aggregateTermStart' => false, 'aggregateTermEnd' => false, 'created' => false, 'updated' => true];
    /**
     * If a nullable field gets set to null, insert it here.
     *
     * @var array<string, bool>
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return array<string, string|null>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties.
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null.
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null.
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable.
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }
    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = ['detailId' => 'detail_id', 'shopId' => 'shop_id', 'scheduledDepositDate' => 'scheduled_deposit_date', 'tradeType' => 'trade_type', 'paymentMethod' => 'payment_method', 'amountCorrectionType' => 'amount_correction_type', 'accountId' => 'account_id', 'orderId' => 'order_id', 'accessId' => 'access_id', 'depositAmount' => 'deposit_amount', 'amount' => 'amount', 'tax' => 'tax', 'feeTotal' => 'fee_total', 'feeTotalTaxin' => 'fee_total_taxin', 'feeProfitTax' => 'fee_profit_tax', 'feeProfit' => 'fee_profit', 'feeCost' => 'fee_cost', 'feeRateTotal' => 'fee_rate_total', 'fixedFee' => 'fixed_fee', 'applyType' => 'apply_type', 'webRegistrationFee' => 'web_registration_fee', 'webRegistrationFeeTaxin' => 'web_registration_fee_taxin', 'webRegistrationFeeTax' => 'web_registration_fee_tax', 'platformFee' => 'platform_fee', 'platformFeeTaxin' => 'platform_fee_taxin', 'platformFeeRate' => 'platform_fee_rate', 'fixedFeeForPlatformFee' => 'fixed_fee_for_platform_fee', 'applyTypeForPlatformFee' => 'apply_type_for_platform_fee', 'platformWebRegistrationFee' => 'platform_web_registration_fee', 'platformWebRegistrationFeeTaxin' => 'platform_web_registration_fee_taxin', 'platformWebRegistrationFeeTax' => 'platform_web_registration_fee_tax', 'processedDate' => 'processed_date', 'aggregateTermStart' => 'aggregate_term_start', 'aggregateTermEnd' => 'aggregate_term_end', 'created' => 'created', 'updated' => 'updated'];
    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var array<string, string>
     */
    protected static array $setters = ['detailId' => 'setDetailId', 'shopId' => 'setShopId', 'scheduledDepositDate' => 'setScheduledDepositDate', 'tradeType' => 'setTradeType', 'paymentMethod' => 'setPaymentMethod', 'amountCorrectionType' => 'setAmountCorrectionType', 'accountId' => 'setAccountId', 'orderId' => 'setOrderId', 'accessId' => 'setAccessId', 'depositAmount' => 'setDepositAmount', 'amount' => 'setAmount', 'tax' => 'setTax', 'feeTotal' => 'setFeeTotal', 'feeTotalTaxin' => 'setFeeTotalTaxin', 'feeProfitTax' => 'setFeeProfitTax', 'feeProfit' => 'setFeeProfit', 'feeCost' => 'setFeeCost', 'feeRateTotal' => 'setFeeRateTotal', 'fixedFee' => 'setFixedFee', 'applyType' => 'setApplyType', 'webRegistrationFee' => 'setWebRegistrationFee', 'webRegistrationFeeTaxin' => 'setWebRegistrationFeeTaxin', 'webRegistrationFeeTax' => 'setWebRegistrationFeeTax', 'platformFee' => 'setPlatformFee', 'platformFeeTaxin' => 'setPlatformFeeTaxin', 'platformFeeRate' => 'setPlatformFeeRate', 'fixedFeeForPlatformFee' => 'setFixedFeeForPlatformFee', 'applyTypeForPlatformFee' => 'setApplyTypeForPlatformFee', 'platformWebRegistrationFee' => 'setPlatformWebRegistrationFee', 'platformWebRegistrationFeeTaxin' => 'setPlatformWebRegistrationFeeTaxin', 'platformWebRegistrationFeeTax' => 'setPlatformWebRegistrationFeeTax', 'processedDate' => 'setProcessedDate', 'aggregateTermStart' => 'setAggregateTermStart', 'aggregateTermEnd' => 'setAggregateTermEnd', 'created' => 'setCreated', 'updated' => 'setUpdated'];
    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var array<string, string>
     */
    protected static array $getters = ['detailId' => 'getDetailId', 'shopId' => 'getShopId', 'scheduledDepositDate' => 'getScheduledDepositDate', 'tradeType' => 'getTradeType', 'paymentMethod' => 'getPaymentMethod', 'amountCorrectionType' => 'getAmountCorrectionType', 'accountId' => 'getAccountId', 'orderId' => 'getOrderId', 'accessId' => 'getAccessId', 'depositAmount' => 'getDepositAmount', 'amount' => 'getAmount', 'tax' => 'getTax', 'feeTotal' => 'getFeeTotal', 'feeTotalTaxin' => 'getFeeTotalTaxin', 'feeProfitTax' => 'getFeeProfitTax', 'feeProfit' => 'getFeeProfit', 'feeCost' => 'getFeeCost', 'feeRateTotal' => 'getFeeRateTotal', 'fixedFee' => 'getFixedFee', 'applyType' => 'getApplyType', 'webRegistrationFee' => 'getWebRegistrationFee', 'webRegistrationFeeTaxin' => 'getWebRegistrationFeeTaxin', 'webRegistrationFeeTax' => 'getWebRegistrationFeeTax', 'platformFee' => 'getPlatformFee', 'platformFeeTaxin' => 'getPlatformFeeTaxin', 'platformFeeRate' => 'getPlatformFeeRate', 'fixedFeeForPlatformFee' => 'getFixedFeeForPlatformFee', 'applyTypeForPlatformFee' => 'getApplyTypeForPlatformFee', 'platformWebRegistrationFee' => 'getPlatformWebRegistrationFee', 'platformWebRegistrationFeeTaxin' => 'getPlatformWebRegistrationFeeTaxin', 'platformWebRegistrationFeeTax' => 'getPlatformWebRegistrationFeeTax', 'processedDate' => 'getProcessedDate', 'aggregateTermStart' => 'getAggregateTermStart', 'aggregateTermEnd' => 'getAggregateTermEnd', 'created' => 'getCreated', 'updated' => 'getUpdated'];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }
    public const APPLY_TYPE_NUMBER_0 = 0;
    public const APPLY_TYPE_NUMBER_1 = 1;
    public const APPLY_TYPE_FOR_PLATFORM_FEE_NUMBER_0 = 0;
    public const APPLY_TYPE_FOR_PLATFORM_FEE_NUMBER_1 = 1;

    /**
     * Gets allowable values of the enum.
     *
     * @return list<string>
     */
    public function getApplyTypeAllowableValues(): array
    {
        return [self::APPLY_TYPE_NUMBER_0, self::APPLY_TYPE_NUMBER_1];
    }

    /**
     * Gets allowable values of the enum.
     *
     * @return list<string>
     */
    public function getApplyTypeForPlatformFeeAllowableValues(): array
    {
        return [self::APPLY_TYPE_FOR_PLATFORM_FEE_NUMBER_0, self::APPLY_TYPE_FOR_PLATFORM_FEE_NUMBER_1];
    }
    /**
     * Associative array for storing property values.
     *
     * @phpstan-var array<string, mixed>
     *
     * @psalm-var array<string, mixed>
     */
    protected array $container = [];

    /**
     * Constructor.
     *
     * @param array<string, mixed> $data Associated array of property values
     *                                   initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('detailId', $data ?? [], null);
        $this->setIfExists('shopId', $data ?? [], null);
        $this->setIfExists('scheduledDepositDate', $data ?? [], null);
        $this->setIfExists('tradeType', $data ?? [], null);
        $this->setIfExists('paymentMethod', $data ?? [], null);
        $this->setIfExists('amountCorrectionType', $data ?? [], null);
        $this->setIfExists('accountId', $data ?? [], null);
        $this->setIfExists('orderId', $data ?? [], null);
        $this->setIfExists('accessId', $data ?? [], null);
        $this->setIfExists('depositAmount', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('tax', $data ?? [], null);
        $this->setIfExists('feeTotal', $data ?? [], null);
        $this->setIfExists('feeTotalTaxin', $data ?? [], null);
        $this->setIfExists('feeProfitTax', $data ?? [], null);
        $this->setIfExists('feeProfit', $data ?? [], null);
        $this->setIfExists('feeCost', $data ?? [], null);
        $this->setIfExists('feeRateTotal', $data ?? [], null);
        $this->setIfExists('fixedFee', $data ?? [], null);
        $this->setIfExists('applyType', $data ?? [], null);
        $this->setIfExists('webRegistrationFee', $data ?? [], null);
        $this->setIfExists('webRegistrationFeeTaxin', $data ?? [], null);
        $this->setIfExists('webRegistrationFeeTax', $data ?? [], null);
        $this->setIfExists('platformFee', $data ?? [], null);
        $this->setIfExists('platformFeeTaxin', $data ?? [], null);
        $this->setIfExists('platformFeeRate', $data ?? [], null);
        $this->setIfExists('fixedFeeForPlatformFee', $data ?? [], null);
        $this->setIfExists('applyTypeForPlatformFee', $data ?? [], null);
        $this->setIfExists('platformWebRegistrationFee', $data ?? [], null);
        $this->setIfExists('platformWebRegistrationFeeTaxin', $data ?? [], null);
        $this->setIfExists('platformWebRegistrationFeeTax', $data ?? [], null);
        $this->setIfExists('processedDate', $data ?? [], null);
        $this->setIfExists('aggregateTermStart', $data ?? [], null);
        $this->setIfExists('aggregateTermEnd', $data ?? [], null);
        $this->setIfExists('created', $data ?? [], null);
        $this->setIfExists('updated', $data ?? [], null);
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array.
     *
     * @param array<string, mixed> $fields
     */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }
        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return list<string> invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];
        $allowedValues = $this->getApplyTypeAllowableValues();
        if (!is_null($this->container['applyType']) && !in_array($this->container['applyType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf("invalid value '%s' for 'applyType', must be one of '%s'", $this->container['applyType'], implode("', '", $allowedValues));
        }
        $allowedValues = $this->getApplyTypeForPlatformFeeAllowableValues();
        if (!is_null($this->container['applyTypeForPlatformFee']) && !in_array($this->container['applyTypeForPlatformFee'], $allowedValues, true)) {
            $invalidProperties[] = sprintf("invalid value '%s' for 'applyTypeForPlatformFee', must be one of '%s'", $this->container['applyTypeForPlatformFee'], implode("', '", $allowedValues));
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return 0 === count($this->listInvalidProperties());
    }

    /**
     * Gets detailId.
     *
     * @return int|null
     */
    public function getDetailId(): mixed
    {
        return $this->container['detailId'];
    }

    /**
     * Sets detailId.
     *
     * @param int $detailId 売上入金詳細 ID
     */
    public function setDetailId(mixed $detailId): static
    {
        if (is_null($detailId)) {
            throw new \InvalidArgumentException('non-nullable detailId cannot be null');
        }
        $this->container['detailId'] = $detailId;

        return $this;
    }

    /**
     * Gets shopId.
     *
     * @return string|null
     */
    public function getShopId(): mixed
    {
        return $this->container['shopId'];
    }

    /**
     * Sets shopId.
     *
     * @param string $shopId ショップID
     */
    public function setShopId(mixed $shopId): static
    {
        if (is_null($shopId)) {
            throw new \InvalidArgumentException('non-nullable shopId cannot be null');
        }
        $this->container['shopId'] = $shopId;

        return $this;
    }

    /**
     * Gets scheduledDepositDate.
     *
     * @return string|null
     */
    public function getScheduledDepositDate(): mixed
    {
        return $this->container['scheduledDepositDate'];
    }

    /**
     * Sets scheduledDepositDate.
     *
     * @param string $scheduledDepositDate 入金予定日   形式： `yyyy/MM/dd HH:MM`
     */
    public function setScheduledDepositDate(mixed $scheduledDepositDate): static
    {
        if (is_null($scheduledDepositDate)) {
            throw new \InvalidArgumentException('non-nullable scheduledDepositDate cannot be null');
        }
        $this->container['scheduledDepositDate'] = $scheduledDepositDate;

        return $this;
    }

    /**
     * Gets tradeType.
     *
     * @return AccountDetailTradeType|null
     */
    public function getTradeType(): mixed
    {
        return $this->container['tradeType'];
    }

    /**
     * Sets tradeType.
     *
     * @param AccountDetailTradeType $tradeType tradeType
     */
    public function setTradeType(mixed $tradeType): static
    {
        if (is_null($tradeType)) {
            throw new \InvalidArgumentException('non-nullable tradeType cannot be null');
        }
        $this->container['tradeType'] = $tradeType;

        return $this;
    }

    /**
     * Gets paymentMethod.
     *
     * @return AccountPaymentMethod|null
     */
    public function getPaymentMethod(): mixed
    {
        return $this->container['paymentMethod'];
    }

    /**
     * Sets paymentMethod.
     *
     * @param AccountPaymentMethod $paymentMethod paymentMethod
     */
    public function setPaymentMethod(mixed $paymentMethod): static
    {
        if (is_null($paymentMethod)) {
            throw new \InvalidArgumentException('non-nullable paymentMethod cannot be null');
        }
        $this->container['paymentMethod'] = $paymentMethod;

        return $this;
    }

    /**
     * Gets amountCorrectionType.
     *
     * @return string|null
     */
    public function getAmountCorrectionType(): mixed
    {
        return $this->container['amountCorrectionType'];
    }

    /**
     * Sets amountCorrectionType.
     *
     * @param string $amountCorrectionType 課金訂正内容
     */
    public function setAmountCorrectionType(mixed $amountCorrectionType): static
    {
        if (is_null($amountCorrectionType)) {
            throw new \InvalidArgumentException('non-nullable amountCorrectionType cannot be null');
        }
        $this->container['amountCorrectionType'] = $amountCorrectionType;

        return $this;
    }

    /**
     * Gets accountId.
     *
     * @return int|null
     */
    public function getAccountId(): mixed
    {
        return $this->container['accountId'];
    }

    /**
     * Sets accountId.
     *
     * @param int $accountId 精算ID
     */
    public function setAccountId(mixed $accountId): static
    {
        if (is_null($accountId)) {
            throw new \InvalidArgumentException('non-nullable accountId cannot be null');
        }
        $this->container['accountId'] = $accountId;

        return $this;
    }

    /**
     * Gets orderId.
     *
     * @return string|null
     */
    public function getOrderId(): mixed
    {
        return $this->container['orderId'];
    }

    /**
     * Sets orderId.
     *
     * @param string $orderId オーダー（決済）ID
     */
    public function setOrderId(mixed $orderId): static
    {
        if (is_null($orderId)) {
            throw new \InvalidArgumentException('non-nullable orderId cannot be null');
        }
        $this->container['orderId'] = $orderId;

        return $this;
    }

    /**
     * Gets accessId.
     *
     * @return string|null
     */
    public function getAccessId(): mixed
    {
        return $this->container['accessId'];
    }

    /**
     * Sets accessId.
     *
     * @param string $accessId 取引ID
     */
    public function setAccessId(mixed $accessId): static
    {
        if (is_null($accessId)) {
            throw new \InvalidArgumentException('non-nullable accessId cannot be null');
        }
        $this->container['accessId'] = $accessId;

        return $this;
    }

    /**
     * Gets depositAmount.
     *
     * @return int|null
     */
    public function getDepositAmount(): mixed
    {
        return $this->container['depositAmount'];
    }

    /**
     * Sets depositAmount.
     *
     * @param int $depositAmount この取引による入金額（参考値）\\ ※実際の入金額は全ての売上入金詳細の入金額の合算した後に計算される消費税金額によるため、この値は参考値となります
     */
    public function setDepositAmount(mixed $depositAmount): static
    {
        if (is_null($depositAmount)) {
            throw new \InvalidArgumentException('non-nullable depositAmount cannot be null');
        }
        $this->container['depositAmount'] = $depositAmount;

        return $this;
    }

    /**
     * Gets amount.
     *
     * @return int|null
     */
    public function getAmount(): mixed
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount.
     *
     * @param int $amount 利用金額
     */
    public function setAmount(mixed $amount): static
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets tax.
     *
     * @return int|null
     */
    public function getTax(): mixed
    {
        return $this->container['tax'];
    }

    /**
     * Sets tax.
     *
     * @param int $tax 税送料
     */
    public function setTax(mixed $tax): static
    {
        if (is_null($tax)) {
            throw new \InvalidArgumentException('non-nullable tax cannot be null');
        }
        $this->container['tax'] = $tax;

        return $this;
    }

    /**
     * Gets feeTotal.
     *
     * @return int|null
     */
    public function getFeeTotal(): mixed
    {
        return $this->container['feeTotal'];
    }

    /**
     * Sets feeTotal.
     *
     * @param int $feeTotal fincode 決済手数料（税抜）
     */
    public function setFeeTotal(mixed $feeTotal): static
    {
        if (is_null($feeTotal)) {
            throw new \InvalidArgumentException('non-nullable feeTotal cannot be null');
        }
        $this->container['feeTotal'] = $feeTotal;

        return $this;
    }

    /**
     * Gets feeTotalTaxin.
     *
     * @return int|null
     */
    public function getFeeTotalTaxin(): mixed
    {
        return $this->container['feeTotalTaxin'];
    }

    /**
     * Sets feeTotalTaxin.
     *
     * @param int $feeTotalTaxin fincode 決済手数料（税込）
     */
    public function setFeeTotalTaxin(mixed $feeTotalTaxin): static
    {
        if (is_null($feeTotalTaxin)) {
            throw new \InvalidArgumentException('non-nullable feeTotalTaxin cannot be null');
        }
        $this->container['feeTotalTaxin'] = $feeTotalTaxin;

        return $this;
    }

    /**
     * Gets feeProfitTax.
     *
     * @return int|null
     */
    public function getFeeProfitTax(): mixed
    {
        return $this->container['feeProfitTax'];
    }

    /**
     * Sets feeProfitTax.
     *
     * @param int $feeProfitTax fincode 決済手数料にかかる消費税
     */
    public function setFeeProfitTax(mixed $feeProfitTax): static
    {
        if (is_null($feeProfitTax)) {
            throw new \InvalidArgumentException('non-nullable feeProfitTax cannot be null');
        }
        $this->container['feeProfitTax'] = $feeProfitTax;

        return $this;
    }

    /**
     * Gets feeProfit.
     *
     * @return int|null
     */
    public function getFeeProfit(): mixed
    {
        return $this->container['feeProfit'];
    }

    /**
     * Sets feeProfit.
     *
     * @param int $feeProfit fincode 決済手数料のうち、課税対象金額
     */
    public function setFeeProfit(mixed $feeProfit): static
    {
        if (is_null($feeProfit)) {
            throw new \InvalidArgumentException('non-nullable feeProfit cannot be null');
        }
        $this->container['feeProfit'] = $feeProfit;

        return $this;
    }

    /**
     * Gets feeCost.
     *
     * @return int|null
     */
    public function getFeeCost(): mixed
    {
        return $this->container['feeCost'];
    }

    /**
     * Sets feeCost.
     *
     * @param int $feeCost fincode 決済手数料のうち、非課税対象金額
     */
    public function setFeeCost(mixed $feeCost): static
    {
        if (is_null($feeCost)) {
            throw new \InvalidArgumentException('non-nullable feeCost cannot be null');
        }
        $this->container['feeCost'] = $feeCost;

        return $this;
    }

    /**
     * Gets feeRateTotal.
     *
     * @return float|null
     */
    public function getFeeRateTotal(): mixed
    {
        return $this->container['feeRateTotal'];
    }

    /**
     * Sets feeRateTotal.
     *
     * @param float $feeRateTotal fincode 決済手数料率
     */
    public function setFeeRateTotal(mixed $feeRateTotal): static
    {
        if (is_null($feeRateTotal)) {
            throw new \InvalidArgumentException('non-nullable feeRateTotal cannot be null');
        }
        $this->container['feeRateTotal'] = $feeRateTotal;

        return $this;
    }

    /**
     * Gets fixedFee.
     *
     * @return int|null
     */
    public function getFixedFee(): mixed
    {
        return $this->container['fixedFee'];
    }

    /**
     * Sets fixedFee.
     *
     * @param int|null $fixedFee fincode 決済手数料 最低手数料
     */
    public function setFixedFee(mixed $fixedFee): static
    {
        if (is_null($fixedFee)) {
            $this->openAPINullablesSetToNull[] = 'fixedFee';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fixedFee', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['fixedFee'] = $fixedFee;

        return $this;
    }

    /**
     * Gets applyType.
     *
     * @return int|null
     */
    public function getApplyType(): mixed
    {
        return $this->container['applyType'];
    }

    /**
     * Sets applyType.
     *
     * @param int $applyType fincode手数料率 適用区分  - `0`: 料率。<br /><span class=\"smallText\">この決済による売上に対し、fincode 決済手数料率が適用されたことを示します。</span> - `1`: 最低手数料。<br /><span class=\"smallText\">この決済による売上に対し、fincode 決済最低手数料が適用されたことを示します。</span>
     */
    public function setApplyType(mixed $applyType): static
    {
        if (is_null($applyType)) {
            throw new \InvalidArgumentException('non-nullable applyType cannot be null');
        }
        $allowedValues = $this->getApplyTypeAllowableValues();
        if (!in_array($applyType, $allowedValues, true)) {
            throw new \InvalidArgumentException(sprintf("Invalid value '%s' for 'applyType', must be one of '%s'", $applyType, implode("', '", $allowedValues)));
        }
        $this->container['applyType'] = $applyType;

        return $this;
    }

    /**
     * Gets webRegistrationFee.
     *
     * @return int|null
     */
    public function getWebRegistrationFee(): mixed
    {
        return $this->container['webRegistrationFee'];
    }

    /**
     * Sets webRegistrationFee.
     *
     * @param int $webRegistrationFee fincode 振替口座 Web登録手数料（税抜）\\ ※ 口座振替のみ
     */
    public function setWebRegistrationFee(mixed $webRegistrationFee): static
    {
        if (is_null($webRegistrationFee)) {
            throw new \InvalidArgumentException('non-nullable webRegistrationFee cannot be null');
        }
        $this->container['webRegistrationFee'] = $webRegistrationFee;

        return $this;
    }

    /**
     * Gets webRegistrationFeeTaxin.
     *
     * @return int|null
     */
    public function getWebRegistrationFeeTaxin(): mixed
    {
        return $this->container['webRegistrationFeeTaxin'];
    }

    /**
     * Sets webRegistrationFeeTaxin.
     *
     * @param int $webRegistrationFeeTaxin fincode 振替口座 Web登録手数料（税込）\\ ※ 口座振替のみ
     */
    public function setWebRegistrationFeeTaxin(mixed $webRegistrationFeeTaxin): static
    {
        if (is_null($webRegistrationFeeTaxin)) {
            throw new \InvalidArgumentException('non-nullable webRegistrationFeeTaxin cannot be null');
        }
        $this->container['webRegistrationFeeTaxin'] = $webRegistrationFeeTaxin;

        return $this;
    }

    /**
     * Gets webRegistrationFeeTax.
     *
     * @return int|null
     */
    public function getWebRegistrationFeeTax(): mixed
    {
        return $this->container['webRegistrationFeeTax'];
    }

    /**
     * Sets webRegistrationFeeTax.
     *
     * @param int $webRegistrationFeeTax fincode手数料 Web登録手数料消費税\\ ※ 口座振替のみ
     */
    public function setWebRegistrationFeeTax(mixed $webRegistrationFeeTax): static
    {
        if (is_null($webRegistrationFeeTax)) {
            throw new \InvalidArgumentException('non-nullable webRegistrationFeeTax cannot be null');
        }
        $this->container['webRegistrationFeeTax'] = $webRegistrationFeeTax;

        return $this;
    }

    /**
     * Gets platformFee.
     *
     * @return int|null
     */
    public function getPlatformFee(): mixed
    {
        return $this->container['platformFee'];
    }

    /**
     * Sets platformFee.
     *
     * @param int|null $platformFee プラットフォーム利用料（税抜）\\ ※ テナントのみ
     */
    public function setPlatformFee(mixed $platformFee): static
    {
        if (is_null($platformFee)) {
            $this->openAPINullablesSetToNull[] = 'platformFee';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('platformFee', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['platformFee'] = $platformFee;

        return $this;
    }

    /**
     * Gets platformFeeTaxin.
     *
     * @return int|null
     */
    public function getPlatformFeeTaxin(): mixed
    {
        return $this->container['platformFeeTaxin'];
    }

    /**
     * Sets platformFeeTaxin.
     *
     * @param int $platformFeeTaxin プラットフォーム利用料（税込）\\ ※ テナントのみ
     */
    public function setPlatformFeeTaxin(mixed $platformFeeTaxin): static
    {
        if (is_null($platformFeeTaxin)) {
            throw new \InvalidArgumentException('non-nullable platformFeeTaxin cannot be null');
        }
        $this->container['platformFeeTaxin'] = $platformFeeTaxin;

        return $this;
    }

    /**
     * Gets platformFeeRate.
     *
     * @return float|null
     */
    public function getPlatformFeeRate(): mixed
    {
        return $this->container['platformFeeRate'];
    }

    /**
     * Sets platformFeeRate.
     *
     * @param float|null $platformFeeRate プラットフォーム利用料率\\ ※ テナントのみ
     */
    public function setPlatformFeeRate(mixed $platformFeeRate): static
    {
        if (is_null($platformFeeRate)) {
            $this->openAPINullablesSetToNull[] = 'platformFeeRate';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('platformFeeRate', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['platformFeeRate'] = $platformFeeRate;

        return $this;
    }

    /**
     * Gets fixedFeeForPlatformFee.
     *
     * @return int|null
     */
    public function getFixedFeeForPlatformFee(): mixed
    {
        return $this->container['fixedFeeForPlatformFee'];
    }

    /**
     * Sets fixedFeeForPlatformFee.
     *
     * @param int|null $fixedFeeForPlatformFee プラットフォーム利用料率 最低手数料\\ ※ テナントのみ
     */
    public function setFixedFeeForPlatformFee(mixed $fixedFeeForPlatformFee): static
    {
        if (is_null($fixedFeeForPlatformFee)) {
            $this->openAPINullablesSetToNull[] = 'fixedFeeForPlatformFee';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fixedFeeForPlatformFee', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['fixedFeeForPlatformFee'] = $fixedFeeForPlatformFee;

        return $this;
    }

    /**
     * Gets applyTypeForPlatformFee.
     *
     * @return int|null
     */
    public function getApplyTypeForPlatformFee(): mixed
    {
        return $this->container['applyTypeForPlatformFee'];
    }

    /**
     * Sets applyTypeForPlatformFee.
     *
     * @param int|null $applyTypeForPlatformFee プラットフォーム利用料率 適用区分  - `0`: 料率。<br /><span class=\"smallText\">この決済による売上に対し、プラットフォーム利用料率が適用されたことを示します。</span> - `1`: 最低手数料。<br /><span class=\"smallText\">この決済による売上に対し、プラットフォームが設定した最低利用料が適用されたことを示します。</span>  ※ テナントのみ
     */
    public function setApplyTypeForPlatformFee(mixed $applyTypeForPlatformFee): static
    {
        if (is_null($applyTypeForPlatformFee)) {
            $this->openAPINullablesSetToNull[] = 'applyTypeForPlatformFee';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('applyTypeForPlatformFee', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getApplyTypeForPlatformFeeAllowableValues();
        if (!is_null($applyTypeForPlatformFee) && !in_array($applyTypeForPlatformFee, $allowedValues, true)) {
            throw new \InvalidArgumentException(sprintf("Invalid value '%s' for 'applyTypeForPlatformFee', must be one of '%s'", $applyTypeForPlatformFee, implode("', '", $allowedValues)));
        }
        $this->container['applyTypeForPlatformFee'] = $applyTypeForPlatformFee;

        return $this;
    }

    /**
     * Gets platformWebRegistrationFee.
     *
     * @return int|null
     */
    public function getPlatformWebRegistrationFee(): mixed
    {
        return $this->container['platformWebRegistrationFee'];
    }

    /**
     * Sets platformWebRegistrationFee.
     *
     * @param int $platformWebRegistrationFee プラットフォームWeb登録利用料（税抜）\\ ※ 口座振替のみ\\ ※ テナントのみ
     */
    public function setPlatformWebRegistrationFee(mixed $platformWebRegistrationFee): static
    {
        if (is_null($platformWebRegistrationFee)) {
            throw new \InvalidArgumentException('non-nullable platformWebRegistrationFee cannot be null');
        }
        $this->container['platformWebRegistrationFee'] = $platformWebRegistrationFee;

        return $this;
    }

    /**
     * Gets platformWebRegistrationFeeTaxin.
     *
     * @return int|null
     */
    public function getPlatformWebRegistrationFeeTaxin(): mixed
    {
        return $this->container['platformWebRegistrationFeeTaxin'];
    }

    /**
     * Sets platformWebRegistrationFeeTaxin.
     *
     * @param int $platformWebRegistrationFeeTaxin プラットフォームWeb登録利用料（税込）\\ ※ 口座振替のみ\\ ※ テナントのみ
     */
    public function setPlatformWebRegistrationFeeTaxin(mixed $platformWebRegistrationFeeTaxin): static
    {
        if (is_null($platformWebRegistrationFeeTaxin)) {
            throw new \InvalidArgumentException('non-nullable platformWebRegistrationFeeTaxin cannot be null');
        }
        $this->container['platformWebRegistrationFeeTaxin'] = $platformWebRegistrationFeeTaxin;

        return $this;
    }

    /**
     * Gets platformWebRegistrationFeeTax.
     *
     * @return int|null
     */
    public function getPlatformWebRegistrationFeeTax(): mixed
    {
        return $this->container['platformWebRegistrationFeeTax'];
    }

    /**
     * Sets platformWebRegistrationFeeTax.
     *
     * @param int $platformWebRegistrationFeeTax プラットフォームWeb登録利用料消費税\\ ※ 口座振替のみ\\ ※ テナントのみ
     */
    public function setPlatformWebRegistrationFeeTax(mixed $platformWebRegistrationFeeTax): static
    {
        if (is_null($platformWebRegistrationFeeTax)) {
            throw new \InvalidArgumentException('non-nullable platformWebRegistrationFeeTax cannot be null');
        }
        $this->container['platformWebRegistrationFeeTax'] = $platformWebRegistrationFeeTax;

        return $this;
    }

    /**
     * Gets processedDate.
     *
     * @return string|null
     */
    public function getProcessedDate(): mixed
    {
        return $this->container['processedDate'];
    }

    /**
     * Sets processedDate.
     *
     * @param string $processedDate 取引の確定処理を行った日時 \\ 形式： `yyyy/MM/dd HH:MM`
     */
    public function setProcessedDate(mixed $processedDate): static
    {
        if (is_null($processedDate)) {
            throw new \InvalidArgumentException('non-nullable processedDate cannot be null');
        }
        $this->container['processedDate'] = $processedDate;

        return $this;
    }

    /**
     * Gets aggregateTermStart.
     *
     * @return string|null
     */
    public function getAggregateTermStart(): mixed
    {
        return $this->container['aggregateTermStart'];
    }

    /**
     * Sets aggregateTermStart.
     *
     * @param string $aggregateTermStart 集計期間の開始日\\   形式： `yyyy/MM/dd HH:MM`
     */
    public function setAggregateTermStart(mixed $aggregateTermStart): static
    {
        if (is_null($aggregateTermStart)) {
            throw new \InvalidArgumentException('non-nullable aggregateTermStart cannot be null');
        }
        $this->container['aggregateTermStart'] = $aggregateTermStart;

        return $this;
    }

    /**
     * Gets aggregateTermEnd.
     *
     * @return string|null
     */
    public function getAggregateTermEnd(): mixed
    {
        return $this->container['aggregateTermEnd'];
    }

    /**
     * Sets aggregateTermEnd.
     *
     * @param string $aggregateTermEnd 集計期間の終了日\\ 形式： `yyyy/MM/dd HH:MM`
     */
    public function setAggregateTermEnd(mixed $aggregateTermEnd): static
    {
        if (is_null($aggregateTermEnd)) {
            throw new \InvalidArgumentException('non-nullable aggregateTermEnd cannot be null');
        }
        $this->container['aggregateTermEnd'] = $aggregateTermEnd;

        return $this;
    }

    /**
     * Gets created.
     *
     * @return string|null
     */
    public function getCreated(): mixed
    {
        return $this->container['created'];
    }

    /**
     * Sets created.
     *
     * @param string $created 作成日\\ 形式：`yyyy/MM/dd HH:mm:ss.SSS`
     */
    public function setCreated(mixed $created): static
    {
        if (is_null($created)) {
            throw new \InvalidArgumentException('non-nullable created cannot be null');
        }
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets updated.
     *
     * @return string|null
     */
    public function getUpdated(): mixed
    {
        return $this->container['updated'];
    }

    /**
     * Sets updated.
     *
     * @param string|null $updated 更新日\\ 形式：`yyyy/MM/dd HH:mm:ss.SSS`
     */
    public function setUpdated(mixed $updated): static
    {
        if (is_null($updated)) {
            $this->openAPINullablesSetToNull[] = 'updated';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('updated', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['updated'] = $updated;

        return $this;
    }

    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @see https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    public function jsonSerialize(): mixed
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object.
     */
    public function __toString(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
    }

    /**
     * Gets a header-safe presentation of the object.
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
