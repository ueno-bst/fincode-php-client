<?php

declare(strict_types=1);
/**
 * fincode API.
 *
 * fincodeのAPIリファレンスです。\\ fincodeは決済情報のほか様々なリソースを管理できるため、リソース指向なREST APIをベースとしたインターフェイス設計のもとでAPIを提供しています。\\ APIの呼び出しにはAPIキーによる認証が必要であり、リクエストの際に`Authorization`ヘッダーに有効なAPIキーをセットすることで認証できます。
 *
 * The version of the OpenAPI document: 1.2.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Fincode\Model;

use OpenAPI\Fincode\ObjectSerializer;

/**
 * @implements \ArrayAccess<string, mixed>
 */
class RegistryCorporateInfo implements ModelInterface, \ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;
    /**
     * The original name of the model.
     */
    protected static string $openAPIModelName = 'RegistryCorporateInfo';
    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var array<string, string>
     */
    protected static array $openAPITypes = ['companyName' => 'string', 'companyNameKana' => 'string', 'companyKind' => 'string', 'companyPostalCode' => 'string', 'companyPrefectureCode' => 'string', 'companyCityCode' => 'string', 'companyPrefecture' => 'string', 'companyPrefectureKana' => 'string', 'companyCity' => 'string', 'companyCityKana' => 'string', 'companyStreet' => 'string', 'companyStreetKana' => 'string'];
    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var array<string, string|null>
     */
    protected static array $openAPIFormats = ['companyName' => null, 'companyNameKana' => null, 'companyKind' => null, 'companyPostalCode' => null, 'companyPrefectureCode' => null, 'companyCityCode' => null, 'companyPrefecture' => null, 'companyPrefectureKana' => null, 'companyCity' => null, 'companyCityKana' => null, 'companyStreet' => null, 'companyStreetKana' => null];
    /**
     * Array of nullable properties. Used for (de)serialization.
     *
     * @var array<string, bool>
     */
    protected static array $openAPINullables = ['companyName' => true, 'companyNameKana' => true, 'companyKind' => true, 'companyPostalCode' => true, 'companyPrefectureCode' => true, 'companyCityCode' => true, 'companyPrefecture' => true, 'companyPrefectureKana' => true, 'companyCity' => true, 'companyCityKana' => true, 'companyStreet' => true, 'companyStreetKana' => true];
    /**
     * If a nullable field gets set to null, insert it here.
     *
     * @var array<string, bool>
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return array<string, string|null>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties.
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null.
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null.
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable.
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }
    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = ['companyName' => 'company_name', 'companyNameKana' => 'company_name_kana', 'companyKind' => 'company_kind', 'companyPostalCode' => 'company_postal_code', 'companyPrefectureCode' => 'company_prefecture_code', 'companyCityCode' => 'company_city_code', 'companyPrefecture' => 'company_prefecture', 'companyPrefectureKana' => 'company_prefecture_kana', 'companyCity' => 'company_city', 'companyCityKana' => 'company_city_kana', 'companyStreet' => 'company_street', 'companyStreetKana' => 'company_street_kana'];
    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var array<string, string>
     */
    protected static array $setters = ['companyName' => 'setCompanyName', 'companyNameKana' => 'setCompanyNameKana', 'companyKind' => 'setCompanyKind', 'companyPostalCode' => 'setCompanyPostalCode', 'companyPrefectureCode' => 'setCompanyPrefectureCode', 'companyCityCode' => 'setCompanyCityCode', 'companyPrefecture' => 'setCompanyPrefecture', 'companyPrefectureKana' => 'setCompanyPrefectureKana', 'companyCity' => 'setCompanyCity', 'companyCityKana' => 'setCompanyCityKana', 'companyStreet' => 'setCompanyStreet', 'companyStreetKana' => 'setCompanyStreetKana'];
    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var array<string, string>
     */
    protected static array $getters = ['companyName' => 'getCompanyName', 'companyNameKana' => 'getCompanyNameKana', 'companyKind' => 'getCompanyKind', 'companyPostalCode' => 'getCompanyPostalCode', 'companyPrefectureCode' => 'getCompanyPrefectureCode', 'companyCityCode' => 'getCompanyCityCode', 'companyPrefecture' => 'getCompanyPrefecture', 'companyPrefectureKana' => 'getCompanyPrefectureKana', 'companyCity' => 'getCompanyCity', 'companyCityKana' => 'getCompanyCityKana', 'companyStreet' => 'getCompanyStreet', 'companyStreetKana' => 'getCompanyStreetKana'];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }
    /**
     * Associative array for storing property values.
     *
     * @phpstan-var array<string, mixed>
     *
     * @psalm-var array<string, mixed>
     */
    protected array $container = [];

    /**
     * Constructor.
     *
     * @param array<string, mixed> $data Associated array of property values
     *                                   initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('companyName', $data ?? [], null);
        $this->setIfExists('companyNameKana', $data ?? [], null);
        $this->setIfExists('companyKind', $data ?? [], null);
        $this->setIfExists('companyPostalCode', $data ?? [], null);
        $this->setIfExists('companyPrefectureCode', $data ?? [], null);
        $this->setIfExists('companyCityCode', $data ?? [], null);
        $this->setIfExists('companyPrefecture', $data ?? [], null);
        $this->setIfExists('companyPrefectureKana', $data ?? [], null);
        $this->setIfExists('companyCity', $data ?? [], null);
        $this->setIfExists('companyCityKana', $data ?? [], null);
        $this->setIfExists('companyStreet', $data ?? [], null);
        $this->setIfExists('companyStreetKana', $data ?? [], null);
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array.
     *
     * @param array<string, mixed> $fields
     */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }
        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return list<string> invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return 0 === count($this->listInvalidProperties());
    }

    /**
     * Gets companyName.
     *
     * @return string|null
     */
    public function getCompanyName(): mixed
    {
        return $this->container['companyName'];
    }

    /**
     * Sets companyName.
     *
     * @param string|null $companyName 法人名
     */
    public function setCompanyName(mixed $companyName): static
    {
        if (is_null($companyName)) {
            $this->openAPINullablesSetToNull[] = 'companyName';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('companyName', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['companyName'] = $companyName;

        return $this;
    }

    /**
     * Gets companyNameKana.
     *
     * @return string|null
     */
    public function getCompanyNameKana(): mixed
    {
        return $this->container['companyNameKana'];
    }

    /**
     * Sets companyNameKana.
     *
     * @param string|null $companyNameKana 法人名（カナ）
     */
    public function setCompanyNameKana(mixed $companyNameKana): static
    {
        if (is_null($companyNameKana)) {
            $this->openAPINullablesSetToNull[] = 'companyNameKana';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('companyNameKana', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['companyNameKana'] = $companyNameKana;

        return $this;
    }

    /**
     * Gets companyKind.
     *
     * @return string|null
     */
    public function getCompanyKind(): mixed
    {
        return $this->container['companyKind'];
    }

    /**
     * Sets companyKind.
     *
     * @param string|null $companyKind 法人種別（国税庁既定のコード定義に準拠）
     */
    public function setCompanyKind(mixed $companyKind): static
    {
        if (is_null($companyKind)) {
            $this->openAPINullablesSetToNull[] = 'companyKind';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('companyKind', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['companyKind'] = $companyKind;

        return $this;
    }

    /**
     * Gets companyPostalCode.
     *
     * @return string|null
     */
    public function getCompanyPostalCode(): mixed
    {
        return $this->container['companyPostalCode'];
    }

    /**
     * Sets companyPostalCode.
     *
     * @param string|null $companyPostalCode 会社情報 郵便番号
     */
    public function setCompanyPostalCode(mixed $companyPostalCode): static
    {
        if (is_null($companyPostalCode)) {
            $this->openAPINullablesSetToNull[] = 'companyPostalCode';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('companyPostalCode', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['companyPostalCode'] = $companyPostalCode;

        return $this;
    }

    /**
     * Gets companyPrefectureCode.
     *
     * @return string|null
     */
    public function getCompanyPrefectureCode(): mixed
    {
        return $this->container['companyPrefectureCode'];
    }

    /**
     * Sets companyPrefectureCode.
     *
     * @param string|null $companyPrefectureCode 会社情報 都道府県コード
     */
    public function setCompanyPrefectureCode(mixed $companyPrefectureCode): static
    {
        if (is_null($companyPrefectureCode)) {
            $this->openAPINullablesSetToNull[] = 'companyPrefectureCode';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('companyPrefectureCode', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['companyPrefectureCode'] = $companyPrefectureCode;

        return $this;
    }

    /**
     * Gets companyCityCode.
     *
     * @return string|null
     */
    public function getCompanyCityCode(): mixed
    {
        return $this->container['companyCityCode'];
    }

    /**
     * Sets companyCityCode.
     *
     * @param string|null $companyCityCode 会社情報 市区町村コード
     */
    public function setCompanyCityCode(mixed $companyCityCode): static
    {
        if (is_null($companyCityCode)) {
            $this->openAPINullablesSetToNull[] = 'companyCityCode';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('companyCityCode', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['companyCityCode'] = $companyCityCode;

        return $this;
    }

    /**
     * Gets companyPrefecture.
     *
     * @return string|null
     */
    public function getCompanyPrefecture(): mixed
    {
        return $this->container['companyPrefecture'];
    }

    /**
     * Sets companyPrefecture.
     *
     * @param string|null $companyPrefecture 会社情報 都道府県
     */
    public function setCompanyPrefecture(mixed $companyPrefecture): static
    {
        if (is_null($companyPrefecture)) {
            $this->openAPINullablesSetToNull[] = 'companyPrefecture';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('companyPrefecture', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['companyPrefecture'] = $companyPrefecture;

        return $this;
    }

    /**
     * Gets companyPrefectureKana.
     *
     * @return string|null
     */
    public function getCompanyPrefectureKana(): mixed
    {
        return $this->container['companyPrefectureKana'];
    }

    /**
     * Sets companyPrefectureKana.
     *
     * @param string|null $companyPrefectureKana 会社情報 都道府県（カナ）
     */
    public function setCompanyPrefectureKana(mixed $companyPrefectureKana): static
    {
        if (is_null($companyPrefectureKana)) {
            $this->openAPINullablesSetToNull[] = 'companyPrefectureKana';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('companyPrefectureKana', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['companyPrefectureKana'] = $companyPrefectureKana;

        return $this;
    }

    /**
     * Gets companyCity.
     *
     * @return string|null
     */
    public function getCompanyCity(): mixed
    {
        return $this->container['companyCity'];
    }

    /**
     * Sets companyCity.
     *
     * @param string|null $companyCity 会社情報 市区町村
     */
    public function setCompanyCity(mixed $companyCity): static
    {
        if (is_null($companyCity)) {
            $this->openAPINullablesSetToNull[] = 'companyCity';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('companyCity', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['companyCity'] = $companyCity;

        return $this;
    }

    /**
     * Gets companyCityKana.
     *
     * @return string|null
     */
    public function getCompanyCityKana(): mixed
    {
        return $this->container['companyCityKana'];
    }

    /**
     * Sets companyCityKana.
     *
     * @param string|null $companyCityKana 会社情報 市区町村（カナ）
     */
    public function setCompanyCityKana(mixed $companyCityKana): static
    {
        if (is_null($companyCityKana)) {
            $this->openAPINullablesSetToNull[] = 'companyCityKana';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('companyCityKana', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['companyCityKana'] = $companyCityKana;

        return $this;
    }

    /**
     * Gets companyStreet.
     *
     * @return string|null
     */
    public function getCompanyStreet(): mixed
    {
        return $this->container['companyStreet'];
    }

    /**
     * Sets companyStreet.
     *
     * @param string|null $companyStreet 会社情報 町域・丁目・番地
     */
    public function setCompanyStreet(mixed $companyStreet): static
    {
        if (is_null($companyStreet)) {
            $this->openAPINullablesSetToNull[] = 'companyStreet';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('companyStreet', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['companyStreet'] = $companyStreet;

        return $this;
    }

    /**
     * Gets companyStreetKana.
     *
     * @return string|null
     */
    public function getCompanyStreetKana(): mixed
    {
        return $this->container['companyStreetKana'];
    }

    /**
     * Sets companyStreetKana.
     *
     * @param string|null $companyStreetKana 会社情報 町域・丁目・番地（カナ）
     */
    public function setCompanyStreetKana(mixed $companyStreetKana): static
    {
        if (is_null($companyStreetKana)) {
            $this->openAPINullablesSetToNull[] = 'companyStreetKana';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('companyStreetKana', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['companyStreetKana'] = $companyStreetKana;

        return $this;
    }

    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @see https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    public function jsonSerialize(): mixed
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object.
     */
    public function __toString(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
    }

    /**
     * Gets a header-safe presentation of the object.
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
