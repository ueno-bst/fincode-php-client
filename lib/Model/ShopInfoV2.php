<?php

declare(strict_types=1);
/**
 * fincode API.
 *
 * fincodeのAPIリファレンスです。\\ fincodeは決済情報のほか様々なリソースを管理できるため、リソース指向なREST APIをベースとしたインターフェイス設計のもとでAPIを提供しています。\\ APIの呼び出しにはAPIキーによる認証が必要であり、リクエストの際に`Authorization`ヘッダーに有効なAPIキーをセットすることで認証できます。
 *
 * The version of the OpenAPI document: 1.2.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Fincode\Model;

use OpenAPI\Fincode\ObjectSerializer;

/**
 * @implements \ArrayAccess<string, mixed>
 */
class ShopInfoV2 implements ModelInterface, \ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;
    /**
     * The original name of the model.
     */
    protected static string $openAPIModelName = 'ShopInfo.V2';
    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var array<string, string>
     */
    protected static array $openAPITypes = ['shopName' => 'string', 'shopNameKana' => 'string', 'shopNameEn' => 'string', 'supportMail' => 'string', 'supportTel' => 'string', 'unitPrice' => 'float', 'dealsLongApplyContent' => 'bool', 'dealsInsecureContent' => 'bool', 'lostTrial' => 'bool', 'useOfFincode' => '\OpenAPI\Fincode\Model\ShopInfoV2UseOfFincode', 'sitePublished' => 'bool', 'siteInfo' => '\OpenAPI\Fincode\Model\ShopInfoV2SiteInfo', 'prepaidPoint' => 'bool', 'prepaidPointInfo' => '\OpenAPI\Fincode\Model\ShopInfoV2PrepaidPointInfo', 'provides' => '\OpenAPI\Fincode\Model\ShopInfoV2Provides', 'contentDescription' => 'string', 'productContentInfo' => '\OpenAPI\Fincode\Model\ContentInfoV2', 'serviceContentInfo' => '\OpenAPI\Fincode\Model\ContentInfoV2', 'digitalContentInfo' => '\OpenAPI\Fincode\Model\ContentInfoV2', 'additionalInfo' => '\OpenAPI\Fincode\Model\ShopInfoV2AdditionalInfo'];
    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var array<string, string|null>
     */
    protected static array $openAPIFormats = ['shopName' => null, 'shopNameKana' => null, 'shopNameEn' => null, 'supportMail' => null, 'supportTel' => null, 'unitPrice' => null, 'dealsLongApplyContent' => null, 'dealsInsecureContent' => null, 'lostTrial' => null, 'useOfFincode' => null, 'sitePublished' => null, 'siteInfo' => null, 'prepaidPoint' => null, 'prepaidPointInfo' => null, 'provides' => null, 'contentDescription' => null, 'productContentInfo' => null, 'serviceContentInfo' => null, 'digitalContentInfo' => null, 'additionalInfo' => null];
    /**
     * Array of nullable properties. Used for (de)serialization.
     *
     * @var array<string, bool>
     */
    protected static array $openAPINullables = ['shopName' => false, 'shopNameKana' => false, 'shopNameEn' => false, 'supportMail' => true, 'supportTel' => true, 'unitPrice' => true, 'dealsLongApplyContent' => true, 'dealsInsecureContent' => true, 'lostTrial' => true, 'useOfFincode' => false, 'sitePublished' => true, 'siteInfo' => false, 'prepaidPoint' => true, 'prepaidPointInfo' => false, 'provides' => false, 'contentDescription' => true, 'productContentInfo' => false, 'serviceContentInfo' => false, 'digitalContentInfo' => false, 'additionalInfo' => true];
    /**
     * If a nullable field gets set to null, insert it here.
     *
     * @var array<string, bool>
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return array<string, string|null>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties.
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null.
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null.
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable.
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }
    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = ['shopName' => 'shop_name', 'shopNameKana' => 'shop_name_kana', 'shopNameEn' => 'shop_name_en', 'supportMail' => 'support_mail', 'supportTel' => 'support_tel', 'unitPrice' => 'unit_price', 'dealsLongApplyContent' => 'deals_long_apply_content', 'dealsInsecureContent' => 'deals_insecure_content', 'lostTrial' => 'lost_trial', 'useOfFincode' => 'use_of_fincode', 'sitePublished' => 'site_published', 'siteInfo' => 'site_info', 'prepaidPoint' => 'prepaid_point', 'prepaidPointInfo' => 'prepaid_point_info', 'provides' => 'provides', 'contentDescription' => 'content_description', 'productContentInfo' => 'product_content_info', 'serviceContentInfo' => 'service_content_info', 'digitalContentInfo' => 'digital_content_info', 'additionalInfo' => 'additional_info'];
    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var array<string, string>
     */
    protected static array $setters = ['shopName' => 'setShopName', 'shopNameKana' => 'setShopNameKana', 'shopNameEn' => 'setShopNameEn', 'supportMail' => 'setSupportMail', 'supportTel' => 'setSupportTel', 'unitPrice' => 'setUnitPrice', 'dealsLongApplyContent' => 'setDealsLongApplyContent', 'dealsInsecureContent' => 'setDealsInsecureContent', 'lostTrial' => 'setLostTrial', 'useOfFincode' => 'setUseOfFincode', 'sitePublished' => 'setSitePublished', 'siteInfo' => 'setSiteInfo', 'prepaidPoint' => 'setPrepaidPoint', 'prepaidPointInfo' => 'setPrepaidPointInfo', 'provides' => 'setProvides', 'contentDescription' => 'setContentDescription', 'productContentInfo' => 'setProductContentInfo', 'serviceContentInfo' => 'setServiceContentInfo', 'digitalContentInfo' => 'setDigitalContentInfo', 'additionalInfo' => 'setAdditionalInfo'];
    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var array<string, string>
     */
    protected static array $getters = ['shopName' => 'getShopName', 'shopNameKana' => 'getShopNameKana', 'shopNameEn' => 'getShopNameEn', 'supportMail' => 'getSupportMail', 'supportTel' => 'getSupportTel', 'unitPrice' => 'getUnitPrice', 'dealsLongApplyContent' => 'getDealsLongApplyContent', 'dealsInsecureContent' => 'getDealsInsecureContent', 'lostTrial' => 'getLostTrial', 'useOfFincode' => 'getUseOfFincode', 'sitePublished' => 'getSitePublished', 'siteInfo' => 'getSiteInfo', 'prepaidPoint' => 'getPrepaidPoint', 'prepaidPointInfo' => 'getPrepaidPointInfo', 'provides' => 'getProvides', 'contentDescription' => 'getContentDescription', 'productContentInfo' => 'getProductContentInfo', 'serviceContentInfo' => 'getServiceContentInfo', 'digitalContentInfo' => 'getDigitalContentInfo', 'additionalInfo' => 'getAdditionalInfo'];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }
    /**
     * Associative array for storing property values.
     *
     * @phpstan-var array<string, mixed>
     *
     * @psalm-var array<string, mixed>
     */
    protected array $container = [];

    /**
     * Constructor.
     *
     * @param array<string, mixed> $data Associated array of property values
     *                                   initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('shopName', $data ?? [], null);
        $this->setIfExists('shopNameKana', $data ?? [], null);
        $this->setIfExists('shopNameEn', $data ?? [], null);
        $this->setIfExists('supportMail', $data ?? [], null);
        $this->setIfExists('supportTel', $data ?? [], null);
        $this->setIfExists('unitPrice', $data ?? [], null);
        $this->setIfExists('dealsLongApplyContent', $data ?? [], null);
        $this->setIfExists('dealsInsecureContent', $data ?? [], null);
        $this->setIfExists('lostTrial', $data ?? [], null);
        $this->setIfExists('useOfFincode', $data ?? [], null);
        $this->setIfExists('sitePublished', $data ?? [], null);
        $this->setIfExists('siteInfo', $data ?? [], null);
        $this->setIfExists('prepaidPoint', $data ?? [], null);
        $this->setIfExists('prepaidPointInfo', $data ?? [], null);
        $this->setIfExists('provides', $data ?? [], null);
        $this->setIfExists('contentDescription', $data ?? [], null);
        $this->setIfExists('productContentInfo', $data ?? [], null);
        $this->setIfExists('serviceContentInfo', $data ?? [], null);
        $this->setIfExists('digitalContentInfo', $data ?? [], null);
        $this->setIfExists('additionalInfo', $data ?? [], null);
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array.
     *
     * @param array<string, mixed> $fields
     */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }
        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return list<string> invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];
        if (null === $this->container['shopName']) {
            $invalidProperties[] = "'shopName' can't be null";
        }
        if (mb_strlen($this->container['shopName']) > 100) {
            $invalidProperties[] = "invalid value for 'shopName', the character length must be smaller than or equal to 100.";
        }
        if (mb_strlen($this->container['shopName']) < 1) {
            $invalidProperties[] = "invalid value for 'shopName', the character length must be bigger than or equal to 1.";
        }
        if (null === $this->container['shopNameKana']) {
            $invalidProperties[] = "'shopNameKana' can't be null";
        }
        if (mb_strlen($this->container['shopNameKana']) > 100) {
            $invalidProperties[] = "invalid value for 'shopNameKana', the character length must be smaller than or equal to 100.";
        }
        if (mb_strlen($this->container['shopNameKana']) < 1) {
            $invalidProperties[] = "invalid value for 'shopNameKana', the character length must be bigger than or equal to 1.";
        }
        if (null === $this->container['shopNameEn']) {
            $invalidProperties[] = "'shopNameEn' can't be null";
        }
        if (mb_strlen($this->container['shopNameEn']) > 25) {
            $invalidProperties[] = "invalid value for 'shopNameEn', the character length must be smaller than or equal to 25.";
        }
        if (mb_strlen($this->container['shopNameEn']) < 1) {
            $invalidProperties[] = "invalid value for 'shopNameEn', the character length must be bigger than or equal to 1.";
        }
        if (null === $this->container['supportMail']) {
            $invalidProperties[] = "'supportMail' can't be null";
        }
        if (mb_strlen($this->container['supportMail']) > 254) {
            $invalidProperties[] = "invalid value for 'supportMail', the character length must be smaller than or equal to 254.";
        }
        if (mb_strlen($this->container['supportMail']) < 1) {
            $invalidProperties[] = "invalid value for 'supportMail', the character length must be bigger than or equal to 1.";
        }
        if (null === $this->container['supportTel']) {
            $invalidProperties[] = "'supportTel' can't be null";
        }
        if (mb_strlen($this->container['supportTel']) > 15) {
            $invalidProperties[] = "invalid value for 'supportTel', the character length must be smaller than or equal to 15.";
        }
        if (mb_strlen($this->container['supportTel']) < 1) {
            $invalidProperties[] = "invalid value for 'supportTel', the character length must be bigger than or equal to 1.";
        }
        if (null === $this->container['dealsLongApplyContent']) {
            $invalidProperties[] = "'dealsLongApplyContent' can't be null";
        }
        if (null === $this->container['dealsInsecureContent']) {
            $invalidProperties[] = "'dealsInsecureContent' can't be null";
        }
        if (null === $this->container['lostTrial']) {
            $invalidProperties[] = "'lostTrial' can't be null";
        }
        if (null === $this->container['useOfFincode']) {
            $invalidProperties[] = "'useOfFincode' can't be null";
        }
        if (null === $this->container['provides']) {
            $invalidProperties[] = "'provides' can't be null";
        }
        if (null === $this->container['contentDescription']) {
            $invalidProperties[] = "'contentDescription' can't be null";
        }
        if (mb_strlen($this->container['contentDescription']) > 5000) {
            $invalidProperties[] = "invalid value for 'contentDescription', the character length must be smaller than or equal to 5000.";
        }
        if (mb_strlen($this->container['contentDescription']) < 1) {
            $invalidProperties[] = "invalid value for 'contentDescription', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return 0 === count($this->listInvalidProperties());
    }

    /**
     * Gets shopName.
     *
     * @return string
     */
    public function getShopName(): mixed
    {
        return $this->container['shopName'];
    }

    /**
     * Sets shopName.
     *
     * @param string $shopName fincodeにおけるショップ名
     */
    public function setShopName(mixed $shopName): static
    {
        if (is_null($shopName)) {
            throw new \InvalidArgumentException('non-nullable shopName cannot be null');
        }
        if (mb_strlen($shopName) > 100) {
            throw new \InvalidArgumentException('invalid length for $shopName when calling ShopInfoV2., must be smaller than or equal to 100.');
        }
        if (mb_strlen($shopName) < 1) {
            throw new \InvalidArgumentException('invalid length for $shopName when calling ShopInfoV2., must be bigger than or equal to 1.');
        }
        $this->container['shopName'] = $shopName;

        return $this;
    }

    /**
     * Gets shopNameKana.
     *
     * @return string
     */
    public function getShopNameKana(): mixed
    {
        return $this->container['shopNameKana'];
    }

    /**
     * Sets shopNameKana.
     *
     * @param string $shopNameKana fincodeにおけるショップ名（カナ）
     */
    public function setShopNameKana(mixed $shopNameKana): static
    {
        if (is_null($shopNameKana)) {
            throw new \InvalidArgumentException('non-nullable shopNameKana cannot be null');
        }
        if (mb_strlen($shopNameKana) > 100) {
            throw new \InvalidArgumentException('invalid length for $shopNameKana when calling ShopInfoV2., must be smaller than or equal to 100.');
        }
        if (mb_strlen($shopNameKana) < 1) {
            throw new \InvalidArgumentException('invalid length for $shopNameKana when calling ShopInfoV2., must be bigger than or equal to 1.');
        }
        $this->container['shopNameKana'] = $shopNameKana;

        return $this;
    }

    /**
     * Gets shopNameEn.
     *
     * @return string
     */
    public function getShopNameEn(): mixed
    {
        return $this->container['shopNameEn'];
    }

    /**
     * Sets shopNameEn.
     *
     * @param string $shopNameEn fincodeにおけるショップ名（英語）
     */
    public function setShopNameEn(mixed $shopNameEn): static
    {
        if (is_null($shopNameEn)) {
            throw new \InvalidArgumentException('non-nullable shopNameEn cannot be null');
        }
        if (mb_strlen($shopNameEn) > 25) {
            throw new \InvalidArgumentException('invalid length for $shopNameEn when calling ShopInfoV2., must be smaller than or equal to 25.');
        }
        if (mb_strlen($shopNameEn) < 1) {
            throw new \InvalidArgumentException('invalid length for $shopNameEn when calling ShopInfoV2., must be bigger than or equal to 1.');
        }
        $this->container['shopNameEn'] = $shopNameEn;

        return $this;
    }

    /**
     * Gets supportMail.
     *
     * @return string
     */
    public function getSupportMail(): mixed
    {
        return $this->container['supportMail'];
    }

    /**
     * Sets supportMail.
     *
     * @param string|null $supportMail 購入者向けサポート窓口 メールアドレス\\ 形式： RFC 5322
     */
    public function setSupportMail(mixed $supportMail): static
    {
        if (is_null($supportMail)) {
            $this->openAPINullablesSetToNull[] = 'supportMail';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('supportMail', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($supportMail) && mb_strlen($supportMail) > 254) {
            throw new \InvalidArgumentException('invalid length for $supportMail when calling ShopInfoV2., must be smaller than or equal to 254.');
        }
        if (!is_null($supportMail) && mb_strlen($supportMail) < 1) {
            throw new \InvalidArgumentException('invalid length for $supportMail when calling ShopInfoV2., must be bigger than or equal to 1.');
        }
        $this->container['supportMail'] = $supportMail;

        return $this;
    }

    /**
     * Gets supportTel.
     *
     * @return string
     */
    public function getSupportTel(): mixed
    {
        return $this->container['supportTel'];
    }

    /**
     * Sets supportTel.
     *
     * @param string|null $supportTel 購入者向けサポート窓口 電話番号\\ 形式： 電話番号（ハイフンなし）
     */
    public function setSupportTel(mixed $supportTel): static
    {
        if (is_null($supportTel)) {
            $this->openAPINullablesSetToNull[] = 'supportTel';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('supportTel', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($supportTel) && mb_strlen($supportTel) > 15) {
            throw new \InvalidArgumentException('invalid length for $supportTel when calling ShopInfoV2., must be smaller than or equal to 15.');
        }
        if (!is_null($supportTel) && mb_strlen($supportTel) < 1) {
            throw new \InvalidArgumentException('invalid length for $supportTel when calling ShopInfoV2., must be bigger than or equal to 1.');
        }
        $this->container['supportTel'] = $supportTel;

        return $this;
    }

    /**
     * Gets unitPrice.
     *
     * @return float|null
     */
    public function getUnitPrice(): mixed
    {
        return $this->container['unitPrice'];
    }

    /**
     * Sets unitPrice.
     *
     * @param float|null $unitPrice 1回の決済における金額（単価）\\ \\ 例： `1000`（1000円）
     */
    public function setUnitPrice(mixed $unitPrice): static
    {
        if (is_null($unitPrice)) {
            $this->openAPINullablesSetToNull[] = 'unitPrice';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('unitPrice', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['unitPrice'] = $unitPrice;

        return $this;
    }

    /**
     * Gets dealsLongApplyContent.
     *
     * @return bool
     */
    public function getDealsLongApplyContent(): mixed
    {
        return $this->container['dealsLongApplyContent'];
    }

    /**
     * Sets dealsLongApplyContent.
     *
     * @param bool|null $dealsLongApplyContent fincode審査に時間がかかるコンテンツを取り扱うかどうかの表明  - `true`: fincode審査に時間がかかるコンテンツを取り扱う - `false`: fincode審査に時間がかかるコンテンツを取り扱わない  以下の商材を取り扱う場合は`true`を指定する必要があります。  - 呉服 - コンサルディングサービス - エステ、美容サロン、美容医療 - スポーツ施設・フィットネスクラブ - カルチャースクール・通信講座 - データ販売 - 情報詳細（情報の内容自体が商品となるもの） - 占い - サプリメント・健康食品 - 美容品・化粧品 - カツラ - 旅行業に該当するサービス - タバコ・CBD - 寄付金
     */
    public function setDealsLongApplyContent(mixed $dealsLongApplyContent): static
    {
        if (is_null($dealsLongApplyContent)) {
            $this->openAPINullablesSetToNull[] = 'dealsLongApplyContent';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('dealsLongApplyContent', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['dealsLongApplyContent'] = $dealsLongApplyContent;

        return $this;
    }

    /**
     * Gets dealsInsecureContent.
     *
     * @return bool
     */
    public function getDealsInsecureContent(): mixed
    {
        return $this->container['dealsInsecureContent'];
    }

    /**
     * Sets dealsInsecureContent.
     *
     * @param bool|null $dealsInsecureContent fincodeで取扱不可の商材を取り扱わないことの表明  - `true`: 取扱不可の商材を取り扱う予定はない - `false`: 取扱不可の商材を取り扱う予定がある  fincodeの禁止商材は以下の通りです。  - 金融行為（クレジットカードショッピング枠の現金化等） - 仮想通貨取引、金券（印紙、切手等含む）、商品券、プリペイドカード、有価証券 - 賭博、ギャンブル - RMT（リアルマネートレーディング） - ペット等の生き物全般（※標本・剥製も含む） - お布施 - 危険ドラッグ、デザイナーズドラッグ - 処方箋なしで購入できる処方薬（ルミガン・ラディース・クラッシュビスタ・ケアプロスト等） - 第三者の著作権・肖像権・知的所有権等を侵害する恐れがあるもの - 公序良俗に反するもの（アダルト、出会い系サイトを含む） - 法律・法令の定めに違反するもの（銃刀法・麻薬取締法・ワシントン条約・薬事法）
     */
    public function setDealsInsecureContent(mixed $dealsInsecureContent): static
    {
        if (is_null($dealsInsecureContent)) {
            $this->openAPINullablesSetToNull[] = 'dealsInsecureContent';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('dealsInsecureContent', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['dealsInsecureContent'] = $dealsInsecureContent;

        return $this;
    }

    /**
     * Gets lostTrial.
     *
     * @return bool
     */
    public function getLostTrial(): mixed
    {
        return $this->container['lostTrial'];
    }

    /**
     * Sets lostTrial.
     *
     * @param bool|null $lostTrial 改正割賦販売法に基づく訴訟敗訴歴があるかどうかの表明  - `true`: 改正割賦販売法に基づく訴訟敗訴歴がある - `false`: 改正割賦販売法に基づく訴訟敗訴歴はない
     */
    public function setLostTrial(mixed $lostTrial): static
    {
        if (is_null($lostTrial)) {
            $this->openAPINullablesSetToNull[] = 'lostTrial';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('lostTrial', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['lostTrial'] = $lostTrial;

        return $this;
    }

    /**
     * Gets useOfFincode.
     *
     * @return ShopInfoV2UseOfFincode
     */
    public function getUseOfFincode(): mixed
    {
        return $this->container['useOfFincode'];
    }

    /**
     * Sets useOfFincode.
     *
     * @param ShopInfoV2UseOfFincode $useOfFincode useOfFincode
     */
    public function setUseOfFincode(mixed $useOfFincode): static
    {
        if (is_null($useOfFincode)) {
            throw new \InvalidArgumentException('non-nullable useOfFincode cannot be null');
        }
        $this->container['useOfFincode'] = $useOfFincode;

        return $this;
    }

    /**
     * Gets sitePublished.
     *
     * @return bool|null
     */
    public function getSitePublished(): mixed
    {
        return $this->container['sitePublished'];
    }

    /**
     * Sets sitePublished.
     *
     * @param bool|null $sitePublished Webサイトの公開状況\\ \\ fincode審査時点で決済機能を提供するWebサイトが閲覧可能かどうかを示します。\\ `usage_of_fincode.used_on_web`が`true`の場合、指定必須です。  - `true`: fincode審査チームがサイトを閲覧可能 - `false`: fincode審査チームがサイトを閲覧不可能
     */
    public function setSitePublished(mixed $sitePublished): static
    {
        if (is_null($sitePublished)) {
            $this->openAPINullablesSetToNull[] = 'sitePublished';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sitePublished', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sitePublished'] = $sitePublished;

        return $this;
    }

    /**
     * Gets siteInfo.
     *
     * @return ShopInfoV2SiteInfo|null
     */
    public function getSiteInfo(): mixed
    {
        return $this->container['siteInfo'];
    }

    /**
     * Sets siteInfo.
     *
     * @param ShopInfoV2SiteInfo $siteInfo siteInfo
     */
    public function setSiteInfo(mixed $siteInfo): static
    {
        if (is_null($siteInfo)) {
            throw new \InvalidArgumentException('non-nullable siteInfo cannot be null');
        }
        $this->container['siteInfo'] = $siteInfo;

        return $this;
    }

    /**
     * Gets prepaidPoint.
     *
     * @return bool|null
     */
    public function getPrepaidPoint(): mixed
    {
        return $this->container['prepaidPoint'];
    }

    /**
     * Sets prepaidPoint.
     *
     * @param bool|null $prepaidPoint プリペイドポイントの有無\\ \\ ショップがプリペイドポイントを導入しているかどうか
     */
    public function setPrepaidPoint(mixed $prepaidPoint): static
    {
        if (is_null($prepaidPoint)) {
            $this->openAPINullablesSetToNull[] = 'prepaidPoint';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('prepaidPoint', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['prepaidPoint'] = $prepaidPoint;

        return $this;
    }

    /**
     * Gets prepaidPointInfo.
     *
     * @return ShopInfoV2PrepaidPointInfo|null
     */
    public function getPrepaidPointInfo(): mixed
    {
        return $this->container['prepaidPointInfo'];
    }

    /**
     * Sets prepaidPointInfo.
     *
     * @param ShopInfoV2PrepaidPointInfo $prepaidPointInfo prepaidPointInfo
     */
    public function setPrepaidPointInfo(mixed $prepaidPointInfo): static
    {
        if (is_null($prepaidPointInfo)) {
            throw new \InvalidArgumentException('non-nullable prepaidPointInfo cannot be null');
        }
        $this->container['prepaidPointInfo'] = $prepaidPointInfo;

        return $this;
    }

    /**
     * Gets provides.
     *
     * @return ShopInfoV2Provides
     */
    public function getProvides(): mixed
    {
        return $this->container['provides'];
    }

    /**
     * Sets provides.
     *
     * @param ShopInfoV2Provides $provides provides
     */
    public function setProvides(mixed $provides): static
    {
        if (is_null($provides)) {
            throw new \InvalidArgumentException('non-nullable provides cannot be null');
        }
        $this->container['provides'] = $provides;

        return $this;
    }

    /**
     * Gets contentDescription.
     *
     * @return string
     */
    public function getContentDescription(): mixed
    {
        return $this->container['contentDescription'];
    }

    /**
     * Sets contentDescription.
     *
     * @param string|null $contentDescription 取扱商材の説明\\ \\ ショップの提供する商材についての説明
     */
    public function setContentDescription(mixed $contentDescription): static
    {
        if (is_null($contentDescription)) {
            $this->openAPINullablesSetToNull[] = 'contentDescription';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('contentDescription', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($contentDescription) && mb_strlen($contentDescription) > 5000) {
            throw new \InvalidArgumentException('invalid length for $contentDescription when calling ShopInfoV2., must be smaller than or equal to 5000.');
        }
        if (!is_null($contentDescription) && mb_strlen($contentDescription) < 1) {
            throw new \InvalidArgumentException('invalid length for $contentDescription when calling ShopInfoV2., must be bigger than or equal to 1.');
        }
        $this->container['contentDescription'] = $contentDescription;

        return $this;
    }

    /**
     * Gets productContentInfo.
     *
     * @return ContentInfoV2|null
     */
    public function getProductContentInfo(): mixed
    {
        return $this->container['productContentInfo'];
    }

    /**
     * Sets productContentInfo.
     *
     * @param ContentInfoV2 $productContentInfo 物販商材情報<br>webサイトが公開されていない場合、取扱商材の詳細情報が必要になります。<br><a style=\"color: rgb(212, 31, 28);\">※ use_of_fincode.used_on_web または site_publishedが</a> `false` <a style=\"color: rgb(212, 31, 28);\"><br>かつ provides.productが</a> `true` <a style=\"color: rgb(212, 31, 28);\">のとき必須</a>
     */
    public function setProductContentInfo(mixed $productContentInfo): static
    {
        if (is_null($productContentInfo)) {
            throw new \InvalidArgumentException('non-nullable productContentInfo cannot be null');
        }
        $this->container['productContentInfo'] = $productContentInfo;

        return $this;
    }

    /**
     * Gets serviceContentInfo.
     *
     * @return ContentInfoV2|null
     */
    public function getServiceContentInfo(): mixed
    {
        return $this->container['serviceContentInfo'];
    }

    /**
     * Sets serviceContentInfo.
     *
     * @param ContentInfoV2 $serviceContentInfo サービス商材情報<br>webサイトが公開されていない場合、取扱商材の詳細情報が必要になります。<br><a style=\"color: rgb(212, 31, 28);\">※ use_of_fincode.used_on_web または site_publishedが</a> `false` <a style=\"color: rgb(212, 31, 28);\"><br>かつ provides.serviceが</a> `true` <a style=\"color: rgb(212, 31, 28);\">のとき必須</a>
     */
    public function setServiceContentInfo(mixed $serviceContentInfo): static
    {
        if (is_null($serviceContentInfo)) {
            throw new \InvalidArgumentException('non-nullable serviceContentInfo cannot be null');
        }
        $this->container['serviceContentInfo'] = $serviceContentInfo;

        return $this;
    }

    /**
     * Gets digitalContentInfo.
     *
     * @return ContentInfoV2|null
     */
    public function getDigitalContentInfo(): mixed
    {
        return $this->container['digitalContentInfo'];
    }

    /**
     * Sets digitalContentInfo.
     *
     * @param ContentInfoV2 $digitalContentInfo デジタルコンテンツ商材情報<br>webサイトが公開されていない場合、取扱商材の詳細情報が必要になります。<br><a style=\"color: rgb(212, 31, 28);\">※ use_of_fincode.used_on_web または site_publishedが</a> `false` <a style=\"color: rgb(212, 31, 28);\"><br>かつ provides.digital_contentsが</a> `true` <a style=\"color: rgb(212, 31, 28);\">のとき必須</a>
     */
    public function setDigitalContentInfo(mixed $digitalContentInfo): static
    {
        if (is_null($digitalContentInfo)) {
            throw new \InvalidArgumentException('non-nullable digitalContentInfo cannot be null');
        }
        $this->container['digitalContentInfo'] = $digitalContentInfo;

        return $this;
    }

    /**
     * Gets additionalInfo.
     *
     * @return ShopInfoV2AdditionalInfo|null
     */
    public function getAdditionalInfo(): mixed
    {
        return $this->container['additionalInfo'];
    }

    /**
     * Sets additionalInfo.
     *
     * @param ShopInfoV2AdditionalInfo|null $additionalInfo additionalInfo
     */
    public function setAdditionalInfo(mixed $additionalInfo): static
    {
        if (is_null($additionalInfo)) {
            $this->openAPINullablesSetToNull[] = 'additionalInfo';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('additionalInfo', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['additionalInfo'] = $additionalInfo;

        return $this;
    }

    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @see https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    public function jsonSerialize(): mixed
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object.
     */
    public function __toString(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
    }

    /**
     * Gets a header-safe presentation of the object.
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
