<?php

declare(strict_types=1);
/**
 * fincode API.
 *
 * fincodeのAPIリファレンスです。\\ fincodeは決済情報のほか様々なリソースを管理できるため、リソース指向なREST APIをベースとしたインターフェイス設計のもとでAPIを提供しています。\\ APIの呼び出しにはAPIキーによる認証が必要であり、リクエストの際に`Authorization`ヘッダーに有効なAPIキーをセットすることで認証できます。
 *
 * The version of the OpenAPI document: 1.2.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Fincode\Model;

use OpenAPI\Fincode\ObjectSerializer;

/**
 * 追加提出情報\\ \\ 審査開始時点でショップのWebサイトが公開されていない場合（&#x60;use_of_fincode.used_on_web&#x60;が&#x60;false&#x60;または&#x60;site_published&#x60;が&#x60;false&#x60;の場合）、追加で提供する情報です。\\ 特定商取引法に基づく表示情報を基に値を設定してください。
 *
 * @implements \ArrayAccess<string, mixed>
 */
class ShopInfoV2AdditionalInfo implements ModelInterface, \ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;
    /**
     * The original name of the model.
     */
    protected static string $openAPIModelName = 'ShopInfo_V2_additional_info';
    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var array<string, string>
     */
    protected static array $openAPITypes = ['shopSalesManagerName' => 'string', 'shopServiceName' => 'string', 'shopHowToPay' => 'string', 'shopChargeDescription' => 'string', 'shopProductDeliveryTime' => 'string', 'shopReturnGoodsHandingConditions' => 'string'];
    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var array<string, string|null>
     */
    protected static array $openAPIFormats = ['shopSalesManagerName' => null, 'shopServiceName' => null, 'shopHowToPay' => null, 'shopChargeDescription' => null, 'shopProductDeliveryTime' => null, 'shopReturnGoodsHandingConditions' => null];
    /**
     * Array of nullable properties. Used for (de)serialization.
     *
     * @var array<string, bool>
     */
    protected static array $openAPINullables = ['shopSalesManagerName' => true, 'shopServiceName' => true, 'shopHowToPay' => true, 'shopChargeDescription' => true, 'shopProductDeliveryTime' => true, 'shopReturnGoodsHandingConditions' => true];
    /**
     * If a nullable field gets set to null, insert it here.
     *
     * @var array<string, bool>
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return array<string, string|null>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties.
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null.
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null.
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable.
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }
    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = ['shopSalesManagerName' => 'shop_sales_manager_name', 'shopServiceName' => 'shop_service_name', 'shopHowToPay' => 'shop_how_to_pay', 'shopChargeDescription' => 'shop_charge_description', 'shopProductDeliveryTime' => 'shop_product_delivery_time', 'shopReturnGoodsHandingConditions' => 'shop_return_goods_handing_conditions'];
    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var array<string, string>
     */
    protected static array $setters = ['shopSalesManagerName' => 'setShopSalesManagerName', 'shopServiceName' => 'setShopServiceName', 'shopHowToPay' => 'setShopHowToPay', 'shopChargeDescription' => 'setShopChargeDescription', 'shopProductDeliveryTime' => 'setShopProductDeliveryTime', 'shopReturnGoodsHandingConditions' => 'setShopReturnGoodsHandingConditions'];
    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var array<string, string>
     */
    protected static array $getters = ['shopSalesManagerName' => 'getShopSalesManagerName', 'shopServiceName' => 'getShopServiceName', 'shopHowToPay' => 'getShopHowToPay', 'shopChargeDescription' => 'getShopChargeDescription', 'shopProductDeliveryTime' => 'getShopProductDeliveryTime', 'shopReturnGoodsHandingConditions' => 'getShopReturnGoodsHandingConditions'];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }
    /**
     * Associative array for storing property values.
     *
     * @phpstan-var array<string, mixed>
     *
     * @psalm-var array<string, mixed>
     */
    protected array $container = [];

    /**
     * Constructor.
     *
     * @param array<string, mixed> $data Associated array of property values
     *                                   initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('shopSalesManagerName', $data ?? [], null);
        $this->setIfExists('shopServiceName', $data ?? [], null);
        $this->setIfExists('shopHowToPay', $data ?? [], null);
        $this->setIfExists('shopChargeDescription', $data ?? [], null);
        $this->setIfExists('shopProductDeliveryTime', $data ?? [], null);
        $this->setIfExists('shopReturnGoodsHandingConditions', $data ?? [], null);
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array.
     *
     * @param array<string, mixed> $fields
     */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }
        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return list<string> invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];
        if (null === $this->container['shopSalesManagerName']) {
            $invalidProperties[] = "'shopSalesManagerName' can't be null";
        }
        if (mb_strlen($this->container['shopSalesManagerName']) > 300) {
            $invalidProperties[] = "invalid value for 'shopSalesManagerName', the character length must be smaller than or equal to 300.";
        }
        if (mb_strlen($this->container['shopSalesManagerName']) < 1) {
            $invalidProperties[] = "invalid value for 'shopSalesManagerName', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['shopServiceName']) && mb_strlen($this->container['shopServiceName']) > 300) {
            $invalidProperties[] = "invalid value for 'shopServiceName', the character length must be smaller than or equal to 300.";
        }
        if (!is_null($this->container['shopServiceName']) && mb_strlen($this->container['shopServiceName']) < 1) {
            $invalidProperties[] = "invalid value for 'shopServiceName', the character length must be bigger than or equal to 1.";
        }
        if (null === $this->container['shopHowToPay']) {
            $invalidProperties[] = "'shopHowToPay' can't be null";
        }
        if (mb_strlen($this->container['shopHowToPay']) > 1000) {
            $invalidProperties[] = "invalid value for 'shopHowToPay', the character length must be smaller than or equal to 1000.";
        }
        if (mb_strlen($this->container['shopHowToPay']) < 1) {
            $invalidProperties[] = "invalid value for 'shopHowToPay', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['shopChargeDescription']) && mb_strlen($this->container['shopChargeDescription']) > 5000) {
            $invalidProperties[] = "invalid value for 'shopChargeDescription', the character length must be smaller than or equal to 5000.";
        }
        if (!is_null($this->container['shopChargeDescription']) && mb_strlen($this->container['shopChargeDescription']) < 1) {
            $invalidProperties[] = "invalid value for 'shopChargeDescription', the character length must be bigger than or equal to 1.";
        }
        if (null === $this->container['shopProductDeliveryTime']) {
            $invalidProperties[] = "'shopProductDeliveryTime' can't be null";
        }
        if (mb_strlen($this->container['shopProductDeliveryTime']) > 1000) {
            $invalidProperties[] = "invalid value for 'shopProductDeliveryTime', the character length must be smaller than or equal to 1000.";
        }
        if (mb_strlen($this->container['shopProductDeliveryTime']) < 1) {
            $invalidProperties[] = "invalid value for 'shopProductDeliveryTime', the character length must be bigger than or equal to 1.";
        }
        if (null === $this->container['shopReturnGoodsHandingConditions']) {
            $invalidProperties[] = "'shopReturnGoodsHandingConditions' can't be null";
        }
        if (mb_strlen($this->container['shopReturnGoodsHandingConditions']) > 5000) {
            $invalidProperties[] = "invalid value for 'shopReturnGoodsHandingConditions', the character length must be smaller than or equal to 5000.";
        }
        if (mb_strlen($this->container['shopReturnGoodsHandingConditions']) < 1) {
            $invalidProperties[] = "invalid value for 'shopReturnGoodsHandingConditions', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return 0 === count($this->listInvalidProperties());
    }

    /**
     * Gets shopSalesManagerName.
     *
     * @return string
     */
    public function getShopSalesManagerName(): mixed
    {
        return $this->container['shopSalesManagerName'];
    }

    /**
     * Sets shopSalesManagerName.
     *
     * @param string|null $shopSalesManagerName 販売責任者氏名\\ \\ ショップの販売責任者の氏名
     */
    public function setShopSalesManagerName(mixed $shopSalesManagerName): static
    {
        if (is_null($shopSalesManagerName)) {
            $this->openAPINullablesSetToNull[] = 'shopSalesManagerName';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shopSalesManagerName', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($shopSalesManagerName) && mb_strlen($shopSalesManagerName) > 300) {
            throw new \InvalidArgumentException('invalid length for $shopSalesManagerName when calling ShopInfoV2AdditionalInfo., must be smaller than or equal to 300.');
        }
        if (!is_null($shopSalesManagerName) && mb_strlen($shopSalesManagerName) < 1) {
            throw new \InvalidArgumentException('invalid length for $shopSalesManagerName when calling ShopInfoV2AdditionalInfo., must be bigger than or equal to 1.');
        }
        $this->container['shopSalesManagerName'] = $shopSalesManagerName;

        return $this;
    }

    /**
     * Gets shopServiceName.
     *
     * @return string|null
     */
    public function getShopServiceName(): mixed
    {
        return $this->container['shopServiceName'];
    }

    /**
     * Sets shopServiceName.
     *
     * @param string|null $shopServiceName 屋号・サービス名\\ \\ ショップのサービスの名称
     */
    public function setShopServiceName(mixed $shopServiceName): static
    {
        if (is_null($shopServiceName)) {
            $this->openAPINullablesSetToNull[] = 'shopServiceName';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shopServiceName', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($shopServiceName) && mb_strlen($shopServiceName) > 300) {
            throw new \InvalidArgumentException('invalid length for $shopServiceName when calling ShopInfoV2AdditionalInfo., must be smaller than or equal to 300.');
        }
        if (!is_null($shopServiceName) && mb_strlen($shopServiceName) < 1) {
            throw new \InvalidArgumentException('invalid length for $shopServiceName when calling ShopInfoV2AdditionalInfo., must be bigger than or equal to 1.');
        }
        $this->container['shopServiceName'] = $shopServiceName;

        return $this;
    }

    /**
     * Gets shopHowToPay.
     *
     * @return string
     */
    public function getShopHowToPay(): mixed
    {
        return $this->container['shopHowToPay'];
    }

    /**
     * Sets shopHowToPay.
     *
     * @param string|null $shopHowToPay 支払い方法\\ \\ ショップで利用可能な支払い方法
     */
    public function setShopHowToPay(mixed $shopHowToPay): static
    {
        if (is_null($shopHowToPay)) {
            $this->openAPINullablesSetToNull[] = 'shopHowToPay';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shopHowToPay', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($shopHowToPay) && mb_strlen($shopHowToPay) > 1000) {
            throw new \InvalidArgumentException('invalid length for $shopHowToPay when calling ShopInfoV2AdditionalInfo., must be smaller than or equal to 1000.');
        }
        if (!is_null($shopHowToPay) && mb_strlen($shopHowToPay) < 1) {
            throw new \InvalidArgumentException('invalid length for $shopHowToPay when calling ShopInfoV2AdditionalInfo., must be bigger than or equal to 1.');
        }
        $this->container['shopHowToPay'] = $shopHowToPay;

        return $this;
    }

    /**
     * Gets shopChargeDescription.
     *
     * @return string|null
     */
    public function getShopChargeDescription(): mixed
    {
        return $this->container['shopChargeDescription'];
    }

    /**
     * Sets shopChargeDescription.
     *
     * @param string|null $shopChargeDescription 商品代金以外の料金の説明\\ \\ 送料、手数料、消費税などの商品代金以外の料金についての説明
     */
    public function setShopChargeDescription(mixed $shopChargeDescription): static
    {
        if (is_null($shopChargeDescription)) {
            $this->openAPINullablesSetToNull[] = 'shopChargeDescription';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shopChargeDescription', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($shopChargeDescription) && mb_strlen($shopChargeDescription) > 5000) {
            throw new \InvalidArgumentException('invalid length for $shopChargeDescription when calling ShopInfoV2AdditionalInfo., must be smaller than or equal to 5000.');
        }
        if (!is_null($shopChargeDescription) && mb_strlen($shopChargeDescription) < 1) {
            throw new \InvalidArgumentException('invalid length for $shopChargeDescription when calling ShopInfoV2AdditionalInfo., must be bigger than or equal to 1.');
        }
        $this->container['shopChargeDescription'] = $shopChargeDescription;

        return $this;
    }

    /**
     * Gets shopProductDeliveryTime.
     *
     * @return string
     */
    public function getShopProductDeliveryTime(): mixed
    {
        return $this->container['shopProductDeliveryTime'];
    }

    /**
     * Sets shopProductDeliveryTime.
     *
     * @param string|null $shopProductDeliveryTime 商品の引き渡し時期\\ \\ 商品の引き渡し時期についての説明
     */
    public function setShopProductDeliveryTime(mixed $shopProductDeliveryTime): static
    {
        if (is_null($shopProductDeliveryTime)) {
            $this->openAPINullablesSetToNull[] = 'shopProductDeliveryTime';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shopProductDeliveryTime', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($shopProductDeliveryTime) && mb_strlen($shopProductDeliveryTime) > 1000) {
            throw new \InvalidArgumentException('invalid length for $shopProductDeliveryTime when calling ShopInfoV2AdditionalInfo., must be smaller than or equal to 1000.');
        }
        if (!is_null($shopProductDeliveryTime) && mb_strlen($shopProductDeliveryTime) < 1) {
            throw new \InvalidArgumentException('invalid length for $shopProductDeliveryTime when calling ShopInfoV2AdditionalInfo., must be bigger than or equal to 1.');
        }
        $this->container['shopProductDeliveryTime'] = $shopProductDeliveryTime;

        return $this;
    }

    /**
     * Gets shopReturnGoodsHandingConditions.
     *
     * @return string
     */
    public function getShopReturnGoodsHandingConditions(): mixed
    {
        return $this->container['shopReturnGoodsHandingConditions'];
    }

    /**
     * Sets shopReturnGoodsHandingConditions.
     *
     * @param string|null $shopReturnGoodsHandingConditions 返品・交換に関する条件\\ \\ 返品・交換に関する条件についての説明
     */
    public function setShopReturnGoodsHandingConditions(mixed $shopReturnGoodsHandingConditions): static
    {
        if (is_null($shopReturnGoodsHandingConditions)) {
            $this->openAPINullablesSetToNull[] = 'shopReturnGoodsHandingConditions';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shopReturnGoodsHandingConditions', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($shopReturnGoodsHandingConditions) && mb_strlen($shopReturnGoodsHandingConditions) > 5000) {
            throw new \InvalidArgumentException('invalid length for $shopReturnGoodsHandingConditions when calling ShopInfoV2AdditionalInfo., must be smaller than or equal to 5000.');
        }
        if (!is_null($shopReturnGoodsHandingConditions) && mb_strlen($shopReturnGoodsHandingConditions) < 1) {
            throw new \InvalidArgumentException('invalid length for $shopReturnGoodsHandingConditions when calling ShopInfoV2AdditionalInfo., must be bigger than or equal to 1.');
        }
        $this->container['shopReturnGoodsHandingConditions'] = $shopReturnGoodsHandingConditions;

        return $this;
    }

    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @see https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    public function jsonSerialize(): mixed
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object.
     */
    public function __toString(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
    }

    /**
     * Gets a header-safe presentation of the object.
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
