<?php

declare(strict_types=1);
/**
 * fincode API.
 *
 * fincodeのAPIリファレンスです。\\ fincodeは決済情報のほか様々なリソースを管理できるため、リソース指向なREST APIをベースとしたインターフェイス設計のもとでAPIを提供しています。\\ APIの呼び出しにはAPIキーによる認証が必要であり、リクエストの際に`Authorization`ヘッダーに有効なAPIキーをセットすることで認証できます。
 *
 * The version of the OpenAPI document: 1.2.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Fincode\Model;

/**
 * 振替結果コード  - &#x60;0&#x60;: 振替成功&lt;br&gt;&lt;span class&#x3D;\&quot;smallText\&quot;&gt;振替が成功しました。&lt;/span&gt; - &#x60;1&#x60;: 残高不足（失敗）&lt;br&gt;&lt;span class&#x3D;\&quot;smallText\&quot;&gt;口座残高の不足により振替に失敗しました。&lt;/span&gt; - &#x60;2&#x60;: 預金取引無し（失敗）&lt;br&gt;&lt;span class&#x3D;\&quot;smallText\&quot;&gt;指定した口座が存在しないなどの理由により振替に失敗しました。&lt;/span&gt; - &#x60;3&#x60;: 購入者事由（失敗）&lt;br&gt;&lt;span class&#x3D;\&quot;smallText\&quot;&gt;購入者による振替取引の停止等により振替に失敗しました。&lt;/span&gt; - &#x60;4&#x60;: 依頼書未着・不備（失敗）&lt;br&gt;&lt;span class&#x3D;\&quot;smallText\&quot;&gt;（依頼書登録）この決済に所定の期日までの口座振替依頼書の提出が確認出来なかったため振替に失敗しました。&lt;/span&gt; - &#x60;8&#x60;: ショップ事由（失敗）&lt;br&gt;&lt;span class&#x3D;\&quot;smallText\&quot;&gt;ショップに起因する事由により振替に失敗しました。詳細はfincodeにお問い合わせください。&lt;/span&gt; - &#x60;9 | E | N&#x60;: その他（失敗）&lt;br&gt;&lt;span class&#x3D;\&quot;smallText\&quot;&gt;その他の理由により振替に失敗しました（通常は発生しません）。詳細はfincodeにお問い合わせください。&lt;/span&gt;  [お問い合わせはこちらのフォームから](https://dashboard.fincode.jp/contact)いただけます。
 */
enum DirectDebitResultCode: string
{
    /**
     * Possible values of this enum.
     */
    case _0 = '0';
    case _1 = '1';
    case _2 = '2';
    case _3 = '3';
    case _4 = '4';
    case _8 = '8';
    case _9 = '9';
    case E = 'E';
    case N = 'N';

    /**
     * Gets allowable values of the enum.
     *
     * @return string[]
     */
    public static function getAllowableEnumValues(): array
    {
        return array_map(fn (self $enum): string => $enum->value, self::cases());
    }
}
