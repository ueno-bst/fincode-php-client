<?php

declare(strict_types=1);
/**
 * fincode API.
 *
 * fincodeのAPIリファレンスです。\\ fincodeは決済情報のほか様々なリソースを管理できるため、リソース指向なREST APIをベースとしたインターフェイス設計のもとでAPIを提供しています。\\ APIの呼び出しにはAPIキーによる認証が必要であり、リクエストの際に`Authorization`ヘッダーに有効なAPIキーをセットすることで認証できます。
 *
 * The version of the OpenAPI document: 1.2.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Fincode\Model;

use OpenAPI\Fincode\ObjectSerializer;

/**
 * @implements \ArrayAccess<string, mixed>
 */
class CustomerUpdatingResponse implements ModelInterface, \ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;
    /**
     * The original name of the model.
     */
    protected static string $openAPIModelName = 'Customer.Updating.Response';
    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var array<string, string>
     */
    protected static array $openAPITypes = ['id' => 'string', 'name' => 'string', 'email' => 'string', 'phoneCc' => 'string', 'phoneNo' => 'string', 'addrCountry' => 'string', 'addrState' => 'string', 'addrCity' => 'string', 'addrLine1' => 'string', 'addrLine2' => 'string', 'addrLine3' => 'string', 'addrPostCode' => 'string', 'cardRegistration' => 'string', 'directdebitRegistration' => 'string', 'created' => 'string', 'updated' => 'string'];
    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var array<string, string|null>
     */
    protected static array $openAPIFormats = ['id' => null, 'name' => null, 'email' => null, 'phoneCc' => null, 'phoneNo' => null, 'addrCountry' => null, 'addrState' => null, 'addrCity' => null, 'addrLine1' => null, 'addrLine2' => null, 'addrLine3' => null, 'addrPostCode' => null, 'cardRegistration' => null, 'directdebitRegistration' => null, 'created' => null, 'updated' => null];
    /**
     * Array of nullable properties. Used for (de)serialization.
     *
     * @var array<string, bool>
     */
    protected static array $openAPINullables = ['id' => false, 'name' => true, 'email' => true, 'phoneCc' => true, 'phoneNo' => true, 'addrCountry' => true, 'addrState' => true, 'addrCity' => true, 'addrLine1' => true, 'addrLine2' => true, 'addrLine3' => true, 'addrPostCode' => true, 'cardRegistration' => true, 'directdebitRegistration' => true, 'created' => false, 'updated' => true];
    /**
     * If a nullable field gets set to null, insert it here.
     *
     * @var array<string, bool>
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return array<string, string|null>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties.
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null.
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null.
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable.
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }
    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = ['id' => 'id', 'name' => 'name', 'email' => 'email', 'phoneCc' => 'phone_cc', 'phoneNo' => 'phone_no', 'addrCountry' => 'addr_country', 'addrState' => 'addr_state', 'addrCity' => 'addr_city', 'addrLine1' => 'addr_line_1', 'addrLine2' => 'addr_line_2', 'addrLine3' => 'addr_line_3', 'addrPostCode' => 'addr_post_code', 'cardRegistration' => 'card_registration', 'directdebitRegistration' => 'directdebit_registration', 'created' => 'created', 'updated' => 'updated'];
    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var array<string, string>
     */
    protected static array $setters = ['id' => 'setId', 'name' => 'setName', 'email' => 'setEmail', 'phoneCc' => 'setPhoneCc', 'phoneNo' => 'setPhoneNo', 'addrCountry' => 'setAddrCountry', 'addrState' => 'setAddrState', 'addrCity' => 'setAddrCity', 'addrLine1' => 'setAddrLine1', 'addrLine2' => 'setAddrLine2', 'addrLine3' => 'setAddrLine3', 'addrPostCode' => 'setAddrPostCode', 'cardRegistration' => 'setCardRegistration', 'directdebitRegistration' => 'setDirectdebitRegistration', 'created' => 'setCreated', 'updated' => 'setUpdated'];
    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var array<string, string>
     */
    protected static array $getters = ['id' => 'getId', 'name' => 'getName', 'email' => 'getEmail', 'phoneCc' => 'getPhoneCc', 'phoneNo' => 'getPhoneNo', 'addrCountry' => 'getAddrCountry', 'addrState' => 'getAddrState', 'addrCity' => 'getAddrCity', 'addrLine1' => 'getAddrLine1', 'addrLine2' => 'getAddrLine2', 'addrLine3' => 'getAddrLine3', 'addrPostCode' => 'getAddrPostCode', 'cardRegistration' => 'getCardRegistration', 'directdebitRegistration' => 'getDirectdebitRegistration', 'created' => 'getCreated', 'updated' => 'getUpdated'];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }
    public const CARD_REGISTRATION__0 = '0';
    public const CARD_REGISTRATION__1 = '1';
    public const DIRECTDEBIT_REGISTRATION__0 = '0';
    public const DIRECTDEBIT_REGISTRATION__1 = '1';

    /**
     * Gets allowable values of the enum.
     *
     * @return list<string>
     */
    public function getCardRegistrationAllowableValues(): array
    {
        return [self::CARD_REGISTRATION__0, self::CARD_REGISTRATION__1];
    }

    /**
     * Gets allowable values of the enum.
     *
     * @return list<string>
     */
    public function getDirectdebitRegistrationAllowableValues(): array
    {
        return [self::DIRECTDEBIT_REGISTRATION__0, self::DIRECTDEBIT_REGISTRATION__1];
    }
    /**
     * Associative array for storing property values.
     *
     * @phpstan-var array<string, mixed>
     *
     * @psalm-var array<string, mixed>
     */
    protected array $container = [];

    /**
     * Constructor.
     *
     * @param array<string, mixed> $data Associated array of property values
     *                                   initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('phoneCc', $data ?? [], null);
        $this->setIfExists('phoneNo', $data ?? [], null);
        $this->setIfExists('addrCountry', $data ?? [], null);
        $this->setIfExists('addrState', $data ?? [], null);
        $this->setIfExists('addrCity', $data ?? [], null);
        $this->setIfExists('addrLine1', $data ?? [], null);
        $this->setIfExists('addrLine2', $data ?? [], null);
        $this->setIfExists('addrLine3', $data ?? [], null);
        $this->setIfExists('addrPostCode', $data ?? [], null);
        $this->setIfExists('cardRegistration', $data ?? [], null);
        $this->setIfExists('directdebitRegistration', $data ?? [], null);
        $this->setIfExists('created', $data ?? [], null);
        $this->setIfExists('updated', $data ?? [], null);
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array.
     *
     * @param array<string, mixed> $fields
     */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }
        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return list<string> invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];
        if (!is_null($this->container['id']) && mb_strlen($this->container['id']) > 60) {
            $invalidProperties[] = "invalid value for 'id', the character length must be smaller than or equal to 60.";
        }
        if (!is_null($this->container['id']) && mb_strlen($this->container['id']) < 1) {
            $invalidProperties[] = "invalid value for 'id', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['name']) && mb_strlen($this->container['name']) > 384) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 384.";
        }
        if (!is_null($this->container['name']) && mb_strlen($this->container['name']) < 1) {
            $invalidProperties[] = "invalid value for 'name', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['email']) && mb_strlen($this->container['email']) > 254) {
            $invalidProperties[] = "invalid value for 'email', the character length must be smaller than or equal to 254.";
        }
        if (!is_null($this->container['email']) && mb_strlen($this->container['email']) < 1) {
            $invalidProperties[] = "invalid value for 'email', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['phoneCc']) && mb_strlen($this->container['phoneCc']) > 3) {
            $invalidProperties[] = "invalid value for 'phoneCc', the character length must be smaller than or equal to 3.";
        }
        if (!is_null($this->container['phoneCc']) && mb_strlen($this->container['phoneCc']) < 1) {
            $invalidProperties[] = "invalid value for 'phoneCc', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['phoneNo']) && mb_strlen($this->container['phoneNo']) > 15) {
            $invalidProperties[] = "invalid value for 'phoneNo', the character length must be smaller than or equal to 15.";
        }
        if (!is_null($this->container['phoneNo']) && mb_strlen($this->container['phoneNo']) < 1) {
            $invalidProperties[] = "invalid value for 'phoneNo', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['addrCountry']) && mb_strlen($this->container['addrCountry']) > 3) {
            $invalidProperties[] = "invalid value for 'addrCountry', the character length must be smaller than or equal to 3.";
        }
        if (!is_null($this->container['addrCountry']) && mb_strlen($this->container['addrCountry']) < 1) {
            $invalidProperties[] = "invalid value for 'addrCountry', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['addrState']) && mb_strlen($this->container['addrState']) > 3) {
            $invalidProperties[] = "invalid value for 'addrState', the character length must be smaller than or equal to 3.";
        }
        if (!is_null($this->container['addrState']) && mb_strlen($this->container['addrState']) < 1) {
            $invalidProperties[] = "invalid value for 'addrState', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['addrCity']) && mb_strlen($this->container['addrCity']) > 50) {
            $invalidProperties[] = "invalid value for 'addrCity', the character length must be smaller than or equal to 50.";
        }
        if (!is_null($this->container['addrCity']) && mb_strlen($this->container['addrCity']) < 1) {
            $invalidProperties[] = "invalid value for 'addrCity', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['addrLine1']) && mb_strlen($this->container['addrLine1']) > 50) {
            $invalidProperties[] = "invalid value for 'addrLine1', the character length must be smaller than or equal to 50.";
        }
        if (!is_null($this->container['addrLine1']) && mb_strlen($this->container['addrLine1']) < 1) {
            $invalidProperties[] = "invalid value for 'addrLine1', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['addrLine2']) && mb_strlen($this->container['addrLine2']) > 50) {
            $invalidProperties[] = "invalid value for 'addrLine2', the character length must be smaller than or equal to 50.";
        }
        if (!is_null($this->container['addrLine2']) && mb_strlen($this->container['addrLine2']) < 1) {
            $invalidProperties[] = "invalid value for 'addrLine2', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['addrLine3']) && mb_strlen($this->container['addrLine3']) > 50) {
            $invalidProperties[] = "invalid value for 'addrLine3', the character length must be smaller than or equal to 50.";
        }
        if (!is_null($this->container['addrLine3']) && mb_strlen($this->container['addrLine3']) < 1) {
            $invalidProperties[] = "invalid value for 'addrLine3', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['addrPostCode']) && mb_strlen($this->container['addrPostCode']) > 16) {
            $invalidProperties[] = "invalid value for 'addrPostCode', the character length must be smaller than or equal to 16.";
        }
        if (!is_null($this->container['addrPostCode']) && mb_strlen($this->container['addrPostCode']) < 1) {
            $invalidProperties[] = "invalid value for 'addrPostCode', the character length must be bigger than or equal to 1.";
        }
        $allowedValues = $this->getCardRegistrationAllowableValues();
        if (!is_null($this->container['cardRegistration']) && !in_array($this->container['cardRegistration'], $allowedValues, true)) {
            $invalidProperties[] = sprintf("invalid value '%s' for 'cardRegistration', must be one of '%s'", $this->container['cardRegistration'], implode("', '", $allowedValues));
        }
        if (!is_null($this->container['cardRegistration']) && mb_strlen($this->container['cardRegistration']) > 1) {
            $invalidProperties[] = "invalid value for 'cardRegistration', the character length must be smaller than or equal to 1.";
        }
        if (!is_null($this->container['cardRegistration']) && mb_strlen($this->container['cardRegistration']) < 1) {
            $invalidProperties[] = "invalid value for 'cardRegistration', the character length must be bigger than or equal to 1.";
        }
        $allowedValues = $this->getDirectdebitRegistrationAllowableValues();
        if (!is_null($this->container['directdebitRegistration']) && !in_array($this->container['directdebitRegistration'], $allowedValues, true)) {
            $invalidProperties[] = sprintf("invalid value '%s' for 'directdebitRegistration', must be one of '%s'", $this->container['directdebitRegistration'], implode("', '", $allowedValues));
        }
        if (!is_null($this->container['directdebitRegistration']) && mb_strlen($this->container['directdebitRegistration']) > 1) {
            $invalidProperties[] = "invalid value for 'directdebitRegistration', the character length must be smaller than or equal to 1.";
        }
        if (!is_null($this->container['directdebitRegistration']) && mb_strlen($this->container['directdebitRegistration']) < 1) {
            $invalidProperties[] = "invalid value for 'directdebitRegistration', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return 0 === count($this->listInvalidProperties());
    }

    /**
     * Gets id.
     *
     * @return string|null
     */
    public function getId(): mixed
    {
        return $this->container['id'];
    }

    /**
     * Sets id.
     *
     * @param string $id 顧客ID
     */
    public function setId(mixed $id): static
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        if (mb_strlen($id) > 60) {
            throw new \InvalidArgumentException('invalid length for $id when calling CustomerUpdatingResponse., must be smaller than or equal to 60.');
        }
        if (mb_strlen($id) < 1) {
            throw new \InvalidArgumentException('invalid length for $id when calling CustomerUpdatingResponse., must be bigger than or equal to 1.');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name.
     *
     * @return string|null
     */
    public function getName(): mixed
    {
        return $this->container['name'];
    }

    /**
     * Sets name.
     *
     * @param string|null $name 顧客の名前
     */
    public function setName(mixed $name): static
    {
        if (is_null($name)) {
            $this->openAPINullablesSetToNull[] = 'name';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('name', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($name) && mb_strlen($name) > 384) {
            throw new \InvalidArgumentException('invalid length for $name when calling CustomerUpdatingResponse., must be smaller than or equal to 384.');
        }
        if (!is_null($name) && mb_strlen($name) < 1) {
            throw new \InvalidArgumentException('invalid length for $name when calling CustomerUpdatingResponse., must be bigger than or equal to 1.');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets email.
     *
     * @return string|null
     */
    public function getEmail(): mixed
    {
        return $this->container['email'];
    }

    /**
     * Sets email.
     *
     * @param string|null $email 顧客のメールアドレス\\ 形式： RFC5322
     */
    public function setEmail(mixed $email): static
    {
        if (is_null($email)) {
            $this->openAPINullablesSetToNull[] = 'email';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('email', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($email) && mb_strlen($email) > 254) {
            throw new \InvalidArgumentException('invalid length for $email when calling CustomerUpdatingResponse., must be smaller than or equal to 254.');
        }
        if (!is_null($email) && mb_strlen($email) < 1) {
            throw new \InvalidArgumentException('invalid length for $email when calling CustomerUpdatingResponse., must be bigger than or equal to 1.');
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets phoneCc.
     *
     * @return string|null
     */
    public function getPhoneCc(): mixed
    {
        return $this->container['phoneCc'];
    }

    /**
     * Sets phoneCc.
     *
     * @param string|null $phoneCc 顧客の電話番号の国コード（`+`は含まない）
     */
    public function setPhoneCc(mixed $phoneCc): static
    {
        if (is_null($phoneCc)) {
            $this->openAPINullablesSetToNull[] = 'phoneCc';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('phoneCc', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($phoneCc) && mb_strlen($phoneCc) > 3) {
            throw new \InvalidArgumentException('invalid length for $phoneCc when calling CustomerUpdatingResponse., must be smaller than or equal to 3.');
        }
        if (!is_null($phoneCc) && mb_strlen($phoneCc) < 1) {
            throw new \InvalidArgumentException('invalid length for $phoneCc when calling CustomerUpdatingResponse., must be bigger than or equal to 1.');
        }
        $this->container['phoneCc'] = $phoneCc;

        return $this;
    }

    /**
     * Gets phoneNo.
     *
     * @return string|null
     */
    public function getPhoneNo(): mixed
    {
        return $this->container['phoneNo'];
    }

    /**
     * Sets phoneNo.
     *
     * @param string|null $phoneNo 顧客の電話番号
     */
    public function setPhoneNo(mixed $phoneNo): static
    {
        if (is_null($phoneNo)) {
            $this->openAPINullablesSetToNull[] = 'phoneNo';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('phoneNo', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($phoneNo) && mb_strlen($phoneNo) > 15) {
            throw new \InvalidArgumentException('invalid length for $phoneNo when calling CustomerUpdatingResponse., must be smaller than or equal to 15.');
        }
        if (!is_null($phoneNo) && mb_strlen($phoneNo) < 1) {
            throw new \InvalidArgumentException('invalid length for $phoneNo when calling CustomerUpdatingResponse., must be bigger than or equal to 1.');
        }
        $this->container['phoneNo'] = $phoneNo;

        return $this;
    }

    /**
     * Gets addrCountry.
     *
     * @return string|null
     */
    public function getAddrCountry(): mixed
    {
        return $this->container['addrCountry'];
    }

    /**
     * Sets addrCountry.
     *
     * @param string|null $addrCountry 顧客の住所の国コード\\ 形式： ISO 3166-1 numeric
     */
    public function setAddrCountry(mixed $addrCountry): static
    {
        if (is_null($addrCountry)) {
            $this->openAPINullablesSetToNull[] = 'addrCountry';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('addrCountry', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($addrCountry) && mb_strlen($addrCountry) > 3) {
            throw new \InvalidArgumentException('invalid length for $addrCountry when calling CustomerUpdatingResponse., must be smaller than or equal to 3.');
        }
        if (!is_null($addrCountry) && mb_strlen($addrCountry) < 1) {
            throw new \InvalidArgumentException('invalid length for $addrCountry when calling CustomerUpdatingResponse., must be bigger than or equal to 1.');
        }
        $this->container['addrCountry'] = $addrCountry;

        return $this;
    }

    /**
     * Gets addrState.
     *
     * @return string|null
     */
    public function getAddrState(): mixed
    {
        return $this->container['addrState'];
    }

    /**
     * Sets addrState.
     *
     * @param string|null $addrState 顧客の住所の州コードまたは都道府県コード\\ 参照： [国土交通省 都道府県コード](https://nlftp.mlit.go.jp/ksj/gml/codelist/PrefCd.html)
     */
    public function setAddrState(mixed $addrState): static
    {
        if (is_null($addrState)) {
            $this->openAPINullablesSetToNull[] = 'addrState';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('addrState', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($addrState) && mb_strlen($addrState) > 3) {
            throw new \InvalidArgumentException('invalid length for $addrState when calling CustomerUpdatingResponse., must be smaller than or equal to 3.');
        }
        if (!is_null($addrState) && mb_strlen($addrState) < 1) {
            throw new \InvalidArgumentException('invalid length for $addrState when calling CustomerUpdatingResponse., must be bigger than or equal to 1.');
        }
        $this->container['addrState'] = $addrState;

        return $this;
    }

    /**
     * Gets addrCity.
     *
     * @return string|null
     */
    public function getAddrCity(): mixed
    {
        return $this->container['addrCity'];
    }

    /**
     * Sets addrCity.
     *
     * @param string|null $addrCity 顧客の住所の都市名
     */
    public function setAddrCity(mixed $addrCity): static
    {
        if (is_null($addrCity)) {
            $this->openAPINullablesSetToNull[] = 'addrCity';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('addrCity', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($addrCity) && mb_strlen($addrCity) > 50) {
            throw new \InvalidArgumentException('invalid length for $addrCity when calling CustomerUpdatingResponse., must be smaller than or equal to 50.');
        }
        if (!is_null($addrCity) && mb_strlen($addrCity) < 1) {
            throw new \InvalidArgumentException('invalid length for $addrCity when calling CustomerUpdatingResponse., must be bigger than or equal to 1.');
        }
        $this->container['addrCity'] = $addrCity;

        return $this;
    }

    /**
     * Gets addrLine1.
     *
     * @return string|null
     */
    public function getAddrLine1(): mixed
    {
        return $this->container['addrLine1'];
    }

    /**
     * Sets addrLine1.
     *
     * @param string|null $addrLine1 顧客の住所の番地・区画
     */
    public function setAddrLine1(mixed $addrLine1): static
    {
        if (is_null($addrLine1)) {
            $this->openAPINullablesSetToNull[] = 'addrLine1';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('addrLine1', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($addrLine1) && mb_strlen($addrLine1) > 50) {
            throw new \InvalidArgumentException('invalid length for $addrLine1 when calling CustomerUpdatingResponse., must be smaller than or equal to 50.');
        }
        if (!is_null($addrLine1) && mb_strlen($addrLine1) < 1) {
            throw new \InvalidArgumentException('invalid length for $addrLine1 when calling CustomerUpdatingResponse., must be bigger than or equal to 1.');
        }
        $this->container['addrLine1'] = $addrLine1;

        return $this;
    }

    /**
     * Gets addrLine2.
     *
     * @return string|null
     */
    public function getAddrLine2(): mixed
    {
        return $this->container['addrLine2'];
    }

    /**
     * Sets addrLine2.
     *
     * @param string|null $addrLine2 顧客の住所の建物名・部屋番号
     */
    public function setAddrLine2(mixed $addrLine2): static
    {
        if (is_null($addrLine2)) {
            $this->openAPINullablesSetToNull[] = 'addrLine2';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('addrLine2', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($addrLine2) && mb_strlen($addrLine2) > 50) {
            throw new \InvalidArgumentException('invalid length for $addrLine2 when calling CustomerUpdatingResponse., must be smaller than or equal to 50.');
        }
        if (!is_null($addrLine2) && mb_strlen($addrLine2) < 1) {
            throw new \InvalidArgumentException('invalid length for $addrLine2 when calling CustomerUpdatingResponse., must be bigger than or equal to 1.');
        }
        $this->container['addrLine2'] = $addrLine2;

        return $this;
    }

    /**
     * Gets addrLine3.
     *
     * @return string|null
     */
    public function getAddrLine3(): mixed
    {
        return $this->container['addrLine3'];
    }

    /**
     * Sets addrLine3.
     *
     * @param string|null $addrLine3 顧客の住所 その他
     */
    public function setAddrLine3(mixed $addrLine3): static
    {
        if (is_null($addrLine3)) {
            $this->openAPINullablesSetToNull[] = 'addrLine3';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('addrLine3', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($addrLine3) && mb_strlen($addrLine3) > 50) {
            throw new \InvalidArgumentException('invalid length for $addrLine3 when calling CustomerUpdatingResponse., must be smaller than or equal to 50.');
        }
        if (!is_null($addrLine3) && mb_strlen($addrLine3) < 1) {
            throw new \InvalidArgumentException('invalid length for $addrLine3 when calling CustomerUpdatingResponse., must be bigger than or equal to 1.');
        }
        $this->container['addrLine3'] = $addrLine3;

        return $this;
    }

    /**
     * Gets addrPostCode.
     *
     * @return string|null
     */
    public function getAddrPostCode(): mixed
    {
        return $this->container['addrPostCode'];
    }

    /**
     * Sets addrPostCode.
     *
     * @param string|null $addrPostCode 顧客の住所の郵便番号
     */
    public function setAddrPostCode(mixed $addrPostCode): static
    {
        if (is_null($addrPostCode)) {
            $this->openAPINullablesSetToNull[] = 'addrPostCode';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('addrPostCode', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($addrPostCode) && mb_strlen($addrPostCode) > 16) {
            throw new \InvalidArgumentException('invalid length for $addrPostCode when calling CustomerUpdatingResponse., must be smaller than or equal to 16.');
        }
        if (!is_null($addrPostCode) && mb_strlen($addrPostCode) < 1) {
            throw new \InvalidArgumentException('invalid length for $addrPostCode when calling CustomerUpdatingResponse., must be bigger than or equal to 1.');
        }
        $this->container['addrPostCode'] = $addrPostCode;

        return $this;
    }

    /**
     * Gets cardRegistration.
     *
     * @return string|null
     */
    public function getCardRegistration(): mixed
    {
        return $this->container['cardRegistration'];
    }

    /**
     * Sets cardRegistration.
     *
     * @param string|null $cardRegistration 決済手段（カード）登録状況  - `0`: 未登録 - `1`: 1件以上のカードが登録済み
     */
    public function setCardRegistration(mixed $cardRegistration): static
    {
        if (is_null($cardRegistration)) {
            $this->openAPINullablesSetToNull[] = 'cardRegistration';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cardRegistration', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getCardRegistrationAllowableValues();
        if (!is_null($cardRegistration) && !in_array($cardRegistration, $allowedValues, true)) {
            throw new \InvalidArgumentException(sprintf("Invalid value '%s' for 'cardRegistration', must be one of '%s'", $cardRegistration, implode("', '", $allowedValues)));
        }
        if (!is_null($cardRegistration) && mb_strlen($cardRegistration) > 1) {
            throw new \InvalidArgumentException('invalid length for $cardRegistration when calling CustomerUpdatingResponse., must be smaller than or equal to 1.');
        }
        if (!is_null($cardRegistration) && mb_strlen($cardRegistration) < 1) {
            throw new \InvalidArgumentException('invalid length for $cardRegistration when calling CustomerUpdatingResponse., must be bigger than or equal to 1.');
        }
        $this->container['cardRegistration'] = $cardRegistration;

        return $this;
    }

    /**
     * Gets directdebitRegistration.
     *
     * @return string|null
     */
    public function getDirectdebitRegistration(): mixed
    {
        return $this->container['directdebitRegistration'];
    }

    /**
     * Sets directdebitRegistration.
     *
     * @param string|null $directdebitRegistration 決済手段（口座振替）登録状況  - `0`: 未登録 - `1`: 1件以上の振替用口座が登録済み
     */
    public function setDirectdebitRegistration(mixed $directdebitRegistration): static
    {
        if (is_null($directdebitRegistration)) {
            $this->openAPINullablesSetToNull[] = 'directdebitRegistration';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('directdebitRegistration', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getDirectdebitRegistrationAllowableValues();
        if (!is_null($directdebitRegistration) && !in_array($directdebitRegistration, $allowedValues, true)) {
            throw new \InvalidArgumentException(sprintf("Invalid value '%s' for 'directdebitRegistration', must be one of '%s'", $directdebitRegistration, implode("', '", $allowedValues)));
        }
        if (!is_null($directdebitRegistration) && mb_strlen($directdebitRegistration) > 1) {
            throw new \InvalidArgumentException('invalid length for $directdebitRegistration when calling CustomerUpdatingResponse., must be smaller than or equal to 1.');
        }
        if (!is_null($directdebitRegistration) && mb_strlen($directdebitRegistration) < 1) {
            throw new \InvalidArgumentException('invalid length for $directdebitRegistration when calling CustomerUpdatingResponse., must be bigger than or equal to 1.');
        }
        $this->container['directdebitRegistration'] = $directdebitRegistration;

        return $this;
    }

    /**
     * Gets created.
     *
     * @return string|null
     */
    public function getCreated(): mixed
    {
        return $this->container['created'];
    }

    /**
     * Sets created.
     *
     * @param string $created 作成日\\ 形式：`yyyy/MM/dd HH:mm:ss.SSS`
     */
    public function setCreated(mixed $created): static
    {
        if (is_null($created)) {
            throw new \InvalidArgumentException('non-nullable created cannot be null');
        }
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets updated.
     *
     * @return string|null
     */
    public function getUpdated(): mixed
    {
        return $this->container['updated'];
    }

    /**
     * Sets updated.
     *
     * @param string|null $updated 更新日\\ 形式：`yyyy/MM/dd HH:mm:ss.SSS`
     */
    public function setUpdated(mixed $updated): static
    {
        if (is_null($updated)) {
            $this->openAPINullablesSetToNull[] = 'updated';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('updated', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['updated'] = $updated;

        return $this;
    }

    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @see https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    public function jsonSerialize(): mixed
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object.
     */
    public function __toString(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
    }

    /**
     * Gets a header-safe presentation of the object.
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
