<?php

declare(strict_types=1);
/**
 * fincode API.
 *
 * fincodeのAPIリファレンスです。\\ fincodeは決済情報のほか様々なリソースを管理できるため、リソース指向なREST APIをベースとしたインターフェイス設計のもとでAPIを提供しています。\\ APIの呼び出しにはAPIキーによる認証が必要であり、リクエストの際に`Authorization`ヘッダーに有効なAPIキーをセットすることで認証できます。
 *
 * The version of the OpenAPI document: 1.2.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Fincode\Model;

use OpenAPI\Fincode\ObjectSerializer;

/**
 * @implements \ArrayAccess<string, mixed>
 */
class PaymentCardExecutingRequest implements ModelInterface, \ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;
    /**
     * The original name of the model.
     */
    protected static string $openAPIModelName = 'Payment.Card.Executing.Request';
    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var array<string, string>
     */
    protected static array $openAPITypes = ['payType' => '\OpenAPI\Fincode\Model\PayType', 'accessId' => 'string', 'token' => 'string', 'customerId' => 'string', 'cardId' => 'string', 'method' => '\OpenAPI\Fincode\Model\CardPayMethod', 'payTimes' => '\OpenAPI\Fincode\Model\CardPayTimes', 'tds2RetUrl' => 'string', 'returnUrl' => 'string', 'returnUrlOnFailure' => 'string', 'tds2ChAccChange' => 'string', 'tds2ChAccDate' => 'string', 'tds2ChAccPwChange' => 'string', 'tds2NbPurchaseAccount' => 'string', 'tds2PaymentAccAge' => 'string', 'tds2ProvisionAttemptsDay' => 'string', 'tds2ShipAddressUsage' => 'string', 'tds2ShipNameInd' => '\OpenAPI\Fincode\Model\Tds2ShipNameInd', 'tds2SuspiciousAccActivity' => '\OpenAPI\Fincode\Model\Tds2SuspiciousAccActivity', 'tds2TxnActivityDay' => 'string', 'tds2TxnActivityYear' => 'string', 'tds2ThreeDsReqAuthData' => 'string', 'tds2ThreeDsReqAuthMethod' => '\OpenAPI\Fincode\Model\Tds2ThreeDsReqAuthMethod', 'tds2ThreeDsReqAuthTimestamp' => 'string', 'tds2Email' => 'string', 'tds2AddrMatch' => '\OpenAPI\Fincode\Model\Tds2AddrMatch', 'tds2BillAddrCountry' => 'string', 'tds2BillAddrState' => 'string', 'tds2BillAddrCity' => 'string', 'tds2BillAddrLine1' => 'string', 'tds2BillAddrLine2' => 'string', 'tds2BillAddrLine3' => 'string', 'tds2BillAddrPostCode' => 'string', 'tds2ShipAddrCountry' => 'string', 'tds2ShipAddrState' => 'string', 'tds2ShipAddrCity' => 'string', 'tds2ShipAddrLine1' => 'string', 'tds2ShipAddrLine2' => 'string', 'tds2ShipAddrLine3' => 'string', 'tds2ShipAddrPostCode' => 'string', 'tds2ShipInd' => '\OpenAPI\Fincode\Model\Tds2ShipInd', 'tds2DeliveryEmailAddress' => 'string', 'tds2HomePhoneCc' => 'string', 'tds2HomePhoneNo' => 'string', 'tds2MobilePhoneCc' => 'string', 'tds2MobilePhoneNo' => 'string', 'tds2WorkPhoneCc' => 'string', 'tds2WorkPhoneNo' => 'string', 'tds2DeliveryTimeframe' => '\OpenAPI\Fincode\Model\Tds2DeliveryTimeframe', 'tds2PreOrderDate' => 'string', 'tds2PreOrderPurchaseInd' => '\OpenAPI\Fincode\Model\Tds2PreOrderPurchaseInd', 'tds2ReorderItemsInd' => '\OpenAPI\Fincode\Model\Tds2ReorderItemsInd', 'tds2RecurringExpiry' => 'string', 'tds2RecurringFrequency' => 'string', 'tds2GiftCardAmount' => 'string', 'tds2GiftCardCount' => 'string', 'tds2GiftCardCurr' => 'string'];
    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var array<string, string|null>
     */
    protected static array $openAPIFormats = ['payType' => null, 'accessId' => null, 'token' => null, 'customerId' => null, 'cardId' => null, 'method' => null, 'payTimes' => null, 'tds2RetUrl' => null, 'returnUrl' => null, 'returnUrlOnFailure' => null, 'tds2ChAccChange' => null, 'tds2ChAccDate' => null, 'tds2ChAccPwChange' => null, 'tds2NbPurchaseAccount' => null, 'tds2PaymentAccAge' => null, 'tds2ProvisionAttemptsDay' => null, 'tds2ShipAddressUsage' => null, 'tds2ShipNameInd' => null, 'tds2SuspiciousAccActivity' => null, 'tds2TxnActivityDay' => null, 'tds2TxnActivityYear' => null, 'tds2ThreeDsReqAuthData' => null, 'tds2ThreeDsReqAuthMethod' => null, 'tds2ThreeDsReqAuthTimestamp' => null, 'tds2Email' => null, 'tds2AddrMatch' => null, 'tds2BillAddrCountry' => null, 'tds2BillAddrState' => null, 'tds2BillAddrCity' => null, 'tds2BillAddrLine1' => null, 'tds2BillAddrLine2' => null, 'tds2BillAddrLine3' => null, 'tds2BillAddrPostCode' => null, 'tds2ShipAddrCountry' => null, 'tds2ShipAddrState' => null, 'tds2ShipAddrCity' => null, 'tds2ShipAddrLine1' => null, 'tds2ShipAddrLine2' => null, 'tds2ShipAddrLine3' => null, 'tds2ShipAddrPostCode' => null, 'tds2ShipInd' => null, 'tds2DeliveryEmailAddress' => null, 'tds2HomePhoneCc' => null, 'tds2HomePhoneNo' => null, 'tds2MobilePhoneCc' => null, 'tds2MobilePhoneNo' => null, 'tds2WorkPhoneCc' => null, 'tds2WorkPhoneNo' => null, 'tds2DeliveryTimeframe' => null, 'tds2PreOrderDate' => null, 'tds2PreOrderPurchaseInd' => null, 'tds2ReorderItemsInd' => null, 'tds2RecurringExpiry' => null, 'tds2RecurringFrequency' => null, 'tds2GiftCardAmount' => null, 'tds2GiftCardCount' => null, 'tds2GiftCardCurr' => null];
    /**
     * Array of nullable properties. Used for (de)serialization.
     *
     * @var array<string, bool>
     */
    protected static array $openAPINullables = ['payType' => false, 'accessId' => false, 'token' => false, 'customerId' => false, 'cardId' => false, 'method' => false, 'payTimes' => true, 'tds2RetUrl' => true, 'returnUrl' => true, 'returnUrlOnFailure' => true, 'tds2ChAccChange' => true, 'tds2ChAccDate' => true, 'tds2ChAccPwChange' => true, 'tds2NbPurchaseAccount' => true, 'tds2PaymentAccAge' => true, 'tds2ProvisionAttemptsDay' => true, 'tds2ShipAddressUsage' => true, 'tds2ShipNameInd' => true, 'tds2SuspiciousAccActivity' => true, 'tds2TxnActivityDay' => true, 'tds2TxnActivityYear' => true, 'tds2ThreeDsReqAuthData' => true, 'tds2ThreeDsReqAuthMethod' => true, 'tds2ThreeDsReqAuthTimestamp' => true, 'tds2Email' => true, 'tds2AddrMatch' => true, 'tds2BillAddrCountry' => true, 'tds2BillAddrState' => true, 'tds2BillAddrCity' => true, 'tds2BillAddrLine1' => true, 'tds2BillAddrLine2' => true, 'tds2BillAddrLine3' => true, 'tds2BillAddrPostCode' => true, 'tds2ShipAddrCountry' => true, 'tds2ShipAddrState' => true, 'tds2ShipAddrCity' => true, 'tds2ShipAddrLine1' => true, 'tds2ShipAddrLine2' => true, 'tds2ShipAddrLine3' => true, 'tds2ShipAddrPostCode' => true, 'tds2ShipInd' => true, 'tds2DeliveryEmailAddress' => true, 'tds2HomePhoneCc' => true, 'tds2HomePhoneNo' => true, 'tds2MobilePhoneCc' => true, 'tds2MobilePhoneNo' => true, 'tds2WorkPhoneCc' => true, 'tds2WorkPhoneNo' => true, 'tds2DeliveryTimeframe' => true, 'tds2PreOrderDate' => true, 'tds2PreOrderPurchaseInd' => true, 'tds2ReorderItemsInd' => true, 'tds2RecurringExpiry' => true, 'tds2RecurringFrequency' => true, 'tds2GiftCardAmount' => true, 'tds2GiftCardCount' => true, 'tds2GiftCardCurr' => true];
    /**
     * If a nullable field gets set to null, insert it here.
     *
     * @var array<string, bool>
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return array<string, string|null>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties.
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null.
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null.
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable.
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }
    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = ['payType' => 'pay_type', 'accessId' => 'access_id', 'token' => 'token', 'customerId' => 'customer_id', 'cardId' => 'card_id', 'method' => 'method', 'payTimes' => 'pay_times', 'tds2RetUrl' => 'tds2_ret_url', 'returnUrl' => 'return_url', 'returnUrlOnFailure' => 'return_url_on_failure', 'tds2ChAccChange' => 'tds2_ch_acc_change', 'tds2ChAccDate' => 'tds2_ch_acc_date', 'tds2ChAccPwChange' => 'tds2_ch_acc_pw_change', 'tds2NbPurchaseAccount' => 'tds2_nb_purchase_account', 'tds2PaymentAccAge' => 'tds2_payment_acc_age', 'tds2ProvisionAttemptsDay' => 'tds2_provision_attempts_day', 'tds2ShipAddressUsage' => 'tds2_ship_address_usage', 'tds2ShipNameInd' => 'tds2_ship_name_ind', 'tds2SuspiciousAccActivity' => 'tds2_suspicious_acc_activity', 'tds2TxnActivityDay' => 'tds2_txn_activity_day', 'tds2TxnActivityYear' => 'tds2_txn_activity_year', 'tds2ThreeDsReqAuthData' => 'tds2_three_ds_req_auth_data', 'tds2ThreeDsReqAuthMethod' => 'tds2_three_ds_req_auth_method', 'tds2ThreeDsReqAuthTimestamp' => 'tds2_three_ds_req_auth_timestamp', 'tds2Email' => 'tds2_email', 'tds2AddrMatch' => 'tds2_addr_match', 'tds2BillAddrCountry' => 'tds2_bill_addr_country', 'tds2BillAddrState' => 'tds2_bill_addr_state', 'tds2BillAddrCity' => 'tds2_bill_addr_city', 'tds2BillAddrLine1' => 'tds2_bill_addr_line_1', 'tds2BillAddrLine2' => 'tds2_bill_addr_line_2', 'tds2BillAddrLine3' => 'tds2_bill_addr_line_3', 'tds2BillAddrPostCode' => 'tds2_bill_addr_post_code', 'tds2ShipAddrCountry' => 'tds2_ship_addr_country', 'tds2ShipAddrState' => 'tds2_ship_addr_state', 'tds2ShipAddrCity' => 'tds2_ship_addr_city', 'tds2ShipAddrLine1' => 'tds2_ship_addr_line_1', 'tds2ShipAddrLine2' => 'tds2_ship_addr_line_2', 'tds2ShipAddrLine3' => 'tds2_ship_addr_line_3', 'tds2ShipAddrPostCode' => 'tds2_ship_addr_post_code', 'tds2ShipInd' => 'tds2_ship_ind', 'tds2DeliveryEmailAddress' => 'tds2_delivery_email_address', 'tds2HomePhoneCc' => 'tds2_home_phone_cc', 'tds2HomePhoneNo' => 'tds2_home_phone_no', 'tds2MobilePhoneCc' => 'tds2_mobile_phone_cc', 'tds2MobilePhoneNo' => 'tds2_mobile_phone_no', 'tds2WorkPhoneCc' => 'tds2_work_phone_cc', 'tds2WorkPhoneNo' => 'tds2_work_phone_no', 'tds2DeliveryTimeframe' => 'tds2_delivery_timeframe', 'tds2PreOrderDate' => 'tds2_pre_order_date', 'tds2PreOrderPurchaseInd' => 'tds2_pre_order_purchase_ind', 'tds2ReorderItemsInd' => 'tds2_reorder_items_ind', 'tds2RecurringExpiry' => 'tds2_recurring_expiry', 'tds2RecurringFrequency' => 'tds2_recurring_frequency', 'tds2GiftCardAmount' => 'tds2_gift_card_amount', 'tds2GiftCardCount' => 'tds2_gift_card_count', 'tds2GiftCardCurr' => 'tds2_gift_card_curr'];
    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var array<string, string>
     */
    protected static array $setters = ['payType' => 'setPayType', 'accessId' => 'setAccessId', 'token' => 'setToken', 'customerId' => 'setCustomerId', 'cardId' => 'setCardId', 'method' => 'setMethod', 'payTimes' => 'setPayTimes', 'tds2RetUrl' => 'setTds2RetUrl', 'returnUrl' => 'setReturnUrl', 'returnUrlOnFailure' => 'setReturnUrlOnFailure', 'tds2ChAccChange' => 'setTds2ChAccChange', 'tds2ChAccDate' => 'setTds2ChAccDate', 'tds2ChAccPwChange' => 'setTds2ChAccPwChange', 'tds2NbPurchaseAccount' => 'setTds2NbPurchaseAccount', 'tds2PaymentAccAge' => 'setTds2PaymentAccAge', 'tds2ProvisionAttemptsDay' => 'setTds2ProvisionAttemptsDay', 'tds2ShipAddressUsage' => 'setTds2ShipAddressUsage', 'tds2ShipNameInd' => 'setTds2ShipNameInd', 'tds2SuspiciousAccActivity' => 'setTds2SuspiciousAccActivity', 'tds2TxnActivityDay' => 'setTds2TxnActivityDay', 'tds2TxnActivityYear' => 'setTds2TxnActivityYear', 'tds2ThreeDsReqAuthData' => 'setTds2ThreeDsReqAuthData', 'tds2ThreeDsReqAuthMethod' => 'setTds2ThreeDsReqAuthMethod', 'tds2ThreeDsReqAuthTimestamp' => 'setTds2ThreeDsReqAuthTimestamp', 'tds2Email' => 'setTds2Email', 'tds2AddrMatch' => 'setTds2AddrMatch', 'tds2BillAddrCountry' => 'setTds2BillAddrCountry', 'tds2BillAddrState' => 'setTds2BillAddrState', 'tds2BillAddrCity' => 'setTds2BillAddrCity', 'tds2BillAddrLine1' => 'setTds2BillAddrLine1', 'tds2BillAddrLine2' => 'setTds2BillAddrLine2', 'tds2BillAddrLine3' => 'setTds2BillAddrLine3', 'tds2BillAddrPostCode' => 'setTds2BillAddrPostCode', 'tds2ShipAddrCountry' => 'setTds2ShipAddrCountry', 'tds2ShipAddrState' => 'setTds2ShipAddrState', 'tds2ShipAddrCity' => 'setTds2ShipAddrCity', 'tds2ShipAddrLine1' => 'setTds2ShipAddrLine1', 'tds2ShipAddrLine2' => 'setTds2ShipAddrLine2', 'tds2ShipAddrLine3' => 'setTds2ShipAddrLine3', 'tds2ShipAddrPostCode' => 'setTds2ShipAddrPostCode', 'tds2ShipInd' => 'setTds2ShipInd', 'tds2DeliveryEmailAddress' => 'setTds2DeliveryEmailAddress', 'tds2HomePhoneCc' => 'setTds2HomePhoneCc', 'tds2HomePhoneNo' => 'setTds2HomePhoneNo', 'tds2MobilePhoneCc' => 'setTds2MobilePhoneCc', 'tds2MobilePhoneNo' => 'setTds2MobilePhoneNo', 'tds2WorkPhoneCc' => 'setTds2WorkPhoneCc', 'tds2WorkPhoneNo' => 'setTds2WorkPhoneNo', 'tds2DeliveryTimeframe' => 'setTds2DeliveryTimeframe', 'tds2PreOrderDate' => 'setTds2PreOrderDate', 'tds2PreOrderPurchaseInd' => 'setTds2PreOrderPurchaseInd', 'tds2ReorderItemsInd' => 'setTds2ReorderItemsInd', 'tds2RecurringExpiry' => 'setTds2RecurringExpiry', 'tds2RecurringFrequency' => 'setTds2RecurringFrequency', 'tds2GiftCardAmount' => 'setTds2GiftCardAmount', 'tds2GiftCardCount' => 'setTds2GiftCardCount', 'tds2GiftCardCurr' => 'setTds2GiftCardCurr'];
    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var array<string, string>
     */
    protected static array $getters = ['payType' => 'getPayType', 'accessId' => 'getAccessId', 'token' => 'getToken', 'customerId' => 'getCustomerId', 'cardId' => 'getCardId', 'method' => 'getMethod', 'payTimes' => 'getPayTimes', 'tds2RetUrl' => 'getTds2RetUrl', 'returnUrl' => 'getReturnUrl', 'returnUrlOnFailure' => 'getReturnUrlOnFailure', 'tds2ChAccChange' => 'getTds2ChAccChange', 'tds2ChAccDate' => 'getTds2ChAccDate', 'tds2ChAccPwChange' => 'getTds2ChAccPwChange', 'tds2NbPurchaseAccount' => 'getTds2NbPurchaseAccount', 'tds2PaymentAccAge' => 'getTds2PaymentAccAge', 'tds2ProvisionAttemptsDay' => 'getTds2ProvisionAttemptsDay', 'tds2ShipAddressUsage' => 'getTds2ShipAddressUsage', 'tds2ShipNameInd' => 'getTds2ShipNameInd', 'tds2SuspiciousAccActivity' => 'getTds2SuspiciousAccActivity', 'tds2TxnActivityDay' => 'getTds2TxnActivityDay', 'tds2TxnActivityYear' => 'getTds2TxnActivityYear', 'tds2ThreeDsReqAuthData' => 'getTds2ThreeDsReqAuthData', 'tds2ThreeDsReqAuthMethod' => 'getTds2ThreeDsReqAuthMethod', 'tds2ThreeDsReqAuthTimestamp' => 'getTds2ThreeDsReqAuthTimestamp', 'tds2Email' => 'getTds2Email', 'tds2AddrMatch' => 'getTds2AddrMatch', 'tds2BillAddrCountry' => 'getTds2BillAddrCountry', 'tds2BillAddrState' => 'getTds2BillAddrState', 'tds2BillAddrCity' => 'getTds2BillAddrCity', 'tds2BillAddrLine1' => 'getTds2BillAddrLine1', 'tds2BillAddrLine2' => 'getTds2BillAddrLine2', 'tds2BillAddrLine3' => 'getTds2BillAddrLine3', 'tds2BillAddrPostCode' => 'getTds2BillAddrPostCode', 'tds2ShipAddrCountry' => 'getTds2ShipAddrCountry', 'tds2ShipAddrState' => 'getTds2ShipAddrState', 'tds2ShipAddrCity' => 'getTds2ShipAddrCity', 'tds2ShipAddrLine1' => 'getTds2ShipAddrLine1', 'tds2ShipAddrLine2' => 'getTds2ShipAddrLine2', 'tds2ShipAddrLine3' => 'getTds2ShipAddrLine3', 'tds2ShipAddrPostCode' => 'getTds2ShipAddrPostCode', 'tds2ShipInd' => 'getTds2ShipInd', 'tds2DeliveryEmailAddress' => 'getTds2DeliveryEmailAddress', 'tds2HomePhoneCc' => 'getTds2HomePhoneCc', 'tds2HomePhoneNo' => 'getTds2HomePhoneNo', 'tds2MobilePhoneCc' => 'getTds2MobilePhoneCc', 'tds2MobilePhoneNo' => 'getTds2MobilePhoneNo', 'tds2WorkPhoneCc' => 'getTds2WorkPhoneCc', 'tds2WorkPhoneNo' => 'getTds2WorkPhoneNo', 'tds2DeliveryTimeframe' => 'getTds2DeliveryTimeframe', 'tds2PreOrderDate' => 'getTds2PreOrderDate', 'tds2PreOrderPurchaseInd' => 'getTds2PreOrderPurchaseInd', 'tds2ReorderItemsInd' => 'getTds2ReorderItemsInd', 'tds2RecurringExpiry' => 'getTds2RecurringExpiry', 'tds2RecurringFrequency' => 'getTds2RecurringFrequency', 'tds2GiftCardAmount' => 'getTds2GiftCardAmount', 'tds2GiftCardCount' => 'getTds2GiftCardCount', 'tds2GiftCardCurr' => 'getTds2GiftCardCurr'];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }
    /**
     * Associative array for storing property values.
     *
     * @phpstan-var array<string, mixed>
     *
     * @psalm-var array<string, mixed>
     */
    protected array $container = [];

    /**
     * Constructor.
     *
     * @param array<string, mixed> $data Associated array of property values
     *                                   initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('payType', $data ?? [], null);
        $this->setIfExists('accessId', $data ?? [], null);
        $this->setIfExists('token', $data ?? [], null);
        $this->setIfExists('customerId', $data ?? [], null);
        $this->setIfExists('cardId', $data ?? [], null);
        $this->setIfExists('method', $data ?? [], null);
        $this->setIfExists('payTimes', $data ?? [], null);
        $this->setIfExists('tds2RetUrl', $data ?? [], null);
        $this->setIfExists('returnUrl', $data ?? [], null);
        $this->setIfExists('returnUrlOnFailure', $data ?? [], null);
        $this->setIfExists('tds2ChAccChange', $data ?? [], null);
        $this->setIfExists('tds2ChAccDate', $data ?? [], null);
        $this->setIfExists('tds2ChAccPwChange', $data ?? [], null);
        $this->setIfExists('tds2NbPurchaseAccount', $data ?? [], null);
        $this->setIfExists('tds2PaymentAccAge', $data ?? [], null);
        $this->setIfExists('tds2ProvisionAttemptsDay', $data ?? [], null);
        $this->setIfExists('tds2ShipAddressUsage', $data ?? [], null);
        $this->setIfExists('tds2ShipNameInd', $data ?? [], null);
        $this->setIfExists('tds2SuspiciousAccActivity', $data ?? [], null);
        $this->setIfExists('tds2TxnActivityDay', $data ?? [], null);
        $this->setIfExists('tds2TxnActivityYear', $data ?? [], null);
        $this->setIfExists('tds2ThreeDsReqAuthData', $data ?? [], null);
        $this->setIfExists('tds2ThreeDsReqAuthMethod', $data ?? [], null);
        $this->setIfExists('tds2ThreeDsReqAuthTimestamp', $data ?? [], null);
        $this->setIfExists('tds2Email', $data ?? [], null);
        $this->setIfExists('tds2AddrMatch', $data ?? [], null);
        $this->setIfExists('tds2BillAddrCountry', $data ?? [], null);
        $this->setIfExists('tds2BillAddrState', $data ?? [], null);
        $this->setIfExists('tds2BillAddrCity', $data ?? [], null);
        $this->setIfExists('tds2BillAddrLine1', $data ?? [], null);
        $this->setIfExists('tds2BillAddrLine2', $data ?? [], null);
        $this->setIfExists('tds2BillAddrLine3', $data ?? [], null);
        $this->setIfExists('tds2BillAddrPostCode', $data ?? [], null);
        $this->setIfExists('tds2ShipAddrCountry', $data ?? [], null);
        $this->setIfExists('tds2ShipAddrState', $data ?? [], null);
        $this->setIfExists('tds2ShipAddrCity', $data ?? [], null);
        $this->setIfExists('tds2ShipAddrLine1', $data ?? [], null);
        $this->setIfExists('tds2ShipAddrLine2', $data ?? [], null);
        $this->setIfExists('tds2ShipAddrLine3', $data ?? [], null);
        $this->setIfExists('tds2ShipAddrPostCode', $data ?? [], null);
        $this->setIfExists('tds2ShipInd', $data ?? [], null);
        $this->setIfExists('tds2DeliveryEmailAddress', $data ?? [], null);
        $this->setIfExists('tds2HomePhoneCc', $data ?? [], null);
        $this->setIfExists('tds2HomePhoneNo', $data ?? [], null);
        $this->setIfExists('tds2MobilePhoneCc', $data ?? [], null);
        $this->setIfExists('tds2MobilePhoneNo', $data ?? [], null);
        $this->setIfExists('tds2WorkPhoneCc', $data ?? [], null);
        $this->setIfExists('tds2WorkPhoneNo', $data ?? [], null);
        $this->setIfExists('tds2DeliveryTimeframe', $data ?? [], null);
        $this->setIfExists('tds2PreOrderDate', $data ?? [], null);
        $this->setIfExists('tds2PreOrderPurchaseInd', $data ?? [], null);
        $this->setIfExists('tds2ReorderItemsInd', $data ?? [], null);
        $this->setIfExists('tds2RecurringExpiry', $data ?? [], null);
        $this->setIfExists('tds2RecurringFrequency', $data ?? [], null);
        $this->setIfExists('tds2GiftCardAmount', $data ?? [], null);
        $this->setIfExists('tds2GiftCardCount', $data ?? [], null);
        $this->setIfExists('tds2GiftCardCurr', $data ?? [], null);
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array.
     *
     * @param array<string, mixed> $fields
     */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }
        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return list<string> invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];
        if (null === $this->container['payType']) {
            $invalidProperties[] = "'payType' can't be null";
        }
        if (null === $this->container['accessId']) {
            $invalidProperties[] = "'accessId' can't be null";
        }
        if (mb_strlen($this->container['accessId']) > 24) {
            $invalidProperties[] = "invalid value for 'accessId', the character length must be smaller than or equal to 24.";
        }
        if (mb_strlen($this->container['accessId']) < 24) {
            $invalidProperties[] = "invalid value for 'accessId', the character length must be bigger than or equal to 24.";
        }
        if (!is_null($this->container['token']) && mb_strlen($this->container['token']) > 512) {
            $invalidProperties[] = "invalid value for 'token', the character length must be smaller than or equal to 512.";
        }
        if (!is_null($this->container['token']) && mb_strlen($this->container['token']) < 1) {
            $invalidProperties[] = "invalid value for 'token', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['customerId']) && mb_strlen($this->container['customerId']) > 60) {
            $invalidProperties[] = "invalid value for 'customerId', the character length must be smaller than or equal to 60.";
        }
        if (!is_null($this->container['customerId']) && mb_strlen($this->container['customerId']) < 1) {
            $invalidProperties[] = "invalid value for 'customerId', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['cardId']) && mb_strlen($this->container['cardId']) > 25) {
            $invalidProperties[] = "invalid value for 'cardId', the character length must be smaller than or equal to 25.";
        }
        if (!is_null($this->container['cardId']) && mb_strlen($this->container['cardId']) < 25) {
            $invalidProperties[] = "invalid value for 'cardId', the character length must be bigger than or equal to 25.";
        }
        if (!is_null($this->container['tds2RetUrl']) && mb_strlen($this->container['tds2RetUrl']) > 256) {
            $invalidProperties[] = "invalid value for 'tds2RetUrl', the character length must be smaller than or equal to 256.";
        }
        if (!is_null($this->container['returnUrl']) && mb_strlen($this->container['returnUrl']) > 256) {
            $invalidProperties[] = "invalid value for 'returnUrl', the character length must be smaller than or equal to 256.";
        }
        if (!is_null($this->container['returnUrlOnFailure']) && mb_strlen($this->container['returnUrlOnFailure']) > 256) {
            $invalidProperties[] = "invalid value for 'returnUrlOnFailure', the character length must be smaller than or equal to 256.";
        }
        if (!is_null($this->container['tds2ChAccChange']) && mb_strlen($this->container['tds2ChAccChange']) > 8) {
            $invalidProperties[] = "invalid value for 'tds2ChAccChange', the character length must be smaller than or equal to 8.";
        }
        if (!is_null($this->container['tds2ChAccChange']) && mb_strlen($this->container['tds2ChAccChange']) < 8) {
            $invalidProperties[] = "invalid value for 'tds2ChAccChange', the character length must be bigger than or equal to 8.";
        }
        if (!is_null($this->container['tds2ChAccDate']) && mb_strlen($this->container['tds2ChAccDate']) > 8) {
            $invalidProperties[] = "invalid value for 'tds2ChAccDate', the character length must be smaller than or equal to 8.";
        }
        if (!is_null($this->container['tds2ChAccDate']) && mb_strlen($this->container['tds2ChAccDate']) < 8) {
            $invalidProperties[] = "invalid value for 'tds2ChAccDate', the character length must be bigger than or equal to 8.";
        }
        if (!is_null($this->container['tds2ChAccPwChange']) && mb_strlen($this->container['tds2ChAccPwChange']) > 8) {
            $invalidProperties[] = "invalid value for 'tds2ChAccPwChange', the character length must be smaller than or equal to 8.";
        }
        if (!is_null($this->container['tds2ChAccPwChange']) && mb_strlen($this->container['tds2ChAccPwChange']) < 8) {
            $invalidProperties[] = "invalid value for 'tds2ChAccPwChange', the character length must be bigger than or equal to 8.";
        }
        if (!is_null($this->container['tds2NbPurchaseAccount']) && mb_strlen($this->container['tds2NbPurchaseAccount']) > 4) {
            $invalidProperties[] = "invalid value for 'tds2NbPurchaseAccount', the character length must be smaller than or equal to 4.";
        }
        if (!is_null($this->container['tds2NbPurchaseAccount']) && mb_strlen($this->container['tds2NbPurchaseAccount']) < 1) {
            $invalidProperties[] = "invalid value for 'tds2NbPurchaseAccount', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['tds2PaymentAccAge']) && mb_strlen($this->container['tds2PaymentAccAge']) > 8) {
            $invalidProperties[] = "invalid value for 'tds2PaymentAccAge', the character length must be smaller than or equal to 8.";
        }
        if (!is_null($this->container['tds2PaymentAccAge']) && mb_strlen($this->container['tds2PaymentAccAge']) < 8) {
            $invalidProperties[] = "invalid value for 'tds2PaymentAccAge', the character length must be bigger than or equal to 8.";
        }
        if (!is_null($this->container['tds2ProvisionAttemptsDay']) && mb_strlen($this->container['tds2ProvisionAttemptsDay']) > 3) {
            $invalidProperties[] = "invalid value for 'tds2ProvisionAttemptsDay', the character length must be smaller than or equal to 3.";
        }
        if (!is_null($this->container['tds2ProvisionAttemptsDay']) && mb_strlen($this->container['tds2ProvisionAttemptsDay']) < 3) {
            $invalidProperties[] = "invalid value for 'tds2ProvisionAttemptsDay', the character length must be bigger than or equal to 3.";
        }
        if (!is_null($this->container['tds2ShipAddressUsage']) && mb_strlen($this->container['tds2ShipAddressUsage']) > 8) {
            $invalidProperties[] = "invalid value for 'tds2ShipAddressUsage', the character length must be smaller than or equal to 8.";
        }
        if (!is_null($this->container['tds2ShipAddressUsage']) && mb_strlen($this->container['tds2ShipAddressUsage']) < 8) {
            $invalidProperties[] = "invalid value for 'tds2ShipAddressUsage', the character length must be bigger than or equal to 8.";
        }
        if (!is_null($this->container['tds2TxnActivityDay']) && mb_strlen($this->container['tds2TxnActivityDay']) > 3) {
            $invalidProperties[] = "invalid value for 'tds2TxnActivityDay', the character length must be smaller than or equal to 3.";
        }
        if (!is_null($this->container['tds2TxnActivityDay']) && mb_strlen($this->container['tds2TxnActivityDay']) < 3) {
            $invalidProperties[] = "invalid value for 'tds2TxnActivityDay', the character length must be bigger than or equal to 3.";
        }
        if (!is_null($this->container['tds2TxnActivityYear']) && mb_strlen($this->container['tds2TxnActivityYear']) > 3) {
            $invalidProperties[] = "invalid value for 'tds2TxnActivityYear', the character length must be smaller than or equal to 3.";
        }
        if (!is_null($this->container['tds2TxnActivityYear']) && mb_strlen($this->container['tds2TxnActivityYear']) < 3) {
            $invalidProperties[] = "invalid value for 'tds2TxnActivityYear', the character length must be bigger than or equal to 3.";
        }
        if (!is_null($this->container['tds2ThreeDsReqAuthData']) && mb_strlen($this->container['tds2ThreeDsReqAuthData']) > 2048) {
            $invalidProperties[] = "invalid value for 'tds2ThreeDsReqAuthData', the character length must be smaller than or equal to 2048.";
        }
        if (!is_null($this->container['tds2ThreeDsReqAuthData']) && mb_strlen($this->container['tds2ThreeDsReqAuthData']) < 1) {
            $invalidProperties[] = "invalid value for 'tds2ThreeDsReqAuthData', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['tds2ThreeDsReqAuthTimestamp']) && mb_strlen($this->container['tds2ThreeDsReqAuthTimestamp']) > 12) {
            $invalidProperties[] = "invalid value for 'tds2ThreeDsReqAuthTimestamp', the character length must be smaller than or equal to 12.";
        }
        if (!is_null($this->container['tds2ThreeDsReqAuthTimestamp']) && mb_strlen($this->container['tds2ThreeDsReqAuthTimestamp']) < 12) {
            $invalidProperties[] = "invalid value for 'tds2ThreeDsReqAuthTimestamp', the character length must be bigger than or equal to 12.";
        }
        if (!is_null($this->container['tds2Email']) && mb_strlen($this->container['tds2Email']) > 254) {
            $invalidProperties[] = "invalid value for 'tds2Email', the character length must be smaller than or equal to 254.";
        }
        if (!is_null($this->container['tds2Email']) && mb_strlen($this->container['tds2Email']) < 1) {
            $invalidProperties[] = "invalid value for 'tds2Email', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['tds2BillAddrCountry']) && mb_strlen($this->container['tds2BillAddrCountry']) > 3) {
            $invalidProperties[] = "invalid value for 'tds2BillAddrCountry', the character length must be smaller than or equal to 3.";
        }
        if (!is_null($this->container['tds2BillAddrCountry']) && mb_strlen($this->container['tds2BillAddrCountry']) < 1) {
            $invalidProperties[] = "invalid value for 'tds2BillAddrCountry', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['tds2BillAddrState']) && mb_strlen($this->container['tds2BillAddrState']) > 3) {
            $invalidProperties[] = "invalid value for 'tds2BillAddrState', the character length must be smaller than or equal to 3.";
        }
        if (!is_null($this->container['tds2BillAddrState']) && mb_strlen($this->container['tds2BillAddrState']) < 1) {
            $invalidProperties[] = "invalid value for 'tds2BillAddrState', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['tds2BillAddrCity']) && mb_strlen($this->container['tds2BillAddrCity']) > 50) {
            $invalidProperties[] = "invalid value for 'tds2BillAddrCity', the character length must be smaller than or equal to 50.";
        }
        if (!is_null($this->container['tds2BillAddrCity']) && mb_strlen($this->container['tds2BillAddrCity']) < 1) {
            $invalidProperties[] = "invalid value for 'tds2BillAddrCity', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['tds2BillAddrLine1']) && mb_strlen($this->container['tds2BillAddrLine1']) > 100) {
            $invalidProperties[] = "invalid value for 'tds2BillAddrLine1', the character length must be smaller than or equal to 100.";
        }
        if (!is_null($this->container['tds2BillAddrLine1']) && mb_strlen($this->container['tds2BillAddrLine1']) < 1) {
            $invalidProperties[] = "invalid value for 'tds2BillAddrLine1', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['tds2BillAddrLine2']) && mb_strlen($this->container['tds2BillAddrLine2']) > 100) {
            $invalidProperties[] = "invalid value for 'tds2BillAddrLine2', the character length must be smaller than or equal to 100.";
        }
        if (!is_null($this->container['tds2BillAddrLine2']) && mb_strlen($this->container['tds2BillAddrLine2']) < 1) {
            $invalidProperties[] = "invalid value for 'tds2BillAddrLine2', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['tds2BillAddrLine3']) && mb_strlen($this->container['tds2BillAddrLine3']) > 100) {
            $invalidProperties[] = "invalid value for 'tds2BillAddrLine3', the character length must be smaller than or equal to 100.";
        }
        if (!is_null($this->container['tds2BillAddrLine3']) && mb_strlen($this->container['tds2BillAddrLine3']) < 1) {
            $invalidProperties[] = "invalid value for 'tds2BillAddrLine3', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['tds2BillAddrPostCode']) && mb_strlen($this->container['tds2BillAddrPostCode']) > 16) {
            $invalidProperties[] = "invalid value for 'tds2BillAddrPostCode', the character length must be smaller than or equal to 16.";
        }
        if (!is_null($this->container['tds2BillAddrPostCode']) && mb_strlen($this->container['tds2BillAddrPostCode']) < 1) {
            $invalidProperties[] = "invalid value for 'tds2BillAddrPostCode', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['tds2ShipAddrCountry']) && mb_strlen($this->container['tds2ShipAddrCountry']) > 3) {
            $invalidProperties[] = "invalid value for 'tds2ShipAddrCountry', the character length must be smaller than or equal to 3.";
        }
        if (!is_null($this->container['tds2ShipAddrCountry']) && mb_strlen($this->container['tds2ShipAddrCountry']) < 1) {
            $invalidProperties[] = "invalid value for 'tds2ShipAddrCountry', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['tds2ShipAddrState']) && mb_strlen($this->container['tds2ShipAddrState']) > 3) {
            $invalidProperties[] = "invalid value for 'tds2ShipAddrState', the character length must be smaller than or equal to 3.";
        }
        if (!is_null($this->container['tds2ShipAddrState']) && mb_strlen($this->container['tds2ShipAddrState']) < 1) {
            $invalidProperties[] = "invalid value for 'tds2ShipAddrState', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['tds2ShipAddrCity']) && mb_strlen($this->container['tds2ShipAddrCity']) > 50) {
            $invalidProperties[] = "invalid value for 'tds2ShipAddrCity', the character length must be smaller than or equal to 50.";
        }
        if (!is_null($this->container['tds2ShipAddrCity']) && mb_strlen($this->container['tds2ShipAddrCity']) < 1) {
            $invalidProperties[] = "invalid value for 'tds2ShipAddrCity', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['tds2ShipAddrLine1']) && mb_strlen($this->container['tds2ShipAddrLine1']) > 100) {
            $invalidProperties[] = "invalid value for 'tds2ShipAddrLine1', the character length must be smaller than or equal to 100.";
        }
        if (!is_null($this->container['tds2ShipAddrLine1']) && mb_strlen($this->container['tds2ShipAddrLine1']) < 1) {
            $invalidProperties[] = "invalid value for 'tds2ShipAddrLine1', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['tds2ShipAddrLine2']) && mb_strlen($this->container['tds2ShipAddrLine2']) > 100) {
            $invalidProperties[] = "invalid value for 'tds2ShipAddrLine2', the character length must be smaller than or equal to 100.";
        }
        if (!is_null($this->container['tds2ShipAddrLine2']) && mb_strlen($this->container['tds2ShipAddrLine2']) < 1) {
            $invalidProperties[] = "invalid value for 'tds2ShipAddrLine2', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['tds2ShipAddrLine3']) && mb_strlen($this->container['tds2ShipAddrLine3']) > 100) {
            $invalidProperties[] = "invalid value for 'tds2ShipAddrLine3', the character length must be smaller than or equal to 100.";
        }
        if (!is_null($this->container['tds2ShipAddrLine3']) && mb_strlen($this->container['tds2ShipAddrLine3']) < 1) {
            $invalidProperties[] = "invalid value for 'tds2ShipAddrLine3', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['tds2ShipAddrPostCode']) && mb_strlen($this->container['tds2ShipAddrPostCode']) > 16) {
            $invalidProperties[] = "invalid value for 'tds2ShipAddrPostCode', the character length must be smaller than or equal to 16.";
        }
        if (!is_null($this->container['tds2ShipAddrPostCode']) && mb_strlen($this->container['tds2ShipAddrPostCode']) < 1) {
            $invalidProperties[] = "invalid value for 'tds2ShipAddrPostCode', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['tds2DeliveryEmailAddress']) && mb_strlen($this->container['tds2DeliveryEmailAddress']) > 254) {
            $invalidProperties[] = "invalid value for 'tds2DeliveryEmailAddress', the character length must be smaller than or equal to 254.";
        }
        if (!is_null($this->container['tds2DeliveryEmailAddress']) && mb_strlen($this->container['tds2DeliveryEmailAddress']) < 1) {
            $invalidProperties[] = "invalid value for 'tds2DeliveryEmailAddress', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['tds2HomePhoneCc']) && mb_strlen($this->container['tds2HomePhoneCc']) > 3) {
            $invalidProperties[] = "invalid value for 'tds2HomePhoneCc', the character length must be smaller than or equal to 3.";
        }
        if (!is_null($this->container['tds2HomePhoneCc']) && mb_strlen($this->container['tds2HomePhoneCc']) < 1) {
            $invalidProperties[] = "invalid value for 'tds2HomePhoneCc', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['tds2HomePhoneNo']) && mb_strlen($this->container['tds2HomePhoneNo']) > 15) {
            $invalidProperties[] = "invalid value for 'tds2HomePhoneNo', the character length must be smaller than or equal to 15.";
        }
        if (!is_null($this->container['tds2HomePhoneNo']) && mb_strlen($this->container['tds2HomePhoneNo']) < 1) {
            $invalidProperties[] = "invalid value for 'tds2HomePhoneNo', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['tds2MobilePhoneCc']) && mb_strlen($this->container['tds2MobilePhoneCc']) > 3) {
            $invalidProperties[] = "invalid value for 'tds2MobilePhoneCc', the character length must be smaller than or equal to 3.";
        }
        if (!is_null($this->container['tds2MobilePhoneCc']) && mb_strlen($this->container['tds2MobilePhoneCc']) < 1) {
            $invalidProperties[] = "invalid value for 'tds2MobilePhoneCc', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['tds2MobilePhoneNo']) && mb_strlen($this->container['tds2MobilePhoneNo']) > 15) {
            $invalidProperties[] = "invalid value for 'tds2MobilePhoneNo', the character length must be smaller than or equal to 15.";
        }
        if (!is_null($this->container['tds2MobilePhoneNo']) && mb_strlen($this->container['tds2MobilePhoneNo']) < 1) {
            $invalidProperties[] = "invalid value for 'tds2MobilePhoneNo', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['tds2WorkPhoneCc']) && mb_strlen($this->container['tds2WorkPhoneCc']) > 3) {
            $invalidProperties[] = "invalid value for 'tds2WorkPhoneCc', the character length must be smaller than or equal to 3.";
        }
        if (!is_null($this->container['tds2WorkPhoneCc']) && mb_strlen($this->container['tds2WorkPhoneCc']) < 1) {
            $invalidProperties[] = "invalid value for 'tds2WorkPhoneCc', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['tds2WorkPhoneNo']) && mb_strlen($this->container['tds2WorkPhoneNo']) > 15) {
            $invalidProperties[] = "invalid value for 'tds2WorkPhoneNo', the character length must be smaller than or equal to 15.";
        }
        if (!is_null($this->container['tds2WorkPhoneNo']) && mb_strlen($this->container['tds2WorkPhoneNo']) < 1) {
            $invalidProperties[] = "invalid value for 'tds2WorkPhoneNo', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['tds2PreOrderDate']) && mb_strlen($this->container['tds2PreOrderDate']) > 8) {
            $invalidProperties[] = "invalid value for 'tds2PreOrderDate', the character length must be smaller than or equal to 8.";
        }
        if (!is_null($this->container['tds2PreOrderDate']) && mb_strlen($this->container['tds2PreOrderDate']) < 8) {
            $invalidProperties[] = "invalid value for 'tds2PreOrderDate', the character length must be bigger than or equal to 8.";
        }
        if (!is_null($this->container['tds2RecurringExpiry']) && mb_strlen($this->container['tds2RecurringExpiry']) > 8) {
            $invalidProperties[] = "invalid value for 'tds2RecurringExpiry', the character length must be smaller than or equal to 8.";
        }
        if (!is_null($this->container['tds2RecurringExpiry']) && mb_strlen($this->container['tds2RecurringExpiry']) < 8) {
            $invalidProperties[] = "invalid value for 'tds2RecurringExpiry', the character length must be bigger than or equal to 8.";
        }
        if (!is_null($this->container['tds2RecurringFrequency']) && mb_strlen($this->container['tds2RecurringFrequency']) > 4) {
            $invalidProperties[] = "invalid value for 'tds2RecurringFrequency', the character length must be smaller than or equal to 4.";
        }
        if (!is_null($this->container['tds2RecurringFrequency']) && mb_strlen($this->container['tds2RecurringFrequency']) < 1) {
            $invalidProperties[] = "invalid value for 'tds2RecurringFrequency', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['tds2GiftCardAmount']) && mb_strlen($this->container['tds2GiftCardAmount']) > 15) {
            $invalidProperties[] = "invalid value for 'tds2GiftCardAmount', the character length must be smaller than or equal to 15.";
        }
        if (!is_null($this->container['tds2GiftCardAmount']) && mb_strlen($this->container['tds2GiftCardAmount']) < 1) {
            $invalidProperties[] = "invalid value for 'tds2GiftCardAmount', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['tds2GiftCardCount']) && mb_strlen($this->container['tds2GiftCardCount']) > 2) {
            $invalidProperties[] = "invalid value for 'tds2GiftCardCount', the character length must be smaller than or equal to 2.";
        }
        if (!is_null($this->container['tds2GiftCardCount']) && mb_strlen($this->container['tds2GiftCardCount']) < 1) {
            $invalidProperties[] = "invalid value for 'tds2GiftCardCount', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['tds2GiftCardCurr']) && mb_strlen($this->container['tds2GiftCardCurr']) > 3) {
            $invalidProperties[] = "invalid value for 'tds2GiftCardCurr', the character length must be smaller than or equal to 3.";
        }
        if (!is_null($this->container['tds2GiftCardCurr']) && mb_strlen($this->container['tds2GiftCardCurr']) < 1) {
            $invalidProperties[] = "invalid value for 'tds2GiftCardCurr', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return 0 === count($this->listInvalidProperties());
    }

    /**
     * Gets payType.
     *
     * @return PayType
     */
    public function getPayType(): mixed
    {
        return $this->container['payType'];
    }

    /**
     * Sets payType.
     *
     * @param PayType $payType 決済種別\\ この決済で利用する決済手段です。  - `Card`: カード
     */
    public function setPayType(mixed $payType): static
    {
        if (is_null($payType)) {
            throw new \InvalidArgumentException('non-nullable payType cannot be null');
        }
        $this->container['payType'] = $payType;

        return $this;
    }

    /**
     * Gets accessId.
     *
     * @return string
     */
    public function getAccessId(): mixed
    {
        return $this->container['accessId'];
    }

    /**
     * Sets accessId.
     *
     * @param string $accessId 取引ID
     */
    public function setAccessId(mixed $accessId): static
    {
        if (is_null($accessId)) {
            throw new \InvalidArgumentException('non-nullable accessId cannot be null');
        }
        if (mb_strlen($accessId) > 24) {
            throw new \InvalidArgumentException('invalid length for $accessId when calling PaymentCardExecutingRequest., must be smaller than or equal to 24.');
        }
        if (mb_strlen($accessId) < 24) {
            throw new \InvalidArgumentException('invalid length for $accessId when calling PaymentCardExecutingRequest., must be bigger than or equal to 24.');
        }
        $this->container['accessId'] = $accessId;

        return $this;
    }

    /**
     * Gets token.
     *
     * @return string|null
     */
    public function getToken(): mixed
    {
        return $this->container['token'];
    }

    /**
     * Sets token.
     *
     * @param string $token カードトークン\\ `customer_id`と`card_id`を指定しない場合、fincode JSの`tokens`メソッドで取得したトークンをこのフィールドに指定します
     */
    public function setToken(mixed $token): static
    {
        if (is_null($token)) {
            throw new \InvalidArgumentException('non-nullable token cannot be null');
        }
        if (mb_strlen($token) > 512) {
            throw new \InvalidArgumentException('invalid length for $token when calling PaymentCardExecutingRequest., must be smaller than or equal to 512.');
        }
        if (mb_strlen($token) < 1) {
            throw new \InvalidArgumentException('invalid length for $token when calling PaymentCardExecutingRequest., must be bigger than or equal to 1.');
        }
        $this->container['token'] = $token;

        return $this;
    }

    /**
     * Gets customerId.
     *
     * @return string|null
     */
    public function getCustomerId(): mixed
    {
        return $this->container['customerId'];
    }

    /**
     * Sets customerId.
     *
     * @param string $customerId 顧客ID\\ 購入者となる顧客のIDです
     */
    public function setCustomerId(mixed $customerId): static
    {
        if (is_null($customerId)) {
            throw new \InvalidArgumentException('non-nullable customerId cannot be null');
        }
        if (mb_strlen($customerId) > 60) {
            throw new \InvalidArgumentException('invalid length for $customerId when calling PaymentCardExecutingRequest., must be smaller than or equal to 60.');
        }
        if (mb_strlen($customerId) < 1) {
            throw new \InvalidArgumentException('invalid length for $customerId when calling PaymentCardExecutingRequest., must be bigger than or equal to 1.');
        }
        $this->container['customerId'] = $customerId;

        return $this;
    }

    /**
     * Gets cardId.
     *
     * @return string|null
     */
    public function getCardId(): mixed
    {
        return $this->container['cardId'];
    }

    /**
     * Sets cardId.
     *
     * @param string $cardId カードID\\ この決済に使用するカードのIDです。指定しない場合、デフォルトカードが使用されます。
     */
    public function setCardId(mixed $cardId): static
    {
        if (is_null($cardId)) {
            throw new \InvalidArgumentException('non-nullable cardId cannot be null');
        }
        if (mb_strlen($cardId) > 25) {
            throw new \InvalidArgumentException('invalid length for $cardId when calling PaymentCardExecutingRequest., must be smaller than or equal to 25.');
        }
        if (mb_strlen($cardId) < 25) {
            throw new \InvalidArgumentException('invalid length for $cardId when calling PaymentCardExecutingRequest., must be bigger than or equal to 25.');
        }
        $this->container['cardId'] = $cardId;

        return $this;
    }

    /**
     * Gets method.
     *
     * @return CardPayMethod|null
     */
    public function getMethod(): mixed
    {
        return $this->container['method'];
    }

    /**
     * Sets method.
     *
     * @param CardPayMethod $method 支払方法\\ この決済の`job_code`（処理区分）が`AUTH`または`CAPTURE`であるとき、このフィールドを指定する必要があります。  - `1`: 一括払い - `2`: 分割払い - `5`: リボ払い
     */
    public function setMethod(mixed $method): static
    {
        if (is_null($method)) {
            throw new \InvalidArgumentException('non-nullable method cannot be null');
        }
        $this->container['method'] = $method;

        return $this;
    }

    /**
     * Gets payTimes.
     *
     * @return CardPayTimes|null
     */
    public function getPayTimes(): mixed
    {
        return $this->container['payTimes'];
    }

    /**
     * Sets payTimes.
     *
     * @param CardPayTimes|null $payTimes payTimes
     */
    public function setPayTimes(mixed $payTimes): static
    {
        if (is_null($payTimes)) {
            $this->openAPINullablesSetToNull[] = 'payTimes';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payTimes', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payTimes'] = $payTimes;

        return $this;
    }

    /**
     * Gets tds2RetUrl.
     *
     * @return string|null
     */
    public function getTds2RetUrl(): mixed
    {
        return $this->container['tds2RetUrl'];
    }

    /**
     * Sets tds2RetUrl.
     *
     * @param string|null $tds2RetUrl 3Dセキュア認証における戻りURL   3Dセキュア認証処理に使用するURLを指定してください。   このURLに後続処理のためのデータがPOSTメソッドで送信されます。     ※ 指定した場合、3Dセキュア認証に必要なAPIの呼び出しやコールバック処理をすべて加盟店で実装する必要があります。 お客様のブラウザとfincode間で3Dセキュア認証を自動で行う場合はこのパラメータを未指定としてください。  詳細はDocs [3Dセキュア2.0認証を使用する](/payment/fraud_protection/3d_secure_2)を確認してください。
     */
    public function setTds2RetUrl(mixed $tds2RetUrl): static
    {
        if (is_null($tds2RetUrl)) {
            $this->openAPINullablesSetToNull[] = 'tds2RetUrl';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tds2RetUrl', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($tds2RetUrl) && mb_strlen($tds2RetUrl) > 256) {
            throw new \InvalidArgumentException('invalid length for $tds2RetUrl when calling PaymentCardExecutingRequest., must be smaller than or equal to 256.');
        }
        $this->container['tds2RetUrl'] = $tds2RetUrl;

        return $this;
    }

    /**
     * Gets returnUrl.
     *
     * @return string|null
     */
    public function getReturnUrl(): mixed
    {
        return $this->container['returnUrl'];
    }

    /**
     * Sets returnUrl.
     *
     * @param string|null $returnUrl 加盟店戻りURL（成功時）   購入者のブラウザとfincode間で3Dセキュア認証を自動で行う場合に、 3Dセキュア認証処理後、決済に成功した際にリダイレクトされるURLです。   POSTメソッドでリダイレクトされます。  指定しない場合はデフォルトの成功ページのURLが設定されます。   また、`tds2_ret_url`を指定した場合は無視されます。
     */
    public function setReturnUrl(mixed $returnUrl): static
    {
        if (is_null($returnUrl)) {
            $this->openAPINullablesSetToNull[] = 'returnUrl';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('returnUrl', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($returnUrl) && mb_strlen($returnUrl) > 256) {
            throw new \InvalidArgumentException('invalid length for $returnUrl when calling PaymentCardExecutingRequest., must be smaller than or equal to 256.');
        }
        $this->container['returnUrl'] = $returnUrl;

        return $this;
    }

    /**
     * Gets returnUrlOnFailure.
     *
     * @return string|null
     */
    public function getReturnUrlOnFailure(): mixed
    {
        return $this->container['returnUrlOnFailure'];
    }

    /**
     * Sets returnUrlOnFailure.
     *
     * @param string|null $returnUrlOnFailure 加盟店戻りURL（失敗時）   購入者のブラウザとfincode間で3Dセキュア認証を自動で行う場合に、 3Dセキュア認証に失敗、または決済に失敗した際にリダイレクトされるURLです。   POSTメソッドでリダイレクトされます。  指定しない場合はデフォルトの失敗ページのURLが設定されます。   また、`tds2_ret_url`を指定した場合は無視されます。
     */
    public function setReturnUrlOnFailure(mixed $returnUrlOnFailure): static
    {
        if (is_null($returnUrlOnFailure)) {
            $this->openAPINullablesSetToNull[] = 'returnUrlOnFailure';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('returnUrlOnFailure', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($returnUrlOnFailure) && mb_strlen($returnUrlOnFailure) > 256) {
            throw new \InvalidArgumentException('invalid length for $returnUrlOnFailure when calling PaymentCardExecutingRequest., must be smaller than or equal to 256.');
        }
        $this->container['returnUrlOnFailure'] = $returnUrlOnFailure;

        return $this;
    }

    /**
     * Gets tds2ChAccChange.
     *
     * @return string|null
     */
    public function getTds2ChAccChange(): mixed
    {
        return $this->container['tds2ChAccChange'];
    }

    /**
     * Sets tds2ChAccChange.
     *
     * @param string|null $tds2ChAccChange <span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\ 購入者ユーザーアカウント 最終更新日\\ 形式：`YYYYMMDD`\\ \\ 加盟店アプリケーションにおけるユーザーアカウントの情報が最後に更新された日付を設定します
     */
    public function setTds2ChAccChange(mixed $tds2ChAccChange): static
    {
        if (is_null($tds2ChAccChange)) {
            $this->openAPINullablesSetToNull[] = 'tds2ChAccChange';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tds2ChAccChange', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($tds2ChAccChange) && mb_strlen($tds2ChAccChange) > 8) {
            throw new \InvalidArgumentException('invalid length for $tds2ChAccChange when calling PaymentCardExecutingRequest., must be smaller than or equal to 8.');
        }
        if (!is_null($tds2ChAccChange) && mb_strlen($tds2ChAccChange) < 8) {
            throw new \InvalidArgumentException('invalid length for $tds2ChAccChange when calling PaymentCardExecutingRequest., must be bigger than or equal to 8.');
        }
        $this->container['tds2ChAccChange'] = $tds2ChAccChange;

        return $this;
    }

    /**
     * Gets tds2ChAccDate.
     *
     * @return string|null
     */
    public function getTds2ChAccDate(): mixed
    {
        return $this->container['tds2ChAccDate'];
    }

    /**
     * Sets tds2ChAccDate.
     *
     * @param string|null $tds2ChAccDate <span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\ 購入者ユーザーアカウント 開設日\\ 形式：`YYYYMMDD`\\ \\ 加盟店アプリケーションにおけるユーザーアカウントの開設日を設定します
     */
    public function setTds2ChAccDate(mixed $tds2ChAccDate): static
    {
        if (is_null($tds2ChAccDate)) {
            $this->openAPINullablesSetToNull[] = 'tds2ChAccDate';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tds2ChAccDate', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($tds2ChAccDate) && mb_strlen($tds2ChAccDate) > 8) {
            throw new \InvalidArgumentException('invalid length for $tds2ChAccDate when calling PaymentCardExecutingRequest., must be smaller than or equal to 8.');
        }
        if (!is_null($tds2ChAccDate) && mb_strlen($tds2ChAccDate) < 8) {
            throw new \InvalidArgumentException('invalid length for $tds2ChAccDate when calling PaymentCardExecutingRequest., must be bigger than or equal to 8.');
        }
        $this->container['tds2ChAccDate'] = $tds2ChAccDate;

        return $this;
    }

    /**
     * Gets tds2ChAccPwChange.
     *
     * @return string|null
     */
    public function getTds2ChAccPwChange(): mixed
    {
        return $this->container['tds2ChAccPwChange'];
    }

    /**
     * Sets tds2ChAccPwChange.
     *
     * @param string|null $tds2ChAccPwChange <span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\ 購入者ユーザーアカウント パスワード最終更新日\\ 形式：`YYYYMMDD`\\ \\ 加盟店アプリケーションにおけるユーザーアカウントのパスワードが最後に更新された日付を設定します
     */
    public function setTds2ChAccPwChange(mixed $tds2ChAccPwChange): static
    {
        if (is_null($tds2ChAccPwChange)) {
            $this->openAPINullablesSetToNull[] = 'tds2ChAccPwChange';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tds2ChAccPwChange', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($tds2ChAccPwChange) && mb_strlen($tds2ChAccPwChange) > 8) {
            throw new \InvalidArgumentException('invalid length for $tds2ChAccPwChange when calling PaymentCardExecutingRequest., must be smaller than or equal to 8.');
        }
        if (!is_null($tds2ChAccPwChange) && mb_strlen($tds2ChAccPwChange) < 8) {
            throw new \InvalidArgumentException('invalid length for $tds2ChAccPwChange when calling PaymentCardExecutingRequest., must be bigger than or equal to 8.');
        }
        $this->container['tds2ChAccPwChange'] = $tds2ChAccPwChange;

        return $this;
    }

    /**
     * Gets tds2NbPurchaseAccount.
     *
     * @return string|null
     */
    public function getTds2NbPurchaseAccount(): mixed
    {
        return $this->container['tds2NbPurchaseAccount'];
    }

    /**
     * Sets tds2NbPurchaseAccount.
     *
     * @param string|null $tds2NbPurchaseAccount <span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\ 購入者の過去6カ月間の購入回数
     */
    public function setTds2NbPurchaseAccount(mixed $tds2NbPurchaseAccount): static
    {
        if (is_null($tds2NbPurchaseAccount)) {
            $this->openAPINullablesSetToNull[] = 'tds2NbPurchaseAccount';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tds2NbPurchaseAccount', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($tds2NbPurchaseAccount) && mb_strlen($tds2NbPurchaseAccount) > 4) {
            throw new \InvalidArgumentException('invalid length for $tds2NbPurchaseAccount when calling PaymentCardExecutingRequest., must be smaller than or equal to 4.');
        }
        if (!is_null($tds2NbPurchaseAccount) && mb_strlen($tds2NbPurchaseAccount) < 1) {
            throw new \InvalidArgumentException('invalid length for $tds2NbPurchaseAccount when calling PaymentCardExecutingRequest., must be bigger than or equal to 1.');
        }
        $this->container['tds2NbPurchaseAccount'] = $tds2NbPurchaseAccount;

        return $this;
    }

    /**
     * Gets tds2PaymentAccAge.
     *
     * @return string|null
     */
    public function getTds2PaymentAccAge(): mixed
    {
        return $this->container['tds2PaymentAccAge'];
    }

    /**
     * Sets tds2PaymentAccAge.
     *
     * @param string|null $tds2PaymentAccAge <span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\ 顧客ユーザーアカウント カード登録日。\\ 形式：`YYYYMMDD`
     */
    public function setTds2PaymentAccAge(mixed $tds2PaymentAccAge): static
    {
        if (is_null($tds2PaymentAccAge)) {
            $this->openAPINullablesSetToNull[] = 'tds2PaymentAccAge';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tds2PaymentAccAge', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($tds2PaymentAccAge) && mb_strlen($tds2PaymentAccAge) > 8) {
            throw new \InvalidArgumentException('invalid length for $tds2PaymentAccAge when calling PaymentCardExecutingRequest., must be smaller than or equal to 8.');
        }
        if (!is_null($tds2PaymentAccAge) && mb_strlen($tds2PaymentAccAge) < 8) {
            throw new \InvalidArgumentException('invalid length for $tds2PaymentAccAge when calling PaymentCardExecutingRequest., must be bigger than or equal to 8.');
        }
        $this->container['tds2PaymentAccAge'] = $tds2PaymentAccAge;

        return $this;
    }

    /**
     * Gets tds2ProvisionAttemptsDay.
     *
     * @return string|null
     */
    public function getTds2ProvisionAttemptsDay(): mixed
    {
        return $this->container['tds2ProvisionAttemptsDay'];
    }

    /**
     * Sets tds2ProvisionAttemptsDay.
     *
     * @param string|null $tds2ProvisionAttemptsDay <span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\ 顧客ユーザーアカウント 過去24時間のカード追加の試行回数
     */
    public function setTds2ProvisionAttemptsDay(mixed $tds2ProvisionAttemptsDay): static
    {
        if (is_null($tds2ProvisionAttemptsDay)) {
            $this->openAPINullablesSetToNull[] = 'tds2ProvisionAttemptsDay';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tds2ProvisionAttemptsDay', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($tds2ProvisionAttemptsDay) && mb_strlen($tds2ProvisionAttemptsDay) > 3) {
            throw new \InvalidArgumentException('invalid length for $tds2ProvisionAttemptsDay when calling PaymentCardExecutingRequest., must be smaller than or equal to 3.');
        }
        if (!is_null($tds2ProvisionAttemptsDay) && mb_strlen($tds2ProvisionAttemptsDay) < 3) {
            throw new \InvalidArgumentException('invalid length for $tds2ProvisionAttemptsDay when calling PaymentCardExecutingRequest., must be bigger than or equal to 3.');
        }
        $this->container['tds2ProvisionAttemptsDay'] = $tds2ProvisionAttemptsDay;

        return $this;
    }

    /**
     * Gets tds2ShipAddressUsage.
     *
     * @return string|null
     */
    public function getTds2ShipAddressUsage(): mixed
    {
        return $this->container['tds2ShipAddressUsage'];
    }

    /**
     * Sets tds2ShipAddressUsage.
     *
     * @param string|null $tds2ShipAddressUsage <span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\ 配送先住所の最初の使用日。\\ 形式：`YYYYMMDD`
     */
    public function setTds2ShipAddressUsage(mixed $tds2ShipAddressUsage): static
    {
        if (is_null($tds2ShipAddressUsage)) {
            $this->openAPINullablesSetToNull[] = 'tds2ShipAddressUsage';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tds2ShipAddressUsage', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($tds2ShipAddressUsage) && mb_strlen($tds2ShipAddressUsage) > 8) {
            throw new \InvalidArgumentException('invalid length for $tds2ShipAddressUsage when calling PaymentCardExecutingRequest., must be smaller than or equal to 8.');
        }
        if (!is_null($tds2ShipAddressUsage) && mb_strlen($tds2ShipAddressUsage) < 8) {
            throw new \InvalidArgumentException('invalid length for $tds2ShipAddressUsage when calling PaymentCardExecutingRequest., must be bigger than or equal to 8.');
        }
        $this->container['tds2ShipAddressUsage'] = $tds2ShipAddressUsage;

        return $this;
    }

    /**
     * Gets tds2ShipNameInd.
     *
     * @return Tds2ShipNameInd|null
     */
    public function getTds2ShipNameInd(): mixed
    {
        return $this->container['tds2ShipNameInd'];
    }

    /**
     * Sets tds2ShipNameInd.
     *
     * @param Tds2ShipNameInd|null $tds2ShipNameInd tds2ShipNameInd
     */
    public function setTds2ShipNameInd(mixed $tds2ShipNameInd): static
    {
        if (is_null($tds2ShipNameInd)) {
            $this->openAPINullablesSetToNull[] = 'tds2ShipNameInd';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tds2ShipNameInd', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tds2ShipNameInd'] = $tds2ShipNameInd;

        return $this;
    }

    /**
     * Gets tds2SuspiciousAccActivity.
     *
     * @return Tds2SuspiciousAccActivity|null
     */
    public function getTds2SuspiciousAccActivity(): mixed
    {
        return $this->container['tds2SuspiciousAccActivity'];
    }

    /**
     * Sets tds2SuspiciousAccActivity.
     *
     * @param Tds2SuspiciousAccActivity|null $tds2SuspiciousAccActivity tds2SuspiciousAccActivity
     */
    public function setTds2SuspiciousAccActivity(mixed $tds2SuspiciousAccActivity): static
    {
        if (is_null($tds2SuspiciousAccActivity)) {
            $this->openAPINullablesSetToNull[] = 'tds2SuspiciousAccActivity';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tds2SuspiciousAccActivity', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tds2SuspiciousAccActivity'] = $tds2SuspiciousAccActivity;

        return $this;
    }

    /**
     * Gets tds2TxnActivityDay.
     *
     * @return string|null
     */
    public function getTds2TxnActivityDay(): mixed
    {
        return $this->container['tds2TxnActivityDay'];
    }

    /**
     * Sets tds2TxnActivityDay.
     *
     * @param string|null $tds2TxnActivityDay <span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\ 購入者の過去24時間の取引回数
     */
    public function setTds2TxnActivityDay(mixed $tds2TxnActivityDay): static
    {
        if (is_null($tds2TxnActivityDay)) {
            $this->openAPINullablesSetToNull[] = 'tds2TxnActivityDay';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tds2TxnActivityDay', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($tds2TxnActivityDay) && mb_strlen($tds2TxnActivityDay) > 3) {
            throw new \InvalidArgumentException('invalid length for $tds2TxnActivityDay when calling PaymentCardExecutingRequest., must be smaller than or equal to 3.');
        }
        if (!is_null($tds2TxnActivityDay) && mb_strlen($tds2TxnActivityDay) < 3) {
            throw new \InvalidArgumentException('invalid length for $tds2TxnActivityDay when calling PaymentCardExecutingRequest., must be bigger than or equal to 3.');
        }
        $this->container['tds2TxnActivityDay'] = $tds2TxnActivityDay;

        return $this;
    }

    /**
     * Gets tds2TxnActivityYear.
     *
     * @return string|null
     */
    public function getTds2TxnActivityYear(): mixed
    {
        return $this->container['tds2TxnActivityYear'];
    }

    /**
     * Sets tds2TxnActivityYear.
     *
     * @param string|null $tds2TxnActivityYear <span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\ 前年の取引回数
     */
    public function setTds2TxnActivityYear(mixed $tds2TxnActivityYear): static
    {
        if (is_null($tds2TxnActivityYear)) {
            $this->openAPINullablesSetToNull[] = 'tds2TxnActivityYear';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tds2TxnActivityYear', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($tds2TxnActivityYear) && mb_strlen($tds2TxnActivityYear) > 3) {
            throw new \InvalidArgumentException('invalid length for $tds2TxnActivityYear when calling PaymentCardExecutingRequest., must be smaller than or equal to 3.');
        }
        if (!is_null($tds2TxnActivityYear) && mb_strlen($tds2TxnActivityYear) < 3) {
            throw new \InvalidArgumentException('invalid length for $tds2TxnActivityYear when calling PaymentCardExecutingRequest., must be bigger than or equal to 3.');
        }
        $this->container['tds2TxnActivityYear'] = $tds2TxnActivityYear;

        return $this;
    }

    /**
     * Gets tds2ThreeDsReqAuthData.
     *
     * @return string|null
     */
    public function getTds2ThreeDsReqAuthData(): mixed
    {
        return $this->container['tds2ThreeDsReqAuthData'];
    }

    /**
     * Sets tds2ThreeDsReqAuthData.
     *
     * @param string|null $tds2ThreeDsReqAuthData <span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\ 顧客ユーザーアカウント ログイン証跡\\ \\ 加盟店アプリケーションにおけるログインの証跡。 ログイン証跡を設定する場合、ログイン方法とログイン日時の設定が必要です。
     */
    public function setTds2ThreeDsReqAuthData(mixed $tds2ThreeDsReqAuthData): static
    {
        if (is_null($tds2ThreeDsReqAuthData)) {
            $this->openAPINullablesSetToNull[] = 'tds2ThreeDsReqAuthData';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tds2ThreeDsReqAuthData', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($tds2ThreeDsReqAuthData) && mb_strlen($tds2ThreeDsReqAuthData) > 2048) {
            throw new \InvalidArgumentException('invalid length for $tds2ThreeDsReqAuthData when calling PaymentCardExecutingRequest., must be smaller than or equal to 2048.');
        }
        if (!is_null($tds2ThreeDsReqAuthData) && mb_strlen($tds2ThreeDsReqAuthData) < 1) {
            throw new \InvalidArgumentException('invalid length for $tds2ThreeDsReqAuthData when calling PaymentCardExecutingRequest., must be bigger than or equal to 1.');
        }
        $this->container['tds2ThreeDsReqAuthData'] = $tds2ThreeDsReqAuthData;

        return $this;
    }

    /**
     * Gets tds2ThreeDsReqAuthMethod.
     *
     * @return Tds2ThreeDsReqAuthMethod|null
     */
    public function getTds2ThreeDsReqAuthMethod(): mixed
    {
        return $this->container['tds2ThreeDsReqAuthMethod'];
    }

    /**
     * Sets tds2ThreeDsReqAuthMethod.
     *
     * @param Tds2ThreeDsReqAuthMethod|null $tds2ThreeDsReqAuthMethod tds2ThreeDsReqAuthMethod
     */
    public function setTds2ThreeDsReqAuthMethod(mixed $tds2ThreeDsReqAuthMethod): static
    {
        if (is_null($tds2ThreeDsReqAuthMethod)) {
            $this->openAPINullablesSetToNull[] = 'tds2ThreeDsReqAuthMethod';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tds2ThreeDsReqAuthMethod', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tds2ThreeDsReqAuthMethod'] = $tds2ThreeDsReqAuthMethod;

        return $this;
    }

    /**
     * Gets tds2ThreeDsReqAuthTimestamp.
     *
     * @return string|null
     */
    public function getTds2ThreeDsReqAuthTimestamp(): mixed
    {
        return $this->container['tds2ThreeDsReqAuthTimestamp'];
    }

    /**
     * Sets tds2ThreeDsReqAuthTimestamp.
     *
     * @param string|null $tds2ThreeDsReqAuthTimestamp <span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\ 顧客ユーザーアカウント ログイン日時\\ \\ ログイン証跡を設定する場合、ログイン方法とログイン日時の設定が必要です。\\ 形式：`YYYYMMDDHHmm`
     */
    public function setTds2ThreeDsReqAuthTimestamp(mixed $tds2ThreeDsReqAuthTimestamp): static
    {
        if (is_null($tds2ThreeDsReqAuthTimestamp)) {
            $this->openAPINullablesSetToNull[] = 'tds2ThreeDsReqAuthTimestamp';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tds2ThreeDsReqAuthTimestamp', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($tds2ThreeDsReqAuthTimestamp) && mb_strlen($tds2ThreeDsReqAuthTimestamp) > 12) {
            throw new \InvalidArgumentException('invalid length for $tds2ThreeDsReqAuthTimestamp when calling PaymentCardExecutingRequest., must be smaller than or equal to 12.');
        }
        if (!is_null($tds2ThreeDsReqAuthTimestamp) && mb_strlen($tds2ThreeDsReqAuthTimestamp) < 12) {
            throw new \InvalidArgumentException('invalid length for $tds2ThreeDsReqAuthTimestamp when calling PaymentCardExecutingRequest., must be bigger than or equal to 12.');
        }
        $this->container['tds2ThreeDsReqAuthTimestamp'] = $tds2ThreeDsReqAuthTimestamp;

        return $this;
    }

    /**
     * Gets tds2Email.
     *
     * @return string|null
     */
    public function getTds2Email(): mixed
    {
        return $this->container['tds2Email'];
    }

    /**
     * Sets tds2Email.
     *
     * @param string|null $tds2Email <span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\ 顧客のメールアドレス\\ \\ 未指定の場合、顧客の`email`が自動で設定されます。\\ \\ 2024年8月12日以降、下記の内少なくとも1つが必須となります。  - 顧客の自宅電話番号（`tds2_home_phone_no`） - 顧客の携帯電話番号（`tds2_mobile_phone_no`） - 顧客の職場電話番号（`tds2_work_phone_no`） - 顧客のメールアドレス（`tds2_email`）  ※当面は連携しなかった場合でも認証は実施されますが、将来的には利用不可になる可能性があります。
     */
    public function setTds2Email(mixed $tds2Email): static
    {
        if (is_null($tds2Email)) {
            $this->openAPINullablesSetToNull[] = 'tds2Email';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tds2Email', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($tds2Email) && mb_strlen($tds2Email) > 254) {
            throw new \InvalidArgumentException('invalid length for $tds2Email when calling PaymentCardExecutingRequest., must be smaller than or equal to 254.');
        }
        if (!is_null($tds2Email) && mb_strlen($tds2Email) < 1) {
            throw new \InvalidArgumentException('invalid length for $tds2Email when calling PaymentCardExecutingRequest., must be bigger than or equal to 1.');
        }
        $this->container['tds2Email'] = $tds2Email;

        return $this;
    }

    /**
     * Gets tds2AddrMatch.
     *
     * @return Tds2AddrMatch|null
     */
    public function getTds2AddrMatch(): mixed
    {
        return $this->container['tds2AddrMatch'];
    }

    /**
     * Sets tds2AddrMatch.
     *
     * @param Tds2AddrMatch|null $tds2AddrMatch tds2AddrMatch
     */
    public function setTds2AddrMatch(mixed $tds2AddrMatch): static
    {
        if (is_null($tds2AddrMatch)) {
            $this->openAPINullablesSetToNull[] = 'tds2AddrMatch';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tds2AddrMatch', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tds2AddrMatch'] = $tds2AddrMatch;

        return $this;
    }

    /**
     * Gets tds2BillAddrCountry.
     *
     * @return string|null
     */
    public function getTds2BillAddrCountry(): mixed
    {
        return $this->container['tds2BillAddrCountry'];
    }

    /**
     * Sets tds2BillAddrCountry.
     *
     * @param string|null $tds2BillAddrCountry <span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\ 顧客の請求先住所 国コード\\ 形式：ISO 3166-1 numeric\\ \\ 未指定の場合、顧客の`addr_country`が自動で設定されます
     */
    public function setTds2BillAddrCountry(mixed $tds2BillAddrCountry): static
    {
        if (is_null($tds2BillAddrCountry)) {
            $this->openAPINullablesSetToNull[] = 'tds2BillAddrCountry';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tds2BillAddrCountry', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($tds2BillAddrCountry) && mb_strlen($tds2BillAddrCountry) > 3) {
            throw new \InvalidArgumentException('invalid length for $tds2BillAddrCountry when calling PaymentCardExecutingRequest., must be smaller than or equal to 3.');
        }
        if (!is_null($tds2BillAddrCountry) && mb_strlen($tds2BillAddrCountry) < 1) {
            throw new \InvalidArgumentException('invalid length for $tds2BillAddrCountry when calling PaymentCardExecutingRequest., must be bigger than or equal to 1.');
        }
        $this->container['tds2BillAddrCountry'] = $tds2BillAddrCountry;

        return $this;
    }

    /**
     * Gets tds2BillAddrState.
     *
     * @return string|null
     */
    public function getTds2BillAddrState(): mixed
    {
        return $this->container['tds2BillAddrState'];
    }

    /**
     * Sets tds2BillAddrState.
     *
     * @param string|null $tds2BillAddrState <span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\ 顧客の請求先住所 州または都道府県コード。\\ 参照： [国土交通省 都道府県コード](https://nlftp.mlit.go.jp/ksj/gml/codelist/PrefCd.html)\\ \\ 未指定の場合、顧客の`addr_state`が自動で設定されます。
     */
    public function setTds2BillAddrState(mixed $tds2BillAddrState): static
    {
        if (is_null($tds2BillAddrState)) {
            $this->openAPINullablesSetToNull[] = 'tds2BillAddrState';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tds2BillAddrState', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($tds2BillAddrState) && mb_strlen($tds2BillAddrState) > 3) {
            throw new \InvalidArgumentException('invalid length for $tds2BillAddrState when calling PaymentCardExecutingRequest., must be smaller than or equal to 3.');
        }
        if (!is_null($tds2BillAddrState) && mb_strlen($tds2BillAddrState) < 1) {
            throw new \InvalidArgumentException('invalid length for $tds2BillAddrState when calling PaymentCardExecutingRequest., must be bigger than or equal to 1.');
        }
        $this->container['tds2BillAddrState'] = $tds2BillAddrState;

        return $this;
    }

    /**
     * Gets tds2BillAddrCity.
     *
     * @return string|null
     */
    public function getTds2BillAddrCity(): mixed
    {
        return $this->container['tds2BillAddrCity'];
    }

    /**
     * Sets tds2BillAddrCity.
     *
     * @param string|null $tds2BillAddrCity <span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\ 顧客の請求先住所 都市名\\ \\ 未指定の場合、顧客の`addr_city`が自動で設定されます
     */
    public function setTds2BillAddrCity(mixed $tds2BillAddrCity): static
    {
        if (is_null($tds2BillAddrCity)) {
            $this->openAPINullablesSetToNull[] = 'tds2BillAddrCity';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tds2BillAddrCity', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($tds2BillAddrCity) && mb_strlen($tds2BillAddrCity) > 50) {
            throw new \InvalidArgumentException('invalid length for $tds2BillAddrCity when calling PaymentCardExecutingRequest., must be smaller than or equal to 50.');
        }
        if (!is_null($tds2BillAddrCity) && mb_strlen($tds2BillAddrCity) < 1) {
            throw new \InvalidArgumentException('invalid length for $tds2BillAddrCity when calling PaymentCardExecutingRequest., must be bigger than or equal to 1.');
        }
        $this->container['tds2BillAddrCity'] = $tds2BillAddrCity;

        return $this;
    }

    /**
     * Gets tds2BillAddrLine1.
     *
     * @return string|null
     */
    public function getTds2BillAddrLine1(): mixed
    {
        return $this->container['tds2BillAddrLine1'];
    }

    /**
     * Sets tds2BillAddrLine1.
     *
     * @param string|null $tds2BillAddrLine1 <span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\ 顧客の請求先住所 区域部1行目\\ \\ 顧客の住所の番地・区画を指定してください。未指定の場合。顧客の`addr_line_1`が自動で設定されます。  - 都道府県や市区を含めることができます。 - 保持している住所をパラメータの形式に分割できない場合は、桁数が収まるように`tds2_bill_addr_line_1` ~ `tds2_bill_addr_line_3`に住所を設定してください。 - `tds2_bill_addr_line_2`と`tds2_bill_addr_line_3`を空にして、`tds2_bill_addr_line_1`に全ての住所を設定できます。  未指定の場合、顧客に登録された`addr_line_1`を設定します。
     */
    public function setTds2BillAddrLine1(mixed $tds2BillAddrLine1): static
    {
        if (is_null($tds2BillAddrLine1)) {
            $this->openAPINullablesSetToNull[] = 'tds2BillAddrLine1';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tds2BillAddrLine1', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($tds2BillAddrLine1) && mb_strlen($tds2BillAddrLine1) > 100) {
            throw new \InvalidArgumentException('invalid length for $tds2BillAddrLine1 when calling PaymentCardExecutingRequest., must be smaller than or equal to 100.');
        }
        if (!is_null($tds2BillAddrLine1) && mb_strlen($tds2BillAddrLine1) < 1) {
            throw new \InvalidArgumentException('invalid length for $tds2BillAddrLine1 when calling PaymentCardExecutingRequest., must be bigger than or equal to 1.');
        }
        $this->container['tds2BillAddrLine1'] = $tds2BillAddrLine1;

        return $this;
    }

    /**
     * Gets tds2BillAddrLine2.
     *
     * @return string|null
     */
    public function getTds2BillAddrLine2(): mixed
    {
        return $this->container['tds2BillAddrLine2'];
    }

    /**
     * Sets tds2BillAddrLine2.
     *
     * @param string|null $tds2BillAddrLine2 <span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\ 顧客の請求先住所 区域部2行目\\ \\ 顧客の住所の建物名・部屋番号を指定してください。未指定の場合、顧客に登録された`addr_line_2`を設定します。
     */
    public function setTds2BillAddrLine2(mixed $tds2BillAddrLine2): static
    {
        if (is_null($tds2BillAddrLine2)) {
            $this->openAPINullablesSetToNull[] = 'tds2BillAddrLine2';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tds2BillAddrLine2', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($tds2BillAddrLine2) && mb_strlen($tds2BillAddrLine2) > 100) {
            throw new \InvalidArgumentException('invalid length for $tds2BillAddrLine2 when calling PaymentCardExecutingRequest., must be smaller than or equal to 100.');
        }
        if (!is_null($tds2BillAddrLine2) && mb_strlen($tds2BillAddrLine2) < 1) {
            throw new \InvalidArgumentException('invalid length for $tds2BillAddrLine2 when calling PaymentCardExecutingRequest., must be bigger than or equal to 1.');
        }
        $this->container['tds2BillAddrLine2'] = $tds2BillAddrLine2;

        return $this;
    }

    /**
     * Gets tds2BillAddrLine3.
     *
     * @return string|null
     */
    public function getTds2BillAddrLine3(): mixed
    {
        return $this->container['tds2BillAddrLine3'];
    }

    /**
     * Sets tds2BillAddrLine3.
     *
     * @param string|null $tds2BillAddrLine3 <span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\ 顧客の請求先住所 区域部3行目\\ \\ 顧客の住所のその他を指定してください。未指定の場合、顧客に登録された`addr_line_3`を設定します。
     */
    public function setTds2BillAddrLine3(mixed $tds2BillAddrLine3): static
    {
        if (is_null($tds2BillAddrLine3)) {
            $this->openAPINullablesSetToNull[] = 'tds2BillAddrLine3';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tds2BillAddrLine3', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($tds2BillAddrLine3) && mb_strlen($tds2BillAddrLine3) > 100) {
            throw new \InvalidArgumentException('invalid length for $tds2BillAddrLine3 when calling PaymentCardExecutingRequest., must be smaller than or equal to 100.');
        }
        if (!is_null($tds2BillAddrLine3) && mb_strlen($tds2BillAddrLine3) < 1) {
            throw new \InvalidArgumentException('invalid length for $tds2BillAddrLine3 when calling PaymentCardExecutingRequest., must be bigger than or equal to 1.');
        }
        $this->container['tds2BillAddrLine3'] = $tds2BillAddrLine3;

        return $this;
    }

    /**
     * Gets tds2BillAddrPostCode.
     *
     * @return string|null
     */
    public function getTds2BillAddrPostCode(): mixed
    {
        return $this->container['tds2BillAddrPostCode'];
    }

    /**
     * Sets tds2BillAddrPostCode.
     *
     * @param string|null $tds2BillAddrPostCode <span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\ 顧客の請求先住所 郵便番号\\ \\ 未指定の場合、顧客に登録された`addr_post_code`を設定します
     */
    public function setTds2BillAddrPostCode(mixed $tds2BillAddrPostCode): static
    {
        if (is_null($tds2BillAddrPostCode)) {
            $this->openAPINullablesSetToNull[] = 'tds2BillAddrPostCode';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tds2BillAddrPostCode', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($tds2BillAddrPostCode) && mb_strlen($tds2BillAddrPostCode) > 16) {
            throw new \InvalidArgumentException('invalid length for $tds2BillAddrPostCode when calling PaymentCardExecutingRequest., must be smaller than or equal to 16.');
        }
        if (!is_null($tds2BillAddrPostCode) && mb_strlen($tds2BillAddrPostCode) < 1) {
            throw new \InvalidArgumentException('invalid length for $tds2BillAddrPostCode when calling PaymentCardExecutingRequest., must be bigger than or equal to 1.');
        }
        $this->container['tds2BillAddrPostCode'] = $tds2BillAddrPostCode;

        return $this;
    }

    /**
     * Gets tds2ShipAddrCountry.
     *
     * @return string|null
     */
    public function getTds2ShipAddrCountry(): mixed
    {
        return $this->container['tds2ShipAddrCountry'];
    }

    /**
     * Sets tds2ShipAddrCountry.
     *
     * @param string|null $tds2ShipAddrCountry <span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\ 顧客の配送先住所 国コード。\\ 形式：ISO 3166-1 numeric\\
     */
    public function setTds2ShipAddrCountry(mixed $tds2ShipAddrCountry): static
    {
        if (is_null($tds2ShipAddrCountry)) {
            $this->openAPINullablesSetToNull[] = 'tds2ShipAddrCountry';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tds2ShipAddrCountry', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($tds2ShipAddrCountry) && mb_strlen($tds2ShipAddrCountry) > 3) {
            throw new \InvalidArgumentException('invalid length for $tds2ShipAddrCountry when calling PaymentCardExecutingRequest., must be smaller than or equal to 3.');
        }
        if (!is_null($tds2ShipAddrCountry) && mb_strlen($tds2ShipAddrCountry) < 1) {
            throw new \InvalidArgumentException('invalid length for $tds2ShipAddrCountry when calling PaymentCardExecutingRequest., must be bigger than or equal to 1.');
        }
        $this->container['tds2ShipAddrCountry'] = $tds2ShipAddrCountry;

        return $this;
    }

    /**
     * Gets tds2ShipAddrState.
     *
     * @return string|null
     */
    public function getTds2ShipAddrState(): mixed
    {
        return $this->container['tds2ShipAddrState'];
    }

    /**
     * Sets tds2ShipAddrState.
     *
     * @param string|null $tds2ShipAddrState <span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\ 顧客の配送先住所 州または都道府県コード。\\ 参照： [国土交通省 都道府県コード](https://nlftp.mlit.go.jp/ksj/gml/codelist/PrefCd.html)
     */
    public function setTds2ShipAddrState(mixed $tds2ShipAddrState): static
    {
        if (is_null($tds2ShipAddrState)) {
            $this->openAPINullablesSetToNull[] = 'tds2ShipAddrState';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tds2ShipAddrState', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($tds2ShipAddrState) && mb_strlen($tds2ShipAddrState) > 3) {
            throw new \InvalidArgumentException('invalid length for $tds2ShipAddrState when calling PaymentCardExecutingRequest., must be smaller than or equal to 3.');
        }
        if (!is_null($tds2ShipAddrState) && mb_strlen($tds2ShipAddrState) < 1) {
            throw new \InvalidArgumentException('invalid length for $tds2ShipAddrState when calling PaymentCardExecutingRequest., must be bigger than or equal to 1.');
        }
        $this->container['tds2ShipAddrState'] = $tds2ShipAddrState;

        return $this;
    }

    /**
     * Gets tds2ShipAddrCity.
     *
     * @return string|null
     */
    public function getTds2ShipAddrCity(): mixed
    {
        return $this->container['tds2ShipAddrCity'];
    }

    /**
     * Sets tds2ShipAddrCity.
     *
     * @param string|null $tds2ShipAddrCity <span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\ 顧客の配送先住所 都市名
     */
    public function setTds2ShipAddrCity(mixed $tds2ShipAddrCity): static
    {
        if (is_null($tds2ShipAddrCity)) {
            $this->openAPINullablesSetToNull[] = 'tds2ShipAddrCity';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tds2ShipAddrCity', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($tds2ShipAddrCity) && mb_strlen($tds2ShipAddrCity) > 50) {
            throw new \InvalidArgumentException('invalid length for $tds2ShipAddrCity when calling PaymentCardExecutingRequest., must be smaller than or equal to 50.');
        }
        if (!is_null($tds2ShipAddrCity) && mb_strlen($tds2ShipAddrCity) < 1) {
            throw new \InvalidArgumentException('invalid length for $tds2ShipAddrCity when calling PaymentCardExecutingRequest., must be bigger than or equal to 1.');
        }
        $this->container['tds2ShipAddrCity'] = $tds2ShipAddrCity;

        return $this;
    }

    /**
     * Gets tds2ShipAddrLine1.
     *
     * @return string|null
     */
    public function getTds2ShipAddrLine1(): mixed
    {
        return $this->container['tds2ShipAddrLine1'];
    }

    /**
     * Sets tds2ShipAddrLine1.
     *
     * @param string|null $tds2ShipAddrLine1 <span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\ 顧客の配送先住所 区域部1行目
     */
    public function setTds2ShipAddrLine1(mixed $tds2ShipAddrLine1): static
    {
        if (is_null($tds2ShipAddrLine1)) {
            $this->openAPINullablesSetToNull[] = 'tds2ShipAddrLine1';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tds2ShipAddrLine1', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($tds2ShipAddrLine1) && mb_strlen($tds2ShipAddrLine1) > 100) {
            throw new \InvalidArgumentException('invalid length for $tds2ShipAddrLine1 when calling PaymentCardExecutingRequest., must be smaller than or equal to 100.');
        }
        if (!is_null($tds2ShipAddrLine1) && mb_strlen($tds2ShipAddrLine1) < 1) {
            throw new \InvalidArgumentException('invalid length for $tds2ShipAddrLine1 when calling PaymentCardExecutingRequest., must be bigger than or equal to 1.');
        }
        $this->container['tds2ShipAddrLine1'] = $tds2ShipAddrLine1;

        return $this;
    }

    /**
     * Gets tds2ShipAddrLine2.
     *
     * @return string|null
     */
    public function getTds2ShipAddrLine2(): mixed
    {
        return $this->container['tds2ShipAddrLine2'];
    }

    /**
     * Sets tds2ShipAddrLine2.
     *
     * @param string|null $tds2ShipAddrLine2 <span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\ 顧客の配送先住所 区域部2行目
     */
    public function setTds2ShipAddrLine2(mixed $tds2ShipAddrLine2): static
    {
        if (is_null($tds2ShipAddrLine2)) {
            $this->openAPINullablesSetToNull[] = 'tds2ShipAddrLine2';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tds2ShipAddrLine2', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($tds2ShipAddrLine2) && mb_strlen($tds2ShipAddrLine2) > 100) {
            throw new \InvalidArgumentException('invalid length for $tds2ShipAddrLine2 when calling PaymentCardExecutingRequest., must be smaller than or equal to 100.');
        }
        if (!is_null($tds2ShipAddrLine2) && mb_strlen($tds2ShipAddrLine2) < 1) {
            throw new \InvalidArgumentException('invalid length for $tds2ShipAddrLine2 when calling PaymentCardExecutingRequest., must be bigger than or equal to 1.');
        }
        $this->container['tds2ShipAddrLine2'] = $tds2ShipAddrLine2;

        return $this;
    }

    /**
     * Gets tds2ShipAddrLine3.
     *
     * @return string|null
     */
    public function getTds2ShipAddrLine3(): mixed
    {
        return $this->container['tds2ShipAddrLine3'];
    }

    /**
     * Sets tds2ShipAddrLine3.
     *
     * @param string|null $tds2ShipAddrLine3 <span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\ 顧客の配送先住所 区域部3行目
     */
    public function setTds2ShipAddrLine3(mixed $tds2ShipAddrLine3): static
    {
        if (is_null($tds2ShipAddrLine3)) {
            $this->openAPINullablesSetToNull[] = 'tds2ShipAddrLine3';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tds2ShipAddrLine3', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($tds2ShipAddrLine3) && mb_strlen($tds2ShipAddrLine3) > 100) {
            throw new \InvalidArgumentException('invalid length for $tds2ShipAddrLine3 when calling PaymentCardExecutingRequest., must be smaller than or equal to 100.');
        }
        if (!is_null($tds2ShipAddrLine3) && mb_strlen($tds2ShipAddrLine3) < 1) {
            throw new \InvalidArgumentException('invalid length for $tds2ShipAddrLine3 when calling PaymentCardExecutingRequest., must be bigger than or equal to 1.');
        }
        $this->container['tds2ShipAddrLine3'] = $tds2ShipAddrLine3;

        return $this;
    }

    /**
     * Gets tds2ShipAddrPostCode.
     *
     * @return string|null
     */
    public function getTds2ShipAddrPostCode(): mixed
    {
        return $this->container['tds2ShipAddrPostCode'];
    }

    /**
     * Sets tds2ShipAddrPostCode.
     *
     * @param string|null $tds2ShipAddrPostCode <span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\ 顧客の配送先住所 郵便番号
     */
    public function setTds2ShipAddrPostCode(mixed $tds2ShipAddrPostCode): static
    {
        if (is_null($tds2ShipAddrPostCode)) {
            $this->openAPINullablesSetToNull[] = 'tds2ShipAddrPostCode';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tds2ShipAddrPostCode', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($tds2ShipAddrPostCode) && mb_strlen($tds2ShipAddrPostCode) > 16) {
            throw new \InvalidArgumentException('invalid length for $tds2ShipAddrPostCode when calling PaymentCardExecutingRequest., must be smaller than or equal to 16.');
        }
        if (!is_null($tds2ShipAddrPostCode) && mb_strlen($tds2ShipAddrPostCode) < 1) {
            throw new \InvalidArgumentException('invalid length for $tds2ShipAddrPostCode when calling PaymentCardExecutingRequest., must be bigger than or equal to 1.');
        }
        $this->container['tds2ShipAddrPostCode'] = $tds2ShipAddrPostCode;

        return $this;
    }

    /**
     * Gets tds2ShipInd.
     *
     * @return Tds2ShipInd|null
     */
    public function getTds2ShipInd(): mixed
    {
        return $this->container['tds2ShipInd'];
    }

    /**
     * Sets tds2ShipInd.
     *
     * @param Tds2ShipInd|null $tds2ShipInd tds2ShipInd
     */
    public function setTds2ShipInd(mixed $tds2ShipInd): static
    {
        if (is_null($tds2ShipInd)) {
            $this->openAPINullablesSetToNull[] = 'tds2ShipInd';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tds2ShipInd', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tds2ShipInd'] = $tds2ShipInd;

        return $this;
    }

    /**
     * Gets tds2DeliveryEmailAddress.
     *
     * @return string|null
     */
    public function getTds2DeliveryEmailAddress(): mixed
    {
        return $this->container['tds2DeliveryEmailAddress'];
    }

    /**
     * Sets tds2DeliveryEmailAddress.
     *
     * @param string|null $tds2DeliveryEmailAddress <span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\ 顧客 メールアドレス
     */
    public function setTds2DeliveryEmailAddress(mixed $tds2DeliveryEmailAddress): static
    {
        if (is_null($tds2DeliveryEmailAddress)) {
            $this->openAPINullablesSetToNull[] = 'tds2DeliveryEmailAddress';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tds2DeliveryEmailAddress', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($tds2DeliveryEmailAddress) && mb_strlen($tds2DeliveryEmailAddress) > 254) {
            throw new \InvalidArgumentException('invalid length for $tds2DeliveryEmailAddress when calling PaymentCardExecutingRequest., must be smaller than or equal to 254.');
        }
        if (!is_null($tds2DeliveryEmailAddress) && mb_strlen($tds2DeliveryEmailAddress) < 1) {
            throw new \InvalidArgumentException('invalid length for $tds2DeliveryEmailAddress when calling PaymentCardExecutingRequest., must be bigger than or equal to 1.');
        }
        $this->container['tds2DeliveryEmailAddress'] = $tds2DeliveryEmailAddress;

        return $this;
    }

    /**
     * Gets tds2HomePhoneCc.
     *
     * @return string|null
     */
    public function getTds2HomePhoneCc(): mixed
    {
        return $this->container['tds2HomePhoneCc'];
    }

    /**
     * Sets tds2HomePhoneCc.
     *
     * @param string|null $tds2HomePhoneCc <span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\ 顧客の自宅電話番号の国コード（+を含まない）\\ ※ この値を設定する場合、`tds2_home_phone_no`の設定が必要です。\\ \\ 未指定の場合、顧客の`phone_cc`が自動で設定されます。
     */
    public function setTds2HomePhoneCc(mixed $tds2HomePhoneCc): static
    {
        if (is_null($tds2HomePhoneCc)) {
            $this->openAPINullablesSetToNull[] = 'tds2HomePhoneCc';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tds2HomePhoneCc', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($tds2HomePhoneCc) && mb_strlen($tds2HomePhoneCc) > 3) {
            throw new \InvalidArgumentException('invalid length for $tds2HomePhoneCc when calling PaymentCardExecutingRequest., must be smaller than or equal to 3.');
        }
        if (!is_null($tds2HomePhoneCc) && mb_strlen($tds2HomePhoneCc) < 1) {
            throw new \InvalidArgumentException('invalid length for $tds2HomePhoneCc when calling PaymentCardExecutingRequest., must be bigger than or equal to 1.');
        }
        $this->container['tds2HomePhoneCc'] = $tds2HomePhoneCc;

        return $this;
    }

    /**
     * Gets tds2HomePhoneNo.
     *
     * @return string|null
     */
    public function getTds2HomePhoneNo(): mixed
    {
        return $this->container['tds2HomePhoneNo'];
    }

    /**
     * Sets tds2HomePhoneNo.
     *
     * @param string|null $tds2HomePhoneNo <span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\ 顧客の自宅電話番号（ハイフンなし半角数字のみ）\\ ※ この値を設定する場合、`tds2_home_phone_cc`の設定が必要です。\\ \\ 未指定の場合、顧客の`phone_no`が自動で設定されます。\\ \\ 2024年8月12日以降、下記の内少なくとも1つが必須となります。  - 顧客の自宅電話番号（`tds2_home_phone_no`） - 顧客の携帯電話番号（`tds2_mobile_phone_no`） - 顧客の職場電話番号（`tds2_work_phone_no`） - 顧客のメールアドレス（`tds2_email`）  ※当面は連携しなかった場合でも認証は実施されますが、将来的には利用不可になる可能性があります。
     */
    public function setTds2HomePhoneNo(mixed $tds2HomePhoneNo): static
    {
        if (is_null($tds2HomePhoneNo)) {
            $this->openAPINullablesSetToNull[] = 'tds2HomePhoneNo';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tds2HomePhoneNo', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($tds2HomePhoneNo) && mb_strlen($tds2HomePhoneNo) > 15) {
            throw new \InvalidArgumentException('invalid length for $tds2HomePhoneNo when calling PaymentCardExecutingRequest., must be smaller than or equal to 15.');
        }
        if (!is_null($tds2HomePhoneNo) && mb_strlen($tds2HomePhoneNo) < 1) {
            throw new \InvalidArgumentException('invalid length for $tds2HomePhoneNo when calling PaymentCardExecutingRequest., must be bigger than or equal to 1.');
        }
        $this->container['tds2HomePhoneNo'] = $tds2HomePhoneNo;

        return $this;
    }

    /**
     * Gets tds2MobilePhoneCc.
     *
     * @return string|null
     */
    public function getTds2MobilePhoneCc(): mixed
    {
        return $this->container['tds2MobilePhoneCc'];
    }

    /**
     * Sets tds2MobilePhoneCc.
     *
     * @param string|null $tds2MobilePhoneCc <span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\ 顧客の携帯電話番号の国コード（+を含まない）\\ ※ この値を設定する場合、`tds2_mobile_phone_no`の設定が必要です
     */
    public function setTds2MobilePhoneCc(mixed $tds2MobilePhoneCc): static
    {
        if (is_null($tds2MobilePhoneCc)) {
            $this->openAPINullablesSetToNull[] = 'tds2MobilePhoneCc';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tds2MobilePhoneCc', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($tds2MobilePhoneCc) && mb_strlen($tds2MobilePhoneCc) > 3) {
            throw new \InvalidArgumentException('invalid length for $tds2MobilePhoneCc when calling PaymentCardExecutingRequest., must be smaller than or equal to 3.');
        }
        if (!is_null($tds2MobilePhoneCc) && mb_strlen($tds2MobilePhoneCc) < 1) {
            throw new \InvalidArgumentException('invalid length for $tds2MobilePhoneCc when calling PaymentCardExecutingRequest., must be bigger than or equal to 1.');
        }
        $this->container['tds2MobilePhoneCc'] = $tds2MobilePhoneCc;

        return $this;
    }

    /**
     * Gets tds2MobilePhoneNo.
     *
     * @return string|null
     */
    public function getTds2MobilePhoneNo(): mixed
    {
        return $this->container['tds2MobilePhoneNo'];
    }

    /**
     * Sets tds2MobilePhoneNo.
     *
     * @param string|null $tds2MobilePhoneNo <span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\ 顧客の携帯電話番号（ハイフンなし半角数字のみ）\\ ※ この値を設定する場合、`tds2_mobile_phone_cc`の設定が必要です。\\ \\ 2024年8月12日以降、下記の内少なくとも1つが必須となります。  - 顧客の自宅電話番号（`tds2_home_phone_no`） - 顧客の携帯電話番号（`tds2_mobile_phone_no`） - 顧客の職場電話番号（`tds2_work_phone_no`） - 顧客のメールアドレス（`tds2_email`）  ※当面は連携しなかった場合でも認証は実施されますが、将来的には利用不可になる可能性があります。
     */
    public function setTds2MobilePhoneNo(mixed $tds2MobilePhoneNo): static
    {
        if (is_null($tds2MobilePhoneNo)) {
            $this->openAPINullablesSetToNull[] = 'tds2MobilePhoneNo';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tds2MobilePhoneNo', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($tds2MobilePhoneNo) && mb_strlen($tds2MobilePhoneNo) > 15) {
            throw new \InvalidArgumentException('invalid length for $tds2MobilePhoneNo when calling PaymentCardExecutingRequest., must be smaller than or equal to 15.');
        }
        if (!is_null($tds2MobilePhoneNo) && mb_strlen($tds2MobilePhoneNo) < 1) {
            throw new \InvalidArgumentException('invalid length for $tds2MobilePhoneNo when calling PaymentCardExecutingRequest., must be bigger than or equal to 1.');
        }
        $this->container['tds2MobilePhoneNo'] = $tds2MobilePhoneNo;

        return $this;
    }

    /**
     * Gets tds2WorkPhoneCc.
     *
     * @return string|null
     */
    public function getTds2WorkPhoneCc(): mixed
    {
        return $this->container['tds2WorkPhoneCc'];
    }

    /**
     * Sets tds2WorkPhoneCc.
     *
     * @param string|null $tds2WorkPhoneCc <span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\ 顧客の勤務先電話番号の国コード（+を含まない）\\ ※ この値を設定する場合、`tds2_work_phone_no`の設定が必要です
     */
    public function setTds2WorkPhoneCc(mixed $tds2WorkPhoneCc): static
    {
        if (is_null($tds2WorkPhoneCc)) {
            $this->openAPINullablesSetToNull[] = 'tds2WorkPhoneCc';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tds2WorkPhoneCc', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($tds2WorkPhoneCc) && mb_strlen($tds2WorkPhoneCc) > 3) {
            throw new \InvalidArgumentException('invalid length for $tds2WorkPhoneCc when calling PaymentCardExecutingRequest., must be smaller than or equal to 3.');
        }
        if (!is_null($tds2WorkPhoneCc) && mb_strlen($tds2WorkPhoneCc) < 1) {
            throw new \InvalidArgumentException('invalid length for $tds2WorkPhoneCc when calling PaymentCardExecutingRequest., must be bigger than or equal to 1.');
        }
        $this->container['tds2WorkPhoneCc'] = $tds2WorkPhoneCc;

        return $this;
    }

    /**
     * Gets tds2WorkPhoneNo.
     *
     * @return string|null
     */
    public function getTds2WorkPhoneNo(): mixed
    {
        return $this->container['tds2WorkPhoneNo'];
    }

    /**
     * Sets tds2WorkPhoneNo.
     *
     * @param string|null $tds2WorkPhoneNo <span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\ 顧客の勤務先電話番号（ハイフンなし半角数字のみ）\\ ※ この値を設定する場合、`tds2_work_phone_cc`の設定が必要です。\\ \\ 2024年8月12日以降、下記の内少なくとも1つが必須となります。  - 顧客の自宅電話番号（`tds2_home_phone_no`） - 顧客の携帯電話番号（`tds2_mobile_phone_no`） - 顧客の職場電話番号（`tds2_work_phone_no`） - 顧客のメールアドレス（`tds2_email`）  ※当面は連携しなかった場合でも認証は実施されますが、将来的には利用不可になる可能性があります。
     */
    public function setTds2WorkPhoneNo(mixed $tds2WorkPhoneNo): static
    {
        if (is_null($tds2WorkPhoneNo)) {
            $this->openAPINullablesSetToNull[] = 'tds2WorkPhoneNo';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tds2WorkPhoneNo', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($tds2WorkPhoneNo) && mb_strlen($tds2WorkPhoneNo) > 15) {
            throw new \InvalidArgumentException('invalid length for $tds2WorkPhoneNo when calling PaymentCardExecutingRequest., must be smaller than or equal to 15.');
        }
        if (!is_null($tds2WorkPhoneNo) && mb_strlen($tds2WorkPhoneNo) < 1) {
            throw new \InvalidArgumentException('invalid length for $tds2WorkPhoneNo when calling PaymentCardExecutingRequest., must be bigger than or equal to 1.');
        }
        $this->container['tds2WorkPhoneNo'] = $tds2WorkPhoneNo;

        return $this;
    }

    /**
     * Gets tds2DeliveryTimeframe.
     *
     * @return Tds2DeliveryTimeframe|null
     */
    public function getTds2DeliveryTimeframe(): mixed
    {
        return $this->container['tds2DeliveryTimeframe'];
    }

    /**
     * Sets tds2DeliveryTimeframe.
     *
     * @param Tds2DeliveryTimeframe|null $tds2DeliveryTimeframe tds2DeliveryTimeframe
     */
    public function setTds2DeliveryTimeframe(mixed $tds2DeliveryTimeframe): static
    {
        if (is_null($tds2DeliveryTimeframe)) {
            $this->openAPINullablesSetToNull[] = 'tds2DeliveryTimeframe';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tds2DeliveryTimeframe', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tds2DeliveryTimeframe'] = $tds2DeliveryTimeframe;

        return $this;
    }

    /**
     * Gets tds2PreOrderDate.
     *
     * @return string|null
     */
    public function getTds2PreOrderDate(): mixed
    {
        return $this->container['tds2PreOrderDate'];
    }

    /**
     * Sets tds2PreOrderDate.
     *
     * @param string|null $tds2PreOrderDate <span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\ 商品の発売予定日\\ 形式：`YYYYMMDD`
     */
    public function setTds2PreOrderDate(mixed $tds2PreOrderDate): static
    {
        if (is_null($tds2PreOrderDate)) {
            $this->openAPINullablesSetToNull[] = 'tds2PreOrderDate';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tds2PreOrderDate', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($tds2PreOrderDate) && mb_strlen($tds2PreOrderDate) > 8) {
            throw new \InvalidArgumentException('invalid length for $tds2PreOrderDate when calling PaymentCardExecutingRequest., must be smaller than or equal to 8.');
        }
        if (!is_null($tds2PreOrderDate) && mb_strlen($tds2PreOrderDate) < 8) {
            throw new \InvalidArgumentException('invalid length for $tds2PreOrderDate when calling PaymentCardExecutingRequest., must be bigger than or equal to 8.');
        }
        $this->container['tds2PreOrderDate'] = $tds2PreOrderDate;

        return $this;
    }

    /**
     * Gets tds2PreOrderPurchaseInd.
     *
     * @return Tds2PreOrderPurchaseInd|null
     */
    public function getTds2PreOrderPurchaseInd(): mixed
    {
        return $this->container['tds2PreOrderPurchaseInd'];
    }

    /**
     * Sets tds2PreOrderPurchaseInd.
     *
     * @param Tds2PreOrderPurchaseInd|null $tds2PreOrderPurchaseInd tds2PreOrderPurchaseInd
     */
    public function setTds2PreOrderPurchaseInd(mixed $tds2PreOrderPurchaseInd): static
    {
        if (is_null($tds2PreOrderPurchaseInd)) {
            $this->openAPINullablesSetToNull[] = 'tds2PreOrderPurchaseInd';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tds2PreOrderPurchaseInd', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tds2PreOrderPurchaseInd'] = $tds2PreOrderPurchaseInd;

        return $this;
    }

    /**
     * Gets tds2ReorderItemsInd.
     *
     * @return Tds2ReorderItemsInd|null
     */
    public function getTds2ReorderItemsInd(): mixed
    {
        return $this->container['tds2ReorderItemsInd'];
    }

    /**
     * Sets tds2ReorderItemsInd.
     *
     * @param Tds2ReorderItemsInd|null $tds2ReorderItemsInd tds2ReorderItemsInd
     */
    public function setTds2ReorderItemsInd(mixed $tds2ReorderItemsInd): static
    {
        if (is_null($tds2ReorderItemsInd)) {
            $this->openAPINullablesSetToNull[] = 'tds2ReorderItemsInd';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tds2ReorderItemsInd', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tds2ReorderItemsInd'] = $tds2ReorderItemsInd;

        return $this;
    }

    /**
     * Gets tds2RecurringExpiry.
     *
     * @return string|null
     */
    public function getTds2RecurringExpiry(): mixed
    {
        return $this->container['tds2RecurringExpiry'];
    }

    /**
     * Sets tds2RecurringExpiry.
     *
     * @param string|null $tds2RecurringExpiry <span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\ ※ サブスクリプションなど継続課金型のビジネスモデルのみ\\ 継続課金の終了日\\ 形式：`YYYYMMDD`
     */
    public function setTds2RecurringExpiry(mixed $tds2RecurringExpiry): static
    {
        if (is_null($tds2RecurringExpiry)) {
            $this->openAPINullablesSetToNull[] = 'tds2RecurringExpiry';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tds2RecurringExpiry', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($tds2RecurringExpiry) && mb_strlen($tds2RecurringExpiry) > 8) {
            throw new \InvalidArgumentException('invalid length for $tds2RecurringExpiry when calling PaymentCardExecutingRequest., must be smaller than or equal to 8.');
        }
        if (!is_null($tds2RecurringExpiry) && mb_strlen($tds2RecurringExpiry) < 8) {
            throw new \InvalidArgumentException('invalid length for $tds2RecurringExpiry when calling PaymentCardExecutingRequest., must be bigger than or equal to 8.');
        }
        $this->container['tds2RecurringExpiry'] = $tds2RecurringExpiry;

        return $this;
    }

    /**
     * Gets tds2RecurringFrequency.
     *
     * @return string|null
     */
    public function getTds2RecurringFrequency(): mixed
    {
        return $this->container['tds2RecurringFrequency'];
    }

    /**
     * Sets tds2RecurringFrequency.
     *
     * @param string|null $tds2RecurringFrequency <span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\ ※ サブスクリプションなど継続課金型のビジネスモデルのみ\\ 継続課金の課金間隔の日数（最小）
     */
    public function setTds2RecurringFrequency(mixed $tds2RecurringFrequency): static
    {
        if (is_null($tds2RecurringFrequency)) {
            $this->openAPINullablesSetToNull[] = 'tds2RecurringFrequency';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tds2RecurringFrequency', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($tds2RecurringFrequency) && mb_strlen($tds2RecurringFrequency) > 4) {
            throw new \InvalidArgumentException('invalid length for $tds2RecurringFrequency when calling PaymentCardExecutingRequest., must be smaller than or equal to 4.');
        }
        if (!is_null($tds2RecurringFrequency) && mb_strlen($tds2RecurringFrequency) < 1) {
            throw new \InvalidArgumentException('invalid length for $tds2RecurringFrequency when calling PaymentCardExecutingRequest., must be bigger than or equal to 1.');
        }
        $this->container['tds2RecurringFrequency'] = $tds2RecurringFrequency;

        return $this;
    }

    /**
     * Gets tds2GiftCardAmount.
     *
     * @return string|null
     */
    public function getTds2GiftCardAmount(): mixed
    {
        return $this->container['tds2GiftCardAmount'];
    }

    /**
     * Sets tds2GiftCardAmount.
     *
     * @param string|null $tds2GiftCardAmount <span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\ ※ プリペイドカードまたはギフトカードを購入する場合のみ\\ プリペイドカードまたはギフトカードの総購入金額
     */
    public function setTds2GiftCardAmount(mixed $tds2GiftCardAmount): static
    {
        if (is_null($tds2GiftCardAmount)) {
            $this->openAPINullablesSetToNull[] = 'tds2GiftCardAmount';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tds2GiftCardAmount', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($tds2GiftCardAmount) && mb_strlen($tds2GiftCardAmount) > 15) {
            throw new \InvalidArgumentException('invalid length for $tds2GiftCardAmount when calling PaymentCardExecutingRequest., must be smaller than or equal to 15.');
        }
        if (!is_null($tds2GiftCardAmount) && mb_strlen($tds2GiftCardAmount) < 1) {
            throw new \InvalidArgumentException('invalid length for $tds2GiftCardAmount when calling PaymentCardExecutingRequest., must be bigger than or equal to 1.');
        }
        $this->container['tds2GiftCardAmount'] = $tds2GiftCardAmount;

        return $this;
    }

    /**
     * Gets tds2GiftCardCount.
     *
     * @return string|null
     */
    public function getTds2GiftCardCount(): mixed
    {
        return $this->container['tds2GiftCardCount'];
    }

    /**
     * Sets tds2GiftCardCount.
     *
     * @param string|null $tds2GiftCardCount <span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\ ※ プリペイドカードまたはギフトカードを購入する場合のみ\\ 購入したプリペイドカードまたはギフトカードの総数
     */
    public function setTds2GiftCardCount(mixed $tds2GiftCardCount): static
    {
        if (is_null($tds2GiftCardCount)) {
            $this->openAPINullablesSetToNull[] = 'tds2GiftCardCount';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tds2GiftCardCount', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($tds2GiftCardCount) && mb_strlen($tds2GiftCardCount) > 2) {
            throw new \InvalidArgumentException('invalid length for $tds2GiftCardCount when calling PaymentCardExecutingRequest., must be smaller than or equal to 2.');
        }
        if (!is_null($tds2GiftCardCount) && mb_strlen($tds2GiftCardCount) < 1) {
            throw new \InvalidArgumentException('invalid length for $tds2GiftCardCount when calling PaymentCardExecutingRequest., must be bigger than or equal to 1.');
        }
        $this->container['tds2GiftCardCount'] = $tds2GiftCardCount;

        return $this;
    }

    /**
     * Gets tds2GiftCardCurr.
     *
     * @return string|null
     */
    public function getTds2GiftCardCurr(): mixed
    {
        return $this->container['tds2GiftCardCurr'];
    }

    /**
     * Sets tds2GiftCardCurr.
     *
     * @param string|null $tds2GiftCardCurr <span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\ ※ プリペイドカードまたはギフトカードを購入する場合のみ\\ プリペイドカードまたはギフトカードの通貨コード。\\ 形式：ISO 4217 numeric\\ \\ 以下の通貨コードは利用できません。（債券市場単位等）\\ `955`, `956`, `957`, `958`, `959`, `960`, `961`, `962`, `963`, `964`, `999`
     */
    public function setTds2GiftCardCurr(mixed $tds2GiftCardCurr): static
    {
        if (is_null($tds2GiftCardCurr)) {
            $this->openAPINullablesSetToNull[] = 'tds2GiftCardCurr';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tds2GiftCardCurr', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($tds2GiftCardCurr) && mb_strlen($tds2GiftCardCurr) > 3) {
            throw new \InvalidArgumentException('invalid length for $tds2GiftCardCurr when calling PaymentCardExecutingRequest., must be smaller than or equal to 3.');
        }
        if (!is_null($tds2GiftCardCurr) && mb_strlen($tds2GiftCardCurr) < 1) {
            throw new \InvalidArgumentException('invalid length for $tds2GiftCardCurr when calling PaymentCardExecutingRequest., must be bigger than or equal to 1.');
        }
        $this->container['tds2GiftCardCurr'] = $tds2GiftCardCurr;

        return $this;
    }

    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @see https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    public function jsonSerialize(): mixed
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object.
     */
    public function __toString(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
    }

    /**
     * Gets a header-safe presentation of the object.
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
