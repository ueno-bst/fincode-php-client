<?php

declare(strict_types=1);
/**
 * fincode API.
 *
 * fincodeのAPIリファレンスです。\\ fincodeは決済情報のほか様々なリソースを管理できるため、リソース指向なREST APIをベースとしたインターフェイス設計のもとでAPIを提供しています。\\ APIの呼び出しにはAPIキーによる認証が必要であり、リクエストの際に`Authorization`ヘッダーに有効なAPIキーをセットすることで認証できます。
 *
 * The version of the OpenAPI document: 1.2.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Fincode\Model;

use OpenAPI\Fincode\ObjectSerializer;

/**
 * @implements \ArrayAccess<string, mixed>
 */
class Examination implements ModelInterface, \ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;
    /**
     * The original name of the model.
     */
    protected static string $openAPIModelName = 'Examination';
    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var array<string, string>
     */
    protected static array $openAPITypes = ['examinationMasterId' => '\OpenAPI\Fincode\Model\ExaminationMasterId', 'statusCode' => '\OpenAPI\Fincode\Model\ExaminationStatus', 'memberCode' => 'string', 'tdsAvailable' => 'bool', 'installmentsPaymentAvailable' => 'bool', 'mcc1' => 'string', 'mcc2' => 'string', 'paypayMid' => 'string', 'paypayStoreId' => 'string', 'paysleMerchantCode' => 'string', 'paysleUserId' => 'string', 'paysleUserPassword' => 'string', 'cutOverAt' => 'string'];
    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var array<string, string|null>
     */
    protected static array $openAPIFormats = ['examinationMasterId' => null, 'statusCode' => null, 'memberCode' => null, 'tdsAvailable' => null, 'installmentsPaymentAvailable' => null, 'mcc1' => null, 'mcc2' => null, 'paypayMid' => null, 'paypayStoreId' => null, 'paysleMerchantCode' => null, 'paysleUserId' => null, 'paysleUserPassword' => null, 'cutOverAt' => null];
    /**
     * Array of nullable properties. Used for (de)serialization.
     *
     * @var array<string, bool>
     */
    protected static array $openAPINullables = ['examinationMasterId' => false, 'statusCode' => false, 'memberCode' => true, 'tdsAvailable' => true, 'installmentsPaymentAvailable' => true, 'mcc1' => true, 'mcc2' => true, 'paypayMid' => true, 'paypayStoreId' => true, 'paysleMerchantCode' => true, 'paysleUserId' => true, 'paysleUserPassword' => true, 'cutOverAt' => true];
    /**
     * If a nullable field gets set to null, insert it here.
     *
     * @var array<string, bool>
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return array<string, string|null>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties.
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null.
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null.
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable.
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }
    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = ['examinationMasterId' => 'examination_master_id', 'statusCode' => 'status_code', 'memberCode' => 'member_code', 'tdsAvailable' => 'tds_available', 'installmentsPaymentAvailable' => 'installments_payment_available', 'mcc1' => 'mcc_1', 'mcc2' => 'mcc_2', 'paypayMid' => 'paypay_mid', 'paypayStoreId' => 'paypay_store_id', 'paysleMerchantCode' => 'paysle_merchant_code', 'paysleUserId' => 'paysle_user_id', 'paysleUserPassword' => 'paysle_user_password', 'cutOverAt' => 'cut_over_at'];
    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var array<string, string>
     */
    protected static array $setters = ['examinationMasterId' => 'setExaminationMasterId', 'statusCode' => 'setStatusCode', 'memberCode' => 'setMemberCode', 'tdsAvailable' => 'setTdsAvailable', 'installmentsPaymentAvailable' => 'setInstallmentsPaymentAvailable', 'mcc1' => 'setMcc1', 'mcc2' => 'setMcc2', 'paypayMid' => 'setPaypayMid', 'paypayStoreId' => 'setPaypayStoreId', 'paysleMerchantCode' => 'setPaysleMerchantCode', 'paysleUserId' => 'setPaysleUserId', 'paysleUserPassword' => 'setPaysleUserPassword', 'cutOverAt' => 'setCutOverAt'];
    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var array<string, string>
     */
    protected static array $getters = ['examinationMasterId' => 'getExaminationMasterId', 'statusCode' => 'getStatusCode', 'memberCode' => 'getMemberCode', 'tdsAvailable' => 'getTdsAvailable', 'installmentsPaymentAvailable' => 'getInstallmentsPaymentAvailable', 'mcc1' => 'getMcc1', 'mcc2' => 'getMcc2', 'paypayMid' => 'getPaypayMid', 'paypayStoreId' => 'getPaypayStoreId', 'paysleMerchantCode' => 'getPaysleMerchantCode', 'paysleUserId' => 'getPaysleUserId', 'paysleUserPassword' => 'getPaysleUserPassword', 'cutOverAt' => 'getCutOverAt'];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }
    /**
     * Associative array for storing property values.
     *
     * @phpstan-var array<string, mixed>
     *
     * @psalm-var array<string, mixed>
     */
    protected array $container = [];

    /**
     * Constructor.
     *
     * @param array<string, mixed> $data Associated array of property values
     *                                   initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('examinationMasterId', $data ?? [], null);
        $this->setIfExists('statusCode', $data ?? [], null);
        $this->setIfExists('memberCode', $data ?? [], null);
        $this->setIfExists('tdsAvailable', $data ?? [], null);
        $this->setIfExists('installmentsPaymentAvailable', $data ?? [], null);
        $this->setIfExists('mcc1', $data ?? [], null);
        $this->setIfExists('mcc2', $data ?? [], null);
        $this->setIfExists('paypayMid', $data ?? [], null);
        $this->setIfExists('paypayStoreId', $data ?? [], null);
        $this->setIfExists('paysleMerchantCode', $data ?? [], null);
        $this->setIfExists('paysleUserId', $data ?? [], null);
        $this->setIfExists('paysleUserPassword', $data ?? [], null);
        $this->setIfExists('cutOverAt', $data ?? [], null);
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array.
     *
     * @param array<string, mixed> $fields
     */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }
        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return list<string> invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];
        if (!is_null($this->container['memberCode']) && mb_strlen($this->container['memberCode']) > 20) {
            $invalidProperties[] = "invalid value for 'memberCode', the character length must be smaller than or equal to 20.";
        }
        if (!is_null($this->container['memberCode']) && mb_strlen($this->container['memberCode']) < 1) {
            $invalidProperties[] = "invalid value for 'memberCode', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return 0 === count($this->listInvalidProperties());
    }

    /**
     * Gets examinationMasterId.
     *
     * @return ExaminationMasterId|null
     */
    public function getExaminationMasterId(): mixed
    {
        return $this->container['examinationMasterId'];
    }

    /**
     * Sets examinationMasterId.
     *
     * @param ExaminationMasterId $examinationMasterId examinationMasterId
     */
    public function setExaminationMasterId(mixed $examinationMasterId): static
    {
        if (is_null($examinationMasterId)) {
            throw new \InvalidArgumentException('non-nullable examinationMasterId cannot be null');
        }
        $this->container['examinationMasterId'] = $examinationMasterId;

        return $this;
    }

    /**
     * Gets statusCode.
     *
     * @return ExaminationStatus|null
     */
    public function getStatusCode(): mixed
    {
        return $this->container['statusCode'];
    }

    /**
     * Sets statusCode.
     *
     * @param ExaminationStatus $statusCode statusCode
     */
    public function setStatusCode(mixed $statusCode): static
    {
        if (is_null($statusCode)) {
            throw new \InvalidArgumentException('non-nullable statusCode cannot be null');
        }
        $this->container['statusCode'] = $statusCode;

        return $this;
    }

    /**
     * Gets memberCode.
     *
     * @return string|null
     */
    public function getMemberCode(): mixed
    {
        return $this->container['memberCode'];
    }

    /**
     * Sets memberCode.
     *
     * @param string|null $memberCode 加盟店番号
     */
    public function setMemberCode(mixed $memberCode): static
    {
        if (is_null($memberCode)) {
            $this->openAPINullablesSetToNull[] = 'memberCode';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('memberCode', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($memberCode) && mb_strlen($memberCode) > 20) {
            throw new \InvalidArgumentException('invalid length for $memberCode when calling Examination., must be smaller than or equal to 20.');
        }
        if (!is_null($memberCode) && mb_strlen($memberCode) < 1) {
            throw new \InvalidArgumentException('invalid length for $memberCode when calling Examination., must be bigger than or equal to 1.');
        }
        $this->container['memberCode'] = $memberCode;

        return $this;
    }

    /**
     * Gets tdsAvailable.
     *
     * @return bool|null
     */
    public function getTdsAvailable(): mixed
    {
        return $this->container['tdsAvailable'];
    }

    /**
     * Sets tdsAvailable.
     *
     * @param bool|null $tdsAvailable 3Dセキュア認証利用可否  - `true`: 利用可 - `false`: 利用不可
     */
    public function setTdsAvailable(mixed $tdsAvailable): static
    {
        if (is_null($tdsAvailable)) {
            $this->openAPINullablesSetToNull[] = 'tdsAvailable';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tdsAvailable', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tdsAvailable'] = $tdsAvailable;

        return $this;
    }

    /**
     * Gets installmentsPaymentAvailable.
     *
     * @return bool|null
     */
    public function getInstallmentsPaymentAvailable(): mixed
    {
        return $this->container['installmentsPaymentAvailable'];
    }

    /**
     * Sets installmentsPaymentAvailable.
     *
     * @param bool|null $installmentsPaymentAvailable 分割払い利用可否  - `true`: 利用可 - `false`: 利用不可
     */
    public function setInstallmentsPaymentAvailable(mixed $installmentsPaymentAvailable): static
    {
        if (is_null($installmentsPaymentAvailable)) {
            $this->openAPINullablesSetToNull[] = 'installmentsPaymentAvailable';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('installmentsPaymentAvailable', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['installmentsPaymentAvailable'] = $installmentsPaymentAvailable;

        return $this;
    }

    /**
     * Gets mcc1.
     *
     * @return string|null
     */
    public function getMcc1(): mixed
    {
        return $this->container['mcc1'];
    }

    /**
     * Sets mcc1.
     *
     * @param string|null $mcc1 MCC 1
     */
    public function setMcc1(mixed $mcc1): static
    {
        if (is_null($mcc1)) {
            $this->openAPINullablesSetToNull[] = 'mcc1';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('mcc1', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['mcc1'] = $mcc1;

        return $this;
    }

    /**
     * Gets mcc2.
     *
     * @return string|null
     */
    public function getMcc2(): mixed
    {
        return $this->container['mcc2'];
    }

    /**
     * Sets mcc2.
     *
     * @param string|null $mcc2 MCC 2
     */
    public function setMcc2(mixed $mcc2): static
    {
        if (is_null($mcc2)) {
            $this->openAPINullablesSetToNull[] = 'mcc2';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('mcc2', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['mcc2'] = $mcc2;

        return $this;
    }

    /**
     * Gets paypayMid.
     *
     * @return string|null
     */
    public function getPaypayMid(): mixed
    {
        return $this->container['paypayMid'];
    }

    /**
     * Sets paypayMid.
     *
     * @param string|null $paypayMid PayPay 加盟店番号
     */
    public function setPaypayMid(mixed $paypayMid): static
    {
        if (is_null($paypayMid)) {
            $this->openAPINullablesSetToNull[] = 'paypayMid';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('paypayMid', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['paypayMid'] = $paypayMid;

        return $this;
    }

    /**
     * Gets paypayStoreId.
     *
     * @return string|null
     */
    public function getPaypayStoreId(): mixed
    {
        return $this->container['paypayStoreId'];
    }

    /**
     * Sets paypayStoreId.
     *
     * @param string|null $paypayStoreId PayPay 店舗ID
     */
    public function setPaypayStoreId(mixed $paypayStoreId): static
    {
        if (is_null($paypayStoreId)) {
            $this->openAPINullablesSetToNull[] = 'paypayStoreId';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('paypayStoreId', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['paypayStoreId'] = $paypayStoreId;

        return $this;
    }

    /**
     * Gets paysleMerchantCode.
     *
     * @return string|null
     */
    public function getPaysleMerchantCode(): mixed
    {
        return $this->container['paysleMerchantCode'];
    }

    /**
     * Sets paysleMerchantCode.
     *
     * @param string|null $paysleMerchantCode PAYSLE 企業コード
     */
    public function setPaysleMerchantCode(mixed $paysleMerchantCode): static
    {
        if (is_null($paysleMerchantCode)) {
            $this->openAPINullablesSetToNull[] = 'paysleMerchantCode';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('paysleMerchantCode', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['paysleMerchantCode'] = $paysleMerchantCode;

        return $this;
    }

    /**
     * Gets paysleUserId.
     *
     * @return string|null
     */
    public function getPaysleUserId(): mixed
    {
        return $this->container['paysleUserId'];
    }

    /**
     * Sets paysleUserId.
     *
     * @param string|null $paysleUserId PAYSLE ログイン企業ID
     */
    public function setPaysleUserId(mixed $paysleUserId): static
    {
        if (is_null($paysleUserId)) {
            $this->openAPINullablesSetToNull[] = 'paysleUserId';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('paysleUserId', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['paysleUserId'] = $paysleUserId;

        return $this;
    }

    /**
     * Gets paysleUserPassword.
     *
     * @return string|null
     */
    public function getPaysleUserPassword(): mixed
    {
        return $this->container['paysleUserPassword'];
    }

    /**
     * Sets paysleUserPassword.
     *
     * @param string|null $paysleUserPassword PAYSLE システム接続パスワード
     */
    public function setPaysleUserPassword(mixed $paysleUserPassword): static
    {
        if (is_null($paysleUserPassword)) {
            $this->openAPINullablesSetToNull[] = 'paysleUserPassword';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('paysleUserPassword', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['paysleUserPassword'] = $paysleUserPassword;

        return $this;
    }

    /**
     * Gets cutOverAt.
     *
     * @return string|null
     */
    public function getCutOverAt(): mixed
    {
        return $this->container['cutOverAt'];
    }

    /**
     * Sets cutOverAt.
     *
     * @param string|null $cutOverAt 利用開始日\\ 形式：`yyyy/MM/dd`
     */
    public function setCutOverAt(mixed $cutOverAt): static
    {
        if (is_null($cutOverAt)) {
            $this->openAPINullablesSetToNull[] = 'cutOverAt';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cutOverAt', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cutOverAt'] = $cutOverAt;

        return $this;
    }

    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @see https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    public function jsonSerialize(): mixed
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object.
     */
    public function __toString(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
    }

    /**
     * Gets a header-safe presentation of the object.
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
