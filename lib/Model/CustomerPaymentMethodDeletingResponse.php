<?php

declare(strict_types=1);
/**
 * fincode API.
 *
 * fincodeのAPIリファレンスです。\\ fincodeは決済情報のほか様々なリソースを管理できるため、リソース指向なREST APIをベースとしたインターフェイス設計のもとでAPIを提供しています。\\ APIの呼び出しにはAPIキーによる認証が必要であり、リクエストの際に`Authorization`ヘッダーに有効なAPIキーをセットすることで認証できます。
 *
 * The version of the OpenAPI document: 1.2.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Fincode\Model;

use OpenAPI\Fincode\ObjectSerializer;

/**
 * @implements \ArrayAccess<string, mixed>
 */
class CustomerPaymentMethodDeletingResponse implements ModelInterface, \ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;
    /**
     * The original name of the model.
     */
    protected static string $openAPIModelName = 'CustomerPaymentMethod.Deleting.Response';
    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var array<string, string>
     */
    protected static array $openAPITypes = ['id' => 'string', 'payType' => 'string', 'customerId' => 'string', 'status' => '\OpenAPI\Fincode\Model\PaymentMethodStatus', 'redirectUrl' => 'string', 'redirectUrlAccessedFlag' => '\OpenAPI\Fincode\Model\RedirectUrlAccessedFlag', 'returnUrl' => 'string', 'defaultFlag' => '\OpenAPI\Fincode\Model\PropertiesDefaultFlag', 'clientField1' => 'mixed', 'clientField2' => 'mixed', 'clientField3' => 'mixed', 'deleteFlag' => '\OpenAPI\Fincode\Model\PropertiesDeleteFlag', 'processDate' => 'mixed', 'created' => 'mixed', 'updated' => 'mixed', 'directdebit' => '\OpenAPI\Fincode\Model\Directdebit'];
    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var array<string, string|null>
     */
    protected static array $openAPIFormats = ['id' => null, 'payType' => null, 'customerId' => null, 'status' => null, 'redirectUrl' => null, 'redirectUrlAccessedFlag' => null, 'returnUrl' => null, 'defaultFlag' => null, 'clientField1' => null, 'clientField2' => null, 'clientField3' => null, 'deleteFlag' => null, 'processDate' => null, 'created' => null, 'updated' => null, 'directdebit' => null];
    /**
     * Array of nullable properties. Used for (de)serialization.
     *
     * @var array<string, bool>
     */
    protected static array $openAPINullables = ['id' => false, 'payType' => false, 'customerId' => false, 'status' => false, 'redirectUrl' => true, 'redirectUrlAccessedFlag' => true, 'returnUrl' => true, 'defaultFlag' => false, 'clientField1' => false, 'clientField2' => false, 'clientField3' => false, 'deleteFlag' => false, 'processDate' => false, 'created' => false, 'updated' => false, 'directdebit' => true];
    /**
     * If a nullable field gets set to null, insert it here.
     *
     * @var array<string, bool>
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return array<string, string|null>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties.
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null.
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null.
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable.
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }
    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = ['id' => 'id', 'payType' => 'pay_type', 'customerId' => 'customer_id', 'status' => 'status', 'redirectUrl' => 'redirect_url', 'redirectUrlAccessedFlag' => 'redirect_url_accessed_flag', 'returnUrl' => 'return_url', 'defaultFlag' => 'default_flag', 'clientField1' => 'client_field_1', 'clientField2' => 'client_field_2', 'clientField3' => 'client_field_3', 'deleteFlag' => 'delete_flag', 'processDate' => 'process_date', 'created' => 'created', 'updated' => 'updated', 'directdebit' => 'directdebit'];
    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var array<string, string>
     */
    protected static array $setters = ['id' => 'setId', 'payType' => 'setPayType', 'customerId' => 'setCustomerId', 'status' => 'setStatus', 'redirectUrl' => 'setRedirectUrl', 'redirectUrlAccessedFlag' => 'setRedirectUrlAccessedFlag', 'returnUrl' => 'setReturnUrl', 'defaultFlag' => 'setDefaultFlag', 'clientField1' => 'setClientField1', 'clientField2' => 'setClientField2', 'clientField3' => 'setClientField3', 'deleteFlag' => 'setDeleteFlag', 'processDate' => 'setProcessDate', 'created' => 'setCreated', 'updated' => 'setUpdated', 'directdebit' => 'setDirectdebit'];
    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var array<string, string>
     */
    protected static array $getters = ['id' => 'getId', 'payType' => 'getPayType', 'customerId' => 'getCustomerId', 'status' => 'getStatus', 'redirectUrl' => 'getRedirectUrl', 'redirectUrlAccessedFlag' => 'getRedirectUrlAccessedFlag', 'returnUrl' => 'getReturnUrl', 'defaultFlag' => 'getDefaultFlag', 'clientField1' => 'getClientField1', 'clientField2' => 'getClientField2', 'clientField3' => 'getClientField3', 'deleteFlag' => 'getDeleteFlag', 'processDate' => 'getProcessDate', 'created' => 'getCreated', 'updated' => 'getUpdated', 'directdebit' => 'getDirectdebit'];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }
    public const PAY_TYPE_DIRECTDEBIT = 'Directdebit';

    /**
     * Gets allowable values of the enum.
     *
     * @return list<string>
     */
    public function getPayTypeAllowableValues(): array
    {
        return [self::PAY_TYPE_DIRECTDEBIT];
    }
    /**
     * Associative array for storing property values.
     *
     * @phpstan-var array<string, mixed>
     *
     * @psalm-var array<string, mixed>
     */
    protected array $container = [];

    /**
     * Constructor.
     *
     * @param array<string, mixed> $data Associated array of property values
     *                                   initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('payType', $data ?? [], null);
        $this->setIfExists('customerId', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('redirectUrl', $data ?? [], null);
        $this->setIfExists('redirectUrlAccessedFlag', $data ?? [], null);
        $this->setIfExists('returnUrl', $data ?? [], null);
        $this->setIfExists('defaultFlag', $data ?? [], null);
        $this->setIfExists('clientField1', $data ?? [], null);
        $this->setIfExists('clientField2', $data ?? [], null);
        $this->setIfExists('clientField3', $data ?? [], null);
        $this->setIfExists('deleteFlag', $data ?? [], null);
        $this->setIfExists('processDate', $data ?? [], null);
        $this->setIfExists('created', $data ?? [], null);
        $this->setIfExists('updated', $data ?? [], null);
        $this->setIfExists('directdebit', $data ?? [], null);
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array.
     *
     * @param array<string, mixed> $fields
     */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }
        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return list<string> invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];
        if (!is_null($this->container['id']) && mb_strlen($this->container['id']) > 25) {
            $invalidProperties[] = "invalid value for 'id', the character length must be smaller than or equal to 25.";
        }
        if (!is_null($this->container['id']) && mb_strlen($this->container['id']) < 25) {
            $invalidProperties[] = "invalid value for 'id', the character length must be bigger than or equal to 25.";
        }
        $allowedValues = $this->getPayTypeAllowableValues();
        if (!is_null($this->container['payType']) && !in_array($this->container['payType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf("invalid value '%s' for 'payType', must be one of '%s'", $this->container['payType'], implode("', '", $allowedValues));
        }
        if (!is_null($this->container['customerId']) && mb_strlen($this->container['customerId']) > 60) {
            $invalidProperties[] = "invalid value for 'customerId', the character length must be smaller than or equal to 60.";
        }
        if (!is_null($this->container['redirectUrl']) && mb_strlen($this->container['redirectUrl']) > 256) {
            $invalidProperties[] = "invalid value for 'redirectUrl', the character length must be smaller than or equal to 256.";
        }
        if (!is_null($this->container['returnUrl']) && mb_strlen($this->container['returnUrl']) > 256) {
            $invalidProperties[] = "invalid value for 'returnUrl', the character length must be smaller than or equal to 256.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return 0 === count($this->listInvalidProperties());
    }

    /**
     * Gets id.
     *
     * @return string|null
     */
    public function getId(): mixed
    {
        return $this->container['id'];
    }

    /**
     * Sets id.
     *
     * @param string $id 削除された決済手段のIDです
     */
    public function setId(mixed $id): static
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        if (mb_strlen($id) > 25) {
            throw new \InvalidArgumentException('invalid length for $id when calling CustomerPaymentMethodDeletingResponse., must be smaller than or equal to 25.');
        }
        if (mb_strlen($id) < 25) {
            throw new \InvalidArgumentException('invalid length for $id when calling CustomerPaymentMethodDeletingResponse., must be bigger than or equal to 25.');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets payType.
     *
     * @return string|null
     */
    public function getPayType(): mixed
    {
        return $this->container['payType'];
    }

    /**
     * Sets payType.
     *
     * @param string $payType - `Directdebit`   ※ 現時点では`Directdebit`（口座振替）のみ指定可能です。カード情報を取得する場合は カード取得API を使用します。
     */
    public function setPayType(mixed $payType): static
    {
        if (is_null($payType)) {
            throw new \InvalidArgumentException('non-nullable payType cannot be null');
        }
        $allowedValues = $this->getPayTypeAllowableValues();
        if (!in_array($payType, $allowedValues, true)) {
            throw new \InvalidArgumentException(sprintf("Invalid value '%s' for 'payType', must be one of '%s'", $payType, implode("', '", $allowedValues)));
        }
        $this->container['payType'] = $payType;

        return $this;
    }

    /**
     * Gets customerId.
     *
     * @return string|null
     */
    public function getCustomerId(): mixed
    {
        return $this->container['customerId'];
    }

    /**
     * Sets customerId.
     *
     * @param string $customerId この決済手段が紐づく顧客のID
     */
    public function setCustomerId(mixed $customerId): static
    {
        if (is_null($customerId)) {
            throw new \InvalidArgumentException('non-nullable customerId cannot be null');
        }
        if (mb_strlen($customerId) > 60) {
            throw new \InvalidArgumentException('invalid length for $customerId when calling CustomerPaymentMethodDeletingResponse., must be smaller than or equal to 60.');
        }
        $this->container['customerId'] = $customerId;

        return $this;
    }

    /**
     * Gets status.
     *
     * @return PaymentMethodStatus|null
     */
    public function getStatus(): mixed
    {
        return $this->container['status'];
    }

    /**
     * Sets status.
     *
     * @param PaymentMethodStatus $status status
     */
    public function setStatus(mixed $status): static
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets redirectUrl.
     *
     * @return string|null
     */
    public function getRedirectUrl(): mixed
    {
        return $this->container['redirectUrl'];
    }

    /**
     * Sets redirectUrl.
     *
     * @param string|null $redirectUrl リダイレクトURL \\ 購入者をこのURLへリダイレクトさせ、ステータスがAWAITING_CUSTOMER_ACTION の決済手段を有効化するための後続の処理へ誘導してください。   - 振替口座登録の場合： このURLにアクセスして振替口座登録の承認を行います。このURLには1度だけアクセスできます。 - カード登録の場合： このURLにアクセスして3Dセキュア認証を行います。
     */
    public function setRedirectUrl(mixed $redirectUrl): static
    {
        if (is_null($redirectUrl)) {
            $this->openAPINullablesSetToNull[] = 'redirectUrl';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('redirectUrl', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($redirectUrl) && mb_strlen($redirectUrl) > 256) {
            throw new \InvalidArgumentException('invalid length for $redirectUrl when calling CustomerPaymentMethodDeletingResponse., must be smaller than or equal to 256.');
        }
        $this->container['redirectUrl'] = $redirectUrl;

        return $this;
    }

    /**
     * Gets redirectUrlAccessedFlag.
     *
     * @return RedirectUrlAccessedFlag|null
     */
    public function getRedirectUrlAccessedFlag(): mixed
    {
        return $this->container['redirectUrlAccessedFlag'];
    }

    /**
     * Sets redirectUrlAccessedFlag.
     *
     * @param RedirectUrlAccessedFlag|null $redirectUrlAccessedFlag redirectUrlAccessedFlag
     */
    public function setRedirectUrlAccessedFlag(mixed $redirectUrlAccessedFlag): static
    {
        if (is_null($redirectUrlAccessedFlag)) {
            $this->openAPINullablesSetToNull[] = 'redirectUrlAccessedFlag';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('redirectUrlAccessedFlag', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['redirectUrlAccessedFlag'] = $redirectUrlAccessedFlag;

        return $this;
    }

    /**
     * Gets returnUrl.
     *
     * @return string|null
     */
    public function getReturnUrl(): mixed
    {
        return $this->container['returnUrl'];
    }

    /**
     * Sets returnUrl.
     *
     * @param string|null $returnUrl 加盟店戻りURL（成功時）\\ 購入者がアクションを完了し、決済手段の登録に成功した際にリダイレクトされるURLです。\\ POSTメソッドでリダイレクトがされます。
     */
    public function setReturnUrl(mixed $returnUrl): static
    {
        if (is_null($returnUrl)) {
            $this->openAPINullablesSetToNull[] = 'returnUrl';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('returnUrl', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($returnUrl) && mb_strlen($returnUrl) > 256) {
            throw new \InvalidArgumentException('invalid length for $returnUrl when calling CustomerPaymentMethodDeletingResponse., must be smaller than or equal to 256.');
        }
        $this->container['returnUrl'] = $returnUrl;

        return $this;
    }

    /**
     * Gets defaultFlag.
     *
     * @return PropertiesDefaultFlag|null
     */
    public function getDefaultFlag(): mixed
    {
        return $this->container['defaultFlag'];
    }

    /**
     * Sets defaultFlag.
     *
     * @param PropertiesDefaultFlag $defaultFlag defaultFlag
     */
    public function setDefaultFlag(mixed $defaultFlag): static
    {
        if (is_null($defaultFlag)) {
            throw new \InvalidArgumentException('non-nullable defaultFlag cannot be null');
        }
        $this->container['defaultFlag'] = $defaultFlag;

        return $this;
    }

    /**
     * Gets clientField1.
     *
     * @return mixed|null
     */
    public function getClientField1(): mixed
    {
        return $this->container['clientField1'];
    }

    /**
     * Sets clientField1.
     *
     * @param mixed $clientField1 clientField1
     */
    public function setClientField1(mixed $clientField1): static
    {
        if (is_null($clientField1)) {
            throw new \InvalidArgumentException('non-nullable clientField1 cannot be null');
        }
        $this->container['clientField1'] = $clientField1;

        return $this;
    }

    /**
     * Gets clientField2.
     *
     * @return mixed|null
     */
    public function getClientField2(): mixed
    {
        return $this->container['clientField2'];
    }

    /**
     * Sets clientField2.
     *
     * @param mixed $clientField2 clientField2
     */
    public function setClientField2(mixed $clientField2): static
    {
        if (is_null($clientField2)) {
            throw new \InvalidArgumentException('non-nullable clientField2 cannot be null');
        }
        $this->container['clientField2'] = $clientField2;

        return $this;
    }

    /**
     * Gets clientField3.
     *
     * @return mixed|null
     */
    public function getClientField3(): mixed
    {
        return $this->container['clientField3'];
    }

    /**
     * Sets clientField3.
     *
     * @param mixed $clientField3 clientField3
     */
    public function setClientField3(mixed $clientField3): static
    {
        if (is_null($clientField3)) {
            throw new \InvalidArgumentException('non-nullable clientField3 cannot be null');
        }
        $this->container['clientField3'] = $clientField3;

        return $this;
    }

    /**
     * Gets deleteFlag.
     *
     * @return PropertiesDeleteFlag|null
     */
    public function getDeleteFlag(): mixed
    {
        return $this->container['deleteFlag'];
    }

    /**
     * Sets deleteFlag.
     *
     * @param PropertiesDeleteFlag $deleteFlag deleteFlag
     */
    public function setDeleteFlag(mixed $deleteFlag): static
    {
        if (is_null($deleteFlag)) {
            throw new \InvalidArgumentException('non-nullable deleteFlag cannot be null');
        }
        $this->container['deleteFlag'] = $deleteFlag;

        return $this;
    }

    /**
     * Gets processDate.
     *
     * @return mixed|null
     */
    public function getProcessDate(): mixed
    {
        return $this->container['processDate'];
    }

    /**
     * Sets processDate.
     *
     * @param mixed $processDate processDate
     */
    public function setProcessDate(mixed $processDate): static
    {
        if (is_null($processDate)) {
            throw new \InvalidArgumentException('non-nullable processDate cannot be null');
        }
        $this->container['processDate'] = $processDate;

        return $this;
    }

    /**
     * Gets created.
     *
     * @return mixed|null
     */
    public function getCreated(): mixed
    {
        return $this->container['created'];
    }

    /**
     * Sets created.
     *
     * @param mixed $created created
     */
    public function setCreated(mixed $created): static
    {
        if (is_null($created)) {
            throw new \InvalidArgumentException('non-nullable created cannot be null');
        }
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets updated.
     *
     * @return mixed|null
     */
    public function getUpdated(): mixed
    {
        return $this->container['updated'];
    }

    /**
     * Sets updated.
     *
     * @param mixed $updated updated
     */
    public function setUpdated(mixed $updated): static
    {
        if (is_null($updated)) {
            throw new \InvalidArgumentException('non-nullable updated cannot be null');
        }
        $this->container['updated'] = $updated;

        return $this;
    }

    /**
     * Gets directdebit.
     *
     * @return Directdebit|null
     */
    public function getDirectdebit(): mixed
    {
        return $this->container['directdebit'];
    }

    /**
     * Sets directdebit.
     *
     * @param Directdebit|null $directdebit directdebit
     */
    public function setDirectdebit(mixed $directdebit): static
    {
        if (is_null($directdebit)) {
            $this->openAPINullablesSetToNull[] = 'directdebit';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('directdebit', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['directdebit'] = $directdebit;

        return $this;
    }

    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @see https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    public function jsonSerialize(): mixed
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object.
     */
    public function __toString(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
    }

    /**
     * Gets a header-safe presentation of the object.
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
