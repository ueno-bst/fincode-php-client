<?php

declare(strict_types=1);
/**
 * fincode API.
 *
 * fincodeのAPIリファレンスです。\\ fincodeは決済情報のほか様々なリソースを管理できるため、リソース指向なREST APIをベースとしたインターフェイス設計のもとでAPIを提供しています。\\ APIの呼び出しにはAPIキーによる認証が必要であり、リクエストの際に`Authorization`ヘッダーに有効なAPIキーをセットすることで認証できます。
 *
 * The version of the OpenAPI document: 1.2.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Fincode\Model;

use OpenAPI\Fincode\ObjectSerializer;

/**
 * @implements \ArrayAccess<string, mixed>
 */
class PlatformShopUpdatingResponse implements ModelInterface, \ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;
    /**
     * The original name of the model.
     */
    protected static string $openAPIModelName = 'PlatformShop.Updating.Response';
    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var array<string, string>
     */
    protected static array $openAPITypes = ['id' => 'string', 'shopName' => 'string', 'shopNameKana' => 'string', 'shopType' => '\OpenAPI\Fincode\Model\ShopType', 'platformId' => 'string', 'platformName' => 'string', 'sharedCustomerFlag' => 'string', 'customerGroupId' => 'string', 'platformRateList' => '\OpenAPI\Fincode\Model\PlatformRateConfig[]', 'sendMailAddress' => 'string', 'shopMailAddress' => 'string', 'logKeepDays' => 'int', 'apiVersion' => 'string', 'apiKeyDisplayFlag' => 'string', 'created' => 'string', 'updated' => 'string'];
    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var array<string, string|null>
     */
    protected static array $openAPIFormats = ['id' => null, 'shopName' => null, 'shopNameKana' => null, 'shopType' => null, 'platformId' => null, 'platformName' => null, 'sharedCustomerFlag' => null, 'customerGroupId' => null, 'platformRateList' => null, 'sendMailAddress' => null, 'shopMailAddress' => null, 'logKeepDays' => null, 'apiVersion' => null, 'apiKeyDisplayFlag' => null, 'created' => null, 'updated' => null];
    /**
     * Array of nullable properties. Used for (de)serialization.
     *
     * @var array<string, bool>
     */
    protected static array $openAPINullables = ['id' => false, 'shopName' => true, 'shopNameKana' => true, 'shopType' => false, 'platformId' => false, 'platformName' => true, 'sharedCustomerFlag' => true, 'customerGroupId' => true, 'platformRateList' => false, 'sendMailAddress' => true, 'shopMailAddress' => true, 'logKeepDays' => true, 'apiVersion' => true, 'apiKeyDisplayFlag' => true, 'created' => false, 'updated' => true];
    /**
     * If a nullable field gets set to null, insert it here.
     *
     * @var array<string, bool>
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return array<string, string|null>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties.
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null.
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null.
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable.
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }
    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = ['id' => 'id', 'shopName' => 'shop_name', 'shopNameKana' => 'shop_name_kana', 'shopType' => 'shop_type', 'platformId' => 'platform_id', 'platformName' => 'platform_name', 'sharedCustomerFlag' => 'shared_customer_flag', 'customerGroupId' => 'customer_group_id', 'platformRateList' => 'platform_rate_list', 'sendMailAddress' => 'send_mail_address', 'shopMailAddress' => 'shop_mail_address', 'logKeepDays' => 'log_keep_days', 'apiVersion' => 'api_version', 'apiKeyDisplayFlag' => 'api_key_display_flag', 'created' => 'created', 'updated' => 'updated'];
    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var array<string, string>
     */
    protected static array $setters = ['id' => 'setId', 'shopName' => 'setShopName', 'shopNameKana' => 'setShopNameKana', 'shopType' => 'setShopType', 'platformId' => 'setPlatformId', 'platformName' => 'setPlatformName', 'sharedCustomerFlag' => 'setSharedCustomerFlag', 'customerGroupId' => 'setCustomerGroupId', 'platformRateList' => 'setPlatformRateList', 'sendMailAddress' => 'setSendMailAddress', 'shopMailAddress' => 'setShopMailAddress', 'logKeepDays' => 'setLogKeepDays', 'apiVersion' => 'setApiVersion', 'apiKeyDisplayFlag' => 'setApiKeyDisplayFlag', 'created' => 'setCreated', 'updated' => 'setUpdated'];
    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var array<string, string>
     */
    protected static array $getters = ['id' => 'getId', 'shopName' => 'getShopName', 'shopNameKana' => 'getShopNameKana', 'shopType' => 'getShopType', 'platformId' => 'getPlatformId', 'platformName' => 'getPlatformName', 'sharedCustomerFlag' => 'getSharedCustomerFlag', 'customerGroupId' => 'getCustomerGroupId', 'platformRateList' => 'getPlatformRateList', 'sendMailAddress' => 'getSendMailAddress', 'shopMailAddress' => 'getShopMailAddress', 'logKeepDays' => 'getLogKeepDays', 'apiVersion' => 'getApiVersion', 'apiKeyDisplayFlag' => 'getApiKeyDisplayFlag', 'created' => 'getCreated', 'updated' => 'getUpdated'];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }
    public const SHARED_CUSTOMER_FLAG__0 = '0';
    public const SHARED_CUSTOMER_FLAG__1 = '1';
    public const API_KEY_DISPLAY_FLAG__0 = '0';
    public const API_KEY_DISPLAY_FLAG__1 = '1';

    /**
     * Gets allowable values of the enum.
     *
     * @return list<string>
     */
    public function getSharedCustomerFlagAllowableValues(): array
    {
        return [self::SHARED_CUSTOMER_FLAG__0, self::SHARED_CUSTOMER_FLAG__1];
    }

    /**
     * Gets allowable values of the enum.
     *
     * @return list<string>
     */
    public function getApiKeyDisplayFlagAllowableValues(): array
    {
        return [self::API_KEY_DISPLAY_FLAG__0, self::API_KEY_DISPLAY_FLAG__1];
    }
    /**
     * Associative array for storing property values.
     *
     * @phpstan-var array<string, mixed>
     *
     * @psalm-var array<string, mixed>
     */
    protected array $container = [];

    /**
     * Constructor.
     *
     * @param array<string, mixed> $data Associated array of property values
     *                                   initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('shopName', $data ?? [], null);
        $this->setIfExists('shopNameKana', $data ?? [], null);
        $this->setIfExists('shopType', $data ?? [], null);
        $this->setIfExists('platformId', $data ?? [], null);
        $this->setIfExists('platformName', $data ?? [], null);
        $this->setIfExists('sharedCustomerFlag', $data ?? [], null);
        $this->setIfExists('customerGroupId', $data ?? [], null);
        $this->setIfExists('platformRateList', $data ?? [], null);
        $this->setIfExists('sendMailAddress', $data ?? [], null);
        $this->setIfExists('shopMailAddress', $data ?? [], null);
        $this->setIfExists('logKeepDays', $data ?? [], null);
        $this->setIfExists('apiVersion', $data ?? [], null);
        $this->setIfExists('apiKeyDisplayFlag', $data ?? [], null);
        $this->setIfExists('created', $data ?? [], null);
        $this->setIfExists('updated', $data ?? [], null);
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array.
     *
     * @param array<string, mixed> $fields
     */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }
        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return list<string> invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];
        if (!is_null($this->container['id']) && mb_strlen($this->container['id']) > 13) {
            $invalidProperties[] = "invalid value for 'id', the character length must be smaller than or equal to 13.";
        }
        if (!is_null($this->container['id']) && mb_strlen($this->container['id']) < 13) {
            $invalidProperties[] = "invalid value for 'id', the character length must be bigger than or equal to 13.";
        }
        if (!is_null($this->container['shopName']) && mb_strlen($this->container['shopName']) > 20) {
            $invalidProperties[] = "invalid value for 'shopName', the character length must be smaller than or equal to 20.";
        }
        if (!is_null($this->container['shopName']) && mb_strlen($this->container['shopName']) < 1) {
            $invalidProperties[] = "invalid value for 'shopName', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['shopNameKana']) && mb_strlen($this->container['shopNameKana']) > 40) {
            $invalidProperties[] = "invalid value for 'shopNameKana', the character length must be smaller than or equal to 40.";
        }
        if (!is_null($this->container['shopNameKana']) && mb_strlen($this->container['shopNameKana']) < 1) {
            $invalidProperties[] = "invalid value for 'shopNameKana', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['platformId']) && mb_strlen($this->container['platformId']) > 13) {
            $invalidProperties[] = "invalid value for 'platformId', the character length must be smaller than or equal to 13.";
        }
        if (!is_null($this->container['platformId']) && mb_strlen($this->container['platformId']) < 13) {
            $invalidProperties[] = "invalid value for 'platformId', the character length must be bigger than or equal to 13.";
        }
        if (!is_null($this->container['platformName']) && mb_strlen($this->container['platformName']) > 50) {
            $invalidProperties[] = "invalid value for 'platformName', the character length must be smaller than or equal to 50.";
        }
        if (!is_null($this->container['platformName']) && mb_strlen($this->container['platformName']) < 1) {
            $invalidProperties[] = "invalid value for 'platformName', the character length must be bigger than or equal to 1.";
        }
        $allowedValues = $this->getSharedCustomerFlagAllowableValues();
        if (!is_null($this->container['sharedCustomerFlag']) && !in_array($this->container['sharedCustomerFlag'], $allowedValues, true)) {
            $invalidProperties[] = sprintf("invalid value '%s' for 'sharedCustomerFlag', must be one of '%s'", $this->container['sharedCustomerFlag'], implode("', '", $allowedValues));
        }
        if (!is_null($this->container['sharedCustomerFlag']) && mb_strlen($this->container['sharedCustomerFlag']) > 1) {
            $invalidProperties[] = "invalid value for 'sharedCustomerFlag', the character length must be smaller than or equal to 1.";
        }
        if (!is_null($this->container['sharedCustomerFlag']) && mb_strlen($this->container['sharedCustomerFlag']) < 1) {
            $invalidProperties[] = "invalid value for 'sharedCustomerFlag', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['customerGroupId']) && mb_strlen($this->container['customerGroupId']) > 13) {
            $invalidProperties[] = "invalid value for 'customerGroupId', the character length must be smaller than or equal to 13.";
        }
        if (!is_null($this->container['customerGroupId']) && mb_strlen($this->container['customerGroupId']) < 13) {
            $invalidProperties[] = "invalid value for 'customerGroupId', the character length must be bigger than or equal to 13.";
        }
        if (!is_null($this->container['sendMailAddress']) && mb_strlen($this->container['sendMailAddress']) > 255) {
            $invalidProperties[] = "invalid value for 'sendMailAddress', the character length must be smaller than or equal to 255.";
        }
        if (!is_null($this->container['sendMailAddress']) && mb_strlen($this->container['sendMailAddress']) < 1) {
            $invalidProperties[] = "invalid value for 'sendMailAddress', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['shopMailAddress']) && mb_strlen($this->container['shopMailAddress']) > 255) {
            $invalidProperties[] = "invalid value for 'shopMailAddress', the character length must be smaller than or equal to 255.";
        }
        if (!is_null($this->container['shopMailAddress']) && mb_strlen($this->container['shopMailAddress']) < 1) {
            $invalidProperties[] = "invalid value for 'shopMailAddress', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['logKeepDays']) && $this->container['logKeepDays'] > 9999) {
            $invalidProperties[] = "invalid value for 'logKeepDays', must be smaller than or equal to 9999.";
        }
        if (!is_null($this->container['logKeepDays']) && $this->container['logKeepDays'] < 0) {
            $invalidProperties[] = "invalid value for 'logKeepDays', must be bigger than or equal to 0.";
        }
        if (!is_null($this->container['apiVersion']) && mb_strlen($this->container['apiVersion']) > 8) {
            $invalidProperties[] = "invalid value for 'apiVersion', the character length must be smaller than or equal to 8.";
        }
        if (!is_null($this->container['apiVersion']) && mb_strlen($this->container['apiVersion']) < 1) {
            $invalidProperties[] = "invalid value for 'apiVersion', the character length must be bigger than or equal to 1.";
        }
        $allowedValues = $this->getApiKeyDisplayFlagAllowableValues();
        if (!is_null($this->container['apiKeyDisplayFlag']) && !in_array($this->container['apiKeyDisplayFlag'], $allowedValues, true)) {
            $invalidProperties[] = sprintf("invalid value '%s' for 'apiKeyDisplayFlag', must be one of '%s'", $this->container['apiKeyDisplayFlag'], implode("', '", $allowedValues));
        }
        if (!is_null($this->container['apiKeyDisplayFlag']) && mb_strlen($this->container['apiKeyDisplayFlag']) > 1) {
            $invalidProperties[] = "invalid value for 'apiKeyDisplayFlag', the character length must be smaller than or equal to 1.";
        }
        if (!is_null($this->container['apiKeyDisplayFlag']) && mb_strlen($this->container['apiKeyDisplayFlag']) < 1) {
            $invalidProperties[] = "invalid value for 'apiKeyDisplayFlag', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return 0 === count($this->listInvalidProperties());
    }

    /**
     * Gets id.
     *
     * @return string|null
     */
    public function getId(): mixed
    {
        return $this->container['id'];
    }

    /**
     * Sets id.
     *
     * @param string $id ショップID
     */
    public function setId(mixed $id): static
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        if (mb_strlen($id) > 13) {
            throw new \InvalidArgumentException('invalid length for $id when calling PlatformShopUpdatingResponse., must be smaller than or equal to 13.');
        }
        if (mb_strlen($id) < 13) {
            throw new \InvalidArgumentException('invalid length for $id when calling PlatformShopUpdatingResponse., must be bigger than or equal to 13.');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets shopName.
     *
     * @return string|null
     */
    public function getShopName(): mixed
    {
        return $this->container['shopName'];
    }

    /**
     * Sets shopName.
     *
     * @param string|null $shopName ショップ名
     */
    public function setShopName(mixed $shopName): static
    {
        if (is_null($shopName)) {
            $this->openAPINullablesSetToNull[] = 'shopName';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shopName', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($shopName) && mb_strlen($shopName) > 20) {
            throw new \InvalidArgumentException('invalid length for $shopName when calling PlatformShopUpdatingResponse., must be smaller than or equal to 20.');
        }
        if (!is_null($shopName) && mb_strlen($shopName) < 1) {
            throw new \InvalidArgumentException('invalid length for $shopName when calling PlatformShopUpdatingResponse., must be bigger than or equal to 1.');
        }
        $this->container['shopName'] = $shopName;

        return $this;
    }

    /**
     * Gets shopNameKana.
     *
     * @return string|null
     */
    public function getShopNameKana(): mixed
    {
        return $this->container['shopNameKana'];
    }

    /**
     * Sets shopNameKana.
     *
     * @param string|null $shopNameKana ショップ名（カナ）
     */
    public function setShopNameKana(mixed $shopNameKana): static
    {
        if (is_null($shopNameKana)) {
            $this->openAPINullablesSetToNull[] = 'shopNameKana';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shopNameKana', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($shopNameKana) && mb_strlen($shopNameKana) > 40) {
            throw new \InvalidArgumentException('invalid length for $shopNameKana when calling PlatformShopUpdatingResponse., must be smaller than or equal to 40.');
        }
        if (!is_null($shopNameKana) && mb_strlen($shopNameKana) < 1) {
            throw new \InvalidArgumentException('invalid length for $shopNameKana when calling PlatformShopUpdatingResponse., must be bigger than or equal to 1.');
        }
        $this->container['shopNameKana'] = $shopNameKana;

        return $this;
    }

    /**
     * Gets shopType.
     *
     * @return ShopType|null
     */
    public function getShopType(): mixed
    {
        return $this->container['shopType'];
    }

    /**
     * Sets shopType.
     *
     * @param ShopType $shopType shopType
     */
    public function setShopType(mixed $shopType): static
    {
        if (is_null($shopType)) {
            throw new \InvalidArgumentException('non-nullable shopType cannot be null');
        }
        $this->container['shopType'] = $shopType;

        return $this;
    }

    /**
     * Gets platformId.
     *
     * @return string|null
     */
    public function getPlatformId(): mixed
    {
        return $this->container['platformId'];
    }

    /**
     * Sets platformId.
     *
     * @param string $platformId プラットフォームID
     */
    public function setPlatformId(mixed $platformId): static
    {
        if (is_null($platformId)) {
            throw new \InvalidArgumentException('non-nullable platformId cannot be null');
        }
        if (mb_strlen($platformId) > 13) {
            throw new \InvalidArgumentException('invalid length for $platformId when calling PlatformShopUpdatingResponse., must be smaller than or equal to 13.');
        }
        if (mb_strlen($platformId) < 13) {
            throw new \InvalidArgumentException('invalid length for $platformId when calling PlatformShopUpdatingResponse., must be bigger than or equal to 13.');
        }
        $this->container['platformId'] = $platformId;

        return $this;
    }

    /**
     * Gets platformName.
     *
     * @return string|null
     */
    public function getPlatformName(): mixed
    {
        return $this->container['platformName'];
    }

    /**
     * Sets platformName.
     *
     * @param string|null $platformName プラットフォーム名
     */
    public function setPlatformName(mixed $platformName): static
    {
        if (is_null($platformName)) {
            $this->openAPINullablesSetToNull[] = 'platformName';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('platformName', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($platformName) && mb_strlen($platformName) > 50) {
            throw new \InvalidArgumentException('invalid length for $platformName when calling PlatformShopUpdatingResponse., must be smaller than or equal to 50.');
        }
        if (!is_null($platformName) && mb_strlen($platformName) < 1) {
            throw new \InvalidArgumentException('invalid length for $platformName when calling PlatformShopUpdatingResponse., must be bigger than or equal to 1.');
        }
        $this->container['platformName'] = $platformName;

        return $this;
    }

    /**
     * Gets sharedCustomerFlag.
     *
     * @return string|null
     */
    public function getSharedCustomerFlag(): mixed
    {
        return $this->container['sharedCustomerFlag'];
    }

    /**
     * Sets sharedCustomerFlag.
     *
     * @param string|null $sharedCustomerFlag 顧客情報共有フラグ  - `0`: 顧客情報を共有しない<br /><span class=\"smallText\">顧客情報は各テナントごとに管理され、各テナントは自ショップに登録された顧客に対してのみ決済を行えます。</span> - `1`: 顧客情報を共有する<br /><span class=\"smallText\">顧客情報はプラットフォーム全体で共有され、いずれのテナントもいずれの顧客に対し決済を行えます。</span>
     */
    public function setSharedCustomerFlag(mixed $sharedCustomerFlag): static
    {
        if (is_null($sharedCustomerFlag)) {
            $this->openAPINullablesSetToNull[] = 'sharedCustomerFlag';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sharedCustomerFlag', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getSharedCustomerFlagAllowableValues();
        if (!is_null($sharedCustomerFlag) && !in_array($sharedCustomerFlag, $allowedValues, true)) {
            throw new \InvalidArgumentException(sprintf("Invalid value '%s' for 'sharedCustomerFlag', must be one of '%s'", $sharedCustomerFlag, implode("', '", $allowedValues)));
        }
        if (!is_null($sharedCustomerFlag) && mb_strlen($sharedCustomerFlag) > 1) {
            throw new \InvalidArgumentException('invalid length for $sharedCustomerFlag when calling PlatformShopUpdatingResponse., must be smaller than or equal to 1.');
        }
        if (!is_null($sharedCustomerFlag) && mb_strlen($sharedCustomerFlag) < 1) {
            throw new \InvalidArgumentException('invalid length for $sharedCustomerFlag when calling PlatformShopUpdatingResponse., must be bigger than or equal to 1.');
        }
        $this->container['sharedCustomerFlag'] = $sharedCustomerFlag;

        return $this;
    }

    /**
     * Gets customerGroupId.
     *
     * @return string|null
     */
    public function getCustomerGroupId(): mixed
    {
        return $this->container['customerGroupId'];
    }

    /**
     * Sets customerGroupId.
     *
     * @param string|null $customerGroupId 顧客情報共有グループID\\ fincodeは同じ顧客情報共有グループIDを持つショップ間で顧客情報を共有します
     */
    public function setCustomerGroupId(mixed $customerGroupId): static
    {
        if (is_null($customerGroupId)) {
            $this->openAPINullablesSetToNull[] = 'customerGroupId';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customerGroupId', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($customerGroupId) && mb_strlen($customerGroupId) > 13) {
            throw new \InvalidArgumentException('invalid length for $customerGroupId when calling PlatformShopUpdatingResponse., must be smaller than or equal to 13.');
        }
        if (!is_null($customerGroupId) && mb_strlen($customerGroupId) < 13) {
            throw new \InvalidArgumentException('invalid length for $customerGroupId when calling PlatformShopUpdatingResponse., must be bigger than or equal to 13.');
        }
        $this->container['customerGroupId'] = $customerGroupId;

        return $this;
    }

    /**
     * Gets platformRateList.
     *
     * @return \OpenAPI\Fincode\Model\PlatformRateConfig[]|null
     */
    public function getPlatformRateList(): mixed
    {
        return $this->container['platformRateList'];
    }

    /**
     * Sets platformRateList.
     *
     * @param \OpenAPI\Fincode\Model\PlatformRateConfig[] $platformRateList 決済手段ごとに存在するプラットフォーム手数料設定のリスト
     */
    public function setPlatformRateList(mixed $platformRateList): static
    {
        if (is_null($platformRateList)) {
            throw new \InvalidArgumentException('non-nullable platformRateList cannot be null');
        }
        $this->container['platformRateList'] = $platformRateList;

        return $this;
    }

    /**
     * Gets sendMailAddress.
     *
     * @return string|null
     */
    public function getSendMailAddress(): mixed
    {
        return $this->container['sendMailAddress'];
    }

    /**
     * Sets sendMailAddress.
     *
     * @param string|null $sendMailAddress 通知先メールアドレス
     */
    public function setSendMailAddress(mixed $sendMailAddress): static
    {
        if (is_null($sendMailAddress)) {
            $this->openAPINullablesSetToNull[] = 'sendMailAddress';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sendMailAddress', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($sendMailAddress) && mb_strlen($sendMailAddress) > 255) {
            throw new \InvalidArgumentException('invalid length for $sendMailAddress when calling PlatformShopUpdatingResponse., must be smaller than or equal to 255.');
        }
        if (!is_null($sendMailAddress) && mb_strlen($sendMailAddress) < 1) {
            throw new \InvalidArgumentException('invalid length for $sendMailAddress when calling PlatformShopUpdatingResponse., must be bigger than or equal to 1.');
        }
        $this->container['sendMailAddress'] = $sendMailAddress;

        return $this;
    }

    /**
     * Gets shopMailAddress.
     *
     * @return string|null
     */
    public function getShopMailAddress(): mixed
    {
        return $this->container['shopMailAddress'];
    }

    /**
     * Sets shopMailAddress.
     *
     * @param string|null $shopMailAddress ショップメールアドレス
     */
    public function setShopMailAddress(mixed $shopMailAddress): static
    {
        if (is_null($shopMailAddress)) {
            $this->openAPINullablesSetToNull[] = 'shopMailAddress';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shopMailAddress', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($shopMailAddress) && mb_strlen($shopMailAddress) > 255) {
            throw new \InvalidArgumentException('invalid length for $shopMailAddress when calling PlatformShopUpdatingResponse., must be smaller than or equal to 255.');
        }
        if (!is_null($shopMailAddress) && mb_strlen($shopMailAddress) < 1) {
            throw new \InvalidArgumentException('invalid length for $shopMailAddress when calling PlatformShopUpdatingResponse., must be bigger than or equal to 1.');
        }
        $this->container['shopMailAddress'] = $shopMailAddress;

        return $this;
    }

    /**
     * Gets logKeepDays.
     *
     * @return int|null
     */
    public function getLogKeepDays(): mixed
    {
        return $this->container['logKeepDays'];
    }

    /**
     * Sets logKeepDays.
     *
     * @param int|null $logKeepDays ログ保存日数
     */
    public function setLogKeepDays(mixed $logKeepDays): static
    {
        if (is_null($logKeepDays)) {
            $this->openAPINullablesSetToNull[] = 'logKeepDays';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('logKeepDays', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($logKeepDays) && $logKeepDays > 9999) {
            throw new \InvalidArgumentException('invalid value for $logKeepDays when calling PlatformShopUpdatingResponse., must be smaller than or equal to 9999.');
        }
        if (!is_null($logKeepDays) && $logKeepDays < 0) {
            throw new \InvalidArgumentException('invalid value for $logKeepDays when calling PlatformShopUpdatingResponse., must be bigger than or equal to 0.');
        }
        $this->container['logKeepDays'] = $logKeepDays;

        return $this;
    }

    /**
     * Gets apiVersion.
     *
     * @return string|null
     */
    public function getApiVersion(): mixed
    {
        return $this->container['apiVersion'];
    }

    /**
     * Sets apiVersion.
     *
     * @param string|null $apiVersion APIバージョン
     */
    public function setApiVersion(mixed $apiVersion): static
    {
        if (is_null($apiVersion)) {
            $this->openAPINullablesSetToNull[] = 'apiVersion';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('apiVersion', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($apiVersion) && mb_strlen($apiVersion) > 8) {
            throw new \InvalidArgumentException('invalid length for $apiVersion when calling PlatformShopUpdatingResponse., must be smaller than or equal to 8.');
        }
        if (!is_null($apiVersion) && mb_strlen($apiVersion) < 1) {
            throw new \InvalidArgumentException('invalid length for $apiVersion when calling PlatformShopUpdatingResponse., must be bigger than or equal to 1.');
        }
        $this->container['apiVersion'] = $apiVersion;

        return $this;
    }

    /**
     * Gets apiKeyDisplayFlag.
     *
     * @return string|null
     */
    public function getApiKeyDisplayFlag(): mixed
    {
        return $this->container['apiKeyDisplayFlag'];
    }

    /**
     * Sets apiKeyDisplayFlag.
     *
     * @param string|null $apiKeyDisplayFlag 管理画面におけるAPIキー表示フラグ。  - `0`: 表示しない - `1`: 表示する
     */
    public function setApiKeyDisplayFlag(mixed $apiKeyDisplayFlag): static
    {
        if (is_null($apiKeyDisplayFlag)) {
            $this->openAPINullablesSetToNull[] = 'apiKeyDisplayFlag';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('apiKeyDisplayFlag', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getApiKeyDisplayFlagAllowableValues();
        if (!is_null($apiKeyDisplayFlag) && !in_array($apiKeyDisplayFlag, $allowedValues, true)) {
            throw new \InvalidArgumentException(sprintf("Invalid value '%s' for 'apiKeyDisplayFlag', must be one of '%s'", $apiKeyDisplayFlag, implode("', '", $allowedValues)));
        }
        if (!is_null($apiKeyDisplayFlag) && mb_strlen($apiKeyDisplayFlag) > 1) {
            throw new \InvalidArgumentException('invalid length for $apiKeyDisplayFlag when calling PlatformShopUpdatingResponse., must be smaller than or equal to 1.');
        }
        if (!is_null($apiKeyDisplayFlag) && mb_strlen($apiKeyDisplayFlag) < 1) {
            throw new \InvalidArgumentException('invalid length for $apiKeyDisplayFlag when calling PlatformShopUpdatingResponse., must be bigger than or equal to 1.');
        }
        $this->container['apiKeyDisplayFlag'] = $apiKeyDisplayFlag;

        return $this;
    }

    /**
     * Gets created.
     *
     * @return string|null
     */
    public function getCreated(): mixed
    {
        return $this->container['created'];
    }

    /**
     * Sets created.
     *
     * @param string $created 作成日\\ 形式：`yyyy/MM/dd HH:mm:ss.SSS`
     */
    public function setCreated(mixed $created): static
    {
        if (is_null($created)) {
            throw new \InvalidArgumentException('non-nullable created cannot be null');
        }
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets updated.
     *
     * @return string|null
     */
    public function getUpdated(): mixed
    {
        return $this->container['updated'];
    }

    /**
     * Sets updated.
     *
     * @param string|null $updated 更新日\\ 形式：`yyyy/MM/dd HH:mm:ss.SSS`
     */
    public function setUpdated(mixed $updated): static
    {
        if (is_null($updated)) {
            $this->openAPINullablesSetToNull[] = 'updated';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('updated', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['updated'] = $updated;

        return $this;
    }

    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @see https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    public function jsonSerialize(): mixed
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object.
     */
    public function __toString(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
    }

    /**
     * Gets a header-safe presentation of the object.
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
