<?php

declare(strict_types=1);
/**
 * fincode API.
 *
 * fincodeのAPIリファレンスです。\\ fincodeは決済情報のほか様々なリソースを管理できるため、リソース指向なREST APIをベースとしたインターフェイス設計のもとでAPIを提供しています。\\ APIの呼び出しにはAPIキーによる認証が必要であり、リクエストの際に`Authorization`ヘッダーに有効なAPIキーをセットすることで認証できます。
 *
 * The version of the OpenAPI document: 1.2.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Fincode\Model;

use OpenAPI\Fincode\ObjectSerializer;

/**
 * @implements \ArrayAccess<string, mixed>
 */
class CreatePaymentRequest implements ModelInterface, \ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;
    /**
     * The original name of the model.
     */
    protected static string $openAPIModelName = 'createPayment_request';
    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var array<string, string>
     */
    protected static array $openAPITypes = ['id' => 'string', 'payType' => '\OpenAPI\Fincode\Model\PayType', 'jobCode' => '\OpenAPI\Fincode\Model\PayPayPaymentJobCode', 'amount' => 'string', 'tax' => 'string', 'tdsType' => '\OpenAPI\Fincode\Model\TdsType', 'tds2Type' => '\OpenAPI\Fincode\Model\Tds2Type', 'tdTenantName' => 'string', 'clientField1' => 'string', 'clientField2' => 'string', 'clientField3' => 'string', 'itemCode' => 'string', 'orderDescription' => 'string', 'remarks' => 'string', 'billingAmount' => 'string', 'billingTax' => 'string'];
    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var array<string, string|null>
     */
    protected static array $openAPIFormats = ['id' => null, 'payType' => null, 'jobCode' => null, 'amount' => null, 'tax' => null, 'tdsType' => null, 'tds2Type' => null, 'tdTenantName' => null, 'clientField1' => null, 'clientField2' => null, 'clientField3' => null, 'itemCode' => null, 'orderDescription' => null, 'remarks' => null, 'billingAmount' => null, 'billingTax' => null];
    /**
     * Array of nullable properties. Used for (de)serialization.
     *
     * @var array<string, bool>
     */
    protected static array $openAPINullables = ['id' => false, 'payType' => false, 'jobCode' => false, 'amount' => false, 'tax' => true, 'tdsType' => true, 'tds2Type' => true, 'tdTenantName' => true, 'clientField1' => true, 'clientField2' => true, 'clientField3' => true, 'itemCode' => true, 'orderDescription' => true, 'remarks' => true, 'billingAmount' => false, 'billingTax' => true];
    /**
     * If a nullable field gets set to null, insert it here.
     *
     * @var array<string, bool>
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return array<string, string|null>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties.
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null.
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null.
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable.
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }
    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = ['id' => 'id', 'payType' => 'pay_type', 'jobCode' => 'job_code', 'amount' => 'amount', 'tax' => 'tax', 'tdsType' => 'tds_type', 'tds2Type' => 'tds2_type', 'tdTenantName' => 'td_tenant_name', 'clientField1' => 'client_field_1', 'clientField2' => 'client_field_2', 'clientField3' => 'client_field_3', 'itemCode' => 'item_code', 'orderDescription' => 'order_description', 'remarks' => 'remarks', 'billingAmount' => 'billing_amount', 'billingTax' => 'billing_tax'];
    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var array<string, string>
     */
    protected static array $setters = ['id' => 'setId', 'payType' => 'setPayType', 'jobCode' => 'setJobCode', 'amount' => 'setAmount', 'tax' => 'setTax', 'tdsType' => 'setTdsType', 'tds2Type' => 'setTds2Type', 'tdTenantName' => 'setTdTenantName', 'clientField1' => 'setClientField1', 'clientField2' => 'setClientField2', 'clientField3' => 'setClientField3', 'itemCode' => 'setItemCode', 'orderDescription' => 'setOrderDescription', 'remarks' => 'setRemarks', 'billingAmount' => 'setBillingAmount', 'billingTax' => 'setBillingTax'];
    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var array<string, string>
     */
    protected static array $getters = ['id' => 'getId', 'payType' => 'getPayType', 'jobCode' => 'getJobCode', 'amount' => 'getAmount', 'tax' => 'getTax', 'tdsType' => 'getTdsType', 'tds2Type' => 'getTds2Type', 'tdTenantName' => 'getTdTenantName', 'clientField1' => 'getClientField1', 'clientField2' => 'getClientField2', 'clientField3' => 'getClientField3', 'itemCode' => 'getItemCode', 'orderDescription' => 'getOrderDescription', 'remarks' => 'getRemarks', 'billingAmount' => 'getBillingAmount', 'billingTax' => 'getBillingTax'];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }
    /**
     * Associative array for storing property values.
     *
     * @phpstan-var array<string, mixed>
     *
     * @psalm-var array<string, mixed>
     */
    protected array $container = [];

    /**
     * Constructor.
     *
     * @param array<string, mixed> $data Associated array of property values
     *                                   initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('payType', $data ?? [], null);
        $this->setIfExists('jobCode', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('tax', $data ?? [], null);
        $this->setIfExists('tdsType', $data ?? [], null);
        $this->setIfExists('tds2Type', $data ?? [], null);
        $this->setIfExists('tdTenantName', $data ?? [], null);
        $this->setIfExists('clientField1', $data ?? [], null);
        $this->setIfExists('clientField2', $data ?? [], null);
        $this->setIfExists('clientField3', $data ?? [], null);
        $this->setIfExists('itemCode', $data ?? [], null);
        $this->setIfExists('orderDescription', $data ?? [], null);
        $this->setIfExists('remarks', $data ?? [], null);
        $this->setIfExists('billingAmount', $data ?? [], null);
        $this->setIfExists('billingTax', $data ?? [], null);
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array.
     *
     * @param array<string, mixed> $fields
     */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }
        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return list<string> invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];
        if (!is_null($this->container['id']) && mb_strlen($this->container['id']) > 30) {
            $invalidProperties[] = "invalid value for 'id', the character length must be smaller than or equal to 30.";
        }
        if (!is_null($this->container['id']) && mb_strlen($this->container['id']) < 1) {
            $invalidProperties[] = "invalid value for 'id', the character length must be bigger than or equal to 1.";
        }
        if (null === $this->container['payType']) {
            $invalidProperties[] = "'payType' can't be null";
        }
        if (null === $this->container['jobCode']) {
            $invalidProperties[] = "'jobCode' can't be null";
        }
        if (null === $this->container['amount']) {
            $invalidProperties[] = "'amount' can't be null";
        }
        if (mb_strlen($this->container['amount']) > 10) {
            $invalidProperties[] = "invalid value for 'amount', the character length must be smaller than or equal to 10.";
        }
        if (mb_strlen($this->container['amount']) < 1) {
            $invalidProperties[] = "invalid value for 'amount', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['tax']) && mb_strlen($this->container['tax']) > 10) {
            $invalidProperties[] = "invalid value for 'tax', the character length must be smaller than or equal to 10.";
        }
        if (!is_null($this->container['tax']) && mb_strlen($this->container['tax']) < 1) {
            $invalidProperties[] = "invalid value for 'tax', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['tdTenantName']) && mb_strlen($this->container['tdTenantName']) > 25) {
            $invalidProperties[] = "invalid value for 'tdTenantName', the character length must be smaller than or equal to 25.";
        }
        if (!is_null($this->container['clientField1']) && mb_strlen($this->container['clientField1']) > 100) {
            $invalidProperties[] = "invalid value for 'clientField1', the character length must be smaller than or equal to 100.";
        }
        if (!is_null($this->container['clientField1']) && mb_strlen($this->container['clientField1']) < 1) {
            $invalidProperties[] = "invalid value for 'clientField1', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['clientField2']) && mb_strlen($this->container['clientField2']) > 100) {
            $invalidProperties[] = "invalid value for 'clientField2', the character length must be smaller than or equal to 100.";
        }
        if (!is_null($this->container['clientField2']) && mb_strlen($this->container['clientField2']) < 1) {
            $invalidProperties[] = "invalid value for 'clientField2', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['clientField3']) && mb_strlen($this->container['clientField3']) > 100) {
            $invalidProperties[] = "invalid value for 'clientField3', the character length must be smaller than or equal to 100.";
        }
        if (!is_null($this->container['clientField3']) && mb_strlen($this->container['clientField3']) < 1) {
            $invalidProperties[] = "invalid value for 'clientField3', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['itemCode']) && mb_strlen($this->container['itemCode']) > 7) {
            $invalidProperties[] = "invalid value for 'itemCode', the character length must be smaller than or equal to 7.";
        }
        if (!is_null($this->container['itemCode']) && mb_strlen($this->container['itemCode']) < 7) {
            $invalidProperties[] = "invalid value for 'itemCode', the character length must be bigger than or equal to 7.";
        }
        if (!is_null($this->container['orderDescription']) && mb_strlen($this->container['orderDescription']) > 100) {
            $invalidProperties[] = "invalid value for 'orderDescription', the character length must be smaller than or equal to 100.";
        }
        if (!is_null($this->container['remarks']) && mb_strlen($this->container['remarks']) > 9) {
            $invalidProperties[] = "invalid value for 'remarks', the character length must be smaller than or equal to 9.";
        }
        if (!is_null($this->container['remarks']) && mb_strlen($this->container['remarks']) < 1) {
            $invalidProperties[] = "invalid value for 'remarks', the character length must be bigger than or equal to 1.";
        }
        if (null === $this->container['billingAmount']) {
            $invalidProperties[] = "'billingAmount' can't be null";
        }
        if (mb_strlen($this->container['billingAmount']) > 10) {
            $invalidProperties[] = "invalid value for 'billingAmount', the character length must be smaller than or equal to 10.";
        }
        if (mb_strlen($this->container['billingAmount']) < 1) {
            $invalidProperties[] = "invalid value for 'billingAmount', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['billingTax']) && mb_strlen($this->container['billingTax']) > 10) {
            $invalidProperties[] = "invalid value for 'billingTax', the character length must be smaller than or equal to 10.";
        }
        if (!is_null($this->container['billingTax']) && mb_strlen($this->container['billingTax']) < 1) {
            $invalidProperties[] = "invalid value for 'billingTax', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return 0 === count($this->listInvalidProperties());
    }

    /**
     * Gets id.
     *
     * @return string|null
     */
    public function getId(): mixed
    {
        return $this->container['id'];
    }

    /**
     * Sets id.
     *
     * @param string $id オーダーID\\ 決済情報のIDです
     */
    public function setId(mixed $id): static
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        if (mb_strlen($id) > 30) {
            throw new \InvalidArgumentException('invalid length for $id when calling CreatePaymentRequest., must be smaller than or equal to 30.');
        }
        if (mb_strlen($id) < 1) {
            throw new \InvalidArgumentException('invalid length for $id when calling CreatePaymentRequest., must be bigger than or equal to 1.');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets payType.
     *
     * @return PayType
     */
    public function getPayType(): mixed
    {
        return $this->container['payType'];
    }

    /**
     * Sets payType.
     *
     * @param PayType $payType 決済種別\\ この決済で利用する決済手段です。  - `Virtualaccount`: 銀行振込
     */
    public function setPayType(mixed $payType): static
    {
        if (is_null($payType)) {
            throw new \InvalidArgumentException('non-nullable payType cannot be null');
        }
        $this->container['payType'] = $payType;

        return $this;
    }

    /**
     * Gets jobCode.
     *
     * @return PayPayPaymentJobCode
     */
    public function getJobCode(): mixed
    {
        return $this->container['jobCode'];
    }

    /**
     * Sets jobCode.
     *
     * @param PayPayPaymentJobCode $jobCode jobCode
     */
    public function setJobCode(mixed $jobCode): static
    {
        if (is_null($jobCode)) {
            throw new \InvalidArgumentException('non-nullable jobCode cannot be null');
        }
        $this->container['jobCode'] = $jobCode;

        return $this;
    }

    /**
     * Gets amount.
     *
     * @return string
     */
    public function getAmount(): mixed
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount.
     *
     * @param string $amount 利用金額\\ `tax`との合計値が決済手段ごとに定められた決済金額の範囲内に収まる必要があります。\\ 参照： [口座振替 > 制限事項 > 利用可能な金額](https://docs.fincode.jp/payment/directdebit/restriction)
     */
    public function setAmount(mixed $amount): static
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        if (mb_strlen($amount) > 10) {
            throw new \InvalidArgumentException('invalid length for $amount when calling CreatePaymentRequest., must be smaller than or equal to 10.');
        }
        if (mb_strlen($amount) < 1) {
            throw new \InvalidArgumentException('invalid length for $amount when calling CreatePaymentRequest., must be bigger than or equal to 1.');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets tax.
     *
     * @return string|null
     */
    public function getTax(): mixed
    {
        return $this->container['tax'];
    }

    /**
     * Sets tax.
     *
     * @param string|null $tax 税送料\\ `amount`との合計値が決済手段ごとに定められた決済金額の範囲内に収まる必要があります。\\ 参照： [口座振替 > 制限事項 > 利用可能な金額](https://docs.fincode.jp/payment/directdebit/restriction)
     */
    public function setTax(mixed $tax): static
    {
        if (is_null($tax)) {
            $this->openAPINullablesSetToNull[] = 'tax';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tax', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($tax) && mb_strlen($tax) > 10) {
            throw new \InvalidArgumentException('invalid length for $tax when calling CreatePaymentRequest., must be smaller than or equal to 10.');
        }
        if (!is_null($tax) && mb_strlen($tax) < 1) {
            throw new \InvalidArgumentException('invalid length for $tax when calling CreatePaymentRequest., must be bigger than or equal to 1.');
        }
        $this->container['tax'] = $tax;

        return $this;
    }

    /**
     * Gets tdsType.
     *
     * @return TdsType|null
     */
    public function getTdsType(): mixed
    {
        return $this->container['tdsType'];
    }

    /**
     * Sets tdsType.
     *
     * @param TdsType|null $tdsType tdsType
     */
    public function setTdsType(mixed $tdsType): static
    {
        if (is_null($tdsType)) {
            $this->openAPINullablesSetToNull[] = 'tdsType';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tdsType', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tdsType'] = $tdsType;

        return $this;
    }

    /**
     * Gets tds2Type.
     *
     * @return Tds2Type|null
     */
    public function getTds2Type(): mixed
    {
        return $this->container['tds2Type'];
    }

    /**
     * Sets tds2Type.
     *
     * @param Tds2Type|null $tds2Type tds2Type
     */
    public function setTds2Type(mixed $tds2Type): static
    {
        if (is_null($tds2Type)) {
            $this->openAPINullablesSetToNull[] = 'tds2Type';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tds2Type', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tds2Type'] = $tds2Type;

        return $this;
    }

    /**
     * Gets tdTenantName.
     *
     * @return string|null
     */
    public function getTdTenantName(): mixed
    {
        return $this->container['tdTenantName'];
    }

    /**
     * Sets tdTenantName.
     *
     * @param string|null $tdTenantName <span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\ 加盟店名。\\ 3Dセキュア認証の際に表示されるショップ名や加盟店名を指定できます。\\ 使用可能な文字は以下の通りです。 - 半角英数 - 半角記号： !\"#$%&'()*+,-./:;<=>?@[\\]`^_{|}~ - 半角スペース  未指定の場合、 カード決済の契約時にfincodeが下記の形式に従って設定した値が自動的に使用されます。\\ \\ 形式：`{{ショップID}}-{{英数字からなる固定値}}`
     */
    public function setTdTenantName(mixed $tdTenantName): static
    {
        if (is_null($tdTenantName)) {
            $this->openAPINullablesSetToNull[] = 'tdTenantName';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tdTenantName', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($tdTenantName) && mb_strlen($tdTenantName) > 25) {
            throw new \InvalidArgumentException('invalid length for $tdTenantName when calling CreatePaymentRequest., must be smaller than or equal to 25.');
        }
        $this->container['tdTenantName'] = $tdTenantName;

        return $this;
    }

    /**
     * Gets clientField1.
     *
     * @return string|null
     */
    public function getClientField1(): mixed
    {
        return $this->container['clientField1'];
    }

    /**
     * Sets clientField1.
     *
     * @param string|null $clientField1 加盟店自由項目 1\\ 任意の値を挿入し、決済情報に保存できます
     */
    public function setClientField1(mixed $clientField1): static
    {
        if (is_null($clientField1)) {
            $this->openAPINullablesSetToNull[] = 'clientField1';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('clientField1', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($clientField1) && mb_strlen($clientField1) > 100) {
            throw new \InvalidArgumentException('invalid length for $clientField1 when calling CreatePaymentRequest., must be smaller than or equal to 100.');
        }
        if (!is_null($clientField1) && mb_strlen($clientField1) < 1) {
            throw new \InvalidArgumentException('invalid length for $clientField1 when calling CreatePaymentRequest., must be bigger than or equal to 1.');
        }
        $this->container['clientField1'] = $clientField1;

        return $this;
    }

    /**
     * Gets clientField2.
     *
     * @return string|null
     */
    public function getClientField2(): mixed
    {
        return $this->container['clientField2'];
    }

    /**
     * Sets clientField2.
     *
     * @param string|null $clientField2 加盟店自由項目 2
     */
    public function setClientField2(mixed $clientField2): static
    {
        if (is_null($clientField2)) {
            $this->openAPINullablesSetToNull[] = 'clientField2';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('clientField2', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($clientField2) && mb_strlen($clientField2) > 100) {
            throw new \InvalidArgumentException('invalid length for $clientField2 when calling CreatePaymentRequest., must be smaller than or equal to 100.');
        }
        if (!is_null($clientField2) && mb_strlen($clientField2) < 1) {
            throw new \InvalidArgumentException('invalid length for $clientField2 when calling CreatePaymentRequest., must be bigger than or equal to 1.');
        }
        $this->container['clientField2'] = $clientField2;

        return $this;
    }

    /**
     * Gets clientField3.
     *
     * @return string|null
     */
    public function getClientField3(): mixed
    {
        return $this->container['clientField3'];
    }

    /**
     * Sets clientField3.
     *
     * @param string|null $clientField3 加盟店自由項目 3
     */
    public function setClientField3(mixed $clientField3): static
    {
        if (is_null($clientField3)) {
            $this->openAPINullablesSetToNull[] = 'clientField3';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('clientField3', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($clientField3) && mb_strlen($clientField3) > 100) {
            throw new \InvalidArgumentException('invalid length for $clientField3 when calling CreatePaymentRequest., must be smaller than or equal to 100.');
        }
        if (!is_null($clientField3) && mb_strlen($clientField3) < 1) {
            throw new \InvalidArgumentException('invalid length for $clientField3 when calling CreatePaymentRequest., must be bigger than or equal to 1.');
        }
        $this->container['clientField3'] = $clientField3;

        return $this;
    }

    /**
     * Gets itemCode.
     *
     * @return string|null
     */
    public function getItemCode(): mixed
    {
        return $this->container['itemCode'];
    }

    /**
     * Sets itemCode.
     *
     * @param string|null $itemCode 商品コード
     */
    public function setItemCode(mixed $itemCode): static
    {
        if (is_null($itemCode)) {
            $this->openAPINullablesSetToNull[] = 'itemCode';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('itemCode', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($itemCode) && mb_strlen($itemCode) > 7) {
            throw new \InvalidArgumentException('invalid length for $itemCode when calling CreatePaymentRequest., must be smaller than or equal to 7.');
        }
        if (!is_null($itemCode) && mb_strlen($itemCode) < 7) {
            throw new \InvalidArgumentException('invalid length for $itemCode when calling CreatePaymentRequest., must be bigger than or equal to 7.');
        }
        $this->container['itemCode'] = $itemCode;

        return $this;
    }

    /**
     * Gets orderDescription.
     *
     * @return string|null
     */
    public function getOrderDescription(): mixed
    {
        return $this->container['orderDescription'];
    }

    /**
     * Sets orderDescription.
     *
     * @param string|null $orderDescription 注文内容の説明\\ 購入者のPayPayアプリ上で表示される注文内容の説明
     */
    public function setOrderDescription(mixed $orderDescription): static
    {
        if (is_null($orderDescription)) {
            $this->openAPINullablesSetToNull[] = 'orderDescription';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('orderDescription', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($orderDescription) && mb_strlen($orderDescription) > 100) {
            throw new \InvalidArgumentException('invalid length for $orderDescription when calling CreatePaymentRequest., must be smaller than or equal to 100.');
        }
        $this->container['orderDescription'] = $orderDescription;

        return $this;
    }

    /**
     * Gets remarks.
     *
     * @return string|null
     */
    public function getRemarks(): mixed
    {
        return $this->container['remarks'];
    }

    /**
     * Sets remarks.
     *
     * @param string|null $remarks ご利用明細表示内容  - フォーマット：半角英数カナ／全角英数カナ／一部の記号／半角全角スペース - デフォルト： `ショップ名カナの先頭9文字`  ※ 利用可能な記号  - 半角：`.`、`(`、`)`、`–` - 全角：`．`、`（`、`）`、`ー`
     */
    public function setRemarks(mixed $remarks): static
    {
        if (is_null($remarks)) {
            $this->openAPINullablesSetToNull[] = 'remarks';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('remarks', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($remarks) && mb_strlen($remarks) > 9) {
            throw new \InvalidArgumentException('invalid length for $remarks when calling CreatePaymentRequest., must be smaller than or equal to 9.');
        }
        if (!is_null($remarks) && mb_strlen($remarks) < 1) {
            throw new \InvalidArgumentException('invalid length for $remarks when calling CreatePaymentRequest., must be bigger than or equal to 1.');
        }
        $this->container['remarks'] = $remarks;

        return $this;
    }

    /**
     * Gets billingAmount.
     *
     * @return string
     */
    public function getBillingAmount(): mixed
    {
        return $this->container['billingAmount'];
    }

    /**
     * Sets billingAmount.
     *
     * @param string $billingAmount 振込依頼金額\\ `billing_tax`との合計値が決済手段ごとに定められた決済金額の範囲内に収まる必要があります。\\ 参照例： [銀行振込（バーチャル口座） > 制限事項 > 利用可能な金額](https://docs.fincode.jp/payment/virtualaccount/restriction)
     */
    public function setBillingAmount(mixed $billingAmount): static
    {
        if (is_null($billingAmount)) {
            throw new \InvalidArgumentException('non-nullable billingAmount cannot be null');
        }
        if (mb_strlen($billingAmount) > 10) {
            throw new \InvalidArgumentException('invalid length for $billingAmount when calling CreatePaymentRequest., must be smaller than or equal to 10.');
        }
        if (mb_strlen($billingAmount) < 1) {
            throw new \InvalidArgumentException('invalid length for $billingAmount when calling CreatePaymentRequest., must be bigger than or equal to 1.');
        }
        $this->container['billingAmount'] = $billingAmount;

        return $this;
    }

    /**
     * Gets billingTax.
     *
     * @return string|null
     */
    public function getBillingTax(): mixed
    {
        return $this->container['billingTax'];
    }

    /**
     * Sets billingTax.
     *
     * @param string|null $billingTax 振込依頼金額（税送料）\\ `billing_amount`との合計値が決済手段ごとに定められた決済金額の範囲内に収まる必要があります。\\ 参照例： [銀行振込（バーチャル口座） > 制限事項 > 利用可能な金額](https://docs.fincode.jp/payment/virtualaccount/restriction)
     */
    public function setBillingTax(mixed $billingTax): static
    {
        if (is_null($billingTax)) {
            $this->openAPINullablesSetToNull[] = 'billingTax';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('billingTax', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($billingTax) && mb_strlen($billingTax) > 10) {
            throw new \InvalidArgumentException('invalid length for $billingTax when calling CreatePaymentRequest., must be smaller than or equal to 10.');
        }
        if (!is_null($billingTax) && mb_strlen($billingTax) < 1) {
            throw new \InvalidArgumentException('invalid length for $billingTax when calling CreatePaymentRequest., must be bigger than or equal to 1.');
        }
        $this->container['billingTax'] = $billingTax;

        return $this;
    }

    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @see https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    public function jsonSerialize(): mixed
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object.
     */
    public function __toString(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
    }

    /**
     * Gets a header-safe presentation of the object.
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
