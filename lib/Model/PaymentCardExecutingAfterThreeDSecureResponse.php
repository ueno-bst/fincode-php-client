<?php

declare(strict_types=1);
/**
 * fincode API.
 *
 * fincodeのAPIリファレンスです。\\ fincodeは決済情報のほか様々なリソースを管理できるため、リソース指向なREST APIをベースとしたインターフェイス設計のもとでAPIを提供しています。\\ APIの呼び出しにはAPIキーによる認証が必要であり、リクエストの際に`Authorization`ヘッダーに有効なAPIキーをセットすることで認証できます。
 *
 * The version of the OpenAPI document: 1.2.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Fincode\Model;

use OpenAPI\Fincode\ObjectSerializer;

/**
 * @implements \ArrayAccess<string, mixed>
 */
class PaymentCardExecutingAfterThreeDSecureResponse implements ModelInterface, \ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;
    /**
     * The original name of the model.
     */
    protected static string $openAPIModelName = 'Payment.Card.ExecutingAfterThreeDSecure.Response';
    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var array<string, string>
     */
    protected static array $openAPITypes = ['shopId' => 'string', 'id' => 'string', 'accessId' => 'string', 'amount' => 'int', 'tax' => 'int', 'totalAmount' => 'int', 'clientField1' => 'string', 'clientField2' => 'string', 'clientField3' => 'string', 'processDate' => 'string', 'customerId' => 'string', 'customerGroupId' => 'string', 'errorCode' => 'string', 'created' => 'string', 'updated' => 'string', 'payType' => '\OpenAPI\Fincode\Model\PayType', 'jobCode' => '\OpenAPI\Fincode\Model\CardPaymentJobCode', 'status' => '\OpenAPI\Fincode\Model\PaymentStatus', 'cardId' => 'string', 'brand' => '\OpenAPI\Fincode\Model\CardBrand', 'cardNo' => 'string', 'expire' => 'string', 'holderName' => 'string', 'cardNoHash' => 'string', 'method' => '\OpenAPI\Fincode\Model\CardPayMethod', 'payTimes' => '\OpenAPI\Fincode\Model\CardPayTimesResponse', 'bulkPaymentId' => 'string', 'subscriptionId' => 'string', 'tdsType' => '\OpenAPI\Fincode\Model\TdsType', 'tds2Type' => '\OpenAPI\Fincode\Model\Tds2Type', 'tds2RetUrl' => 'string', 'returnUrl' => 'string', 'returnUrlOnFailure' => 'string', 'tds2Status' => '\OpenAPI\Fincode\Model\ThreeDSecure2Status', 'merchantName' => 'string', 'forward' => 'string', 'issuer' => 'string', 'transactionId' => 'string', 'approve' => 'string', 'authMaxDate' => 'string', 'itemCode' => 'string', 'sendUrl' => 'string', 'acs' => 'string'];
    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var array<string, string|null>
     */
    protected static array $openAPIFormats = ['shopId' => null, 'id' => null, 'accessId' => null, 'amount' => null, 'tax' => null, 'totalAmount' => 'int64', 'clientField1' => null, 'clientField2' => null, 'clientField3' => null, 'processDate' => null, 'customerId' => null, 'customerGroupId' => null, 'errorCode' => null, 'created' => null, 'updated' => null, 'payType' => null, 'jobCode' => null, 'status' => null, 'cardId' => null, 'brand' => null, 'cardNo' => null, 'expire' => null, 'holderName' => null, 'cardNoHash' => null, 'method' => null, 'payTimes' => null, 'bulkPaymentId' => null, 'subscriptionId' => null, 'tdsType' => null, 'tds2Type' => null, 'tds2RetUrl' => null, 'returnUrl' => null, 'returnUrlOnFailure' => null, 'tds2Status' => null, 'merchantName' => null, 'forward' => null, 'issuer' => null, 'transactionId' => null, 'approve' => null, 'authMaxDate' => null, 'itemCode' => null, 'sendUrl' => null, 'acs' => null];
    /**
     * Array of nullable properties. Used for (de)serialization.
     *
     * @var array<string, bool>
     */
    protected static array $openAPINullables = ['shopId' => false, 'id' => false, 'accessId' => false, 'amount' => false, 'tax' => false, 'totalAmount' => false, 'clientField1' => true, 'clientField2' => true, 'clientField3' => true, 'processDate' => false, 'customerId' => true, 'customerGroupId' => true, 'errorCode' => true, 'created' => false, 'updated' => true, 'payType' => false, 'jobCode' => false, 'status' => false, 'cardId' => true, 'brand' => true, 'cardNo' => true, 'expire' => true, 'holderName' => true, 'cardNoHash' => true, 'method' => false, 'payTimes' => true, 'bulkPaymentId' => true, 'subscriptionId' => true, 'tdsType' => true, 'tds2Type' => true, 'tds2RetUrl' => true, 'returnUrl' => true, 'returnUrlOnFailure' => true, 'tds2Status' => true, 'merchantName' => true, 'forward' => true, 'issuer' => true, 'transactionId' => true, 'approve' => true, 'authMaxDate' => true, 'itemCode' => true, 'sendUrl' => true, 'acs' => true];
    /**
     * If a nullable field gets set to null, insert it here.
     *
     * @var array<string, bool>
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return array<string, string|null>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties.
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null.
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null.
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable.
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }
    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = ['shopId' => 'shop_id', 'id' => 'id', 'accessId' => 'access_id', 'amount' => 'amount', 'tax' => 'tax', 'totalAmount' => 'total_amount', 'clientField1' => 'client_field_1', 'clientField2' => 'client_field_2', 'clientField3' => 'client_field_3', 'processDate' => 'process_date', 'customerId' => 'customer_id', 'customerGroupId' => 'customer_group_id', 'errorCode' => 'error_code', 'created' => 'created', 'updated' => 'updated', 'payType' => 'pay_type', 'jobCode' => 'job_code', 'status' => 'status', 'cardId' => 'card_id', 'brand' => 'brand', 'cardNo' => 'card_no', 'expire' => 'expire', 'holderName' => 'holder_name', 'cardNoHash' => 'card_no_hash', 'method' => 'method', 'payTimes' => 'pay_times', 'bulkPaymentId' => 'bulk_payment_id', 'subscriptionId' => 'subscription_id', 'tdsType' => 'tds_type', 'tds2Type' => 'tds2_type', 'tds2RetUrl' => 'tds2_ret_url', 'returnUrl' => 'return_url', 'returnUrlOnFailure' => 'return_url_on_failure', 'tds2Status' => 'tds2_status', 'merchantName' => 'merchant_name', 'forward' => 'forward', 'issuer' => 'issuer', 'transactionId' => 'transaction_id', 'approve' => 'approve', 'authMaxDate' => 'auth_max_date', 'itemCode' => 'item_code', 'sendUrl' => 'send_url', 'acs' => 'acs'];
    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var array<string, string>
     */
    protected static array $setters = ['shopId' => 'setShopId', 'id' => 'setId', 'accessId' => 'setAccessId', 'amount' => 'setAmount', 'tax' => 'setTax', 'totalAmount' => 'setTotalAmount', 'clientField1' => 'setClientField1', 'clientField2' => 'setClientField2', 'clientField3' => 'setClientField3', 'processDate' => 'setProcessDate', 'customerId' => 'setCustomerId', 'customerGroupId' => 'setCustomerGroupId', 'errorCode' => 'setErrorCode', 'created' => 'setCreated', 'updated' => 'setUpdated', 'payType' => 'setPayType', 'jobCode' => 'setJobCode', 'status' => 'setStatus', 'cardId' => 'setCardId', 'brand' => 'setBrand', 'cardNo' => 'setCardNo', 'expire' => 'setExpire', 'holderName' => 'setHolderName', 'cardNoHash' => 'setCardNoHash', 'method' => 'setMethod', 'payTimes' => 'setPayTimes', 'bulkPaymentId' => 'setBulkPaymentId', 'subscriptionId' => 'setSubscriptionId', 'tdsType' => 'setTdsType', 'tds2Type' => 'setTds2Type', 'tds2RetUrl' => 'setTds2RetUrl', 'returnUrl' => 'setReturnUrl', 'returnUrlOnFailure' => 'setReturnUrlOnFailure', 'tds2Status' => 'setTds2Status', 'merchantName' => 'setMerchantName', 'forward' => 'setForward', 'issuer' => 'setIssuer', 'transactionId' => 'setTransactionId', 'approve' => 'setApprove', 'authMaxDate' => 'setAuthMaxDate', 'itemCode' => 'setItemCode', 'sendUrl' => 'setSendUrl', 'acs' => 'setAcs'];
    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var array<string, string>
     */
    protected static array $getters = ['shopId' => 'getShopId', 'id' => 'getId', 'accessId' => 'getAccessId', 'amount' => 'getAmount', 'tax' => 'getTax', 'totalAmount' => 'getTotalAmount', 'clientField1' => 'getClientField1', 'clientField2' => 'getClientField2', 'clientField3' => 'getClientField3', 'processDate' => 'getProcessDate', 'customerId' => 'getCustomerId', 'customerGroupId' => 'getCustomerGroupId', 'errorCode' => 'getErrorCode', 'created' => 'getCreated', 'updated' => 'getUpdated', 'payType' => 'getPayType', 'jobCode' => 'getJobCode', 'status' => 'getStatus', 'cardId' => 'getCardId', 'brand' => 'getBrand', 'cardNo' => 'getCardNo', 'expire' => 'getExpire', 'holderName' => 'getHolderName', 'cardNoHash' => 'getCardNoHash', 'method' => 'getMethod', 'payTimes' => 'getPayTimes', 'bulkPaymentId' => 'getBulkPaymentId', 'subscriptionId' => 'getSubscriptionId', 'tdsType' => 'getTdsType', 'tds2Type' => 'getTds2Type', 'tds2RetUrl' => 'getTds2RetUrl', 'returnUrl' => 'getReturnUrl', 'returnUrlOnFailure' => 'getReturnUrlOnFailure', 'tds2Status' => 'getTds2Status', 'merchantName' => 'getMerchantName', 'forward' => 'getForward', 'issuer' => 'getIssuer', 'transactionId' => 'getTransactionId', 'approve' => 'getApprove', 'authMaxDate' => 'getAuthMaxDate', 'itemCode' => 'getItemCode', 'sendUrl' => 'getSendUrl', 'acs' => 'getAcs'];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }
    /**
     * Associative array for storing property values.
     *
     * @phpstan-var array<string, mixed>
     *
     * @psalm-var array<string, mixed>
     */
    protected array $container = [];

    /**
     * Constructor.
     *
     * @param array<string, mixed> $data Associated array of property values
     *                                   initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('shopId', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('accessId', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('tax', $data ?? [], null);
        $this->setIfExists('totalAmount', $data ?? [], null);
        $this->setIfExists('clientField1', $data ?? [], null);
        $this->setIfExists('clientField2', $data ?? [], null);
        $this->setIfExists('clientField3', $data ?? [], null);
        $this->setIfExists('processDate', $data ?? [], null);
        $this->setIfExists('customerId', $data ?? [], null);
        $this->setIfExists('customerGroupId', $data ?? [], null);
        $this->setIfExists('errorCode', $data ?? [], null);
        $this->setIfExists('created', $data ?? [], null);
        $this->setIfExists('updated', $data ?? [], null);
        $this->setIfExists('payType', $data ?? [], null);
        $this->setIfExists('jobCode', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('cardId', $data ?? [], null);
        $this->setIfExists('brand', $data ?? [], null);
        $this->setIfExists('cardNo', $data ?? [], null);
        $this->setIfExists('expire', $data ?? [], null);
        $this->setIfExists('holderName', $data ?? [], null);
        $this->setIfExists('cardNoHash', $data ?? [], null);
        $this->setIfExists('method', $data ?? [], null);
        $this->setIfExists('payTimes', $data ?? [], null);
        $this->setIfExists('bulkPaymentId', $data ?? [], null);
        $this->setIfExists('subscriptionId', $data ?? [], null);
        $this->setIfExists('tdsType', $data ?? [], null);
        $this->setIfExists('tds2Type', $data ?? [], null);
        $this->setIfExists('tds2RetUrl', $data ?? [], null);
        $this->setIfExists('returnUrl', $data ?? [], null);
        $this->setIfExists('returnUrlOnFailure', $data ?? [], null);
        $this->setIfExists('tds2Status', $data ?? [], null);
        $this->setIfExists('merchantName', $data ?? [], null);
        $this->setIfExists('forward', $data ?? [], null);
        $this->setIfExists('issuer', $data ?? [], null);
        $this->setIfExists('transactionId', $data ?? [], null);
        $this->setIfExists('approve', $data ?? [], null);
        $this->setIfExists('authMaxDate', $data ?? [], null);
        $this->setIfExists('itemCode', $data ?? [], null);
        $this->setIfExists('sendUrl', $data ?? [], null);
        $this->setIfExists('acs', $data ?? [], null);
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array.
     *
     * @param array<string, mixed> $fields
     */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }
        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return list<string> invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];
        if (!is_null($this->container['shopId']) && mb_strlen($this->container['shopId']) > 13) {
            $invalidProperties[] = "invalid value for 'shopId', the character length must be smaller than or equal to 13.";
        }
        if (!is_null($this->container['shopId']) && mb_strlen($this->container['shopId']) < 13) {
            $invalidProperties[] = "invalid value for 'shopId', the character length must be bigger than or equal to 13.";
        }
        if (!is_null($this->container['id']) && mb_strlen($this->container['id']) > 30) {
            $invalidProperties[] = "invalid value for 'id', the character length must be smaller than or equal to 30.";
        }
        if (!is_null($this->container['id']) && mb_strlen($this->container['id']) < 1) {
            $invalidProperties[] = "invalid value for 'id', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['accessId']) && mb_strlen($this->container['accessId']) > 24) {
            $invalidProperties[] = "invalid value for 'accessId', the character length must be smaller than or equal to 24.";
        }
        if (!is_null($this->container['accessId']) && mb_strlen($this->container['accessId']) < 24) {
            $invalidProperties[] = "invalid value for 'accessId', the character length must be bigger than or equal to 24.";
        }
        if (!is_null($this->container['clientField1']) && mb_strlen($this->container['clientField1']) > 100) {
            $invalidProperties[] = "invalid value for 'clientField1', the character length must be smaller than or equal to 100.";
        }
        if (!is_null($this->container['clientField1']) && mb_strlen($this->container['clientField1']) < 1) {
            $invalidProperties[] = "invalid value for 'clientField1', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['clientField2']) && mb_strlen($this->container['clientField2']) > 100) {
            $invalidProperties[] = "invalid value for 'clientField2', the character length must be smaller than or equal to 100.";
        }
        if (!is_null($this->container['clientField2']) && mb_strlen($this->container['clientField2']) < 1) {
            $invalidProperties[] = "invalid value for 'clientField2', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['clientField3']) && mb_strlen($this->container['clientField3']) > 100) {
            $invalidProperties[] = "invalid value for 'clientField3', the character length must be smaller than or equal to 100.";
        }
        if (!is_null($this->container['clientField3']) && mb_strlen($this->container['clientField3']) < 1) {
            $invalidProperties[] = "invalid value for 'clientField3', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['customerId']) && mb_strlen($this->container['customerId']) > 60) {
            $invalidProperties[] = "invalid value for 'customerId', the character length must be smaller than or equal to 60.";
        }
        if (!is_null($this->container['customerId']) && mb_strlen($this->container['customerId']) < 1) {
            $invalidProperties[] = "invalid value for 'customerId', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['customerGroupId']) && mb_strlen($this->container['customerGroupId']) > 13) {
            $invalidProperties[] = "invalid value for 'customerGroupId', the character length must be smaller than or equal to 13.";
        }
        if (!is_null($this->container['customerGroupId']) && mb_strlen($this->container['customerGroupId']) < 13) {
            $invalidProperties[] = "invalid value for 'customerGroupId', the character length must be bigger than or equal to 13.";
        }
        if (!is_null($this->container['errorCode']) && mb_strlen($this->container['errorCode']) > 11) {
            $invalidProperties[] = "invalid value for 'errorCode', the character length must be smaller than or equal to 11.";
        }
        if (!is_null($this->container['errorCode']) && mb_strlen($this->container['errorCode']) < 11) {
            $invalidProperties[] = "invalid value for 'errorCode', the character length must be bigger than or equal to 11.";
        }
        if (!is_null($this->container['cardId']) && mb_strlen($this->container['cardId']) > 25) {
            $invalidProperties[] = "invalid value for 'cardId', the character length must be smaller than or equal to 25.";
        }
        if (!is_null($this->container['cardId']) && mb_strlen($this->container['cardId']) < 25) {
            $invalidProperties[] = "invalid value for 'cardId', the character length must be bigger than or equal to 25.";
        }
        if (!is_null($this->container['cardNo']) && mb_strlen($this->container['cardNo']) > 16) {
            $invalidProperties[] = "invalid value for 'cardNo', the character length must be smaller than or equal to 16.";
        }
        if (!is_null($this->container['expire']) && mb_strlen($this->container['expire']) > 4) {
            $invalidProperties[] = "invalid value for 'expire', the character length must be smaller than or equal to 4.";
        }
        if (!is_null($this->container['expire']) && mb_strlen($this->container['expire']) < 4) {
            $invalidProperties[] = "invalid value for 'expire', the character length must be bigger than or equal to 4.";
        }
        if (!is_null($this->container['expire']) && !preg_match('/^\\d{2}\\d{2}$/', $this->container['expire'])) {
            $invalidProperties[] = "invalid value for 'expire', must be conform to the pattern /^\\d{2}\\d{2}\$/.";
        }
        if (!is_null($this->container['holderName']) && mb_strlen($this->container['holderName']) > 50) {
            $invalidProperties[] = "invalid value for 'holderName', the character length must be smaller than or equal to 50.";
        }
        if (!is_null($this->container['holderName']) && mb_strlen($this->container['holderName']) < 1) {
            $invalidProperties[] = "invalid value for 'holderName', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['cardNoHash']) && mb_strlen($this->container['cardNoHash']) > 64) {
            $invalidProperties[] = "invalid value for 'cardNoHash', the character length must be smaller than or equal to 64.";
        }
        if (!is_null($this->container['cardNoHash']) && mb_strlen($this->container['cardNoHash']) < 1) {
            $invalidProperties[] = "invalid value for 'cardNoHash', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['bulkPaymentId']) && mb_strlen($this->container['bulkPaymentId']) > 25) {
            $invalidProperties[] = "invalid value for 'bulkPaymentId', the character length must be smaller than or equal to 25.";
        }
        if (!is_null($this->container['bulkPaymentId']) && mb_strlen($this->container['bulkPaymentId']) < 25) {
            $invalidProperties[] = "invalid value for 'bulkPaymentId', the character length must be bigger than or equal to 25.";
        }
        if (!is_null($this->container['subscriptionId']) && mb_strlen($this->container['subscriptionId']) > 25) {
            $invalidProperties[] = "invalid value for 'subscriptionId', the character length must be smaller than or equal to 25.";
        }
        if (!is_null($this->container['subscriptionId']) && mb_strlen($this->container['subscriptionId']) < 1) {
            $invalidProperties[] = "invalid value for 'subscriptionId', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['tds2RetUrl']) && mb_strlen($this->container['tds2RetUrl']) > 256) {
            $invalidProperties[] = "invalid value for 'tds2RetUrl', the character length must be smaller than or equal to 256.";
        }
        if (!is_null($this->container['returnUrl']) && mb_strlen($this->container['returnUrl']) > 256) {
            $invalidProperties[] = "invalid value for 'returnUrl', the character length must be smaller than or equal to 256.";
        }
        if (!is_null($this->container['returnUrlOnFailure']) && mb_strlen($this->container['returnUrlOnFailure']) > 256) {
            $invalidProperties[] = "invalid value for 'returnUrlOnFailure', the character length must be smaller than or equal to 256.";
        }
        if (!is_null($this->container['merchantName']) && mb_strlen($this->container['merchantName']) > 25) {
            $invalidProperties[] = "invalid value for 'merchantName', the character length must be smaller than or equal to 25.";
        }
        if (!is_null($this->container['forward']) && mb_strlen($this->container['forward']) > 7) {
            $invalidProperties[] = "invalid value for 'forward', the character length must be smaller than or equal to 7.";
        }
        if (!is_null($this->container['forward']) && mb_strlen($this->container['forward']) < 1) {
            $invalidProperties[] = "invalid value for 'forward', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['issuer']) && mb_strlen($this->container['issuer']) > 7) {
            $invalidProperties[] = "invalid value for 'issuer', the character length must be smaller than or equal to 7.";
        }
        if (!is_null($this->container['issuer']) && mb_strlen($this->container['issuer']) < 1) {
            $invalidProperties[] = "invalid value for 'issuer', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['transactionId']) && mb_strlen($this->container['transactionId']) > 28) {
            $invalidProperties[] = "invalid value for 'transactionId', the character length must be smaller than or equal to 28.";
        }
        if (!is_null($this->container['transactionId']) && mb_strlen($this->container['transactionId']) < 28) {
            $invalidProperties[] = "invalid value for 'transactionId', the character length must be bigger than or equal to 28.";
        }
        if (!is_null($this->container['approve']) && mb_strlen($this->container['approve']) > 7) {
            $invalidProperties[] = "invalid value for 'approve', the character length must be smaller than or equal to 7.";
        }
        if (!is_null($this->container['approve']) && mb_strlen($this->container['approve']) < 1) {
            $invalidProperties[] = "invalid value for 'approve', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['itemCode']) && mb_strlen($this->container['itemCode']) > 7) {
            $invalidProperties[] = "invalid value for 'itemCode', the character length must be smaller than or equal to 7.";
        }
        if (!is_null($this->container['itemCode']) && mb_strlen($this->container['itemCode']) < 7) {
            $invalidProperties[] = "invalid value for 'itemCode', the character length must be bigger than or equal to 7.";
        }
        if (!is_null($this->container['acs']) && mb_strlen($this->container['acs']) > 1) {
            $invalidProperties[] = "invalid value for 'acs', the character length must be smaller than or equal to 1.";
        }
        if (!is_null($this->container['acs']) && mb_strlen($this->container['acs']) < 1) {
            $invalidProperties[] = "invalid value for 'acs', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return 0 === count($this->listInvalidProperties());
    }

    /**
     * Gets shopId.
     *
     * @return string|null
     */
    public function getShopId(): mixed
    {
        return $this->container['shopId'];
    }

    /**
     * Sets shopId.
     *
     * @param string $shopId ショップID
     */
    public function setShopId(mixed $shopId): static
    {
        if (is_null($shopId)) {
            throw new \InvalidArgumentException('non-nullable shopId cannot be null');
        }
        if (mb_strlen($shopId) > 13) {
            throw new \InvalidArgumentException('invalid length for $shopId when calling PaymentCardExecutingAfterThreeDSecureResponse., must be smaller than or equal to 13.');
        }
        if (mb_strlen($shopId) < 13) {
            throw new \InvalidArgumentException('invalid length for $shopId when calling PaymentCardExecutingAfterThreeDSecureResponse., must be bigger than or equal to 13.');
        }
        $this->container['shopId'] = $shopId;

        return $this;
    }

    /**
     * Gets id.
     *
     * @return string|null
     */
    public function getId(): mixed
    {
        return $this->container['id'];
    }

    /**
     * Sets id.
     *
     * @param string $id オーダーID\\ 決済情報のIDです
     */
    public function setId(mixed $id): static
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        if (mb_strlen($id) > 30) {
            throw new \InvalidArgumentException('invalid length for $id when calling PaymentCardExecutingAfterThreeDSecureResponse., must be smaller than or equal to 30.');
        }
        if (mb_strlen($id) < 1) {
            throw new \InvalidArgumentException('invalid length for $id when calling PaymentCardExecutingAfterThreeDSecureResponse., must be bigger than or equal to 1.');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets accessId.
     *
     * @return string|null
     */
    public function getAccessId(): mixed
    {
        return $this->container['accessId'];
    }

    /**
     * Sets accessId.
     *
     * @param string $accessId 取引ID
     */
    public function setAccessId(mixed $accessId): static
    {
        if (is_null($accessId)) {
            throw new \InvalidArgumentException('non-nullable accessId cannot be null');
        }
        if (mb_strlen($accessId) > 24) {
            throw new \InvalidArgumentException('invalid length for $accessId when calling PaymentCardExecutingAfterThreeDSecureResponse., must be smaller than or equal to 24.');
        }
        if (mb_strlen($accessId) < 24) {
            throw new \InvalidArgumentException('invalid length for $accessId when calling PaymentCardExecutingAfterThreeDSecureResponse., must be bigger than or equal to 24.');
        }
        $this->container['accessId'] = $accessId;

        return $this;
    }

    /**
     * Gets amount.
     *
     * @return int|null
     */
    public function getAmount(): mixed
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount.
     *
     * @param int $amount 利用金額
     */
    public function setAmount(mixed $amount): static
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets tax.
     *
     * @return int|null
     */
    public function getTax(): mixed
    {
        return $this->container['tax'];
    }

    /**
     * Sets tax.
     *
     * @param int $tax 税送料
     */
    public function setTax(mixed $tax): static
    {
        if (is_null($tax)) {
            throw new \InvalidArgumentException('non-nullable tax cannot be null');
        }
        $this->container['tax'] = $tax;

        return $this;
    }

    /**
     * Gets totalAmount.
     *
     * @return int|null
     */
    public function getTotalAmount(): mixed
    {
        return $this->container['totalAmount'];
    }

    /**
     * Sets totalAmount.
     *
     * @param int $totalAmount 合計金額\\ `amount`と`tax`の合計値です
     */
    public function setTotalAmount(mixed $totalAmount): static
    {
        if (is_null($totalAmount)) {
            throw new \InvalidArgumentException('non-nullable totalAmount cannot be null');
        }
        $this->container['totalAmount'] = $totalAmount;

        return $this;
    }

    /**
     * Gets clientField1.
     *
     * @return string|null
     */
    public function getClientField1(): mixed
    {
        return $this->container['clientField1'];
    }

    /**
     * Sets clientField1.
     *
     * @param string|null $clientField1 加盟店自由項目 1
     */
    public function setClientField1(mixed $clientField1): static
    {
        if (is_null($clientField1)) {
            $this->openAPINullablesSetToNull[] = 'clientField1';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('clientField1', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($clientField1) && mb_strlen($clientField1) > 100) {
            throw new \InvalidArgumentException('invalid length for $clientField1 when calling PaymentCardExecutingAfterThreeDSecureResponse., must be smaller than or equal to 100.');
        }
        if (!is_null($clientField1) && mb_strlen($clientField1) < 1) {
            throw new \InvalidArgumentException('invalid length for $clientField1 when calling PaymentCardExecutingAfterThreeDSecureResponse., must be bigger than or equal to 1.');
        }
        $this->container['clientField1'] = $clientField1;

        return $this;
    }

    /**
     * Gets clientField2.
     *
     * @return string|null
     */
    public function getClientField2(): mixed
    {
        return $this->container['clientField2'];
    }

    /**
     * Sets clientField2.
     *
     * @param string|null $clientField2 加盟店自由項目 2
     */
    public function setClientField2(mixed $clientField2): static
    {
        if (is_null($clientField2)) {
            $this->openAPINullablesSetToNull[] = 'clientField2';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('clientField2', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($clientField2) && mb_strlen($clientField2) > 100) {
            throw new \InvalidArgumentException('invalid length for $clientField2 when calling PaymentCardExecutingAfterThreeDSecureResponse., must be smaller than or equal to 100.');
        }
        if (!is_null($clientField2) && mb_strlen($clientField2) < 1) {
            throw new \InvalidArgumentException('invalid length for $clientField2 when calling PaymentCardExecutingAfterThreeDSecureResponse., must be bigger than or equal to 1.');
        }
        $this->container['clientField2'] = $clientField2;

        return $this;
    }

    /**
     * Gets clientField3.
     *
     * @return string|null
     */
    public function getClientField3(): mixed
    {
        return $this->container['clientField3'];
    }

    /**
     * Sets clientField3.
     *
     * @param string|null $clientField3 加盟店自由項目 3
     */
    public function setClientField3(mixed $clientField3): static
    {
        if (is_null($clientField3)) {
            $this->openAPINullablesSetToNull[] = 'clientField3';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('clientField3', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($clientField3) && mb_strlen($clientField3) > 100) {
            throw new \InvalidArgumentException('invalid length for $clientField3 when calling PaymentCardExecutingAfterThreeDSecureResponse., must be smaller than or equal to 100.');
        }
        if (!is_null($clientField3) && mb_strlen($clientField3) < 1) {
            throw new \InvalidArgumentException('invalid length for $clientField3 when calling PaymentCardExecutingAfterThreeDSecureResponse., must be bigger than or equal to 1.');
        }
        $this->container['clientField3'] = $clientField3;

        return $this;
    }

    /**
     * Gets processDate.
     *
     * @return string|null
     */
    public function getProcessDate(): mixed
    {
        return $this->container['processDate'];
    }

    /**
     * Sets processDate.
     *
     * @param string $processDate 決済 処理日時\\ 決済の各種処理（決済実行、キャンセルなど）が行われた日時です
     */
    public function setProcessDate(mixed $processDate): static
    {
        if (is_null($processDate)) {
            throw new \InvalidArgumentException('non-nullable processDate cannot be null');
        }
        $this->container['processDate'] = $processDate;

        return $this;
    }

    /**
     * Gets customerId.
     *
     * @return string|null
     */
    public function getCustomerId(): mixed
    {
        return $this->container['customerId'];
    }

    /**
     * Sets customerId.
     *
     * @param string|null $customerId 顧客ID\\ この決済の請求先となる顧客情報のIDです
     */
    public function setCustomerId(mixed $customerId): static
    {
        if (is_null($customerId)) {
            $this->openAPINullablesSetToNull[] = 'customerId';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customerId', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($customerId) && mb_strlen($customerId) > 60) {
            throw new \InvalidArgumentException('invalid length for $customerId when calling PaymentCardExecutingAfterThreeDSecureResponse., must be smaller than or equal to 60.');
        }
        if (!is_null($customerId) && mb_strlen($customerId) < 1) {
            throw new \InvalidArgumentException('invalid length for $customerId when calling PaymentCardExecutingAfterThreeDSecureResponse., must be bigger than or equal to 1.');
        }
        $this->container['customerId'] = $customerId;

        return $this;
    }

    /**
     * Gets customerGroupId.
     *
     * @return string|null
     */
    public function getCustomerGroupId(): mixed
    {
        return $this->container['customerGroupId'];
    }

    /**
     * Sets customerGroupId.
     *
     * @param string|null $customerGroupId 顧客情報共有グループID\\ プラットフォームショップにおいて顧客情報が共有されている場合、顧客が所属する共有グループのIDです
     */
    public function setCustomerGroupId(mixed $customerGroupId): static
    {
        if (is_null($customerGroupId)) {
            $this->openAPINullablesSetToNull[] = 'customerGroupId';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customerGroupId', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($customerGroupId) && mb_strlen($customerGroupId) > 13) {
            throw new \InvalidArgumentException('invalid length for $customerGroupId when calling PaymentCardExecutingAfterThreeDSecureResponse., must be smaller than or equal to 13.');
        }
        if (!is_null($customerGroupId) && mb_strlen($customerGroupId) < 13) {
            throw new \InvalidArgumentException('invalid length for $customerGroupId when calling PaymentCardExecutingAfterThreeDSecureResponse., must be bigger than or equal to 13.');
        }
        $this->container['customerGroupId'] = $customerGroupId;

        return $this;
    }

    /**
     * Gets errorCode.
     *
     * @return string|null
     */
    public function getErrorCode(): mixed
    {
        return $this->container['errorCode'];
    }

    /**
     * Sets errorCode.
     *
     * @param string|null $errorCode この決済において発生したエラーのうち、一番最新のエラーのエラーコードです。\\ [各エラーコードの定義はこちらを参照](https://docs.fincode.jp/develop_support/error)して確認できます。
     */
    public function setErrorCode(mixed $errorCode): static
    {
        if (is_null($errorCode)) {
            $this->openAPINullablesSetToNull[] = 'errorCode';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('errorCode', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($errorCode) && mb_strlen($errorCode) > 11) {
            throw new \InvalidArgumentException('invalid length for $errorCode when calling PaymentCardExecutingAfterThreeDSecureResponse., must be smaller than or equal to 11.');
        }
        if (!is_null($errorCode) && mb_strlen($errorCode) < 11) {
            throw new \InvalidArgumentException('invalid length for $errorCode when calling PaymentCardExecutingAfterThreeDSecureResponse., must be bigger than or equal to 11.');
        }
        $this->container['errorCode'] = $errorCode;

        return $this;
    }

    /**
     * Gets created.
     *
     * @return string|null
     */
    public function getCreated(): mixed
    {
        return $this->container['created'];
    }

    /**
     * Sets created.
     *
     * @param string $created 作成日\\ 形式：`yyyy/MM/dd HH:mm:ss.SSS`
     */
    public function setCreated(mixed $created): static
    {
        if (is_null($created)) {
            throw new \InvalidArgumentException('non-nullable created cannot be null');
        }
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets updated.
     *
     * @return string|null
     */
    public function getUpdated(): mixed
    {
        return $this->container['updated'];
    }

    /**
     * Sets updated.
     *
     * @param string|null $updated 更新日\\ 形式：`yyyy/MM/dd HH:mm:ss.SSS`
     */
    public function setUpdated(mixed $updated): static
    {
        if (is_null($updated)) {
            $this->openAPINullablesSetToNull[] = 'updated';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('updated', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['updated'] = $updated;

        return $this;
    }

    /**
     * Gets payType.
     *
     * @return PayType|null
     */
    public function getPayType(): mixed
    {
        return $this->container['payType'];
    }

    /**
     * Sets payType.
     *
     * @param PayType $payType 決済種別\\ この決済で利用する決済手段です。  - `Card`: カード
     */
    public function setPayType(mixed $payType): static
    {
        if (is_null($payType)) {
            throw new \InvalidArgumentException('non-nullable payType cannot be null');
        }
        $this->container['payType'] = $payType;

        return $this;
    }

    /**
     * Gets jobCode.
     *
     * @return CardPaymentJobCode|null
     */
    public function getJobCode(): mixed
    {
        return $this->container['jobCode'];
    }

    /**
     * Sets jobCode.
     *
     * @param CardPaymentJobCode $jobCode jobCode
     */
    public function setJobCode(mixed $jobCode): static
    {
        if (is_null($jobCode)) {
            throw new \InvalidArgumentException('non-nullable jobCode cannot be null');
        }
        $this->container['jobCode'] = $jobCode;

        return $this;
    }

    /**
     * Gets status.
     *
     * @return PaymentStatus|null
     */
    public function getStatus(): mixed
    {
        return $this->container['status'];
    }

    /**
     * Sets status.
     *
     * @param PaymentStatus $status 決済ステータス  - `UNPROCESSED`: 未処理<br /><span class=\"smallText\">請求はまだ実行されていません。</span> - `CHECKED`: 有効性チェック済み<br /><span class=\"smallText\">カードの有効性チェックが完了しています。</span> - `AUTHORIZED`: 仮売上<br /><span class=\"smallText\">仮売上として与信枠の確保が完了しており、売上確定により請求を完了できます。</span> - `CAPTURED`: 売上確定<br /><span class=\"smallText\">請求が完了し、売上が確定しています。</span> - `CANCELED`: キャンセル<br /><span class=\"smallText\">この決済はキャンセルされました。</span> - `AUTHENTICATED`: 未処理（3Dセキュア認証待ち）<br /><span class=\"smallText\">3Dセキュア認証を使用する決済を実行した直後の状態です。認証後決済実行を行うまで請求や仮売上はされません。</span>
     */
    public function setStatus(mixed $status): static
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets cardId.
     *
     * @return string|null
     */
    public function getCardId(): mixed
    {
        return $this->container['cardId'];
    }

    /**
     * Sets cardId.
     *
     * @param string|null $cardId カードID\\ この決済に使用されたカード情報のIDです
     */
    public function setCardId(mixed $cardId): static
    {
        if (is_null($cardId)) {
            $this->openAPINullablesSetToNull[] = 'cardId';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cardId', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($cardId) && mb_strlen($cardId) > 25) {
            throw new \InvalidArgumentException('invalid length for $cardId when calling PaymentCardExecutingAfterThreeDSecureResponse., must be smaller than or equal to 25.');
        }
        if (!is_null($cardId) && mb_strlen($cardId) < 25) {
            throw new \InvalidArgumentException('invalid length for $cardId when calling PaymentCardExecutingAfterThreeDSecureResponse., must be bigger than or equal to 25.');
        }
        $this->container['cardId'] = $cardId;

        return $this;
    }

    /**
     * Gets brand.
     *
     * @return CardBrand|null
     */
    public function getBrand(): mixed
    {
        return $this->container['brand'];
    }

    /**
     * Sets brand.
     *
     * @param CardBrand|null $brand brand
     */
    public function setBrand(mixed $brand): static
    {
        if (is_null($brand)) {
            $this->openAPINullablesSetToNull[] = 'brand';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('brand', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['brand'] = $brand;

        return $this;
    }

    /**
     * Gets cardNo.
     *
     * @return string|null
     */
    public function getCardNo(): mixed
    {
        return $this->container['cardNo'];
    }

    /**
     * Sets cardNo.
     *
     * @param string|null $cardNo マスク済みカード番号。\\ <span class=\"smallText\"> 下4桁以外をマスクしたカード番号です。\\ カード情報非保持の原則に基づき、fincodeユーザーはマスクされていないカード番号の代わりにこの値を保持することができます。\\ </span> 形式：`************1234`
     */
    public function setCardNo(mixed $cardNo): static
    {
        if (is_null($cardNo)) {
            $this->openAPINullablesSetToNull[] = 'cardNo';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cardNo', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($cardNo) && mb_strlen($cardNo) > 16) {
            throw new \InvalidArgumentException('invalid length for $cardNo when calling PaymentCardExecutingAfterThreeDSecureResponse., must be smaller than or equal to 16.');
        }
        $this->container['cardNo'] = $cardNo;

        return $this;
    }

    /**
     * Gets expire.
     *
     * @return string|null
     */
    public function getExpire(): mixed
    {
        return $this->container['expire'];
    }

    /**
     * Sets expire.
     *
     * @param string|null $expire カード有効期限。\\ 形式：`YYMM`
     */
    public function setExpire(mixed $expire): static
    {
        if (is_null($expire)) {
            $this->openAPINullablesSetToNull[] = 'expire';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('expire', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($expire) && mb_strlen($expire) > 4) {
            throw new \InvalidArgumentException('invalid length for $expire when calling PaymentCardExecutingAfterThreeDSecureResponse., must be smaller than or equal to 4.');
        }
        if (!is_null($expire) && mb_strlen($expire) < 4) {
            throw new \InvalidArgumentException('invalid length for $expire when calling PaymentCardExecutingAfterThreeDSecureResponse., must be bigger than or equal to 4.');
        }
        if (!is_null($expire) && is_string($expire) && !preg_match('/^\\d{2}\\d{2}$/', $expire)) {
            throw new \InvalidArgumentException('invalid value for $expire when calling PaymentCardExecutingAfterThreeDSecureResponse., must conform to the pattern /^\\d{2}\\d{2}$/.');
        }
        $this->container['expire'] = $expire;

        return $this;
    }

    /**
     * Gets holderName.
     *
     * @return string|null
     */
    public function getHolderName(): mixed
    {
        return $this->container['holderName'];
    }

    /**
     * Sets holderName.
     *
     * @param string|null $holderName カード名義人名
     */
    public function setHolderName(mixed $holderName): static
    {
        if (is_null($holderName)) {
            $this->openAPINullablesSetToNull[] = 'holderName';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('holderName', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($holderName) && mb_strlen($holderName) > 50) {
            throw new \InvalidArgumentException('invalid length for $holderName when calling PaymentCardExecutingAfterThreeDSecureResponse., must be smaller than or equal to 50.');
        }
        if (!is_null($holderName) && mb_strlen($holderName) < 1) {
            throw new \InvalidArgumentException('invalid length for $holderName when calling PaymentCardExecutingAfterThreeDSecureResponse., must be bigger than or equal to 1.');
        }
        $this->container['holderName'] = $holderName;

        return $this;
    }

    /**
     * Gets cardNoHash.
     *
     * @return string|null
     */
    public function getCardNoHash(): mixed
    {
        return $this->container['cardNoHash'];
    }

    /**
     * Sets cardNoHash.
     *
     * @param string|null $cardNoHash カード番号をもとに生成されたハッシュ値。\\ <span class=\"smallText\"> おなじカード番号に対しては常に同じ値が返されます。\\ カード情報非保持の原則に基づき、fincodeユーザーはマスクされていないカード番号の代わりにこの値を保持することができます。 </span>
     */
    public function setCardNoHash(mixed $cardNoHash): static
    {
        if (is_null($cardNoHash)) {
            $this->openAPINullablesSetToNull[] = 'cardNoHash';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cardNoHash', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($cardNoHash) && mb_strlen($cardNoHash) > 64) {
            throw new \InvalidArgumentException('invalid length for $cardNoHash when calling PaymentCardExecutingAfterThreeDSecureResponse., must be smaller than or equal to 64.');
        }
        if (!is_null($cardNoHash) && mb_strlen($cardNoHash) < 1) {
            throw new \InvalidArgumentException('invalid length for $cardNoHash when calling PaymentCardExecutingAfterThreeDSecureResponse., must be bigger than or equal to 1.');
        }
        $this->container['cardNoHash'] = $cardNoHash;

        return $this;
    }

    /**
     * Gets method.
     *
     * @return CardPayMethod|null
     */
    public function getMethod(): mixed
    {
        return $this->container['method'];
    }

    /**
     * Sets method.
     *
     * @param CardPayMethod $method method
     */
    public function setMethod(mixed $method): static
    {
        if (is_null($method)) {
            throw new \InvalidArgumentException('non-nullable method cannot be null');
        }
        $this->container['method'] = $method;

        return $this;
    }

    /**
     * Gets payTimes.
     *
     * @return CardPayTimesResponse|null
     */
    public function getPayTimes(): mixed
    {
        return $this->container['payTimes'];
    }

    /**
     * Sets payTimes.
     *
     * @param CardPayTimesResponse|null $payTimes payTimes
     */
    public function setPayTimes(mixed $payTimes): static
    {
        if (is_null($payTimes)) {
            $this->openAPINullablesSetToNull[] = 'payTimes';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payTimes', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payTimes'] = $payTimes;

        return $this;
    }

    /**
     * Gets bulkPaymentId.
     *
     * @return string|null
     */
    public function getBulkPaymentId(): mixed
    {
        return $this->container['bulkPaymentId'];
    }

    /**
     * Sets bulkPaymentId.
     *
     * @param string|null $bulkPaymentId 一括決済ID\\ この決済情報が一括決済機能を用いて登録されたものである場合、このフィールドに一括決済IDが設定されます
     */
    public function setBulkPaymentId(mixed $bulkPaymentId): static
    {
        if (is_null($bulkPaymentId)) {
            $this->openAPINullablesSetToNull[] = 'bulkPaymentId';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bulkPaymentId', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($bulkPaymentId) && mb_strlen($bulkPaymentId) > 25) {
            throw new \InvalidArgumentException('invalid length for $bulkPaymentId when calling PaymentCardExecutingAfterThreeDSecureResponse., must be smaller than or equal to 25.');
        }
        if (!is_null($bulkPaymentId) && mb_strlen($bulkPaymentId) < 25) {
            throw new \InvalidArgumentException('invalid length for $bulkPaymentId when calling PaymentCardExecutingAfterThreeDSecureResponse., must be bigger than or equal to 25.');
        }
        $this->container['bulkPaymentId'] = $bulkPaymentId;

        return $this;
    }

    /**
     * Gets subscriptionId.
     *
     * @return string|null
     */
    public function getSubscriptionId(): mixed
    {
        return $this->container['subscriptionId'];
    }

    /**
     * Sets subscriptionId.
     *
     * @param string|null $subscriptionId サブスクリプションID\\ この決済情報がサブスクリプションにより生成されたものである場合、このフィールドにサブスクリプションIDが設定されます
     */
    public function setSubscriptionId(mixed $subscriptionId): static
    {
        if (is_null($subscriptionId)) {
            $this->openAPINullablesSetToNull[] = 'subscriptionId';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('subscriptionId', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($subscriptionId) && mb_strlen($subscriptionId) > 25) {
            throw new \InvalidArgumentException('invalid length for $subscriptionId when calling PaymentCardExecutingAfterThreeDSecureResponse., must be smaller than or equal to 25.');
        }
        if (!is_null($subscriptionId) && mb_strlen($subscriptionId) < 1) {
            throw new \InvalidArgumentException('invalid length for $subscriptionId when calling PaymentCardExecutingAfterThreeDSecureResponse., must be bigger than or equal to 1.');
        }
        $this->container['subscriptionId'] = $subscriptionId;

        return $this;
    }

    /**
     * Gets tdsType.
     *
     * @return TdsType|null
     */
    public function getTdsType(): mixed
    {
        return $this->container['tdsType'];
    }

    /**
     * Sets tdsType.
     *
     * @param TdsType|null $tdsType tdsType
     */
    public function setTdsType(mixed $tdsType): static
    {
        if (is_null($tdsType)) {
            $this->openAPINullablesSetToNull[] = 'tdsType';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tdsType', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tdsType'] = $tdsType;

        return $this;
    }

    /**
     * Gets tds2Type.
     *
     * @return Tds2Type|null
     */
    public function getTds2Type(): mixed
    {
        return $this->container['tds2Type'];
    }

    /**
     * Sets tds2Type.
     *
     * @param Tds2Type|null $tds2Type tds2Type
     */
    public function setTds2Type(mixed $tds2Type): static
    {
        if (is_null($tds2Type)) {
            $this->openAPINullablesSetToNull[] = 'tds2Type';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tds2Type', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tds2Type'] = $tds2Type;

        return $this;
    }

    /**
     * Gets tds2RetUrl.
     *
     * @return string|null
     */
    public function getTds2RetUrl(): mixed
    {
        return $this->container['tds2RetUrl'];
    }

    /**
     * Sets tds2RetUrl.
     *
     * @param string|null $tds2RetUrl 3Dセキュア認証における戻りURL   3Dセキュア認証に必要なAPIの呼び出しやコールバック処理をすべて加盟店で実装する場合のみ使用します。   fincodeは3Dセキュア認証処理の過程において、このURLにPOSTメソッド、`Content-Type:application/x-www-form-urlencoded`で値を返します。    - `MD`: クエリパラメータとして返されます。 `access_id`と等しい値です。 - `event`: フォームデータとして返されます。この値を判定し後続の処理を分岐します。 - `param`: フォームデータとして返されます。[3Dセキュア認証API](https://docs.fincode.jp/api#tag/ThreeDSecureecure/executeThreeDSecureecureAuth)で使用します。 - `requestorTransId`: フォームデータとして返されます。（後続処理では使用しません。）  返却されるそれぞれの値についての[詳細はDocsで確認](https://docs.fincode.jp/payment/fraud_protection/3d_secure_2)できます。
     */
    public function setTds2RetUrl(mixed $tds2RetUrl): static
    {
        if (is_null($tds2RetUrl)) {
            $this->openAPINullablesSetToNull[] = 'tds2RetUrl';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tds2RetUrl', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($tds2RetUrl) && mb_strlen($tds2RetUrl) > 256) {
            throw new \InvalidArgumentException('invalid length for $tds2RetUrl when calling PaymentCardExecutingAfterThreeDSecureResponse., must be smaller than or equal to 256.');
        }
        $this->container['tds2RetUrl'] = $tds2RetUrl;

        return $this;
    }

    /**
     * Gets returnUrl.
     *
     * @return string|null
     */
    public function getReturnUrl(): mixed
    {
        return $this->container['returnUrl'];
    }

    /**
     * Sets returnUrl.
     *
     * @param string|null $returnUrl 加盟店戻りURL（成功時）   購入者のブラウザとfincode間で3Dセキュア認証を自動で行う場合に、 3Dセキュア認証処理後、決済に成功した際にリダイレクトされるURLです。   POSTメソッドでリダイレクトされます。  リクエストで指定がない場合はデフォルトの成功ページのURLが設定されます。   また、`tds2_ret_url`を指定していない場合のみ返却されます。
     */
    public function setReturnUrl(mixed $returnUrl): static
    {
        if (is_null($returnUrl)) {
            $this->openAPINullablesSetToNull[] = 'returnUrl';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('returnUrl', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($returnUrl) && mb_strlen($returnUrl) > 256) {
            throw new \InvalidArgumentException('invalid length for $returnUrl when calling PaymentCardExecutingAfterThreeDSecureResponse., must be smaller than or equal to 256.');
        }
        $this->container['returnUrl'] = $returnUrl;

        return $this;
    }

    /**
     * Gets returnUrlOnFailure.
     *
     * @return string|null
     */
    public function getReturnUrlOnFailure(): mixed
    {
        return $this->container['returnUrlOnFailure'];
    }

    /**
     * Sets returnUrlOnFailure.
     *
     * @param string|null $returnUrlOnFailure 加盟店戻りURL（失敗時）   購入者のブラウザとfincode間で3Dセキュア認証を自動で行う場合に、 3Dセキュア認証に失敗、または決済に失敗した際にリダイレクトされるURLです。   POSTメソッドでリダイレクトされます。  リクエストで指定がない場合はデフォルトの失敗ページのURLが設定されます。   また、`tds2_ret_url`を指定していない場合のみ返却されます。
     */
    public function setReturnUrlOnFailure(mixed $returnUrlOnFailure): static
    {
        if (is_null($returnUrlOnFailure)) {
            $this->openAPINullablesSetToNull[] = 'returnUrlOnFailure';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('returnUrlOnFailure', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($returnUrlOnFailure) && mb_strlen($returnUrlOnFailure) > 256) {
            throw new \InvalidArgumentException('invalid length for $returnUrlOnFailure when calling PaymentCardExecutingAfterThreeDSecureResponse., must be smaller than or equal to 256.');
        }
        $this->container['returnUrlOnFailure'] = $returnUrlOnFailure;

        return $this;
    }

    /**
     * Gets tds2Status.
     *
     * @return ThreeDSecure2Status|null
     */
    public function getTds2Status(): mixed
    {
        return $this->container['tds2Status'];
    }

    /**
     * Sets tds2Status.
     *
     * @param ThreeDSecure2Status|null $tds2Status tds2Status
     */
    public function setTds2Status(mixed $tds2Status): static
    {
        if (is_null($tds2Status)) {
            $this->openAPINullablesSetToNull[] = 'tds2Status';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tds2Status', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tds2Status'] = $tds2Status;

        return $this;
    }

    /**
     * Gets merchantName.
     *
     * @return string|null
     */
    public function getMerchantName(): mixed
    {
        return $this->container['merchantName'];
    }

    /**
     * Sets merchantName.
     *
     * @param string|null $merchantName <span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\ 加盟店名。\\ 3Dセキュア認証の際に表示されるショップ名や加盟店名を指定できます。\\ 使用可能な文字は以下の通りです。 - 半角英数 - 半角記号： !\"#$%&'()*+,-./:;<=>?@[\\]`^_{|}~ - 半角スペース  未指定の場合、 カード決済の契約時にfincodeが下記の形式に従って設定した値が自動的に使用されます。\\ \\ 形式：`{{ショップID}}-{{英数字からなる固定値}}`
     */
    public function setMerchantName(mixed $merchantName): static
    {
        if (is_null($merchantName)) {
            $this->openAPINullablesSetToNull[] = 'merchantName';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('merchantName', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($merchantName) && mb_strlen($merchantName) > 25) {
            throw new \InvalidArgumentException('invalid length for $merchantName when calling PaymentCardExecutingAfterThreeDSecureResponse., must be smaller than or equal to 25.');
        }
        $this->container['merchantName'] = $merchantName;

        return $this;
    }

    /**
     * Gets forward.
     *
     * @return string|null
     */
    public function getForward(): mixed
    {
        return $this->container['forward'];
    }

    /**
     * Sets forward.
     *
     * @param string|null $forward 仕向け先
     */
    public function setForward(mixed $forward): static
    {
        if (is_null($forward)) {
            $this->openAPINullablesSetToNull[] = 'forward';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('forward', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($forward) && mb_strlen($forward) > 7) {
            throw new \InvalidArgumentException('invalid length for $forward when calling PaymentCardExecutingAfterThreeDSecureResponse., must be smaller than or equal to 7.');
        }
        if (!is_null($forward) && mb_strlen($forward) < 1) {
            throw new \InvalidArgumentException('invalid length for $forward when calling PaymentCardExecutingAfterThreeDSecureResponse., must be bigger than or equal to 1.');
        }
        $this->container['forward'] = $forward;

        return $this;
    }

    /**
     * Gets issuer.
     *
     * @return string|null
     */
    public function getIssuer(): mixed
    {
        return $this->container['issuer'];
    }

    /**
     * Sets issuer.
     *
     * @param string|null $issuer イシュア
     */
    public function setIssuer(mixed $issuer): static
    {
        if (is_null($issuer)) {
            $this->openAPINullablesSetToNull[] = 'issuer';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('issuer', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($issuer) && mb_strlen($issuer) > 7) {
            throw new \InvalidArgumentException('invalid length for $issuer when calling PaymentCardExecutingAfterThreeDSecureResponse., must be smaller than or equal to 7.');
        }
        if (!is_null($issuer) && mb_strlen($issuer) < 1) {
            throw new \InvalidArgumentException('invalid length for $issuer when calling PaymentCardExecutingAfterThreeDSecureResponse., must be bigger than or equal to 1.');
        }
        $this->container['issuer'] = $issuer;

        return $this;
    }

    /**
     * Gets transactionId.
     *
     * @return string|null
     */
    public function getTransactionId(): mixed
    {
        return $this->container['transactionId'];
    }

    /**
     * Sets transactionId.
     *
     * @param string|null $transactionId トランザクションID
     */
    public function setTransactionId(mixed $transactionId): static
    {
        if (is_null($transactionId)) {
            $this->openAPINullablesSetToNull[] = 'transactionId';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('transactionId', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($transactionId) && mb_strlen($transactionId) > 28) {
            throw new \InvalidArgumentException('invalid length for $transactionId when calling PaymentCardExecutingAfterThreeDSecureResponse., must be smaller than or equal to 28.');
        }
        if (!is_null($transactionId) && mb_strlen($transactionId) < 28) {
            throw new \InvalidArgumentException('invalid length for $transactionId when calling PaymentCardExecutingAfterThreeDSecureResponse., must be bigger than or equal to 28.');
        }
        $this->container['transactionId'] = $transactionId;

        return $this;
    }

    /**
     * Gets approve.
     *
     * @return string|null
     */
    public function getApprove(): mixed
    {
        return $this->container['approve'];
    }

    /**
     * Sets approve.
     *
     * @param string|null $approve 承認番号
     */
    public function setApprove(mixed $approve): static
    {
        if (is_null($approve)) {
            $this->openAPINullablesSetToNull[] = 'approve';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('approve', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($approve) && mb_strlen($approve) > 7) {
            throw new \InvalidArgumentException('invalid length for $approve when calling PaymentCardExecutingAfterThreeDSecureResponse., must be smaller than or equal to 7.');
        }
        if (!is_null($approve) && mb_strlen($approve) < 1) {
            throw new \InvalidArgumentException('invalid length for $approve when calling PaymentCardExecutingAfterThreeDSecureResponse., must be bigger than or equal to 1.');
        }
        $this->container['approve'] = $approve;

        return $this;
    }

    /**
     * Gets authMaxDate.
     *
     * @return string|null
     */
    public function getAuthMaxDate(): mixed
    {
        return $this->container['authMaxDate'];
    }

    /**
     * Sets authMaxDate.
     *
     * @param string|null $authMaxDate 仮売上有効期限\\ `job_code`に`AUTH（仮売上）`を指定した場合値が設定されます
     */
    public function setAuthMaxDate(mixed $authMaxDate): static
    {
        if (is_null($authMaxDate)) {
            $this->openAPINullablesSetToNull[] = 'authMaxDate';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('authMaxDate', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['authMaxDate'] = $authMaxDate;

        return $this;
    }

    /**
     * Gets itemCode.
     *
     * @return string|null
     */
    public function getItemCode(): mixed
    {
        return $this->container['itemCode'];
    }

    /**
     * Sets itemCode.
     *
     * @param string|null $itemCode 商品コード
     */
    public function setItemCode(mixed $itemCode): static
    {
        if (is_null($itemCode)) {
            $this->openAPINullablesSetToNull[] = 'itemCode';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('itemCode', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($itemCode) && mb_strlen($itemCode) > 7) {
            throw new \InvalidArgumentException('invalid length for $itemCode when calling PaymentCardExecutingAfterThreeDSecureResponse., must be smaller than or equal to 7.');
        }
        if (!is_null($itemCode) && mb_strlen($itemCode) < 7) {
            throw new \InvalidArgumentException('invalid length for $itemCode when calling PaymentCardExecutingAfterThreeDSecureResponse., must be bigger than or equal to 7.');
        }
        $this->container['itemCode'] = $itemCode;

        return $this;
    }

    /**
     * Gets sendUrl.
     *
     * @return string|null
     *
     * @deprecated
     */
    public function getSendUrl(): mixed
    {
        return $this->container['sendUrl'];
    }

    /**
     * Sets sendUrl.
     *
     * @param string|null $sendUrl ※ 閉塞機能
     *
     * @deprecated
     */
    public function setSendUrl(mixed $sendUrl): static
    {
        if (is_null($sendUrl)) {
            $this->openAPINullablesSetToNull[] = 'sendUrl';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sendUrl', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sendUrl'] = $sendUrl;

        return $this;
    }

    /**
     * Gets acs.
     *
     * @return string|null
     *
     * @deprecated
     */
    public function getAcs(): mixed
    {
        return $this->container['acs'];
    }

    /**
     * Sets acs.
     *
     * @param string|null $acs ※ 閉塞機能
     *
     * @deprecated
     */
    public function setAcs(mixed $acs): static
    {
        if (is_null($acs)) {
            $this->openAPINullablesSetToNull[] = 'acs';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('acs', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($acs) && mb_strlen($acs) > 1) {
            throw new \InvalidArgumentException('invalid length for $acs when calling PaymentCardExecutingAfterThreeDSecureResponse., must be smaller than or equal to 1.');
        }
        if (!is_null($acs) && mb_strlen($acs) < 1) {
            throw new \InvalidArgumentException('invalid length for $acs when calling PaymentCardExecutingAfterThreeDSecureResponse., must be bigger than or equal to 1.');
        }
        $this->container['acs'] = $acs;

        return $this;
    }

    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @see https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    public function jsonSerialize(): mixed
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object.
     */
    public function __toString(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
    }

    /**
     * Gets a header-safe presentation of the object.
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
