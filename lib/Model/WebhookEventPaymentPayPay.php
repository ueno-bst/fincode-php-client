<?php

declare(strict_types=1);
/**
 * fincode API.
 *
 * fincodeのAPIリファレンスです。\\ fincodeは決済情報のほか様々なリソースを管理できるため、リソース指向なREST APIをベースとしたインターフェイス設計のもとでAPIを提供しています。\\ APIの呼び出しにはAPIキーによる認証が必要であり、リクエストの際に`Authorization`ヘッダーに有効なAPIキーをセットすることで認証できます。
 *
 * The version of the OpenAPI document: 1.2.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Fincode\Model;

use OpenAPI\Fincode\ObjectSerializer;

/**
 * @implements \ArrayAccess<string, mixed>
 */
class WebhookEventPaymentPayPay implements ModelInterface, \ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;
    /**
     * The original name of the model.
     */
    protected static string $openAPIModelName = 'WebhookEvent.Payment.PayPay';
    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var array<string, string>
     */
    protected static array $openAPITypes = ['shopId' => 'string', 'orderId' => 'string', 'accessId' => 'string', 'payType' => '\OpenAPI\Fincode\Model\PayType', 'status' => '\OpenAPI\Fincode\Model\PaymentStatus', 'customerId' => 'string', 'processDate' => 'string', 'jobCode' => '\OpenAPI\Fincode\Model\PayPayPaymentJobCode', 'clientField1' => 'string', 'clientField2' => 'string', 'clientField3' => 'string', 'amount' => 'string', 'tax' => 'string', 'codeExpiryDate' => 'string', 'authMaxDate' => 'string', 'orderDescription' => 'string', 'codeId' => 'string', 'paymentId' => 'string', 'paymentDate' => 'string', 'merchantPaymentId' => 'string', 'merchantUpdateId' => 'string', 'merchantRevertId' => 'string', 'merchantRefundId' => 'string', 'errorCode' => 'string', 'event' => '\OpenAPI\Fincode\Model\FincodeEvent'];
    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var array<string, string|null>
     */
    protected static array $openAPIFormats = ['shopId' => null, 'orderId' => null, 'accessId' => null, 'payType' => null, 'status' => null, 'customerId' => null, 'processDate' => null, 'jobCode' => null, 'clientField1' => null, 'clientField2' => null, 'clientField3' => null, 'amount' => null, 'tax' => null, 'codeExpiryDate' => null, 'authMaxDate' => null, 'orderDescription' => null, 'codeId' => null, 'paymentId' => null, 'paymentDate' => null, 'merchantPaymentId' => null, 'merchantUpdateId' => null, 'merchantRevertId' => null, 'merchantRefundId' => null, 'errorCode' => null, 'event' => null];
    /**
     * Array of nullable properties. Used for (de)serialization.
     *
     * @var array<string, bool>
     */
    protected static array $openAPINullables = ['shopId' => false, 'orderId' => false, 'accessId' => false, 'payType' => false, 'status' => false, 'customerId' => true, 'processDate' => true, 'jobCode' => true, 'clientField1' => true, 'clientField2' => true, 'clientField3' => true, 'amount' => false, 'tax' => false, 'codeExpiryDate' => true, 'authMaxDate' => true, 'orderDescription' => true, 'codeId' => true, 'paymentId' => true, 'paymentDate' => true, 'merchantPaymentId' => true, 'merchantUpdateId' => true, 'merchantRevertId' => true, 'merchantRefundId' => true, 'errorCode' => true, 'event' => false];
    /**
     * If a nullable field gets set to null, insert it here.
     *
     * @var array<string, bool>
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return array<string, string|null>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties.
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null.
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null.
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable.
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }
    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = ['shopId' => 'shop_id', 'orderId' => 'order_id', 'accessId' => 'access_id', 'payType' => 'pay_type', 'status' => 'status', 'customerId' => 'customer_id', 'processDate' => 'process_date', 'jobCode' => 'job_code', 'clientField1' => 'client_field_1', 'clientField2' => 'client_field_2', 'clientField3' => 'client_field_3', 'amount' => 'amount', 'tax' => 'tax', 'codeExpiryDate' => 'code_expiry_date', 'authMaxDate' => 'auth_max_date', 'orderDescription' => 'order_description', 'codeId' => 'code_id', 'paymentId' => 'payment_id', 'paymentDate' => 'payment_date', 'merchantPaymentId' => 'merchant_payment_id', 'merchantUpdateId' => 'merchant_update_id', 'merchantRevertId' => 'merchant_revert_id', 'merchantRefundId' => 'merchant_refund_id', 'errorCode' => 'error_code', 'event' => 'event'];
    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var array<string, string>
     */
    protected static array $setters = ['shopId' => 'setShopId', 'orderId' => 'setOrderId', 'accessId' => 'setAccessId', 'payType' => 'setPayType', 'status' => 'setStatus', 'customerId' => 'setCustomerId', 'processDate' => 'setProcessDate', 'jobCode' => 'setJobCode', 'clientField1' => 'setClientField1', 'clientField2' => 'setClientField2', 'clientField3' => 'setClientField3', 'amount' => 'setAmount', 'tax' => 'setTax', 'codeExpiryDate' => 'setCodeExpiryDate', 'authMaxDate' => 'setAuthMaxDate', 'orderDescription' => 'setOrderDescription', 'codeId' => 'setCodeId', 'paymentId' => 'setPaymentId', 'paymentDate' => 'setPaymentDate', 'merchantPaymentId' => 'setMerchantPaymentId', 'merchantUpdateId' => 'setMerchantUpdateId', 'merchantRevertId' => 'setMerchantRevertId', 'merchantRefundId' => 'setMerchantRefundId', 'errorCode' => 'setErrorCode', 'event' => 'setEvent'];
    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var array<string, string>
     */
    protected static array $getters = ['shopId' => 'getShopId', 'orderId' => 'getOrderId', 'accessId' => 'getAccessId', 'payType' => 'getPayType', 'status' => 'getStatus', 'customerId' => 'getCustomerId', 'processDate' => 'getProcessDate', 'jobCode' => 'getJobCode', 'clientField1' => 'getClientField1', 'clientField2' => 'getClientField2', 'clientField3' => 'getClientField3', 'amount' => 'getAmount', 'tax' => 'getTax', 'codeExpiryDate' => 'getCodeExpiryDate', 'authMaxDate' => 'getAuthMaxDate', 'orderDescription' => 'getOrderDescription', 'codeId' => 'getCodeId', 'paymentId' => 'getPaymentId', 'paymentDate' => 'getPaymentDate', 'merchantPaymentId' => 'getMerchantPaymentId', 'merchantUpdateId' => 'getMerchantUpdateId', 'merchantRevertId' => 'getMerchantRevertId', 'merchantRefundId' => 'getMerchantRefundId', 'errorCode' => 'getErrorCode', 'event' => 'getEvent'];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }
    /**
     * Associative array for storing property values.
     *
     * @phpstan-var array<string, mixed>
     *
     * @psalm-var array<string, mixed>
     */
    protected array $container = [];

    /**
     * Constructor.
     *
     * @param array<string, mixed> $data Associated array of property values
     *                                   initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('shopId', $data ?? [], null);
        $this->setIfExists('orderId', $data ?? [], null);
        $this->setIfExists('accessId', $data ?? [], null);
        $this->setIfExists('payType', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('customerId', $data ?? [], null);
        $this->setIfExists('processDate', $data ?? [], null);
        $this->setIfExists('jobCode', $data ?? [], null);
        $this->setIfExists('clientField1', $data ?? [], null);
        $this->setIfExists('clientField2', $data ?? [], null);
        $this->setIfExists('clientField3', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('tax', $data ?? [], null);
        $this->setIfExists('codeExpiryDate', $data ?? [], null);
        $this->setIfExists('authMaxDate', $data ?? [], null);
        $this->setIfExists('orderDescription', $data ?? [], null);
        $this->setIfExists('codeId', $data ?? [], null);
        $this->setIfExists('paymentId', $data ?? [], null);
        $this->setIfExists('paymentDate', $data ?? [], null);
        $this->setIfExists('merchantPaymentId', $data ?? [], null);
        $this->setIfExists('merchantUpdateId', $data ?? [], null);
        $this->setIfExists('merchantRevertId', $data ?? [], null);
        $this->setIfExists('merchantRefundId', $data ?? [], null);
        $this->setIfExists('errorCode', $data ?? [], null);
        $this->setIfExists('event', $data ?? [], null);
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array.
     *
     * @param array<string, mixed> $fields
     */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }
        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return list<string> invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];
        if (!is_null($this->container['shopId']) && mb_strlen($this->container['shopId']) > 13) {
            $invalidProperties[] = "invalid value for 'shopId', the character length must be smaller than or equal to 13.";
        }
        if (!is_null($this->container['shopId']) && mb_strlen($this->container['shopId']) < 13) {
            $invalidProperties[] = "invalid value for 'shopId', the character length must be bigger than or equal to 13.";
        }
        if (!is_null($this->container['orderId']) && mb_strlen($this->container['orderId']) > 30) {
            $invalidProperties[] = "invalid value for 'orderId', the character length must be smaller than or equal to 30.";
        }
        if (!is_null($this->container['orderId']) && mb_strlen($this->container['orderId']) < 1) {
            $invalidProperties[] = "invalid value for 'orderId', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['accessId']) && mb_strlen($this->container['accessId']) > 24) {
            $invalidProperties[] = "invalid value for 'accessId', the character length must be smaller than or equal to 24.";
        }
        if (!is_null($this->container['accessId']) && mb_strlen($this->container['accessId']) < 24) {
            $invalidProperties[] = "invalid value for 'accessId', the character length must be bigger than or equal to 24.";
        }
        if (!is_null($this->container['customerId']) && mb_strlen($this->container['customerId']) > 60) {
            $invalidProperties[] = "invalid value for 'customerId', the character length must be smaller than or equal to 60.";
        }
        if (!is_null($this->container['customerId']) && mb_strlen($this->container['customerId']) < 1) {
            $invalidProperties[] = "invalid value for 'customerId', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['clientField1']) && mb_strlen($this->container['clientField1']) > 100) {
            $invalidProperties[] = "invalid value for 'clientField1', the character length must be smaller than or equal to 100.";
        }
        if (!is_null($this->container['clientField1']) && mb_strlen($this->container['clientField1']) < 1) {
            $invalidProperties[] = "invalid value for 'clientField1', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['clientField2']) && mb_strlen($this->container['clientField2']) > 100) {
            $invalidProperties[] = "invalid value for 'clientField2', the character length must be smaller than or equal to 100.";
        }
        if (!is_null($this->container['clientField2']) && mb_strlen($this->container['clientField2']) < 1) {
            $invalidProperties[] = "invalid value for 'clientField2', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['clientField3']) && mb_strlen($this->container['clientField3']) > 100) {
            $invalidProperties[] = "invalid value for 'clientField3', the character length must be smaller than or equal to 100.";
        }
        if (!is_null($this->container['clientField3']) && mb_strlen($this->container['clientField3']) < 1) {
            $invalidProperties[] = "invalid value for 'clientField3', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['amount']) && mb_strlen($this->container['amount']) > 9) {
            $invalidProperties[] = "invalid value for 'amount', the character length must be smaller than or equal to 9.";
        }
        if (!is_null($this->container['amount']) && mb_strlen($this->container['amount']) < 1) {
            $invalidProperties[] = "invalid value for 'amount', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['tax']) && mb_strlen($this->container['tax']) > 9) {
            $invalidProperties[] = "invalid value for 'tax', the character length must be smaller than or equal to 9.";
        }
        if (!is_null($this->container['tax']) && mb_strlen($this->container['tax']) < 1) {
            $invalidProperties[] = "invalid value for 'tax', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['orderDescription']) && mb_strlen($this->container['orderDescription']) > 100) {
            $invalidProperties[] = "invalid value for 'orderDescription', the character length must be smaller than or equal to 100.";
        }
        if (!is_null($this->container['codeId']) && mb_strlen($this->container['codeId']) > 64) {
            $invalidProperties[] = "invalid value for 'codeId', the character length must be smaller than or equal to 64.";
        }
        if (!is_null($this->container['codeId']) && mb_strlen($this->container['codeId']) < 1) {
            $invalidProperties[] = "invalid value for 'codeId', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['paymentId']) && mb_strlen($this->container['paymentId']) > 64) {
            $invalidProperties[] = "invalid value for 'paymentId', the character length must be smaller than or equal to 64.";
        }
        if (!is_null($this->container['paymentId']) && mb_strlen($this->container['paymentId']) < 1) {
            $invalidProperties[] = "invalid value for 'paymentId', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['merchantPaymentId']) && mb_strlen($this->container['merchantPaymentId']) > 64) {
            $invalidProperties[] = "invalid value for 'merchantPaymentId', the character length must be smaller than or equal to 64.";
        }
        if (!is_null($this->container['merchantPaymentId']) && mb_strlen($this->container['merchantPaymentId']) < 1) {
            $invalidProperties[] = "invalid value for 'merchantPaymentId', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['merchantUpdateId']) && mb_strlen($this->container['merchantUpdateId']) > 64) {
            $invalidProperties[] = "invalid value for 'merchantUpdateId', the character length must be smaller than or equal to 64.";
        }
        if (!is_null($this->container['merchantUpdateId']) && mb_strlen($this->container['merchantUpdateId']) < 1) {
            $invalidProperties[] = "invalid value for 'merchantUpdateId', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['merchantRevertId']) && mb_strlen($this->container['merchantRevertId']) > 64) {
            $invalidProperties[] = "invalid value for 'merchantRevertId', the character length must be smaller than or equal to 64.";
        }
        if (!is_null($this->container['merchantRevertId']) && mb_strlen($this->container['merchantRevertId']) < 1) {
            $invalidProperties[] = "invalid value for 'merchantRevertId', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['merchantRefundId']) && mb_strlen($this->container['merchantRefundId']) > 64) {
            $invalidProperties[] = "invalid value for 'merchantRefundId', the character length must be smaller than or equal to 64.";
        }
        if (!is_null($this->container['merchantRefundId']) && mb_strlen($this->container['merchantRefundId']) < 1) {
            $invalidProperties[] = "invalid value for 'merchantRefundId', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['errorCode']) && mb_strlen($this->container['errorCode']) > 11) {
            $invalidProperties[] = "invalid value for 'errorCode', the character length must be smaller than or equal to 11.";
        }
        if (!is_null($this->container['errorCode']) && mb_strlen($this->container['errorCode']) < 11) {
            $invalidProperties[] = "invalid value for 'errorCode', the character length must be bigger than or equal to 11.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return 0 === count($this->listInvalidProperties());
    }

    /**
     * Gets shopId.
     *
     * @return string|null
     */
    public function getShopId(): mixed
    {
        return $this->container['shopId'];
    }

    /**
     * Sets shopId.
     *
     * @param string $shopId ショップID
     */
    public function setShopId(mixed $shopId): static
    {
        if (is_null($shopId)) {
            throw new \InvalidArgumentException('non-nullable shopId cannot be null');
        }
        if (mb_strlen($shopId) > 13) {
            throw new \InvalidArgumentException('invalid length for $shopId when calling WebhookEventPaymentPayPay., must be smaller than or equal to 13.');
        }
        if (mb_strlen($shopId) < 13) {
            throw new \InvalidArgumentException('invalid length for $shopId when calling WebhookEventPaymentPayPay., must be bigger than or equal to 13.');
        }
        $this->container['shopId'] = $shopId;

        return $this;
    }

    /**
     * Gets orderId.
     *
     * @return string|null
     */
    public function getOrderId(): mixed
    {
        return $this->container['orderId'];
    }

    /**
     * Sets orderId.
     *
     * @param string $orderId オーダーID\\ 決済情報のIDです
     */
    public function setOrderId(mixed $orderId): static
    {
        if (is_null($orderId)) {
            throw new \InvalidArgumentException('non-nullable orderId cannot be null');
        }
        if (mb_strlen($orderId) > 30) {
            throw new \InvalidArgumentException('invalid length for $orderId when calling WebhookEventPaymentPayPay., must be smaller than or equal to 30.');
        }
        if (mb_strlen($orderId) < 1) {
            throw new \InvalidArgumentException('invalid length for $orderId when calling WebhookEventPaymentPayPay., must be bigger than or equal to 1.');
        }
        $this->container['orderId'] = $orderId;

        return $this;
    }

    /**
     * Gets accessId.
     *
     * @return string|null
     */
    public function getAccessId(): mixed
    {
        return $this->container['accessId'];
    }

    /**
     * Sets accessId.
     *
     * @param string $accessId 取引ID
     */
    public function setAccessId(mixed $accessId): static
    {
        if (is_null($accessId)) {
            throw new \InvalidArgumentException('non-nullable accessId cannot be null');
        }
        if (mb_strlen($accessId) > 24) {
            throw new \InvalidArgumentException('invalid length for $accessId when calling WebhookEventPaymentPayPay., must be smaller than or equal to 24.');
        }
        if (mb_strlen($accessId) < 24) {
            throw new \InvalidArgumentException('invalid length for $accessId when calling WebhookEventPaymentPayPay., must be bigger than or equal to 24.');
        }
        $this->container['accessId'] = $accessId;

        return $this;
    }

    /**
     * Gets payType.
     *
     * @return PayType|null
     */
    public function getPayType(): mixed
    {
        return $this->container['payType'];
    }

    /**
     * Sets payType.
     *
     * @param PayType $payType 決済種別\\ この決済で利用する決済手段です。  - `Paypay`: PayPay
     */
    public function setPayType(mixed $payType): static
    {
        if (is_null($payType)) {
            throw new \InvalidArgumentException('non-nullable payType cannot be null');
        }
        $this->container['payType'] = $payType;

        return $this;
    }

    /**
     * Gets status.
     *
     * @return PaymentStatus|null
     */
    public function getStatus(): mixed
    {
        return $this->container['status'];
    }

    /**
     * Sets status.
     *
     * @param PaymentStatus $status 決済ステータス  - `UNPROCESSED`: 未処理<br /><span class=\"smallText\">請求はまだ実行されていません。</span> - `AWAITING_CUSTOMER_PAYMENT`: 購入者の支払い待ち<br /><span class=\"smallText\">購入者によるPayPay上での取引承認を待っている状態。</span> - `AUTHORIZED`: 仮売上<br /><span class=\"smallText\">仮売上としてPayPay残高の確保が完了しており、売上確定により請求を完了できます。</span> - `CAPTURED`: 売上確定<br /><span class=\"smallText\">請求が完了し、売上が確定しています。</span> - `CANCELED`: キャンセル<br /><span class=\"smallText\">この決済はキャンセルされました。</span> - `EXPIRED`: 決済の期限切れ<br /><span class=\"smallText\">この決済は期限が切れています。</span>
     */
    public function setStatus(mixed $status): static
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets customerId.
     *
     * @return string|null
     */
    public function getCustomerId(): mixed
    {
        return $this->container['customerId'];
    }

    /**
     * Sets customerId.
     *
     * @param string|null $customerId 顧客ID
     */
    public function setCustomerId(mixed $customerId): static
    {
        if (is_null($customerId)) {
            $this->openAPINullablesSetToNull[] = 'customerId';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customerId', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($customerId) && mb_strlen($customerId) > 60) {
            throw new \InvalidArgumentException('invalid length for $customerId when calling WebhookEventPaymentPayPay., must be smaller than or equal to 60.');
        }
        if (!is_null($customerId) && mb_strlen($customerId) < 1) {
            throw new \InvalidArgumentException('invalid length for $customerId when calling WebhookEventPaymentPayPay., must be bigger than or equal to 1.');
        }
        $this->container['customerId'] = $customerId;

        return $this;
    }

    /**
     * Gets processDate.
     *
     * @return string|null
     */
    public function getProcessDate(): mixed
    {
        return $this->container['processDate'];
    }

    /**
     * Sets processDate.
     *
     * @param string|null $processDate 決済 処理日時\\ 決済の各種処理（決済実行、キャンセルなど）が行われた日時です
     */
    public function setProcessDate(mixed $processDate): static
    {
        if (is_null($processDate)) {
            $this->openAPINullablesSetToNull[] = 'processDate';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('processDate', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['processDate'] = $processDate;

        return $this;
    }

    /**
     * Gets jobCode.
     *
     * @return PayPayPaymentJobCode|null
     */
    public function getJobCode(): mixed
    {
        return $this->container['jobCode'];
    }

    /**
     * Sets jobCode.
     *
     * @param PayPayPaymentJobCode|null $jobCode jobCode
     */
    public function setJobCode(mixed $jobCode): static
    {
        if (is_null($jobCode)) {
            $this->openAPINullablesSetToNull[] = 'jobCode';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('jobCode', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['jobCode'] = $jobCode;

        return $this;
    }

    /**
     * Gets clientField1.
     *
     * @return string|null
     */
    public function getClientField1(): mixed
    {
        return $this->container['clientField1'];
    }

    /**
     * Sets clientField1.
     *
     * @param string|null $clientField1 加盟店自由項目 1
     */
    public function setClientField1(mixed $clientField1): static
    {
        if (is_null($clientField1)) {
            $this->openAPINullablesSetToNull[] = 'clientField1';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('clientField1', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($clientField1) && mb_strlen($clientField1) > 100) {
            throw new \InvalidArgumentException('invalid length for $clientField1 when calling WebhookEventPaymentPayPay., must be smaller than or equal to 100.');
        }
        if (!is_null($clientField1) && mb_strlen($clientField1) < 1) {
            throw new \InvalidArgumentException('invalid length for $clientField1 when calling WebhookEventPaymentPayPay., must be bigger than or equal to 1.');
        }
        $this->container['clientField1'] = $clientField1;

        return $this;
    }

    /**
     * Gets clientField2.
     *
     * @return string|null
     */
    public function getClientField2(): mixed
    {
        return $this->container['clientField2'];
    }

    /**
     * Sets clientField2.
     *
     * @param string|null $clientField2 加盟店自由項目 2
     */
    public function setClientField2(mixed $clientField2): static
    {
        if (is_null($clientField2)) {
            $this->openAPINullablesSetToNull[] = 'clientField2';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('clientField2', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($clientField2) && mb_strlen($clientField2) > 100) {
            throw new \InvalidArgumentException('invalid length for $clientField2 when calling WebhookEventPaymentPayPay., must be smaller than or equal to 100.');
        }
        if (!is_null($clientField2) && mb_strlen($clientField2) < 1) {
            throw new \InvalidArgumentException('invalid length for $clientField2 when calling WebhookEventPaymentPayPay., must be bigger than or equal to 1.');
        }
        $this->container['clientField2'] = $clientField2;

        return $this;
    }

    /**
     * Gets clientField3.
     *
     * @return string|null
     */
    public function getClientField3(): mixed
    {
        return $this->container['clientField3'];
    }

    /**
     * Sets clientField3.
     *
     * @param string|null $clientField3 加盟店自由項目 3
     */
    public function setClientField3(mixed $clientField3): static
    {
        if (is_null($clientField3)) {
            $this->openAPINullablesSetToNull[] = 'clientField3';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('clientField3', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($clientField3) && mb_strlen($clientField3) > 100) {
            throw new \InvalidArgumentException('invalid length for $clientField3 when calling WebhookEventPaymentPayPay., must be smaller than or equal to 100.');
        }
        if (!is_null($clientField3) && mb_strlen($clientField3) < 1) {
            throw new \InvalidArgumentException('invalid length for $clientField3 when calling WebhookEventPaymentPayPay., must be bigger than or equal to 1.');
        }
        $this->container['clientField3'] = $clientField3;

        return $this;
    }

    /**
     * Gets amount.
     *
     * @return string|null
     */
    public function getAmount(): mixed
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount.
     *
     * @param string $amount 利用金額
     */
    public function setAmount(mixed $amount): static
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        if (mb_strlen($amount) > 9) {
            throw new \InvalidArgumentException('invalid length for $amount when calling WebhookEventPaymentPayPay., must be smaller than or equal to 9.');
        }
        if (mb_strlen($amount) < 1) {
            throw new \InvalidArgumentException('invalid length for $amount when calling WebhookEventPaymentPayPay., must be bigger than or equal to 1.');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets tax.
     *
     * @return string|null
     */
    public function getTax(): mixed
    {
        return $this->container['tax'];
    }

    /**
     * Sets tax.
     *
     * @param string $tax 税送料
     */
    public function setTax(mixed $tax): static
    {
        if (is_null($tax)) {
            throw new \InvalidArgumentException('non-nullable tax cannot be null');
        }
        if (mb_strlen($tax) > 9) {
            throw new \InvalidArgumentException('invalid length for $tax when calling WebhookEventPaymentPayPay., must be smaller than or equal to 9.');
        }
        if (mb_strlen($tax) < 1) {
            throw new \InvalidArgumentException('invalid length for $tax when calling WebhookEventPaymentPayPay., must be bigger than or equal to 1.');
        }
        $this->container['tax'] = $tax;

        return $this;
    }

    /**
     * Gets codeExpiryDate.
     *
     * @return string|null
     */
    public function getCodeExpiryDate(): mixed
    {
        return $this->container['codeExpiryDate'];
    }

    /**
     * Sets codeExpiryDate.
     *
     * @param string|null $codeExpiryDate 支払期限\\ 形式： `yyyy/MM/dd HH:mm:ss.SSS`
     */
    public function setCodeExpiryDate(mixed $codeExpiryDate): static
    {
        if (is_null($codeExpiryDate)) {
            $this->openAPINullablesSetToNull[] = 'codeExpiryDate';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('codeExpiryDate', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['codeExpiryDate'] = $codeExpiryDate;

        return $this;
    }

    /**
     * Gets authMaxDate.
     *
     * @return string|null
     */
    public function getAuthMaxDate(): mixed
    {
        return $this->container['authMaxDate'];
    }

    /**
     * Sets authMaxDate.
     *
     * @param string|null $authMaxDate 仮売上期限\\ 形式： `yyyy/MM/dd`
     */
    public function setAuthMaxDate(mixed $authMaxDate): static
    {
        if (is_null($authMaxDate)) {
            $this->openAPINullablesSetToNull[] = 'authMaxDate';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('authMaxDate', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['authMaxDate'] = $authMaxDate;

        return $this;
    }

    /**
     * Gets orderDescription.
     *
     * @return string|null
     */
    public function getOrderDescription(): mixed
    {
        return $this->container['orderDescription'];
    }

    /**
     * Sets orderDescription.
     *
     * @param string|null $orderDescription 注文内容の説明\\ 購入者のPayPayアプリ上で表示される注文内容の説明
     */
    public function setOrderDescription(mixed $orderDescription): static
    {
        if (is_null($orderDescription)) {
            $this->openAPINullablesSetToNull[] = 'orderDescription';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('orderDescription', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($orderDescription) && mb_strlen($orderDescription) > 100) {
            throw new \InvalidArgumentException('invalid length for $orderDescription when calling WebhookEventPaymentPayPay., must be smaller than or equal to 100.');
        }
        $this->container['orderDescription'] = $orderDescription;

        return $this;
    }

    /**
     * Gets codeId.
     *
     * @return string|null
     */
    public function getCodeId(): mixed
    {
        return $this->container['codeId'];
    }

    /**
     * Sets codeId.
     *
     * @param string|null $codeId PayPayの支払いコードID
     */
    public function setCodeId(mixed $codeId): static
    {
        if (is_null($codeId)) {
            $this->openAPINullablesSetToNull[] = 'codeId';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('codeId', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($codeId) && mb_strlen($codeId) > 64) {
            throw new \InvalidArgumentException('invalid length for $codeId when calling WebhookEventPaymentPayPay., must be smaller than or equal to 64.');
        }
        if (!is_null($codeId) && mb_strlen($codeId) < 1) {
            throw new \InvalidArgumentException('invalid length for $codeId when calling WebhookEventPaymentPayPay., must be bigger than or equal to 1.');
        }
        $this->container['codeId'] = $codeId;

        return $this;
    }

    /**
     * Gets paymentId.
     *
     * @return string|null
     */
    public function getPaymentId(): mixed
    {
        return $this->container['paymentId'];
    }

    /**
     * Sets paymentId.
     *
     * @param string|null $paymentId PayPay 決済ID
     */
    public function setPaymentId(mixed $paymentId): static
    {
        if (is_null($paymentId)) {
            $this->openAPINullablesSetToNull[] = 'paymentId';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('paymentId', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($paymentId) && mb_strlen($paymentId) > 64) {
            throw new \InvalidArgumentException('invalid length for $paymentId when calling WebhookEventPaymentPayPay., must be smaller than or equal to 64.');
        }
        if (!is_null($paymentId) && mb_strlen($paymentId) < 1) {
            throw new \InvalidArgumentException('invalid length for $paymentId when calling WebhookEventPaymentPayPay., must be bigger than or equal to 1.');
        }
        $this->container['paymentId'] = $paymentId;

        return $this;
    }

    /**
     * Gets paymentDate.
     *
     * @return string|null
     */
    public function getPaymentDate(): mixed
    {
        return $this->container['paymentDate'];
    }

    /**
     * Sets paymentDate.
     *
     * @param string|null $paymentDate 支払日時\\ 形式： `yyyy/MM/dd HH:mm:ss.SSS`
     */
    public function setPaymentDate(mixed $paymentDate): static
    {
        if (is_null($paymentDate)) {
            $this->openAPINullablesSetToNull[] = 'paymentDate';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('paymentDate', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['paymentDate'] = $paymentDate;

        return $this;
    }

    /**
     * Gets merchantPaymentId.
     *
     * @return string|null
     */
    public function getMerchantPaymentId(): mixed
    {
        return $this->container['merchantPaymentId'];
    }

    /**
     * Sets merchantPaymentId.
     *
     * @param string|null $merchantPaymentId PayPay トランザクションID
     */
    public function setMerchantPaymentId(mixed $merchantPaymentId): static
    {
        if (is_null($merchantPaymentId)) {
            $this->openAPINullablesSetToNull[] = 'merchantPaymentId';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('merchantPaymentId', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($merchantPaymentId) && mb_strlen($merchantPaymentId) > 64) {
            throw new \InvalidArgumentException('invalid length for $merchantPaymentId when calling WebhookEventPaymentPayPay., must be smaller than or equal to 64.');
        }
        if (!is_null($merchantPaymentId) && mb_strlen($merchantPaymentId) < 1) {
            throw new \InvalidArgumentException('invalid length for $merchantPaymentId when calling WebhookEventPaymentPayPay., must be bigger than or equal to 1.');
        }
        $this->container['merchantPaymentId'] = $merchantPaymentId;

        return $this;
    }

    /**
     * Gets merchantUpdateId.
     *
     * @return string|null
     */
    public function getMerchantUpdateId(): mixed
    {
        return $this->container['merchantUpdateId'];
    }

    /**
     * Sets merchantUpdateId.
     *
     * @param string|null $merchantUpdateId PayPay 金額変更ID
     */
    public function setMerchantUpdateId(mixed $merchantUpdateId): static
    {
        if (is_null($merchantUpdateId)) {
            $this->openAPINullablesSetToNull[] = 'merchantUpdateId';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('merchantUpdateId', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($merchantUpdateId) && mb_strlen($merchantUpdateId) > 64) {
            throw new \InvalidArgumentException('invalid length for $merchantUpdateId when calling WebhookEventPaymentPayPay., must be smaller than or equal to 64.');
        }
        if (!is_null($merchantUpdateId) && mb_strlen($merchantUpdateId) < 1) {
            throw new \InvalidArgumentException('invalid length for $merchantUpdateId when calling WebhookEventPaymentPayPay., must be bigger than or equal to 1.');
        }
        $this->container['merchantUpdateId'] = $merchantUpdateId;

        return $this;
    }

    /**
     * Gets merchantRevertId.
     *
     * @return string|null
     */
    public function getMerchantRevertId(): mixed
    {
        return $this->container['merchantRevertId'];
    }

    /**
     * Sets merchantRevertId.
     *
     * @param string|null $merchantRevertId PayPay キャンセルID
     */
    public function setMerchantRevertId(mixed $merchantRevertId): static
    {
        if (is_null($merchantRevertId)) {
            $this->openAPINullablesSetToNull[] = 'merchantRevertId';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('merchantRevertId', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($merchantRevertId) && mb_strlen($merchantRevertId) > 64) {
            throw new \InvalidArgumentException('invalid length for $merchantRevertId when calling WebhookEventPaymentPayPay., must be smaller than or equal to 64.');
        }
        if (!is_null($merchantRevertId) && mb_strlen($merchantRevertId) < 1) {
            throw new \InvalidArgumentException('invalid length for $merchantRevertId when calling WebhookEventPaymentPayPay., must be bigger than or equal to 1.');
        }
        $this->container['merchantRevertId'] = $merchantRevertId;

        return $this;
    }

    /**
     * Gets merchantRefundId.
     *
     * @return string|null
     */
    public function getMerchantRefundId(): mixed
    {
        return $this->container['merchantRefundId'];
    }

    /**
     * Sets merchantRefundId.
     *
     * @param string|null $merchantRefundId PayPay 返金ID
     */
    public function setMerchantRefundId(mixed $merchantRefundId): static
    {
        if (is_null($merchantRefundId)) {
            $this->openAPINullablesSetToNull[] = 'merchantRefundId';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('merchantRefundId', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($merchantRefundId) && mb_strlen($merchantRefundId) > 64) {
            throw new \InvalidArgumentException('invalid length for $merchantRefundId when calling WebhookEventPaymentPayPay., must be smaller than or equal to 64.');
        }
        if (!is_null($merchantRefundId) && mb_strlen($merchantRefundId) < 1) {
            throw new \InvalidArgumentException('invalid length for $merchantRefundId when calling WebhookEventPaymentPayPay., must be bigger than or equal to 1.');
        }
        $this->container['merchantRefundId'] = $merchantRefundId;

        return $this;
    }

    /**
     * Gets errorCode.
     *
     * @return string|null
     */
    public function getErrorCode(): mixed
    {
        return $this->container['errorCode'];
    }

    /**
     * Sets errorCode.
     *
     * @param string|null $errorCode この決済において発生したエラーのうち、一番最新のエラーのエラーコードです。\\ [各エラーコードの定義はこちらを参照](https://docs.fincode.jp/develop_support/error)して確認できます。
     */
    public function setErrorCode(mixed $errorCode): static
    {
        if (is_null($errorCode)) {
            $this->openAPINullablesSetToNull[] = 'errorCode';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('errorCode', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($errorCode) && mb_strlen($errorCode) > 11) {
            throw new \InvalidArgumentException('invalid length for $errorCode when calling WebhookEventPaymentPayPay., must be smaller than or equal to 11.');
        }
        if (!is_null($errorCode) && mb_strlen($errorCode) < 11) {
            throw new \InvalidArgumentException('invalid length for $errorCode when calling WebhookEventPaymentPayPay., must be bigger than or equal to 11.');
        }
        $this->container['errorCode'] = $errorCode;

        return $this;
    }

    /**
     * Gets event.
     *
     * @return FincodeEvent|null
     */
    public function getEvent(): mixed
    {
        return $this->container['event'];
    }

    /**
     * Sets event.
     *
     * @param FincodeEvent $event event
     */
    public function setEvent(mixed $event): static
    {
        if (is_null($event)) {
            throw new \InvalidArgumentException('non-nullable event cannot be null');
        }
        $this->container['event'] = $event;

        return $this;
    }

    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @see https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    public function jsonSerialize(): mixed
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object.
     */
    public function __toString(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
    }

    /**
     * Gets a header-safe presentation of the object.
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
