<?php

declare(strict_types=1);
/**
 * fincode API.
 *
 * fincodeのAPIリファレンスです。\\ fincodeは決済情報のほか様々なリソースを管理できるため、リソース指向なREST APIをベースとしたインターフェイス設計のもとでAPIを提供しています。\\ APIの呼び出しにはAPIキーによる認証が必要であり、リクエストの際に`Authorization`ヘッダーに有効なAPIキーをセットすることで認証できます。
 *
 * The version of the OpenAPI document: 1.2.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Fincode\Model;

use OpenAPI\Fincode\ObjectSerializer;

/**
 * @implements \ArrayAccess<string, mixed>
 */
class CardDestination implements ModelInterface, \ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;
    /**
     * The original name of the model.
     */
    protected static string $openAPIModelName = 'CardDestination';
    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var array<string, string>
     */
    protected static array $openAPITypes = ['contractCardInfoMasterId' => 'int', 'examinationMasterId' => '\OpenAPI\Fincode\Model\ExaminationMasterId', 'destination' => 'string', 'destinationType' => 'float'];
    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var array<string, string|null>
     */
    protected static array $openAPIFormats = ['contractCardInfoMasterId' => null, 'examinationMasterId' => null, 'destination' => null, 'destinationType' => null];
    /**
     * Array of nullable properties. Used for (de)serialization.
     *
     * @var array<string, bool>
     */
    protected static array $openAPINullables = ['contractCardInfoMasterId' => true, 'examinationMasterId' => true, 'destination' => true, 'destinationType' => true];
    /**
     * If a nullable field gets set to null, insert it here.
     *
     * @var array<string, bool>
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return array<string, string|null>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties.
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null.
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null.
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable.
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }
    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = ['contractCardInfoMasterId' => 'contract_card_info_master_id', 'examinationMasterId' => 'examination_master_id', 'destination' => 'destination', 'destinationType' => 'destination_type'];
    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var array<string, string>
     */
    protected static array $setters = ['contractCardInfoMasterId' => 'setContractCardInfoMasterId', 'examinationMasterId' => 'setExaminationMasterId', 'destination' => 'setDestination', 'destinationType' => 'setDestinationType'];
    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var array<string, string>
     */
    protected static array $getters = ['contractCardInfoMasterId' => 'getContractCardInfoMasterId', 'examinationMasterId' => 'getExaminationMasterId', 'destination' => 'getDestination', 'destinationType' => 'getDestinationType'];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }
    /**
     * Associative array for storing property values.
     *
     * @phpstan-var array<string, mixed>
     *
     * @psalm-var array<string, mixed>
     */
    protected array $container = [];

    /**
     * Constructor.
     *
     * @param array<string, mixed> $data Associated array of property values
     *                                   initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('contractCardInfoMasterId', $data ?? [], null);
        $this->setIfExists('examinationMasterId', $data ?? [], null);
        $this->setIfExists('destination', $data ?? [], null);
        $this->setIfExists('destinationType', $data ?? [], null);
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array.
     *
     * @param array<string, mixed> $fields
     */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }
        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return list<string> invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];
        if (!is_null($this->container['destination']) && mb_strlen($this->container['destination']) > 13) {
            $invalidProperties[] = "invalid value for 'destination', the character length must be smaller than or equal to 13.";
        }
        if (!is_null($this->container['destination']) && mb_strlen($this->container['destination']) < 1) {
            $invalidProperties[] = "invalid value for 'destination', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return 0 === count($this->listInvalidProperties());
    }

    /**
     * Gets contractCardInfoMasterId.
     *
     * @return int|null
     */
    public function getContractCardInfoMasterId(): mixed
    {
        return $this->container['contractCardInfoMasterId'];
    }

    /**
     * Sets contractCardInfoMasterId.
     *
     * @param int|null $contractCardInfoMasterId カードマスタID
     */
    public function setContractCardInfoMasterId(mixed $contractCardInfoMasterId): static
    {
        if (is_null($contractCardInfoMasterId)) {
            $this->openAPINullablesSetToNull[] = 'contractCardInfoMasterId';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('contractCardInfoMasterId', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['contractCardInfoMasterId'] = $contractCardInfoMasterId;

        return $this;
    }

    /**
     * Gets examinationMasterId.
     *
     * @return ExaminationMasterId|null
     */
    public function getExaminationMasterId(): mixed
    {
        return $this->container['examinationMasterId'];
    }

    /**
     * Sets examinationMasterId.
     *
     * @param ExaminationMasterId|null $examinationMasterId examinationMasterId
     */
    public function setExaminationMasterId(mixed $examinationMasterId): static
    {
        if (is_null($examinationMasterId)) {
            $this->openAPINullablesSetToNull[] = 'examinationMasterId';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('examinationMasterId', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['examinationMasterId'] = $examinationMasterId;

        return $this;
    }

    /**
     * Gets destination.
     *
     * @return string|null
     */
    public function getDestination(): mixed
    {
        return $this->container['destination'];
    }

    /**
     * Sets destination.
     *
     * @param string|null $destination 仕向け先
     */
    public function setDestination(mixed $destination): static
    {
        if (is_null($destination)) {
            $this->openAPINullablesSetToNull[] = 'destination';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('destination', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($destination) && mb_strlen($destination) > 13) {
            throw new \InvalidArgumentException('invalid length for $destination when calling CardDestination., must be smaller than or equal to 13.');
        }
        if (!is_null($destination) && mb_strlen($destination) < 1) {
            throw new \InvalidArgumentException('invalid length for $destination when calling CardDestination., must be bigger than or equal to 1.');
        }
        $this->container['destination'] = $destination;

        return $this;
    }

    /**
     * Gets destinationType.
     *
     * @return float|null
     */
    public function getDestinationType(): mixed
    {
        return $this->container['destinationType'];
    }

    /**
     * Sets destinationType.
     *
     * @param float|null $destinationType 仕向け先種別
     */
    public function setDestinationType(mixed $destinationType): static
    {
        if (is_null($destinationType)) {
            $this->openAPINullablesSetToNull[] = 'destinationType';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('destinationType', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['destinationType'] = $destinationType;

        return $this;
    }

    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @see https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    public function jsonSerialize(): mixed
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object.
     */
    public function __toString(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
    }

    /**
     * Gets a header-safe presentation of the object.
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
