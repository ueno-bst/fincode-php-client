<?php

declare(strict_types=1);
/**
 * fincode API.
 *
 * fincodeのAPIリファレンスです。\\ fincodeは決済情報のほか様々なリソースを管理できるため、リソース指向なREST APIをベースとしたインターフェイス設計のもとでAPIを提供しています。\\ APIの呼び出しにはAPIキーによる認証が必要であり、リクエストの際に`Authorization`ヘッダーに有効なAPIキーをセットすることで認証できます。
 *
 * The version of the OpenAPI document: 1.2.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Fincode\Model;

use OpenAPI\Fincode\ObjectSerializer;

/**
 * @implements \ArrayAccess<string, mixed>
 */
class PaymentKonbiniExecutingRequest implements ModelInterface, \ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;
    /**
     * The original name of the model.
     */
    protected static string $openAPIModelName = 'Payment.Konbini.Executing.Request';
    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var array<string, string>
     */
    protected static array $openAPITypes = ['payType' => '\OpenAPI\Fincode\Model\PayType', 'accessId' => 'string', 'customerId' => 'string', 'paymentTermDay' => 'string', 'deviceName' => 'string', 'winWidth' => 'string', 'winHeight' => 'string', 'pixelRatio' => 'string', 'winSizeType' => '\OpenAPI\Fincode\Model\WinSizeType'];
    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var array<string, string|null>
     */
    protected static array $openAPIFormats = ['payType' => null, 'accessId' => null, 'customerId' => null, 'paymentTermDay' => null, 'deviceName' => null, 'winWidth' => null, 'winHeight' => null, 'pixelRatio' => null, 'winSizeType' => null];
    /**
     * Array of nullable properties. Used for (de)serialization.
     *
     * @var array<string, bool>
     */
    protected static array $openAPINullables = ['payType' => false, 'accessId' => false, 'customerId' => false, 'paymentTermDay' => false, 'deviceName' => false, 'winWidth' => false, 'winHeight' => false, 'pixelRatio' => false, 'winSizeType' => false];
    /**
     * If a nullable field gets set to null, insert it here.
     *
     * @var array<string, bool>
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return array<string, string|null>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties.
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null.
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null.
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable.
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }
    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = ['payType' => 'pay_type', 'accessId' => 'access_id', 'customerId' => 'customer_id', 'paymentTermDay' => 'payment_term_day', 'deviceName' => 'device_name', 'winWidth' => 'win_width', 'winHeight' => 'win_height', 'pixelRatio' => 'pixel_ratio', 'winSizeType' => 'win_size_type'];
    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var array<string, string>
     */
    protected static array $setters = ['payType' => 'setPayType', 'accessId' => 'setAccessId', 'customerId' => 'setCustomerId', 'paymentTermDay' => 'setPaymentTermDay', 'deviceName' => 'setDeviceName', 'winWidth' => 'setWinWidth', 'winHeight' => 'setWinHeight', 'pixelRatio' => 'setPixelRatio', 'winSizeType' => 'setWinSizeType'];
    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var array<string, string>
     */
    protected static array $getters = ['payType' => 'getPayType', 'accessId' => 'getAccessId', 'customerId' => 'getCustomerId', 'paymentTermDay' => 'getPaymentTermDay', 'deviceName' => 'getDeviceName', 'winWidth' => 'getWinWidth', 'winHeight' => 'getWinHeight', 'pixelRatio' => 'getPixelRatio', 'winSizeType' => 'getWinSizeType'];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }
    /**
     * Associative array for storing property values.
     *
     * @phpstan-var array<string, mixed>
     *
     * @psalm-var array<string, mixed>
     */
    protected array $container = [];

    /**
     * Constructor.
     *
     * @param array<string, mixed> $data Associated array of property values
     *                                   initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('payType', $data ?? [], null);
        $this->setIfExists('accessId', $data ?? [], null);
        $this->setIfExists('customerId', $data ?? [], null);
        $this->setIfExists('paymentTermDay', $data ?? [], null);
        $this->setIfExists('deviceName', $data ?? [], null);
        $this->setIfExists('winWidth', $data ?? [], null);
        $this->setIfExists('winHeight', $data ?? [], null);
        $this->setIfExists('pixelRatio', $data ?? [], null);
        $this->setIfExists('winSizeType', $data ?? [], null);
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array.
     *
     * @param array<string, mixed> $fields
     */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }
        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return list<string> invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];
        if (null === $this->container['payType']) {
            $invalidProperties[] = "'payType' can't be null";
        }
        if (null === $this->container['accessId']) {
            $invalidProperties[] = "'accessId' can't be null";
        }
        if (mb_strlen($this->container['accessId']) > 24) {
            $invalidProperties[] = "invalid value for 'accessId', the character length must be smaller than or equal to 24.";
        }
        if (mb_strlen($this->container['accessId']) < 24) {
            $invalidProperties[] = "invalid value for 'accessId', the character length must be bigger than or equal to 24.";
        }
        if (!is_null($this->container['customerId']) && mb_strlen($this->container['customerId']) > 60) {
            $invalidProperties[] = "invalid value for 'customerId', the character length must be smaller than or equal to 60.";
        }
        if (!is_null($this->container['customerId']) && mb_strlen($this->container['customerId']) < 1) {
            $invalidProperties[] = "invalid value for 'customerId', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['paymentTermDay']) && mb_strlen($this->container['paymentTermDay']) > 2) {
            $invalidProperties[] = "invalid value for 'paymentTermDay', the character length must be smaller than or equal to 2.";
        }
        if (!is_null($this->container['paymentTermDay']) && mb_strlen($this->container['paymentTermDay']) < 1) {
            $invalidProperties[] = "invalid value for 'paymentTermDay', the character length must be bigger than or equal to 1.";
        }
        if (null === $this->container['deviceName']) {
            $invalidProperties[] = "'deviceName' can't be null";
        }
        if (mb_strlen($this->container['deviceName']) > 20) {
            $invalidProperties[] = "invalid value for 'deviceName', the character length must be smaller than or equal to 20.";
        }
        if (mb_strlen($this->container['deviceName']) < 1) {
            $invalidProperties[] = "invalid value for 'deviceName', the character length must be bigger than or equal to 1.";
        }
        if (null === $this->container['winWidth']) {
            $invalidProperties[] = "'winWidth' can't be null";
        }
        if (mb_strlen($this->container['winWidth']) > 5) {
            $invalidProperties[] = "invalid value for 'winWidth', the character length must be smaller than or equal to 5.";
        }
        if (mb_strlen($this->container['winWidth']) < 1) {
            $invalidProperties[] = "invalid value for 'winWidth', the character length must be bigger than or equal to 1.";
        }
        if (null === $this->container['winHeight']) {
            $invalidProperties[] = "'winHeight' can't be null";
        }
        if (mb_strlen($this->container['winHeight']) > 5) {
            $invalidProperties[] = "invalid value for 'winHeight', the character length must be smaller than or equal to 5.";
        }
        if (mb_strlen($this->container['winHeight']) < 1) {
            $invalidProperties[] = "invalid value for 'winHeight', the character length must be bigger than or equal to 1.";
        }
        if (null === $this->container['pixelRatio']) {
            $invalidProperties[] = "'pixelRatio' can't be null";
        }
        if (mb_strlen($this->container['pixelRatio']) > 5) {
            $invalidProperties[] = "invalid value for 'pixelRatio', the character length must be smaller than or equal to 5.";
        }
        if (mb_strlen($this->container['pixelRatio']) < 1) {
            $invalidProperties[] = "invalid value for 'pixelRatio', the character length must be bigger than or equal to 1.";
        }
        if (null === $this->container['winSizeType']) {
            $invalidProperties[] = "'winSizeType' can't be null";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return 0 === count($this->listInvalidProperties());
    }

    /**
     * Gets payType.
     *
     * @return PayType
     */
    public function getPayType(): mixed
    {
        return $this->container['payType'];
    }

    /**
     * Sets payType.
     *
     * @param PayType $payType 決済種別\\ この決済で利用する決済手段です。  - `Konbini`: コンビニ決済
     */
    public function setPayType(mixed $payType): static
    {
        if (is_null($payType)) {
            throw new \InvalidArgumentException('non-nullable payType cannot be null');
        }
        $this->container['payType'] = $payType;

        return $this;
    }

    /**
     * Gets accessId.
     *
     * @return string
     */
    public function getAccessId(): mixed
    {
        return $this->container['accessId'];
    }

    /**
     * Sets accessId.
     *
     * @param string $accessId 取引ID
     */
    public function setAccessId(mixed $accessId): static
    {
        if (is_null($accessId)) {
            throw new \InvalidArgumentException('non-nullable accessId cannot be null');
        }
        if (mb_strlen($accessId) > 24) {
            throw new \InvalidArgumentException('invalid length for $accessId when calling PaymentKonbiniExecutingRequest., must be smaller than or equal to 24.');
        }
        if (mb_strlen($accessId) < 24) {
            throw new \InvalidArgumentException('invalid length for $accessId when calling PaymentKonbiniExecutingRequest., must be bigger than or equal to 24.');
        }
        $this->container['accessId'] = $accessId;

        return $this;
    }

    /**
     * Gets customerId.
     *
     * @return string|null
     */
    public function getCustomerId(): mixed
    {
        return $this->container['customerId'];
    }

    /**
     * Sets customerId.
     *
     * @param string $customerId 顧客ID\\ 購入者となる顧客のIDです
     */
    public function setCustomerId(mixed $customerId): static
    {
        if (is_null($customerId)) {
            throw new \InvalidArgumentException('non-nullable customerId cannot be null');
        }
        if (mb_strlen($customerId) > 60) {
            throw new \InvalidArgumentException('invalid length for $customerId when calling PaymentKonbiniExecutingRequest., must be smaller than or equal to 60.');
        }
        if (mb_strlen($customerId) < 1) {
            throw new \InvalidArgumentException('invalid length for $customerId when calling PaymentKonbiniExecutingRequest., must be bigger than or equal to 1.');
        }
        $this->container['customerId'] = $customerId;

        return $this;
    }

    /**
     * Gets paymentTermDay.
     *
     * @return string|null
     */
    public function getPaymentTermDay(): mixed
    {
        return $this->container['paymentTermDay'];
    }

    /**
     * Sets paymentTermDay.
     *
     * @param string $paymentTermDay 支払い期限日数\\ この決済の支払い期限日数です。`0`日から`14`日まで指定できます。  - `0`を指定すると決済を作成した当日に限り支払いが可能な決済が作成されます。 - デフォルト：`2`
     */
    public function setPaymentTermDay(mixed $paymentTermDay): static
    {
        if (is_null($paymentTermDay)) {
            throw new \InvalidArgumentException('non-nullable paymentTermDay cannot be null');
        }
        if (mb_strlen($paymentTermDay) > 2) {
            throw new \InvalidArgumentException('invalid length for $paymentTermDay when calling PaymentKonbiniExecutingRequest., must be smaller than or equal to 2.');
        }
        if (mb_strlen($paymentTermDay) < 1) {
            throw new \InvalidArgumentException('invalid length for $paymentTermDay when calling PaymentKonbiniExecutingRequest., must be bigger than or equal to 1.');
        }
        $this->container['paymentTermDay'] = $paymentTermDay;

        return $this;
    }

    /**
     * Gets deviceName.
     *
     * @return string
     */
    public function getDeviceName(): mixed
    {
        return $this->container['deviceName'];
    }

    /**
     * Sets deviceName.
     *
     * @param string $deviceName デバイス名\\ バーコード表示を行うデバイスの名前を指定します。  - Androidの場合： [ユーザーエージェントクライアントヒントAPI](https://developer.mozilla.org/ja/docs/Web/API/User-Agent_Client_Hints_API)またはNavigator: userAgentプロパティ（非推奨）で取得できる文字列から取得したデバイス名を指定します。 - iPhoneの場合： 固定文字列`iPhone`を指定します。
     */
    public function setDeviceName(mixed $deviceName): static
    {
        if (is_null($deviceName)) {
            throw new \InvalidArgumentException('non-nullable deviceName cannot be null');
        }
        if (mb_strlen($deviceName) > 20) {
            throw new \InvalidArgumentException('invalid length for $deviceName when calling PaymentKonbiniExecutingRequest., must be smaller than or equal to 20.');
        }
        if (mb_strlen($deviceName) < 1) {
            throw new \InvalidArgumentException('invalid length for $deviceName when calling PaymentKonbiniExecutingRequest., must be bigger than or equal to 1.');
        }
        $this->container['deviceName'] = $deviceName;

        return $this;
    }

    /**
     * Gets winWidth.
     *
     * @return string
     */
    public function getWinWidth(): mixed
    {
        return $this->container['winWidth'];
    }

    /**
     * Sets winWidth.
     *
     * @param string $winWidth デバイス画面幅\\ バーコード表示を行うデバイスの画面幅を指定します。  - Androidの場合： `window.screen.width`で取得した値に `pixel_ratio`（ピクセル比）の値を乗じたものを指定します。 - iPhoneの場合： `window.screen.width`で取得した値を指定します。
     */
    public function setWinWidth(mixed $winWidth): static
    {
        if (is_null($winWidth)) {
            throw new \InvalidArgumentException('non-nullable winWidth cannot be null');
        }
        if (mb_strlen($winWidth) > 5) {
            throw new \InvalidArgumentException('invalid length for $winWidth when calling PaymentKonbiniExecutingRequest., must be smaller than or equal to 5.');
        }
        if (mb_strlen($winWidth) < 1) {
            throw new \InvalidArgumentException('invalid length for $winWidth when calling PaymentKonbiniExecutingRequest., must be bigger than or equal to 1.');
        }
        $this->container['winWidth'] = $winWidth;

        return $this;
    }

    /**
     * Gets winHeight.
     *
     * @return string
     */
    public function getWinHeight(): mixed
    {
        return $this->container['winHeight'];
    }

    /**
     * Sets winHeight.
     *
     * @param string $winHeight デバイス画面の高さ\\ バーコード表示を行うデバイス画面の高さを指定します。  - Androidの場合： `window.screen.height`で取得した値に `pixel_ratio`（ピクセル比）の値を乗じたものを指定します。 - iPhoneの場合： `window.screen.height`で取得した値を指定します。
     */
    public function setWinHeight(mixed $winHeight): static
    {
        if (is_null($winHeight)) {
            throw new \InvalidArgumentException('non-nullable winHeight cannot be null');
        }
        if (mb_strlen($winHeight) > 5) {
            throw new \InvalidArgumentException('invalid length for $winHeight when calling PaymentKonbiniExecutingRequest., must be smaller than or equal to 5.');
        }
        if (mb_strlen($winHeight) < 1) {
            throw new \InvalidArgumentException('invalid length for $winHeight when calling PaymentKonbiniExecutingRequest., must be bigger than or equal to 1.');
        }
        $this->container['winHeight'] = $winHeight;

        return $this;
    }

    /**
     * Gets pixelRatio.
     *
     * @return string
     */
    public function getPixelRatio(): mixed
    {
        return $this->container['pixelRatio'];
    }

    /**
     * Sets pixelRatio.
     *
     * @param string $pixelRatio デバイスピクセル比\\ `window.devicePixelRatio`から取得した値を小数点以下2桁まで指定します。
     */
    public function setPixelRatio(mixed $pixelRatio): static
    {
        if (is_null($pixelRatio)) {
            throw new \InvalidArgumentException('non-nullable pixelRatio cannot be null');
        }
        if (mb_strlen($pixelRatio) > 5) {
            throw new \InvalidArgumentException('invalid length for $pixelRatio when calling PaymentKonbiniExecutingRequest., must be smaller than or equal to 5.');
        }
        if (mb_strlen($pixelRatio) < 1) {
            throw new \InvalidArgumentException('invalid length for $pixelRatio when calling PaymentKonbiniExecutingRequest., must be bigger than or equal to 1.');
        }
        $this->container['pixelRatio'] = $pixelRatio;

        return $this;
    }

    /**
     * Gets winSizeType.
     *
     * @return WinSizeType
     */
    public function getWinSizeType(): mixed
    {
        return $this->container['winSizeType'];
    }

    /**
     * Sets winSizeType.
     *
     * @param WinSizeType $winSizeType winSizeType
     */
    public function setWinSizeType(mixed $winSizeType): static
    {
        if (is_null($winSizeType)) {
            throw new \InvalidArgumentException('non-nullable winSizeType cannot be null');
        }
        $this->container['winSizeType'] = $winSizeType;

        return $this;
    }

    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @see https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    public function jsonSerialize(): mixed
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object.
     */
    public function __toString(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
    }

    /**
     * Gets a header-safe presentation of the object.
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
