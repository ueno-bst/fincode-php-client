<?php

declare(strict_types=1);
/**
 * fincode API.
 *
 * fincodeのAPIリファレンスです。\\ fincodeは決済情報のほか様々なリソースを管理できるため、リソース指向なREST APIをベースとしたインターフェイス設計のもとでAPIを提供しています。\\ APIの呼び出しにはAPIキーによる認証が必要であり、リクエストの際に`Authorization`ヘッダーに有効なAPIキーをセットすることで認証できます。
 *
 * The version of the OpenAPI document: 1.2.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Fincode\Model;

use OpenAPI\Fincode\ObjectSerializer;

/**
 * @implements \ArrayAccess<string, mixed>
 */
class PaymentVirtualAccountCancelingResponse implements ModelInterface, \ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;
    /**
     * The original name of the model.
     */
    protected static string $openAPIModelName = 'Payment.VirtualAccount.Canceling.Response';
    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var array<string, string>
     */
    protected static array $openAPITypes = ['shopId' => 'string', 'id' => 'string', 'accessId' => 'string', 'amount' => 'int', 'tax' => 'int', 'totalAmount' => 'int', 'clientField1' => 'string', 'clientField2' => 'string', 'clientField3' => 'string', 'processDate' => 'string', 'customerId' => 'string', 'customerGroupId' => 'string', 'errorCode' => 'string', 'created' => 'string', 'updated' => 'string', 'payType' => '\OpenAPI\Fincode\Model\PayType', 'status' => '\OpenAPI\Fincode\Model\PaymentStatus', 'billingAmount' => 'int', 'billingTax' => 'int', 'billingTotalAmount' => 'int', 'paymentTermDay' => 'int', 'paymentTerm' => 'string', 'paymentMethodId' => 'string', 'vaBranchCode' => 'string', 'vaBranchName' => 'string', 'vaAccountNumber' => 'string', 'vaAccountName' => 'string', 'virtualAccountId' => 'string', 'accountAssignmentDate' => 'string', 'transactionDate' => 'string', 'valueDate' => 'string', 'remitterAccountName' => 'string', 'remitterBankName' => 'string', 'remitterBranchName' => 'string', 'overpaymentFlag' => 'string', 'cancelOverpaymentFlag' => 'string', 'expireOverpaymentFlag' => 'string'];
    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var array<string, string|null>
     */
    protected static array $openAPIFormats = ['shopId' => null, 'id' => null, 'accessId' => null, 'amount' => null, 'tax' => null, 'totalAmount' => 'int64', 'clientField1' => null, 'clientField2' => null, 'clientField3' => null, 'processDate' => null, 'customerId' => null, 'customerGroupId' => null, 'errorCode' => null, 'created' => null, 'updated' => null, 'payType' => null, 'status' => null, 'billingAmount' => 'int64', 'billingTax' => 'int64', 'billingTotalAmount' => 'int64', 'paymentTermDay' => 'int64', 'paymentTerm' => null, 'paymentMethodId' => null, 'vaBranchCode' => null, 'vaBranchName' => null, 'vaAccountNumber' => null, 'vaAccountName' => null, 'virtualAccountId' => null, 'accountAssignmentDate' => null, 'transactionDate' => null, 'valueDate' => null, 'remitterAccountName' => null, 'remitterBankName' => null, 'remitterBranchName' => null, 'overpaymentFlag' => null, 'cancelOverpaymentFlag' => null, 'expireOverpaymentFlag' => null];
    /**
     * Array of nullable properties. Used for (de)serialization.
     *
     * @var array<string, bool>
     */
    protected static array $openAPINullables = ['shopId' => false, 'id' => false, 'accessId' => false, 'amount' => false, 'tax' => false, 'totalAmount' => false, 'clientField1' => true, 'clientField2' => true, 'clientField3' => true, 'processDate' => false, 'customerId' => true, 'customerGroupId' => true, 'errorCode' => true, 'created' => false, 'updated' => true, 'payType' => false, 'status' => false, 'billingAmount' => false, 'billingTax' => true, 'billingTotalAmount' => false, 'paymentTermDay' => false, 'paymentTerm' => true, 'paymentMethodId' => false, 'vaBranchCode' => true, 'vaBranchName' => true, 'vaAccountNumber' => true, 'vaAccountName' => true, 'virtualAccountId' => true, 'accountAssignmentDate' => true, 'transactionDate' => true, 'valueDate' => true, 'remitterAccountName' => true, 'remitterBankName' => true, 'remitterBranchName' => true, 'overpaymentFlag' => false, 'cancelOverpaymentFlag' => false, 'expireOverpaymentFlag' => false];
    /**
     * If a nullable field gets set to null, insert it here.
     *
     * @var array<string, bool>
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return array<string, string|null>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties.
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null.
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null.
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable.
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }
    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = ['shopId' => 'shop_id', 'id' => 'id', 'accessId' => 'access_id', 'amount' => 'amount', 'tax' => 'tax', 'totalAmount' => 'total_amount', 'clientField1' => 'client_field_1', 'clientField2' => 'client_field_2', 'clientField3' => 'client_field_3', 'processDate' => 'process_date', 'customerId' => 'customer_id', 'customerGroupId' => 'customer_group_id', 'errorCode' => 'error_code', 'created' => 'created', 'updated' => 'updated', 'payType' => 'pay_type', 'status' => 'status', 'billingAmount' => 'billing_amount', 'billingTax' => 'billing_tax', 'billingTotalAmount' => 'billing_total_amount', 'paymentTermDay' => 'payment_term_day', 'paymentTerm' => 'payment_term', 'paymentMethodId' => 'payment_method_id', 'vaBranchCode' => 'va_branch_code', 'vaBranchName' => 'va_branch_name', 'vaAccountNumber' => 'va_account_number', 'vaAccountName' => 'va_account_name', 'virtualAccountId' => 'virtual_account_id', 'accountAssignmentDate' => 'account_assignment_date', 'transactionDate' => 'transaction_date', 'valueDate' => 'value_date', 'remitterAccountName' => 'remitter_account_name', 'remitterBankName' => 'remitter_bank_name', 'remitterBranchName' => 'remitter_branch_name', 'overpaymentFlag' => 'overpayment_flag', 'cancelOverpaymentFlag' => 'cancel_overpayment_flag', 'expireOverpaymentFlag' => 'expire_overpayment_flag'];
    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var array<string, string>
     */
    protected static array $setters = ['shopId' => 'setShopId', 'id' => 'setId', 'accessId' => 'setAccessId', 'amount' => 'setAmount', 'tax' => 'setTax', 'totalAmount' => 'setTotalAmount', 'clientField1' => 'setClientField1', 'clientField2' => 'setClientField2', 'clientField3' => 'setClientField3', 'processDate' => 'setProcessDate', 'customerId' => 'setCustomerId', 'customerGroupId' => 'setCustomerGroupId', 'errorCode' => 'setErrorCode', 'created' => 'setCreated', 'updated' => 'setUpdated', 'payType' => 'setPayType', 'status' => 'setStatus', 'billingAmount' => 'setBillingAmount', 'billingTax' => 'setBillingTax', 'billingTotalAmount' => 'setBillingTotalAmount', 'paymentTermDay' => 'setPaymentTermDay', 'paymentTerm' => 'setPaymentTerm', 'paymentMethodId' => 'setPaymentMethodId', 'vaBranchCode' => 'setVaBranchCode', 'vaBranchName' => 'setVaBranchName', 'vaAccountNumber' => 'setVaAccountNumber', 'vaAccountName' => 'setVaAccountName', 'virtualAccountId' => 'setVirtualAccountId', 'accountAssignmentDate' => 'setAccountAssignmentDate', 'transactionDate' => 'setTransactionDate', 'valueDate' => 'setValueDate', 'remitterAccountName' => 'setRemitterAccountName', 'remitterBankName' => 'setRemitterBankName', 'remitterBranchName' => 'setRemitterBranchName', 'overpaymentFlag' => 'setOverpaymentFlag', 'cancelOverpaymentFlag' => 'setCancelOverpaymentFlag', 'expireOverpaymentFlag' => 'setExpireOverpaymentFlag'];
    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var array<string, string>
     */
    protected static array $getters = ['shopId' => 'getShopId', 'id' => 'getId', 'accessId' => 'getAccessId', 'amount' => 'getAmount', 'tax' => 'getTax', 'totalAmount' => 'getTotalAmount', 'clientField1' => 'getClientField1', 'clientField2' => 'getClientField2', 'clientField3' => 'getClientField3', 'processDate' => 'getProcessDate', 'customerId' => 'getCustomerId', 'customerGroupId' => 'getCustomerGroupId', 'errorCode' => 'getErrorCode', 'created' => 'getCreated', 'updated' => 'getUpdated', 'payType' => 'getPayType', 'status' => 'getStatus', 'billingAmount' => 'getBillingAmount', 'billingTax' => 'getBillingTax', 'billingTotalAmount' => 'getBillingTotalAmount', 'paymentTermDay' => 'getPaymentTermDay', 'paymentTerm' => 'getPaymentTerm', 'paymentMethodId' => 'getPaymentMethodId', 'vaBranchCode' => 'getVaBranchCode', 'vaBranchName' => 'getVaBranchName', 'vaAccountNumber' => 'getVaAccountNumber', 'vaAccountName' => 'getVaAccountName', 'virtualAccountId' => 'getVirtualAccountId', 'accountAssignmentDate' => 'getAccountAssignmentDate', 'transactionDate' => 'getTransactionDate', 'valueDate' => 'getValueDate', 'remitterAccountName' => 'getRemitterAccountName', 'remitterBankName' => 'getRemitterBankName', 'remitterBranchName' => 'getRemitterBranchName', 'overpaymentFlag' => 'getOverpaymentFlag', 'cancelOverpaymentFlag' => 'getCancelOverpaymentFlag', 'expireOverpaymentFlag' => 'getExpireOverpaymentFlag'];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }
    public const OVERPAYMENT_FLAG__0 = '0';
    public const OVERPAYMENT_FLAG__1 = '1';
    public const CANCEL_OVERPAYMENT_FLAG__0 = '0';
    public const CANCEL_OVERPAYMENT_FLAG__1 = '1';
    public const EXPIRE_OVERPAYMENT_FLAG__0 = '0';
    public const EXPIRE_OVERPAYMENT_FLAG__1 = '1';

    /**
     * Gets allowable values of the enum.
     *
     * @return list<string>
     */
    public function getOverpaymentFlagAllowableValues(): array
    {
        return [self::OVERPAYMENT_FLAG__0, self::OVERPAYMENT_FLAG__1];
    }

    /**
     * Gets allowable values of the enum.
     *
     * @return list<string>
     */
    public function getCancelOverpaymentFlagAllowableValues(): array
    {
        return [self::CANCEL_OVERPAYMENT_FLAG__0, self::CANCEL_OVERPAYMENT_FLAG__1];
    }

    /**
     * Gets allowable values of the enum.
     *
     * @return list<string>
     */
    public function getExpireOverpaymentFlagAllowableValues(): array
    {
        return [self::EXPIRE_OVERPAYMENT_FLAG__0, self::EXPIRE_OVERPAYMENT_FLAG__1];
    }
    /**
     * Associative array for storing property values.
     *
     * @phpstan-var array<string, mixed>
     *
     * @psalm-var array<string, mixed>
     */
    protected array $container = [];

    /**
     * Constructor.
     *
     * @param array<string, mixed> $data Associated array of property values
     *                                   initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('shopId', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('accessId', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('tax', $data ?? [], null);
        $this->setIfExists('totalAmount', $data ?? [], null);
        $this->setIfExists('clientField1', $data ?? [], null);
        $this->setIfExists('clientField2', $data ?? [], null);
        $this->setIfExists('clientField3', $data ?? [], null);
        $this->setIfExists('processDate', $data ?? [], null);
        $this->setIfExists('customerId', $data ?? [], null);
        $this->setIfExists('customerGroupId', $data ?? [], null);
        $this->setIfExists('errorCode', $data ?? [], null);
        $this->setIfExists('created', $data ?? [], null);
        $this->setIfExists('updated', $data ?? [], null);
        $this->setIfExists('payType', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('billingAmount', $data ?? [], null);
        $this->setIfExists('billingTax', $data ?? [], null);
        $this->setIfExists('billingTotalAmount', $data ?? [], null);
        $this->setIfExists('paymentTermDay', $data ?? [], null);
        $this->setIfExists('paymentTerm', $data ?? [], null);
        $this->setIfExists('paymentMethodId', $data ?? [], null);
        $this->setIfExists('vaBranchCode', $data ?? [], null);
        $this->setIfExists('vaBranchName', $data ?? [], null);
        $this->setIfExists('vaAccountNumber', $data ?? [], null);
        $this->setIfExists('vaAccountName', $data ?? [], null);
        $this->setIfExists('virtualAccountId', $data ?? [], null);
        $this->setIfExists('accountAssignmentDate', $data ?? [], null);
        $this->setIfExists('transactionDate', $data ?? [], null);
        $this->setIfExists('valueDate', $data ?? [], null);
        $this->setIfExists('remitterAccountName', $data ?? [], null);
        $this->setIfExists('remitterBankName', $data ?? [], null);
        $this->setIfExists('remitterBranchName', $data ?? [], null);
        $this->setIfExists('overpaymentFlag', $data ?? [], null);
        $this->setIfExists('cancelOverpaymentFlag', $data ?? [], null);
        $this->setIfExists('expireOverpaymentFlag', $data ?? [], null);
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array.
     *
     * @param array<string, mixed> $fields
     */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }
        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return list<string> invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];
        if (!is_null($this->container['shopId']) && mb_strlen($this->container['shopId']) > 13) {
            $invalidProperties[] = "invalid value for 'shopId', the character length must be smaller than or equal to 13.";
        }
        if (!is_null($this->container['shopId']) && mb_strlen($this->container['shopId']) < 13) {
            $invalidProperties[] = "invalid value for 'shopId', the character length must be bigger than or equal to 13.";
        }
        if (!is_null($this->container['id']) && mb_strlen($this->container['id']) > 30) {
            $invalidProperties[] = "invalid value for 'id', the character length must be smaller than or equal to 30.";
        }
        if (!is_null($this->container['id']) && mb_strlen($this->container['id']) < 1) {
            $invalidProperties[] = "invalid value for 'id', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['accessId']) && mb_strlen($this->container['accessId']) > 24) {
            $invalidProperties[] = "invalid value for 'accessId', the character length must be smaller than or equal to 24.";
        }
        if (!is_null($this->container['accessId']) && mb_strlen($this->container['accessId']) < 24) {
            $invalidProperties[] = "invalid value for 'accessId', the character length must be bigger than or equal to 24.";
        }
        if (!is_null($this->container['clientField1']) && mb_strlen($this->container['clientField1']) > 100) {
            $invalidProperties[] = "invalid value for 'clientField1', the character length must be smaller than or equal to 100.";
        }
        if (!is_null($this->container['clientField1']) && mb_strlen($this->container['clientField1']) < 1) {
            $invalidProperties[] = "invalid value for 'clientField1', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['clientField2']) && mb_strlen($this->container['clientField2']) > 100) {
            $invalidProperties[] = "invalid value for 'clientField2', the character length must be smaller than or equal to 100.";
        }
        if (!is_null($this->container['clientField2']) && mb_strlen($this->container['clientField2']) < 1) {
            $invalidProperties[] = "invalid value for 'clientField2', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['clientField3']) && mb_strlen($this->container['clientField3']) > 100) {
            $invalidProperties[] = "invalid value for 'clientField3', the character length must be smaller than or equal to 100.";
        }
        if (!is_null($this->container['clientField3']) && mb_strlen($this->container['clientField3']) < 1) {
            $invalidProperties[] = "invalid value for 'clientField3', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['customerId']) && mb_strlen($this->container['customerId']) > 60) {
            $invalidProperties[] = "invalid value for 'customerId', the character length must be smaller than or equal to 60.";
        }
        if (!is_null($this->container['customerId']) && mb_strlen($this->container['customerId']) < 1) {
            $invalidProperties[] = "invalid value for 'customerId', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['customerGroupId']) && mb_strlen($this->container['customerGroupId']) > 13) {
            $invalidProperties[] = "invalid value for 'customerGroupId', the character length must be smaller than or equal to 13.";
        }
        if (!is_null($this->container['customerGroupId']) && mb_strlen($this->container['customerGroupId']) < 13) {
            $invalidProperties[] = "invalid value for 'customerGroupId', the character length must be bigger than or equal to 13.";
        }
        if (!is_null($this->container['errorCode']) && mb_strlen($this->container['errorCode']) > 11) {
            $invalidProperties[] = "invalid value for 'errorCode', the character length must be smaller than or equal to 11.";
        }
        if (!is_null($this->container['errorCode']) && mb_strlen($this->container['errorCode']) < 11) {
            $invalidProperties[] = "invalid value for 'errorCode', the character length must be bigger than or equal to 11.";
        }
        if (!is_null($this->container['paymentMethodId']) && mb_strlen($this->container['paymentMethodId']) > 25) {
            $invalidProperties[] = "invalid value for 'paymentMethodId', the character length must be smaller than or equal to 25.";
        }
        if (!is_null($this->container['paymentMethodId']) && mb_strlen($this->container['paymentMethodId']) < 25) {
            $invalidProperties[] = "invalid value for 'paymentMethodId', the character length must be bigger than or equal to 25.";
        }
        if (!is_null($this->container['vaBranchCode']) && mb_strlen($this->container['vaBranchCode']) > 3) {
            $invalidProperties[] = "invalid value for 'vaBranchCode', the character length must be smaller than or equal to 3.";
        }
        if (!is_null($this->container['vaBranchCode']) && mb_strlen($this->container['vaBranchCode']) < 1) {
            $invalidProperties[] = "invalid value for 'vaBranchCode', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['vaBranchName']) && mb_strlen($this->container['vaBranchName']) > 15) {
            $invalidProperties[] = "invalid value for 'vaBranchName', the character length must be smaller than or equal to 15.";
        }
        if (!is_null($this->container['vaAccountNumber']) && mb_strlen($this->container['vaAccountNumber']) > 7) {
            $invalidProperties[] = "invalid value for 'vaAccountNumber', the character length must be smaller than or equal to 7.";
        }
        if (!is_null($this->container['vaAccountNumber']) && mb_strlen($this->container['vaAccountNumber']) < 7) {
            $invalidProperties[] = "invalid value for 'vaAccountNumber', the character length must be bigger than or equal to 7.";
        }
        if (!is_null($this->container['vaAccountName']) && mb_strlen($this->container['vaAccountName']) > 40) {
            $invalidProperties[] = "invalid value for 'vaAccountName', the character length must be smaller than or equal to 40.";
        }
        if (!is_null($this->container['virtualAccountId']) && mb_strlen($this->container['virtualAccountId']) > 10) {
            $invalidProperties[] = "invalid value for 'virtualAccountId', the character length must be smaller than or equal to 10.";
        }
        if (!is_null($this->container['virtualAccountId']) && mb_strlen($this->container['virtualAccountId']) < 10) {
            $invalidProperties[] = "invalid value for 'virtualAccountId', the character length must be bigger than or equal to 10.";
        }
        if (!is_null($this->container['remitterAccountName']) && mb_strlen($this->container['remitterAccountName']) > 48) {
            $invalidProperties[] = "invalid value for 'remitterAccountName', the character length must be smaller than or equal to 48.";
        }
        if (!is_null($this->container['remitterBankName']) && mb_strlen($this->container['remitterBankName']) > 30) {
            $invalidProperties[] = "invalid value for 'remitterBankName', the character length must be smaller than or equal to 30.";
        }
        if (!is_null($this->container['remitterBranchName']) && mb_strlen($this->container['remitterBranchName']) > 15) {
            $invalidProperties[] = "invalid value for 'remitterBranchName', the character length must be smaller than or equal to 15.";
        }
        $allowedValues = $this->getOverpaymentFlagAllowableValues();
        if (!is_null($this->container['overpaymentFlag']) && !in_array($this->container['overpaymentFlag'], $allowedValues, true)) {
            $invalidProperties[] = sprintf("invalid value '%s' for 'overpaymentFlag', must be one of '%s'", $this->container['overpaymentFlag'], implode("', '", $allowedValues));
        }
        $allowedValues = $this->getCancelOverpaymentFlagAllowableValues();
        if (!is_null($this->container['cancelOverpaymentFlag']) && !in_array($this->container['cancelOverpaymentFlag'], $allowedValues, true)) {
            $invalidProperties[] = sprintf("invalid value '%s' for 'cancelOverpaymentFlag', must be one of '%s'", $this->container['cancelOverpaymentFlag'], implode("', '", $allowedValues));
        }
        $allowedValues = $this->getExpireOverpaymentFlagAllowableValues();
        if (!is_null($this->container['expireOverpaymentFlag']) && !in_array($this->container['expireOverpaymentFlag'], $allowedValues, true)) {
            $invalidProperties[] = sprintf("invalid value '%s' for 'expireOverpaymentFlag', must be one of '%s'", $this->container['expireOverpaymentFlag'], implode("', '", $allowedValues));
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return 0 === count($this->listInvalidProperties());
    }

    /**
     * Gets shopId.
     *
     * @return string|null
     */
    public function getShopId(): mixed
    {
        return $this->container['shopId'];
    }

    /**
     * Sets shopId.
     *
     * @param string $shopId ショップID
     */
    public function setShopId(mixed $shopId): static
    {
        if (is_null($shopId)) {
            throw new \InvalidArgumentException('non-nullable shopId cannot be null');
        }
        if (mb_strlen($shopId) > 13) {
            throw new \InvalidArgumentException('invalid length for $shopId when calling PaymentVirtualAccountCancelingResponse., must be smaller than or equal to 13.');
        }
        if (mb_strlen($shopId) < 13) {
            throw new \InvalidArgumentException('invalid length for $shopId when calling PaymentVirtualAccountCancelingResponse., must be bigger than or equal to 13.');
        }
        $this->container['shopId'] = $shopId;

        return $this;
    }

    /**
     * Gets id.
     *
     * @return string|null
     */
    public function getId(): mixed
    {
        return $this->container['id'];
    }

    /**
     * Sets id.
     *
     * @param string $id オーダーID\\ 決済情報のIDです
     */
    public function setId(mixed $id): static
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        if (mb_strlen($id) > 30) {
            throw new \InvalidArgumentException('invalid length for $id when calling PaymentVirtualAccountCancelingResponse., must be smaller than or equal to 30.');
        }
        if (mb_strlen($id) < 1) {
            throw new \InvalidArgumentException('invalid length for $id when calling PaymentVirtualAccountCancelingResponse., must be bigger than or equal to 1.');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets accessId.
     *
     * @return string|null
     */
    public function getAccessId(): mixed
    {
        return $this->container['accessId'];
    }

    /**
     * Sets accessId.
     *
     * @param string $accessId 取引ID
     */
    public function setAccessId(mixed $accessId): static
    {
        if (is_null($accessId)) {
            throw new \InvalidArgumentException('non-nullable accessId cannot be null');
        }
        if (mb_strlen($accessId) > 24) {
            throw new \InvalidArgumentException('invalid length for $accessId when calling PaymentVirtualAccountCancelingResponse., must be smaller than or equal to 24.');
        }
        if (mb_strlen($accessId) < 24) {
            throw new \InvalidArgumentException('invalid length for $accessId when calling PaymentVirtualAccountCancelingResponse., must be bigger than or equal to 24.');
        }
        $this->container['accessId'] = $accessId;

        return $this;
    }

    /**
     * Gets amount.
     *
     * @return int|null
     */
    public function getAmount(): mixed
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount.
     *
     * @param int $amount 利用金額
     */
    public function setAmount(mixed $amount): static
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets tax.
     *
     * @return int|null
     */
    public function getTax(): mixed
    {
        return $this->container['tax'];
    }

    /**
     * Sets tax.
     *
     * @param int $tax 税送料
     */
    public function setTax(mixed $tax): static
    {
        if (is_null($tax)) {
            throw new \InvalidArgumentException('non-nullable tax cannot be null');
        }
        $this->container['tax'] = $tax;

        return $this;
    }

    /**
     * Gets totalAmount.
     *
     * @return int|null
     */
    public function getTotalAmount(): mixed
    {
        return $this->container['totalAmount'];
    }

    /**
     * Sets totalAmount.
     *
     * @param int $totalAmount 合計金額\\ `amount`と`tax`の合計値です
     */
    public function setTotalAmount(mixed $totalAmount): static
    {
        if (is_null($totalAmount)) {
            throw new \InvalidArgumentException('non-nullable totalAmount cannot be null');
        }
        $this->container['totalAmount'] = $totalAmount;

        return $this;
    }

    /**
     * Gets clientField1.
     *
     * @return string|null
     */
    public function getClientField1(): mixed
    {
        return $this->container['clientField1'];
    }

    /**
     * Sets clientField1.
     *
     * @param string|null $clientField1 加盟店自由項目 1
     */
    public function setClientField1(mixed $clientField1): static
    {
        if (is_null($clientField1)) {
            $this->openAPINullablesSetToNull[] = 'clientField1';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('clientField1', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($clientField1) && mb_strlen($clientField1) > 100) {
            throw new \InvalidArgumentException('invalid length for $clientField1 when calling PaymentVirtualAccountCancelingResponse., must be smaller than or equal to 100.');
        }
        if (!is_null($clientField1) && mb_strlen($clientField1) < 1) {
            throw new \InvalidArgumentException('invalid length for $clientField1 when calling PaymentVirtualAccountCancelingResponse., must be bigger than or equal to 1.');
        }
        $this->container['clientField1'] = $clientField1;

        return $this;
    }

    /**
     * Gets clientField2.
     *
     * @return string|null
     */
    public function getClientField2(): mixed
    {
        return $this->container['clientField2'];
    }

    /**
     * Sets clientField2.
     *
     * @param string|null $clientField2 加盟店自由項目 2
     */
    public function setClientField2(mixed $clientField2): static
    {
        if (is_null($clientField2)) {
            $this->openAPINullablesSetToNull[] = 'clientField2';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('clientField2', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($clientField2) && mb_strlen($clientField2) > 100) {
            throw new \InvalidArgumentException('invalid length for $clientField2 when calling PaymentVirtualAccountCancelingResponse., must be smaller than or equal to 100.');
        }
        if (!is_null($clientField2) && mb_strlen($clientField2) < 1) {
            throw new \InvalidArgumentException('invalid length for $clientField2 when calling PaymentVirtualAccountCancelingResponse., must be bigger than or equal to 1.');
        }
        $this->container['clientField2'] = $clientField2;

        return $this;
    }

    /**
     * Gets clientField3.
     *
     * @return string|null
     */
    public function getClientField3(): mixed
    {
        return $this->container['clientField3'];
    }

    /**
     * Sets clientField3.
     *
     * @param string|null $clientField3 加盟店自由項目 3
     */
    public function setClientField3(mixed $clientField3): static
    {
        if (is_null($clientField3)) {
            $this->openAPINullablesSetToNull[] = 'clientField3';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('clientField3', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($clientField3) && mb_strlen($clientField3) > 100) {
            throw new \InvalidArgumentException('invalid length for $clientField3 when calling PaymentVirtualAccountCancelingResponse., must be smaller than or equal to 100.');
        }
        if (!is_null($clientField3) && mb_strlen($clientField3) < 1) {
            throw new \InvalidArgumentException('invalid length for $clientField3 when calling PaymentVirtualAccountCancelingResponse., must be bigger than or equal to 1.');
        }
        $this->container['clientField3'] = $clientField3;

        return $this;
    }

    /**
     * Gets processDate.
     *
     * @return string|null
     */
    public function getProcessDate(): mixed
    {
        return $this->container['processDate'];
    }

    /**
     * Sets processDate.
     *
     * @param string $processDate 決済 処理日時\\ 決済の各種処理（決済実行、キャンセルなど）が行われた日時です
     */
    public function setProcessDate(mixed $processDate): static
    {
        if (is_null($processDate)) {
            throw new \InvalidArgumentException('non-nullable processDate cannot be null');
        }
        $this->container['processDate'] = $processDate;

        return $this;
    }

    /**
     * Gets customerId.
     *
     * @return string|null
     */
    public function getCustomerId(): mixed
    {
        return $this->container['customerId'];
    }

    /**
     * Sets customerId.
     *
     * @param string|null $customerId 顧客ID\\ この決済の請求先となる顧客情報のIDです
     */
    public function setCustomerId(mixed $customerId): static
    {
        if (is_null($customerId)) {
            $this->openAPINullablesSetToNull[] = 'customerId';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customerId', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($customerId) && mb_strlen($customerId) > 60) {
            throw new \InvalidArgumentException('invalid length for $customerId when calling PaymentVirtualAccountCancelingResponse., must be smaller than or equal to 60.');
        }
        if (!is_null($customerId) && mb_strlen($customerId) < 1) {
            throw new \InvalidArgumentException('invalid length for $customerId when calling PaymentVirtualAccountCancelingResponse., must be bigger than or equal to 1.');
        }
        $this->container['customerId'] = $customerId;

        return $this;
    }

    /**
     * Gets customerGroupId.
     *
     * @return string|null
     */
    public function getCustomerGroupId(): mixed
    {
        return $this->container['customerGroupId'];
    }

    /**
     * Sets customerGroupId.
     *
     * @param string|null $customerGroupId 顧客情報共有グループID\\ プラットフォームショップにおいて顧客情報が共有されている場合、顧客が所属する共有グループのIDです
     */
    public function setCustomerGroupId(mixed $customerGroupId): static
    {
        if (is_null($customerGroupId)) {
            $this->openAPINullablesSetToNull[] = 'customerGroupId';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customerGroupId', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($customerGroupId) && mb_strlen($customerGroupId) > 13) {
            throw new \InvalidArgumentException('invalid length for $customerGroupId when calling PaymentVirtualAccountCancelingResponse., must be smaller than or equal to 13.');
        }
        if (!is_null($customerGroupId) && mb_strlen($customerGroupId) < 13) {
            throw new \InvalidArgumentException('invalid length for $customerGroupId when calling PaymentVirtualAccountCancelingResponse., must be bigger than or equal to 13.');
        }
        $this->container['customerGroupId'] = $customerGroupId;

        return $this;
    }

    /**
     * Gets errorCode.
     *
     * @return string|null
     */
    public function getErrorCode(): mixed
    {
        return $this->container['errorCode'];
    }

    /**
     * Sets errorCode.
     *
     * @param string|null $errorCode この決済において発生したエラーのうち、一番最新のエラーのエラーコードです。\\ [各エラーコードの定義はこちらを参照](https://docs.fincode.jp/develop_support/error)して確認できます。
     */
    public function setErrorCode(mixed $errorCode): static
    {
        if (is_null($errorCode)) {
            $this->openAPINullablesSetToNull[] = 'errorCode';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('errorCode', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($errorCode) && mb_strlen($errorCode) > 11) {
            throw new \InvalidArgumentException('invalid length for $errorCode when calling PaymentVirtualAccountCancelingResponse., must be smaller than or equal to 11.');
        }
        if (!is_null($errorCode) && mb_strlen($errorCode) < 11) {
            throw new \InvalidArgumentException('invalid length for $errorCode when calling PaymentVirtualAccountCancelingResponse., must be bigger than or equal to 11.');
        }
        $this->container['errorCode'] = $errorCode;

        return $this;
    }

    /**
     * Gets created.
     *
     * @return string|null
     */
    public function getCreated(): mixed
    {
        return $this->container['created'];
    }

    /**
     * Sets created.
     *
     * @param string $created 作成日\\ 形式：`yyyy/MM/dd HH:mm:ss.SSS`
     */
    public function setCreated(mixed $created): static
    {
        if (is_null($created)) {
            throw new \InvalidArgumentException('non-nullable created cannot be null');
        }
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets updated.
     *
     * @return string|null
     */
    public function getUpdated(): mixed
    {
        return $this->container['updated'];
    }

    /**
     * Sets updated.
     *
     * @param string|null $updated 更新日\\ 形式：`yyyy/MM/dd HH:mm:ss.SSS`
     */
    public function setUpdated(mixed $updated): static
    {
        if (is_null($updated)) {
            $this->openAPINullablesSetToNull[] = 'updated';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('updated', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['updated'] = $updated;

        return $this;
    }

    /**
     * Gets payType.
     *
     * @return PayType|null
     */
    public function getPayType(): mixed
    {
        return $this->container['payType'];
    }

    /**
     * Sets payType.
     *
     * @param PayType $payType 決済種別\\ この決済で利用する決済手段です。  - `Virtualaccount`: 銀行振込
     */
    public function setPayType(mixed $payType): static
    {
        if (is_null($payType)) {
            throw new \InvalidArgumentException('non-nullable payType cannot be null');
        }
        $this->container['payType'] = $payType;

        return $this;
    }

    /**
     * Gets status.
     *
     * @return PaymentStatus|null
     */
    public function getStatus(): mixed
    {
        return $this->container['status'];
    }

    /**
     * Sets status.
     *
     * @param PaymentStatus $status 決済ステータス  - `UNPROCESSED`: 未処理<br /><span class=\"smallText\">請求はまだ実行されていません。</span> - `AWAITING_CUSTOMER_PAYMENT`: 購入者の支払い待ち<br /><span class=\"smallText\">購入者によるバーチャル口座への振込を待っている状態。</span> - `CAPTURED`: 売上確定<br /><span class=\"smallText\">振込が完了し、売上が確定しています。</span> - `CANCELED`: キャンセル<br /><span class=\"smallText\">この決済はキャンセルされました。</span> - `EXPIRED`: 決済の期限切れ<br /><span class=\"smallText\">この決済は期限が切れています。</span>
     */
    public function setStatus(mixed $status): static
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets billingAmount.
     *
     * @return int|null
     */
    public function getBillingAmount(): mixed
    {
        return $this->container['billingAmount'];
    }

    /**
     * Sets billingAmount.
     *
     * @param int $billingAmount 振込依頼金額
     */
    public function setBillingAmount(mixed $billingAmount): static
    {
        if (is_null($billingAmount)) {
            throw new \InvalidArgumentException('non-nullable billingAmount cannot be null');
        }
        $this->container['billingAmount'] = $billingAmount;

        return $this;
    }

    /**
     * Gets billingTax.
     *
     * @return int|null
     */
    public function getBillingTax(): mixed
    {
        return $this->container['billingTax'];
    }

    /**
     * Sets billingTax.
     *
     * @param int|null $billingTax 振込依頼金額（税送料）
     */
    public function setBillingTax(mixed $billingTax): static
    {
        if (is_null($billingTax)) {
            $this->openAPINullablesSetToNull[] = 'billingTax';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('billingTax', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['billingTax'] = $billingTax;

        return $this;
    }

    /**
     * Gets billingTotalAmount.
     *
     * @return int|null
     */
    public function getBillingTotalAmount(): mixed
    {
        return $this->container['billingTotalAmount'];
    }

    /**
     * Sets billingTotalAmount.
     *
     * @param int $billingTotalAmount 振込依頼金額 合計\\ 振込依頼金額と振込依頼金額（税送料）の合計金額です
     */
    public function setBillingTotalAmount(mixed $billingTotalAmount): static
    {
        if (is_null($billingTotalAmount)) {
            throw new \InvalidArgumentException('non-nullable billingTotalAmount cannot be null');
        }
        $this->container['billingTotalAmount'] = $billingTotalAmount;

        return $this;
    }

    /**
     * Gets paymentTermDay.
     *
     * @return int|null
     */
    public function getPaymentTermDay(): mixed
    {
        return $this->container['paymentTermDay'];
    }

    /**
     * Sets paymentTermDay.
     *
     * @param int $paymentTermDay 支払期限日数\\ \\ 実行日から見て、支払期限日数後の翌日AMに期限切れになります。\\ 例）2024/4/1に、`支払期限日数=2`で決済実行した場合、2024/4/4 AMに期限切れ
     */
    public function setPaymentTermDay(mixed $paymentTermDay): static
    {
        if (is_null($paymentTermDay)) {
            throw new \InvalidArgumentException('non-nullable paymentTermDay cannot be null');
        }
        $this->container['paymentTermDay'] = $paymentTermDay;

        return $this;
    }

    /**
     * Gets paymentTerm.
     *
     * @return string|null
     */
    public function getPaymentTerm(): mixed
    {
        return $this->container['paymentTerm'];
    }

    /**
     * Sets paymentTerm.
     *
     * @param string|null $paymentTerm 支払期限\\ 形式： `yyyy/MM/dd HH:mm:ss.SSS`
     */
    public function setPaymentTerm(mixed $paymentTerm): static
    {
        if (is_null($paymentTerm)) {
            $this->openAPINullablesSetToNull[] = 'paymentTerm';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('paymentTerm', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['paymentTerm'] = $paymentTerm;

        return $this;
    }

    /**
     * Gets paymentMethodId.
     *
     * @return string|null
     */
    public function getPaymentMethodId(): mixed
    {
        return $this->container['paymentMethodId'];
    }

    /**
     * Sets paymentMethodId.
     *
     * @param string $paymentMethodId 決済手段ID
     */
    public function setPaymentMethodId(mixed $paymentMethodId): static
    {
        if (is_null($paymentMethodId)) {
            throw new \InvalidArgumentException('non-nullable paymentMethodId cannot be null');
        }
        if (mb_strlen($paymentMethodId) > 25) {
            throw new \InvalidArgumentException('invalid length for $paymentMethodId when calling PaymentVirtualAccountCancelingResponse., must be smaller than or equal to 25.');
        }
        if (mb_strlen($paymentMethodId) < 25) {
            throw new \InvalidArgumentException('invalid length for $paymentMethodId when calling PaymentVirtualAccountCancelingResponse., must be bigger than or equal to 25.');
        }
        $this->container['paymentMethodId'] = $paymentMethodId;

        return $this;
    }

    /**
     * Gets vaBranchCode.
     *
     * @return string|null
     */
    public function getVaBranchCode(): mixed
    {
        return $this->container['vaBranchCode'];
    }

    /**
     * Sets vaBranchCode.
     *
     * @param string|null $vaBranchCode 支店コード\\ \\ 発行されたバーチャル口座の支店コードです
     */
    public function setVaBranchCode(mixed $vaBranchCode): static
    {
        if (is_null($vaBranchCode)) {
            $this->openAPINullablesSetToNull[] = 'vaBranchCode';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('vaBranchCode', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($vaBranchCode) && mb_strlen($vaBranchCode) > 3) {
            throw new \InvalidArgumentException('invalid length for $vaBranchCode when calling PaymentVirtualAccountCancelingResponse., must be smaller than or equal to 3.');
        }
        if (!is_null($vaBranchCode) && mb_strlen($vaBranchCode) < 1) {
            throw new \InvalidArgumentException('invalid length for $vaBranchCode when calling PaymentVirtualAccountCancelingResponse., must be bigger than or equal to 1.');
        }
        $this->container['vaBranchCode'] = $vaBranchCode;

        return $this;
    }

    /**
     * Gets vaBranchName.
     *
     * @return string|null
     */
    public function getVaBranchName(): mixed
    {
        return $this->container['vaBranchName'];
    }

    /**
     * Sets vaBranchName.
     *
     * @param string|null $vaBranchName 支店名\\ \\ 発行されたバーチャル口座の支店名です
     */
    public function setVaBranchName(mixed $vaBranchName): static
    {
        if (is_null($vaBranchName)) {
            $this->openAPINullablesSetToNull[] = 'vaBranchName';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('vaBranchName', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($vaBranchName) && mb_strlen($vaBranchName) > 15) {
            throw new \InvalidArgumentException('invalid length for $vaBranchName when calling PaymentVirtualAccountCancelingResponse., must be smaller than or equal to 15.');
        }
        $this->container['vaBranchName'] = $vaBranchName;

        return $this;
    }

    /**
     * Gets vaAccountNumber.
     *
     * @return string|null
     */
    public function getVaAccountNumber(): mixed
    {
        return $this->container['vaAccountNumber'];
    }

    /**
     * Sets vaAccountNumber.
     *
     * @param string|null $vaAccountNumber 口座番号\\ \\ 発行されたバーチャル口座の口座番号です
     */
    public function setVaAccountNumber(mixed $vaAccountNumber): static
    {
        if (is_null($vaAccountNumber)) {
            $this->openAPINullablesSetToNull[] = 'vaAccountNumber';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('vaAccountNumber', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($vaAccountNumber) && mb_strlen($vaAccountNumber) > 7) {
            throw new \InvalidArgumentException('invalid length for $vaAccountNumber when calling PaymentVirtualAccountCancelingResponse., must be smaller than or equal to 7.');
        }
        if (!is_null($vaAccountNumber) && mb_strlen($vaAccountNumber) < 7) {
            throw new \InvalidArgumentException('invalid length for $vaAccountNumber when calling PaymentVirtualAccountCancelingResponse., must be bigger than or equal to 7.');
        }
        $this->container['vaAccountNumber'] = $vaAccountNumber;

        return $this;
    }

    /**
     * Gets vaAccountName.
     *
     * @return string|null
     */
    public function getVaAccountName(): mixed
    {
        return $this->container['vaAccountName'];
    }

    /**
     * Sets vaAccountName.
     *
     * @param string|null $vaAccountName 口座名義\\ \\ 発行されたバーチャル口座の口座名義です
     */
    public function setVaAccountName(mixed $vaAccountName): static
    {
        if (is_null($vaAccountName)) {
            $this->openAPINullablesSetToNull[] = 'vaAccountName';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('vaAccountName', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($vaAccountName) && mb_strlen($vaAccountName) > 40) {
            throw new \InvalidArgumentException('invalid length for $vaAccountName when calling PaymentVirtualAccountCancelingResponse., must be smaller than or equal to 40.');
        }
        $this->container['vaAccountName'] = $vaAccountName;

        return $this;
    }

    /**
     * Gets virtualAccountId.
     *
     * @return string|null
     */
    public function getVirtualAccountId(): mixed
    {
        return $this->container['virtualAccountId'];
    }

    /**
     * Sets virtualAccountId.
     *
     * @param string|null $virtualAccountId バーチャル口座ID\\ \\ 発行されたバーチャル口座のIDです
     */
    public function setVirtualAccountId(mixed $virtualAccountId): static
    {
        if (is_null($virtualAccountId)) {
            $this->openAPINullablesSetToNull[] = 'virtualAccountId';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('virtualAccountId', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($virtualAccountId) && mb_strlen($virtualAccountId) > 10) {
            throw new \InvalidArgumentException('invalid length for $virtualAccountId when calling PaymentVirtualAccountCancelingResponse., must be smaller than or equal to 10.');
        }
        if (!is_null($virtualAccountId) && mb_strlen($virtualAccountId) < 10) {
            throw new \InvalidArgumentException('invalid length for $virtualAccountId when calling PaymentVirtualAccountCancelingResponse., must be bigger than or equal to 10.');
        }
        $this->container['virtualAccountId'] = $virtualAccountId;

        return $this;
    }

    /**
     * Gets accountAssignmentDate.
     *
     * @return string|null
     */
    public function getAccountAssignmentDate(): mixed
    {
        return $this->container['accountAssignmentDate'];
    }

    /**
     * Sets accountAssignmentDate.
     *
     * @param string|null $accountAssignmentDate バーチャル口座 割当日時\\ 形式： `yyyy/MM/dd HH:mm:ss.SSS`
     */
    public function setAccountAssignmentDate(mixed $accountAssignmentDate): static
    {
        if (is_null($accountAssignmentDate)) {
            $this->openAPINullablesSetToNull[] = 'accountAssignmentDate';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('accountAssignmentDate', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['accountAssignmentDate'] = $accountAssignmentDate;

        return $this;
    }

    /**
     * Gets transactionDate.
     *
     * @return string|null
     */
    public function getTransactionDate(): mixed
    {
        return $this->container['transactionDate'];
    }

    /**
     * Sets transactionDate.
     *
     * @param string|null $transactionDate 取引日\\ \\ 形式： `yyyy/MM/dd`
     */
    public function setTransactionDate(mixed $transactionDate): static
    {
        if (is_null($transactionDate)) {
            $this->openAPINullablesSetToNull[] = 'transactionDate';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('transactionDate', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['transactionDate'] = $transactionDate;

        return $this;
    }

    /**
     * Gets valueDate.
     *
     * @return string|null
     */
    public function getValueDate(): mixed
    {
        return $this->container['valueDate'];
    }

    /**
     * Sets valueDate.
     *
     * @param string|null $valueDate 起算日\\ \\ 銀行で入金が処理された営業日\\ 形式： `yyyy/MM/dd`
     */
    public function setValueDate(mixed $valueDate): static
    {
        if (is_null($valueDate)) {
            $this->openAPINullablesSetToNull[] = 'valueDate';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('valueDate', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['valueDate'] = $valueDate;

        return $this;
    }

    /**
     * Gets remitterAccountName.
     *
     * @return string|null
     */
    public function getRemitterAccountName(): mixed
    {
        return $this->container['remitterAccountName'];
    }

    /**
     * Sets remitterAccountName.
     *
     * @param string|null $remitterAccountName 振込依頼人 氏名\\ \\ 振込依頼人（購入者）の氏名です
     */
    public function setRemitterAccountName(mixed $remitterAccountName): static
    {
        if (is_null($remitterAccountName)) {
            $this->openAPINullablesSetToNull[] = 'remitterAccountName';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('remitterAccountName', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($remitterAccountName) && mb_strlen($remitterAccountName) > 48) {
            throw new \InvalidArgumentException('invalid length for $remitterAccountName when calling PaymentVirtualAccountCancelingResponse., must be smaller than or equal to 48.');
        }
        $this->container['remitterAccountName'] = $remitterAccountName;

        return $this;
    }

    /**
     * Gets remitterBankName.
     *
     * @return string|null
     */
    public function getRemitterBankName(): mixed
    {
        return $this->container['remitterBankName'];
    }

    /**
     * Sets remitterBankName.
     *
     * @param string|null $remitterBankName 振込依頼人 銀行名\\ \\ 振込依頼人（購入者）の銀行名です
     */
    public function setRemitterBankName(mixed $remitterBankName): static
    {
        if (is_null($remitterBankName)) {
            $this->openAPINullablesSetToNull[] = 'remitterBankName';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('remitterBankName', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($remitterBankName) && mb_strlen($remitterBankName) > 30) {
            throw new \InvalidArgumentException('invalid length for $remitterBankName when calling PaymentVirtualAccountCancelingResponse., must be smaller than or equal to 30.');
        }
        $this->container['remitterBankName'] = $remitterBankName;

        return $this;
    }

    /**
     * Gets remitterBranchName.
     *
     * @return string|null
     */
    public function getRemitterBranchName(): mixed
    {
        return $this->container['remitterBranchName'];
    }

    /**
     * Sets remitterBranchName.
     *
     * @param string|null $remitterBranchName 振込依頼人 支店名\\ \\ 振込依頼人（購入者）の支店名です
     */
    public function setRemitterBranchName(mixed $remitterBranchName): static
    {
        if (is_null($remitterBranchName)) {
            $this->openAPINullablesSetToNull[] = 'remitterBranchName';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('remitterBranchName', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($remitterBranchName) && mb_strlen($remitterBranchName) > 15) {
            throw new \InvalidArgumentException('invalid length for $remitterBranchName when calling PaymentVirtualAccountCancelingResponse., must be smaller than or equal to 15.');
        }
        $this->container['remitterBranchName'] = $remitterBranchName;

        return $this;
    }

    /**
     * Gets overpaymentFlag.
     *
     * @return string|null
     */
    public function getOverpaymentFlag(): mixed
    {
        return $this->container['overpaymentFlag'];
    }

    /**
     * Sets overpaymentFlag.
     *
     * @param string $overpaymentFlag 多重支払フラグ\\ この決済に対して複数回支払いが行われた場合`1`になります。  - `0`: 0回、または1回の支払いが行われた - `1`: 2回以上、同一のバーチャル口座に対して支払いが行われた
     */
    public function setOverpaymentFlag(mixed $overpaymentFlag): static
    {
        if (is_null($overpaymentFlag)) {
            throw new \InvalidArgumentException('non-nullable overpaymentFlag cannot be null');
        }
        $allowedValues = $this->getOverpaymentFlagAllowableValues();
        if (!in_array($overpaymentFlag, $allowedValues, true)) {
            throw new \InvalidArgumentException(sprintf("Invalid value '%s' for 'overpaymentFlag', must be one of '%s'", $overpaymentFlag, implode("', '", $allowedValues)));
        }
        $this->container['overpaymentFlag'] = $overpaymentFlag;

        return $this;
    }

    /**
     * Gets cancelOverpaymentFlag.
     *
     * @return string|null
     */
    public function getCancelOverpaymentFlag(): mixed
    {
        return $this->container['cancelOverpaymentFlag'];
    }

    /**
     * Sets cancelOverpaymentFlag.
     *
     * @param string $cancelOverpaymentFlag キャンセル後支払フラグ\\ この決済をキャンセルした後に購入者がバーチャル口座に対して支払いを行った場合`1`になります。  - `0`: キャンセル後支払は行われていない - `1`: キャンセル後支払が行われた
     */
    public function setCancelOverpaymentFlag(mixed $cancelOverpaymentFlag): static
    {
        if (is_null($cancelOverpaymentFlag)) {
            throw new \InvalidArgumentException('non-nullable cancelOverpaymentFlag cannot be null');
        }
        $allowedValues = $this->getCancelOverpaymentFlagAllowableValues();
        if (!in_array($cancelOverpaymentFlag, $allowedValues, true)) {
            throw new \InvalidArgumentException(sprintf("Invalid value '%s' for 'cancelOverpaymentFlag', must be one of '%s'", $cancelOverpaymentFlag, implode("', '", $allowedValues)));
        }
        $this->container['cancelOverpaymentFlag'] = $cancelOverpaymentFlag;

        return $this;
    }

    /**
     * Gets expireOverpaymentFlag.
     *
     * @return string|null
     */
    public function getExpireOverpaymentFlag(): mixed
    {
        return $this->container['expireOverpaymentFlag'];
    }

    /**
     * Sets expireOverpaymentFlag.
     *
     * @param string $expireOverpaymentFlag 期限切れ後支払フラグ\\ この決済の支払期限が過ぎた後に購入者がバーチャル口座に対して支払いを行った場合`1`になります。  - `0`: 期限切れ後支払は行われていない - `1`: 期限切れ後支払が行われた
     */
    public function setExpireOverpaymentFlag(mixed $expireOverpaymentFlag): static
    {
        if (is_null($expireOverpaymentFlag)) {
            throw new \InvalidArgumentException('non-nullable expireOverpaymentFlag cannot be null');
        }
        $allowedValues = $this->getExpireOverpaymentFlagAllowableValues();
        if (!in_array($expireOverpaymentFlag, $allowedValues, true)) {
            throw new \InvalidArgumentException(sprintf("Invalid value '%s' for 'expireOverpaymentFlag', must be one of '%s'", $expireOverpaymentFlag, implode("', '", $allowedValues)));
        }
        $this->container['expireOverpaymentFlag'] = $expireOverpaymentFlag;

        return $this;
    }

    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @see https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    public function jsonSerialize(): mixed
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object.
     */
    public function __toString(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
    }

    /**
     * Gets a header-safe presentation of the object.
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
