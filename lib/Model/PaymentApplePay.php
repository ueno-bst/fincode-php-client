<?php

declare(strict_types=1);
/**
 * fincode API.
 *
 * fincodeのAPIリファレンスです。\\ fincodeは決済情報のほか様々なリソースを管理できるため、リソース指向なREST APIをベースとしたインターフェイス設計のもとでAPIを提供しています。\\ APIの呼び出しにはAPIキーによる認証が必要であり、リクエストの際に`Authorization`ヘッダーに有効なAPIキーをセットすることで認証できます。
 *
 * The version of the OpenAPI document: 1.2.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Fincode\Model;

use OpenAPI\Fincode\ObjectSerializer;

/**
 * @implements \ArrayAccess<string, mixed>
 */
class PaymentApplePay implements ModelInterface, \ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;
    /**
     * The original name of the model.
     */
    protected static string $openAPIModelName = 'Payment.ApplePay';
    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var array<string, string>
     */
    protected static array $openAPITypes = ['payType' => '\OpenAPI\Fincode\Model\PayType', 'jobCode' => '\OpenAPI\Fincode\Model\ApplePayPaymentJobCode', 'status' => '\OpenAPI\Fincode\Model\PaymentStatus', 'brand' => '\OpenAPI\Fincode\Model\CardBrand', 'cardNo' => 'string', 'expire' => 'string', 'holderName' => 'string', 'cardNoHash' => 'string', 'method' => '\OpenAPI\Fincode\Model\CardPayMethod', 'payTimes' => '\OpenAPI\Fincode\Model\CardPayTimesResponse', 'forward' => 'string', 'issuer' => 'string', 'transactionId' => 'string', 'approve' => 'string', 'authMaxDate' => 'string', 'itemCode' => 'string', 'sendUrl' => 'string'];
    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var array<string, string|null>
     */
    protected static array $openAPIFormats = ['payType' => null, 'jobCode' => null, 'status' => null, 'brand' => null, 'cardNo' => null, 'expire' => null, 'holderName' => null, 'cardNoHash' => null, 'method' => null, 'payTimes' => null, 'forward' => null, 'issuer' => null, 'transactionId' => null, 'approve' => null, 'authMaxDate' => null, 'itemCode' => null, 'sendUrl' => null];
    /**
     * Array of nullable properties. Used for (de)serialization.
     *
     * @var array<string, bool>
     */
    protected static array $openAPINullables = ['payType' => false, 'jobCode' => false, 'status' => false, 'brand' => true, 'cardNo' => true, 'expire' => true, 'holderName' => true, 'cardNoHash' => true, 'method' => false, 'payTimes' => true, 'forward' => true, 'issuer' => true, 'transactionId' => true, 'approve' => true, 'authMaxDate' => true, 'itemCode' => true, 'sendUrl' => true];
    /**
     * If a nullable field gets set to null, insert it here.
     *
     * @var array<string, bool>
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return array<string, string|null>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties.
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null.
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null.
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable.
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }
    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = ['payType' => 'pay_type', 'jobCode' => 'job_code', 'status' => 'status', 'brand' => 'brand', 'cardNo' => 'card_no', 'expire' => 'expire', 'holderName' => 'holder_name', 'cardNoHash' => 'card_no_hash', 'method' => 'method', 'payTimes' => 'pay_times', 'forward' => 'forward', 'issuer' => 'issuer', 'transactionId' => 'transaction_id', 'approve' => 'approve', 'authMaxDate' => 'auth_max_date', 'itemCode' => 'item_code', 'sendUrl' => 'send_url'];
    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var array<string, string>
     */
    protected static array $setters = ['payType' => 'setPayType', 'jobCode' => 'setJobCode', 'status' => 'setStatus', 'brand' => 'setBrand', 'cardNo' => 'setCardNo', 'expire' => 'setExpire', 'holderName' => 'setHolderName', 'cardNoHash' => 'setCardNoHash', 'method' => 'setMethod', 'payTimes' => 'setPayTimes', 'forward' => 'setForward', 'issuer' => 'setIssuer', 'transactionId' => 'setTransactionId', 'approve' => 'setApprove', 'authMaxDate' => 'setAuthMaxDate', 'itemCode' => 'setItemCode', 'sendUrl' => 'setSendUrl'];
    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var array<string, string>
     */
    protected static array $getters = ['payType' => 'getPayType', 'jobCode' => 'getJobCode', 'status' => 'getStatus', 'brand' => 'getBrand', 'cardNo' => 'getCardNo', 'expire' => 'getExpire', 'holderName' => 'getHolderName', 'cardNoHash' => 'getCardNoHash', 'method' => 'getMethod', 'payTimes' => 'getPayTimes', 'forward' => 'getForward', 'issuer' => 'getIssuer', 'transactionId' => 'getTransactionId', 'approve' => 'getApprove', 'authMaxDate' => 'getAuthMaxDate', 'itemCode' => 'getItemCode', 'sendUrl' => 'getSendUrl'];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }
    /**
     * Associative array for storing property values.
     *
     * @phpstan-var array<string, mixed>
     *
     * @psalm-var array<string, mixed>
     */
    protected array $container = [];

    /**
     * Constructor.
     *
     * @param array<string, mixed> $data Associated array of property values
     *                                   initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('payType', $data ?? [], null);
        $this->setIfExists('jobCode', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('brand', $data ?? [], null);
        $this->setIfExists('cardNo', $data ?? [], null);
        $this->setIfExists('expire', $data ?? [], null);
        $this->setIfExists('holderName', $data ?? [], null);
        $this->setIfExists('cardNoHash', $data ?? [], null);
        $this->setIfExists('method', $data ?? [], null);
        $this->setIfExists('payTimes', $data ?? [], null);
        $this->setIfExists('forward', $data ?? [], null);
        $this->setIfExists('issuer', $data ?? [], null);
        $this->setIfExists('transactionId', $data ?? [], null);
        $this->setIfExists('approve', $data ?? [], null);
        $this->setIfExists('authMaxDate', $data ?? [], null);
        $this->setIfExists('itemCode', $data ?? [], null);
        $this->setIfExists('sendUrl', $data ?? [], null);
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array.
     *
     * @param array<string, mixed> $fields
     */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }
        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return list<string> invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];
        if (!is_null($this->container['cardNo']) && mb_strlen($this->container['cardNo']) > 16) {
            $invalidProperties[] = "invalid value for 'cardNo', the character length must be smaller than or equal to 16.";
        }
        if (!is_null($this->container['expire']) && mb_strlen($this->container['expire']) > 4) {
            $invalidProperties[] = "invalid value for 'expire', the character length must be smaller than or equal to 4.";
        }
        if (!is_null($this->container['expire']) && mb_strlen($this->container['expire']) < 4) {
            $invalidProperties[] = "invalid value for 'expire', the character length must be bigger than or equal to 4.";
        }
        if (!is_null($this->container['expire']) && !preg_match('/^\\d{2}\\d{2}$/', $this->container['expire'])) {
            $invalidProperties[] = "invalid value for 'expire', must be conform to the pattern /^\\d{2}\\d{2}\$/.";
        }
        if (!is_null($this->container['holderName']) && mb_strlen($this->container['holderName']) > 50) {
            $invalidProperties[] = "invalid value for 'holderName', the character length must be smaller than or equal to 50.";
        }
        if (!is_null($this->container['holderName']) && mb_strlen($this->container['holderName']) < 1) {
            $invalidProperties[] = "invalid value for 'holderName', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['cardNoHash']) && mb_strlen($this->container['cardNoHash']) > 64) {
            $invalidProperties[] = "invalid value for 'cardNoHash', the character length must be smaller than or equal to 64.";
        }
        if (!is_null($this->container['cardNoHash']) && mb_strlen($this->container['cardNoHash']) < 1) {
            $invalidProperties[] = "invalid value for 'cardNoHash', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['forward']) && mb_strlen($this->container['forward']) > 7) {
            $invalidProperties[] = "invalid value for 'forward', the character length must be smaller than or equal to 7.";
        }
        if (!is_null($this->container['forward']) && mb_strlen($this->container['forward']) < 1) {
            $invalidProperties[] = "invalid value for 'forward', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['issuer']) && mb_strlen($this->container['issuer']) > 7) {
            $invalidProperties[] = "invalid value for 'issuer', the character length must be smaller than or equal to 7.";
        }
        if (!is_null($this->container['issuer']) && mb_strlen($this->container['issuer']) < 1) {
            $invalidProperties[] = "invalid value for 'issuer', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['transactionId']) && mb_strlen($this->container['transactionId']) > 28) {
            $invalidProperties[] = "invalid value for 'transactionId', the character length must be smaller than or equal to 28.";
        }
        if (!is_null($this->container['transactionId']) && mb_strlen($this->container['transactionId']) < 28) {
            $invalidProperties[] = "invalid value for 'transactionId', the character length must be bigger than or equal to 28.";
        }
        if (!is_null($this->container['approve']) && mb_strlen($this->container['approve']) > 7) {
            $invalidProperties[] = "invalid value for 'approve', the character length must be smaller than or equal to 7.";
        }
        if (!is_null($this->container['approve']) && mb_strlen($this->container['approve']) < 1) {
            $invalidProperties[] = "invalid value for 'approve', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['itemCode']) && mb_strlen($this->container['itemCode']) > 7) {
            $invalidProperties[] = "invalid value for 'itemCode', the character length must be smaller than or equal to 7.";
        }
        if (!is_null($this->container['itemCode']) && mb_strlen($this->container['itemCode']) < 7) {
            $invalidProperties[] = "invalid value for 'itemCode', the character length must be bigger than or equal to 7.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return 0 === count($this->listInvalidProperties());
    }

    /**
     * Gets payType.
     *
     * @return PayType|null
     */
    public function getPayType(): mixed
    {
        return $this->container['payType'];
    }

    /**
     * Sets payType.
     *
     * @param PayType $payType 決済種別\\ この決済で利用する決済手段です。  - `Applepay`: Apple Pay
     */
    public function setPayType(mixed $payType): static
    {
        if (is_null($payType)) {
            throw new \InvalidArgumentException('non-nullable payType cannot be null');
        }
        $this->container['payType'] = $payType;

        return $this;
    }

    /**
     * Gets jobCode.
     *
     * @return ApplePayPaymentJobCode|null
     */
    public function getJobCode(): mixed
    {
        return $this->container['jobCode'];
    }

    /**
     * Sets jobCode.
     *
     * @param ApplePayPaymentJobCode $jobCode jobCode
     */
    public function setJobCode(mixed $jobCode): static
    {
        if (is_null($jobCode)) {
            throw new \InvalidArgumentException('non-nullable jobCode cannot be null');
        }
        $this->container['jobCode'] = $jobCode;

        return $this;
    }

    /**
     * Gets status.
     *
     * @return PaymentStatus|null
     */
    public function getStatus(): mixed
    {
        return $this->container['status'];
    }

    /**
     * Sets status.
     *
     * @param PaymentStatus $status 決済ステータス  - `UNPROCESSED`: 未処理<br /><span class=\"smallText\">請求はまだ実行されていません。</span> - `AUTHORIZED`: 仮売上<br /><span class=\"smallText\">仮売上として与信枠の確保が完了しており、売上確定により請求を完了できます。</span> - `CAPTURED`: 売上確定<br /><span class=\"smallText\">請求が完了し、売上が確定しています。</span> - `CANCELED`: キャンセル<br /><span class=\"smallText\">この決済はキャンセルされました。</span>
     */
    public function setStatus(mixed $status): static
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets brand.
     *
     * @return CardBrand|null
     */
    public function getBrand(): mixed
    {
        return $this->container['brand'];
    }

    /**
     * Sets brand.
     *
     * @param CardBrand|null $brand brand
     */
    public function setBrand(mixed $brand): static
    {
        if (is_null($brand)) {
            $this->openAPINullablesSetToNull[] = 'brand';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('brand', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['brand'] = $brand;

        return $this;
    }

    /**
     * Gets cardNo.
     *
     * @return string|null
     */
    public function getCardNo(): mixed
    {
        return $this->container['cardNo'];
    }

    /**
     * Sets cardNo.
     *
     * @param string|null $cardNo マスク済みカード番号。\\ <span class=\"smallText\"> 下4桁以外をマスクしたカード番号です。\\ Apple Payでは実際のカード番号ではなくデバイスアカウント番号と呼ばれる番号で決済が行われるため、このフィールドで返される値はデバイスアカウント番号をマスクしたものになります。\\ </span> 形式：`************1234`
     */
    public function setCardNo(mixed $cardNo): static
    {
        if (is_null($cardNo)) {
            $this->openAPINullablesSetToNull[] = 'cardNo';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cardNo', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($cardNo) && mb_strlen($cardNo) > 16) {
            throw new \InvalidArgumentException('invalid length for $cardNo when calling PaymentApplePay., must be smaller than or equal to 16.');
        }
        $this->container['cardNo'] = $cardNo;

        return $this;
    }

    /**
     * Gets expire.
     *
     * @return string|null
     */
    public function getExpire(): mixed
    {
        return $this->container['expire'];
    }

    /**
     * Sets expire.
     *
     * @param string|null $expire カード有効期限。\\ 形式：`YYMM`
     */
    public function setExpire(mixed $expire): static
    {
        if (is_null($expire)) {
            $this->openAPINullablesSetToNull[] = 'expire';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('expire', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($expire) && mb_strlen($expire) > 4) {
            throw new \InvalidArgumentException('invalid length for $expire when calling PaymentApplePay., must be smaller than or equal to 4.');
        }
        if (!is_null($expire) && mb_strlen($expire) < 4) {
            throw new \InvalidArgumentException('invalid length for $expire when calling PaymentApplePay., must be bigger than or equal to 4.');
        }
        if (!is_null($expire) && is_string($expire) && !preg_match('/^\\d{2}\\d{2}$/', $expire)) {
            throw new \InvalidArgumentException('invalid value for $expire when calling PaymentApplePay., must conform to the pattern /^\\d{2}\\d{2}$/.');
        }
        $this->container['expire'] = $expire;

        return $this;
    }

    /**
     * Gets holderName.
     *
     * @return string|null
     */
    public function getHolderName(): mixed
    {
        return $this->container['holderName'];
    }

    /**
     * Sets holderName.
     *
     * @param string|null $holderName カード名義人名
     */
    public function setHolderName(mixed $holderName): static
    {
        if (is_null($holderName)) {
            $this->openAPINullablesSetToNull[] = 'holderName';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('holderName', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($holderName) && mb_strlen($holderName) > 50) {
            throw new \InvalidArgumentException('invalid length for $holderName when calling PaymentApplePay., must be smaller than or equal to 50.');
        }
        if (!is_null($holderName) && mb_strlen($holderName) < 1) {
            throw new \InvalidArgumentException('invalid length for $holderName when calling PaymentApplePay., must be bigger than or equal to 1.');
        }
        $this->container['holderName'] = $holderName;

        return $this;
    }

    /**
     * Gets cardNoHash.
     *
     * @return string|null
     */
    public function getCardNoHash(): mixed
    {
        return $this->container['cardNoHash'];
    }

    /**
     * Sets cardNoHash.
     *
     * @param string|null $cardNoHash カード番号をもとに生成されたハッシュ値。\\ <span class=\"smallText\"> おなじカード番号に対しては常に同じ値が返されます。\\ カード情報非保持の原則に基づき、fincodeユーザーはマスクされていないカード番号の代わりにこの値を保持することができます。 </span>
     */
    public function setCardNoHash(mixed $cardNoHash): static
    {
        if (is_null($cardNoHash)) {
            $this->openAPINullablesSetToNull[] = 'cardNoHash';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cardNoHash', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($cardNoHash) && mb_strlen($cardNoHash) > 64) {
            throw new \InvalidArgumentException('invalid length for $cardNoHash when calling PaymentApplePay., must be smaller than or equal to 64.');
        }
        if (!is_null($cardNoHash) && mb_strlen($cardNoHash) < 1) {
            throw new \InvalidArgumentException('invalid length for $cardNoHash when calling PaymentApplePay., must be bigger than or equal to 1.');
        }
        $this->container['cardNoHash'] = $cardNoHash;

        return $this;
    }

    /**
     * Gets method.
     *
     * @return CardPayMethod|null
     */
    public function getMethod(): mixed
    {
        return $this->container['method'];
    }

    /**
     * Sets method.
     *
     * @param CardPayMethod $method method
     */
    public function setMethod(mixed $method): static
    {
        if (is_null($method)) {
            throw new \InvalidArgumentException('non-nullable method cannot be null');
        }
        $this->container['method'] = $method;

        return $this;
    }

    /**
     * Gets payTimes.
     *
     * @return CardPayTimesResponse|null
     */
    public function getPayTimes(): mixed
    {
        return $this->container['payTimes'];
    }

    /**
     * Sets payTimes.
     *
     * @param CardPayTimesResponse|null $payTimes payTimes
     */
    public function setPayTimes(mixed $payTimes): static
    {
        if (is_null($payTimes)) {
            $this->openAPINullablesSetToNull[] = 'payTimes';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payTimes', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payTimes'] = $payTimes;

        return $this;
    }

    /**
     * Gets forward.
     *
     * @return string|null
     */
    public function getForward(): mixed
    {
        return $this->container['forward'];
    }

    /**
     * Sets forward.
     *
     * @param string|null $forward 仕向け先
     */
    public function setForward(mixed $forward): static
    {
        if (is_null($forward)) {
            $this->openAPINullablesSetToNull[] = 'forward';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('forward', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($forward) && mb_strlen($forward) > 7) {
            throw new \InvalidArgumentException('invalid length for $forward when calling PaymentApplePay., must be smaller than or equal to 7.');
        }
        if (!is_null($forward) && mb_strlen($forward) < 1) {
            throw new \InvalidArgumentException('invalid length for $forward when calling PaymentApplePay., must be bigger than or equal to 1.');
        }
        $this->container['forward'] = $forward;

        return $this;
    }

    /**
     * Gets issuer.
     *
     * @return string|null
     */
    public function getIssuer(): mixed
    {
        return $this->container['issuer'];
    }

    /**
     * Sets issuer.
     *
     * @param string|null $issuer イシュア
     */
    public function setIssuer(mixed $issuer): static
    {
        if (is_null($issuer)) {
            $this->openAPINullablesSetToNull[] = 'issuer';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('issuer', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($issuer) && mb_strlen($issuer) > 7) {
            throw new \InvalidArgumentException('invalid length for $issuer when calling PaymentApplePay., must be smaller than or equal to 7.');
        }
        if (!is_null($issuer) && mb_strlen($issuer) < 1) {
            throw new \InvalidArgumentException('invalid length for $issuer when calling PaymentApplePay., must be bigger than or equal to 1.');
        }
        $this->container['issuer'] = $issuer;

        return $this;
    }

    /**
     * Gets transactionId.
     *
     * @return string|null
     */
    public function getTransactionId(): mixed
    {
        return $this->container['transactionId'];
    }

    /**
     * Sets transactionId.
     *
     * @param string|null $transactionId トランザクションID
     */
    public function setTransactionId(mixed $transactionId): static
    {
        if (is_null($transactionId)) {
            $this->openAPINullablesSetToNull[] = 'transactionId';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('transactionId', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($transactionId) && mb_strlen($transactionId) > 28) {
            throw new \InvalidArgumentException('invalid length for $transactionId when calling PaymentApplePay., must be smaller than or equal to 28.');
        }
        if (!is_null($transactionId) && mb_strlen($transactionId) < 28) {
            throw new \InvalidArgumentException('invalid length for $transactionId when calling PaymentApplePay., must be bigger than or equal to 28.');
        }
        $this->container['transactionId'] = $transactionId;

        return $this;
    }

    /**
     * Gets approve.
     *
     * @return string|null
     */
    public function getApprove(): mixed
    {
        return $this->container['approve'];
    }

    /**
     * Sets approve.
     *
     * @param string|null $approve 承認番号
     */
    public function setApprove(mixed $approve): static
    {
        if (is_null($approve)) {
            $this->openAPINullablesSetToNull[] = 'approve';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('approve', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($approve) && mb_strlen($approve) > 7) {
            throw new \InvalidArgumentException('invalid length for $approve when calling PaymentApplePay., must be smaller than or equal to 7.');
        }
        if (!is_null($approve) && mb_strlen($approve) < 1) {
            throw new \InvalidArgumentException('invalid length for $approve when calling PaymentApplePay., must be bigger than or equal to 1.');
        }
        $this->container['approve'] = $approve;

        return $this;
    }

    /**
     * Gets authMaxDate.
     *
     * @return string|null
     */
    public function getAuthMaxDate(): mixed
    {
        return $this->container['authMaxDate'];
    }

    /**
     * Sets authMaxDate.
     *
     * @param string|null $authMaxDate 仮売上有効期限\\ `job_code`に`AUTH（仮売上）`を指定した場合値が設定されます
     */
    public function setAuthMaxDate(mixed $authMaxDate): static
    {
        if (is_null($authMaxDate)) {
            $this->openAPINullablesSetToNull[] = 'authMaxDate';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('authMaxDate', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['authMaxDate'] = $authMaxDate;

        return $this;
    }

    /**
     * Gets itemCode.
     *
     * @return string|null
     */
    public function getItemCode(): mixed
    {
        return $this->container['itemCode'];
    }

    /**
     * Sets itemCode.
     *
     * @param string|null $itemCode 商品コード
     */
    public function setItemCode(mixed $itemCode): static
    {
        if (is_null($itemCode)) {
            $this->openAPINullablesSetToNull[] = 'itemCode';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('itemCode', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($itemCode) && mb_strlen($itemCode) > 7) {
            throw new \InvalidArgumentException('invalid length for $itemCode when calling PaymentApplePay., must be smaller than or equal to 7.');
        }
        if (!is_null($itemCode) && mb_strlen($itemCode) < 7) {
            throw new \InvalidArgumentException('invalid length for $itemCode when calling PaymentApplePay., must be bigger than or equal to 7.');
        }
        $this->container['itemCode'] = $itemCode;

        return $this;
    }

    /**
     * Gets sendUrl.
     *
     * @return string|null
     */
    public function getSendUrl(): mixed
    {
        return $this->container['sendUrl'];
    }

    /**
     * Sets sendUrl.
     *
     * @param string|null $sendUrl ※ 閉塞機能
     */
    public function setSendUrl(mixed $sendUrl): static
    {
        if (is_null($sendUrl)) {
            $this->openAPINullablesSetToNull[] = 'sendUrl';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sendUrl', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sendUrl'] = $sendUrl;

        return $this;
    }

    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @see https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    public function jsonSerialize(): mixed
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object.
     */
    public function __toString(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
    }

    /**
     * Gets a header-safe presentation of the object.
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
