<?php

declare(strict_types=1);
/**
 * fincode API.
 *
 * fincodeのAPIリファレンスです。\\ fincodeは決済情報のほか様々なリソースを管理できるため、リソース指向なREST APIをベースとしたインターフェイス設計のもとでAPIを提供しています。\\ APIの呼び出しにはAPIキーによる認証が必要であり、リクエストの際に`Authorization`ヘッダーに有効なAPIキーをセットすることで認証できます。
 *
 * The version of the OpenAPI document: 1.2.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Fincode\Model;

use OpenAPI\Fincode\ObjectSerializer;

/**
 * @implements \ArrayAccess<string, mixed>
 */
class ContractsRetrievingResponse implements ModelInterface, \ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;
    /**
     * The original name of the model.
     */
    protected static string $openAPIModelName = 'Contracts.Retrieving.Response';
    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var array<string, string>
     */
    protected static array $openAPITypes = ['shopId' => 'string', 'platformId' => 'string', 'shopType' => '\OpenAPI\Fincode\Model\ShopType', 'statusCode' => '\OpenAPI\Fincode\Model\ContractStatus', 'examination' => '\OpenAPI\Fincode\Model\Examination[]', 'availableStatusCode' => 'int', 'createDate' => 'string', 'contractedAt' => 'string', 'startChargingAt' => 'string', 'expiredAt' => 'string', 'salesDepositStatusCode' => 'int', 'salesDepositStatusUpdatedDate' => 'string', 'deniedAt' => 'string', 'suspendedBilling' => 'bool', 'suspendedBillingDate' => 'string', 'suspendedPayment' => 'bool', 'suspendedPaymentDate' => 'string', 'suspendedService' => 'bool', 'suspendedServiceDate' => 'string', 'suspededImmediateUse' => 'bool', 'suspendedImmediateUseDate' => 'string', 'stopCancelaltionMemo' => 'string', 'obligationsNotice' => 'string', 'userShopName' => 'string', 'registerMail' => 'string', 'platformReprentativeShop' => 'bool', 'sharedCustomerFlag' => '\OpenAPI\Fincode\Model\SharedCustomerFlag', 'contractDetail' => '\OpenAPI\Fincode\Model\ContractContractDetail', 'contractBankAccount' => '\OpenAPI\Fincode\Model\ContractBankAccountInfo', 'contractVirtualBank' => '\OpenAPI\Fincode\Model\ContractBankAccountInfo', 'contractCardDestination' => '\OpenAPI\Fincode\Model\CardDestination[]', 'creditCardSetting' => '\OpenAPI\Fincode\Model\CardPaymentSetting', 'officialRegisteredCorporateInfo' => '\OpenAPI\Fincode\Model\RegistryCorporateInfo'];
    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var array<string, string|null>
     */
    protected static array $openAPIFormats = ['shopId' => null, 'platformId' => null, 'shopType' => null, 'statusCode' => null, 'examination' => null, 'availableStatusCode' => null, 'createDate' => null, 'contractedAt' => null, 'startChargingAt' => null, 'expiredAt' => null, 'salesDepositStatusCode' => null, 'salesDepositStatusUpdatedDate' => null, 'deniedAt' => null, 'suspendedBilling' => null, 'suspendedBillingDate' => null, 'suspendedPayment' => null, 'suspendedPaymentDate' => null, 'suspendedService' => null, 'suspendedServiceDate' => null, 'suspededImmediateUse' => null, 'suspendedImmediateUseDate' => null, 'stopCancelaltionMemo' => null, 'obligationsNotice' => null, 'userShopName' => null, 'registerMail' => null, 'platformReprentativeShop' => null, 'sharedCustomerFlag' => null, 'contractDetail' => null, 'contractBankAccount' => null, 'contractVirtualBank' => null, 'contractCardDestination' => null, 'creditCardSetting' => null, 'officialRegisteredCorporateInfo' => null];
    /**
     * Array of nullable properties. Used for (de)serialization.
     *
     * @var array<string, bool>
     */
    protected static array $openAPINullables = ['shopId' => false, 'platformId' => false, 'shopType' => true, 'statusCode' => false, 'examination' => false, 'availableStatusCode' => false, 'createDate' => false, 'contractedAt' => true, 'startChargingAt' => true, 'expiredAt' => true, 'salesDepositStatusCode' => true, 'salesDepositStatusUpdatedDate' => true, 'deniedAt' => true, 'suspendedBilling' => true, 'suspendedBillingDate' => true, 'suspendedPayment' => true, 'suspendedPaymentDate' => true, 'suspendedService' => true, 'suspendedServiceDate' => true, 'suspededImmediateUse' => true, 'suspendedImmediateUseDate' => true, 'stopCancelaltionMemo' => true, 'obligationsNotice' => true, 'userShopName' => true, 'registerMail' => true, 'platformReprentativeShop' => true, 'sharedCustomerFlag' => true, 'contractDetail' => false, 'contractBankAccount' => false, 'contractVirtualBank' => false, 'contractCardDestination' => false, 'creditCardSetting' => false, 'officialRegisteredCorporateInfo' => false];
    /**
     * If a nullable field gets set to null, insert it here.
     *
     * @var array<string, bool>
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return array<string, string|null>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties.
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null.
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null.
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable.
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }
    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = ['shopId' => 'shop_id', 'platformId' => 'platform_id', 'shopType' => 'shop_type', 'statusCode' => 'status_code', 'examination' => 'examination', 'availableStatusCode' => 'available_status_code', 'createDate' => 'create_date', 'contractedAt' => 'contracted_at', 'startChargingAt' => 'start_charging_at', 'expiredAt' => 'expired_at', 'salesDepositStatusCode' => 'sales_deposit_status_code', 'salesDepositStatusUpdatedDate' => 'sales_deposit_status_updated_date', 'deniedAt' => 'denied_at', 'suspendedBilling' => 'suspended_billing', 'suspendedBillingDate' => 'suspended_billing_date', 'suspendedPayment' => 'suspended_payment', 'suspendedPaymentDate' => 'suspended_payment_date', 'suspendedService' => 'suspended_service', 'suspendedServiceDate' => 'suspended_service_date', 'suspededImmediateUse' => 'suspeded_immediate_use', 'suspendedImmediateUseDate' => 'suspended_immediate_use_date', 'stopCancelaltionMemo' => 'stop_cancelaltion_memo', 'obligationsNotice' => 'obligations_notice', 'userShopName' => 'user_shop_name', 'registerMail' => 'register_mail', 'platformReprentativeShop' => 'platform_reprentative_shop', 'sharedCustomerFlag' => 'shared_customer_flag', 'contractDetail' => 'contract_detail', 'contractBankAccount' => 'contract_bank_account', 'contractVirtualBank' => 'contract_virtual_bank', 'contractCardDestination' => 'contract_card_destination', 'creditCardSetting' => 'credit_card_setting', 'officialRegisteredCorporateInfo' => 'official_registered_corporate_info'];
    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var array<string, string>
     */
    protected static array $setters = ['shopId' => 'setShopId', 'platformId' => 'setPlatformId', 'shopType' => 'setShopType', 'statusCode' => 'setStatusCode', 'examination' => 'setExamination', 'availableStatusCode' => 'setAvailableStatusCode', 'createDate' => 'setCreateDate', 'contractedAt' => 'setContractedAt', 'startChargingAt' => 'setStartChargingAt', 'expiredAt' => 'setExpiredAt', 'salesDepositStatusCode' => 'setSalesDepositStatusCode', 'salesDepositStatusUpdatedDate' => 'setSalesDepositStatusUpdatedDate', 'deniedAt' => 'setDeniedAt', 'suspendedBilling' => 'setSuspendedBilling', 'suspendedBillingDate' => 'setSuspendedBillingDate', 'suspendedPayment' => 'setSuspendedPayment', 'suspendedPaymentDate' => 'setSuspendedPaymentDate', 'suspendedService' => 'setSuspendedService', 'suspendedServiceDate' => 'setSuspendedServiceDate', 'suspededImmediateUse' => 'setSuspededImmediateUse', 'suspendedImmediateUseDate' => 'setSuspendedImmediateUseDate', 'stopCancelaltionMemo' => 'setStopCancelaltionMemo', 'obligationsNotice' => 'setObligationsNotice', 'userShopName' => 'setUserShopName', 'registerMail' => 'setRegisterMail', 'platformReprentativeShop' => 'setPlatformReprentativeShop', 'sharedCustomerFlag' => 'setSharedCustomerFlag', 'contractDetail' => 'setContractDetail', 'contractBankAccount' => 'setContractBankAccount', 'contractVirtualBank' => 'setContractVirtualBank', 'contractCardDestination' => 'setContractCardDestination', 'creditCardSetting' => 'setCreditCardSetting', 'officialRegisteredCorporateInfo' => 'setOfficialRegisteredCorporateInfo'];
    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var array<string, string>
     */
    protected static array $getters = ['shopId' => 'getShopId', 'platformId' => 'getPlatformId', 'shopType' => 'getShopType', 'statusCode' => 'getStatusCode', 'examination' => 'getExamination', 'availableStatusCode' => 'getAvailableStatusCode', 'createDate' => 'getCreateDate', 'contractedAt' => 'getContractedAt', 'startChargingAt' => 'getStartChargingAt', 'expiredAt' => 'getExpiredAt', 'salesDepositStatusCode' => 'getSalesDepositStatusCode', 'salesDepositStatusUpdatedDate' => 'getSalesDepositStatusUpdatedDate', 'deniedAt' => 'getDeniedAt', 'suspendedBilling' => 'getSuspendedBilling', 'suspendedBillingDate' => 'getSuspendedBillingDate', 'suspendedPayment' => 'getSuspendedPayment', 'suspendedPaymentDate' => 'getSuspendedPaymentDate', 'suspendedService' => 'getSuspendedService', 'suspendedServiceDate' => 'getSuspendedServiceDate', 'suspededImmediateUse' => 'getSuspededImmediateUse', 'suspendedImmediateUseDate' => 'getSuspendedImmediateUseDate', 'stopCancelaltionMemo' => 'getStopCancelaltionMemo', 'obligationsNotice' => 'getObligationsNotice', 'userShopName' => 'getUserShopName', 'registerMail' => 'getRegisterMail', 'platformReprentativeShop' => 'getPlatformReprentativeShop', 'sharedCustomerFlag' => 'getSharedCustomerFlag', 'contractDetail' => 'getContractDetail', 'contractBankAccount' => 'getContractBankAccount', 'contractVirtualBank' => 'getContractVirtualBank', 'contractCardDestination' => 'getContractCardDestination', 'creditCardSetting' => 'getCreditCardSetting', 'officialRegisteredCorporateInfo' => 'getOfficialRegisteredCorporateInfo'];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }
    public const AVAILABLE_STATUS_CODE_NUMBER_201 = 201;
    public const AVAILABLE_STATUS_CODE_NUMBER_202 = 202;
    public const SALES_DEPOSIT_STATUS_CODE_NUMBER_501 = 501;
    public const SALES_DEPOSIT_STATUS_CODE_NUMBER_502 = 502;

    /**
     * Gets allowable values of the enum.
     *
     * @return list<string>
     */
    public function getAvailableStatusCodeAllowableValues(): array
    {
        return [self::AVAILABLE_STATUS_CODE_NUMBER_201, self::AVAILABLE_STATUS_CODE_NUMBER_202];
    }

    /**
     * Gets allowable values of the enum.
     *
     * @return list<string>
     */
    public function getSalesDepositStatusCodeAllowableValues(): array
    {
        return [self::SALES_DEPOSIT_STATUS_CODE_NUMBER_501, self::SALES_DEPOSIT_STATUS_CODE_NUMBER_502];
    }
    /**
     * Associative array for storing property values.
     *
     * @phpstan-var array<string, mixed>
     *
     * @psalm-var array<string, mixed>
     */
    protected array $container = [];

    /**
     * Constructor.
     *
     * @param array<string, mixed> $data Associated array of property values
     *                                   initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('shopId', $data ?? [], null);
        $this->setIfExists('platformId', $data ?? [], null);
        $this->setIfExists('shopType', $data ?? [], null);
        $this->setIfExists('statusCode', $data ?? [], null);
        $this->setIfExists('examination', $data ?? [], null);
        $this->setIfExists('availableStatusCode', $data ?? [], null);
        $this->setIfExists('createDate', $data ?? [], null);
        $this->setIfExists('contractedAt', $data ?? [], null);
        $this->setIfExists('startChargingAt', $data ?? [], null);
        $this->setIfExists('expiredAt', $data ?? [], null);
        $this->setIfExists('salesDepositStatusCode', $data ?? [], null);
        $this->setIfExists('salesDepositStatusUpdatedDate', $data ?? [], null);
        $this->setIfExists('deniedAt', $data ?? [], null);
        $this->setIfExists('suspendedBilling', $data ?? [], null);
        $this->setIfExists('suspendedBillingDate', $data ?? [], null);
        $this->setIfExists('suspendedPayment', $data ?? [], null);
        $this->setIfExists('suspendedPaymentDate', $data ?? [], null);
        $this->setIfExists('suspendedService', $data ?? [], null);
        $this->setIfExists('suspendedServiceDate', $data ?? [], null);
        $this->setIfExists('suspededImmediateUse', $data ?? [], null);
        $this->setIfExists('suspendedImmediateUseDate', $data ?? [], null);
        $this->setIfExists('stopCancelaltionMemo', $data ?? [], null);
        $this->setIfExists('obligationsNotice', $data ?? [], null);
        $this->setIfExists('userShopName', $data ?? [], null);
        $this->setIfExists('registerMail', $data ?? [], null);
        $this->setIfExists('platformReprentativeShop', $data ?? [], null);
        $this->setIfExists('sharedCustomerFlag', $data ?? [], null);
        $this->setIfExists('contractDetail', $data ?? [], null);
        $this->setIfExists('contractBankAccount', $data ?? [], null);
        $this->setIfExists('contractVirtualBank', $data ?? [], null);
        $this->setIfExists('contractCardDestination', $data ?? [], null);
        $this->setIfExists('creditCardSetting', $data ?? [], null);
        $this->setIfExists('officialRegisteredCorporateInfo', $data ?? [], null);
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array.
     *
     * @param array<string, mixed> $fields
     */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }
        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return list<string> invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];
        if (!is_null($this->container['shopId']) && mb_strlen($this->container['shopId']) > 13) {
            $invalidProperties[] = "invalid value for 'shopId', the character length must be smaller than or equal to 13.";
        }
        if (!is_null($this->container['shopId']) && mb_strlen($this->container['shopId']) < 13) {
            $invalidProperties[] = "invalid value for 'shopId', the character length must be bigger than or equal to 13.";
        }
        if (!is_null($this->container['platformId']) && mb_strlen($this->container['platformId']) > 13) {
            $invalidProperties[] = "invalid value for 'platformId', the character length must be smaller than or equal to 13.";
        }
        if (!is_null($this->container['platformId']) && mb_strlen($this->container['platformId']) < 13) {
            $invalidProperties[] = "invalid value for 'platformId', the character length must be bigger than or equal to 13.";
        }
        $allowedValues = $this->getAvailableStatusCodeAllowableValues();
        if (!is_null($this->container['availableStatusCode']) && !in_array($this->container['availableStatusCode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf("invalid value '%s' for 'availableStatusCode', must be one of '%s'", $this->container['availableStatusCode'], implode("', '", $allowedValues));
        }
        $allowedValues = $this->getSalesDepositStatusCodeAllowableValues();
        if (!is_null($this->container['salesDepositStatusCode']) && !in_array($this->container['salesDepositStatusCode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf("invalid value '%s' for 'salesDepositStatusCode', must be one of '%s'", $this->container['salesDepositStatusCode'], implode("', '", $allowedValues));
        }
        if (!is_null($this->container['stopCancelaltionMemo']) && mb_strlen($this->container['stopCancelaltionMemo']) > 5000) {
            $invalidProperties[] = "invalid value for 'stopCancelaltionMemo', the character length must be smaller than or equal to 5000.";
        }
        if (!is_null($this->container['stopCancelaltionMemo']) && mb_strlen($this->container['stopCancelaltionMemo']) < 1) {
            $invalidProperties[] = "invalid value for 'stopCancelaltionMemo', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['obligationsNotice']) && mb_strlen($this->container['obligationsNotice']) > 5000) {
            $invalidProperties[] = "invalid value for 'obligationsNotice', the character length must be smaller than or equal to 5000.";
        }
        if (!is_null($this->container['obligationsNotice']) && mb_strlen($this->container['obligationsNotice']) < 1) {
            $invalidProperties[] = "invalid value for 'obligationsNotice', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['userShopName']) && mb_strlen($this->container['userShopName']) > 50) {
            $invalidProperties[] = "invalid value for 'userShopName', the character length must be smaller than or equal to 50.";
        }
        if (!is_null($this->container['userShopName']) && mb_strlen($this->container['userShopName']) < 1) {
            $invalidProperties[] = "invalid value for 'userShopName', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['registerMail']) && mb_strlen($this->container['registerMail']) > 384) {
            $invalidProperties[] = "invalid value for 'registerMail', the character length must be smaller than or equal to 384.";
        }
        if (!is_null($this->container['registerMail']) && mb_strlen($this->container['registerMail']) < 1) {
            $invalidProperties[] = "invalid value for 'registerMail', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return 0 === count($this->listInvalidProperties());
    }

    /**
     * Gets shopId.
     *
     * @return string|null
     */
    public function getShopId(): mixed
    {
        return $this->container['shopId'];
    }

    /**
     * Sets shopId.
     *
     * @param string $shopId ショップID（テナント）
     */
    public function setShopId(mixed $shopId): static
    {
        if (is_null($shopId)) {
            throw new \InvalidArgumentException('non-nullable shopId cannot be null');
        }
        if (mb_strlen($shopId) > 13) {
            throw new \InvalidArgumentException('invalid length for $shopId when calling ContractsRetrievingResponse., must be smaller than or equal to 13.');
        }
        if (mb_strlen($shopId) < 13) {
            throw new \InvalidArgumentException('invalid length for $shopId when calling ContractsRetrievingResponse., must be bigger than or equal to 13.');
        }
        $this->container['shopId'] = $shopId;

        return $this;
    }

    /**
     * Gets platformId.
     *
     * @return string|null
     */
    public function getPlatformId(): mixed
    {
        return $this->container['platformId'];
    }

    /**
     * Sets platformId.
     *
     * @param string $platformId プラットフォームID
     */
    public function setPlatformId(mixed $platformId): static
    {
        if (is_null($platformId)) {
            throw new \InvalidArgumentException('non-nullable platformId cannot be null');
        }
        if (mb_strlen($platformId) > 13) {
            throw new \InvalidArgumentException('invalid length for $platformId when calling ContractsRetrievingResponse., must be smaller than or equal to 13.');
        }
        if (mb_strlen($platformId) < 13) {
            throw new \InvalidArgumentException('invalid length for $platformId when calling ContractsRetrievingResponse., must be bigger than or equal to 13.');
        }
        $this->container['platformId'] = $platformId;

        return $this;
    }

    /**
     * Gets shopType.
     *
     * @return ShopType|null
     */
    public function getShopType(): mixed
    {
        return $this->container['shopType'];
    }

    /**
     * Sets shopType.
     *
     * @param ShopType|null $shopType shopType
     */
    public function setShopType(mixed $shopType): static
    {
        if (is_null($shopType)) {
            $this->openAPINullablesSetToNull[] = 'shopType';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shopType', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['shopType'] = $shopType;

        return $this;
    }

    /**
     * Gets statusCode.
     *
     * @return ContractStatus|null
     */
    public function getStatusCode(): mixed
    {
        return $this->container['statusCode'];
    }

    /**
     * Sets statusCode.
     *
     * @param ContractStatus $statusCode statusCode
     */
    public function setStatusCode(mixed $statusCode): static
    {
        if (is_null($statusCode)) {
            throw new \InvalidArgumentException('non-nullable statusCode cannot be null');
        }
        $this->container['statusCode'] = $statusCode;

        return $this;
    }

    /**
     * Gets examination.
     *
     * @return Examination[]|null
     */
    public function getExamination(): mixed
    {
        return $this->container['examination'];
    }

    /**
     * Sets examination.
     *
     * @param Examination[] $examination 審査情報\\ \\ 決済事業者ごとの審査状況を配列に格納しています。\\ ある決済手段について審査が開始されていない場合、その決済手段に対応する`examination_master_id`をもつオブジェクトは配列中に存在しません。
     */
    public function setExamination(mixed $examination): static
    {
        if (is_null($examination)) {
            throw new \InvalidArgumentException('non-nullable examination cannot be null');
        }
        $this->container['examination'] = $examination;

        return $this;
    }

    /**
     * Gets availableStatusCode.
     *
     * @return int|null
     */
    public function getAvailableStatusCode(): mixed
    {
        return $this->container['availableStatusCode'];
    }

    /**
     * Sets availableStatusCode.
     *
     * @param int $availableStatusCode 利用可能モード  - 201: テスト環境のみ利用可能 - 202: 本番環境利用可能
     */
    public function setAvailableStatusCode(mixed $availableStatusCode): static
    {
        if (is_null($availableStatusCode)) {
            throw new \InvalidArgumentException('non-nullable availableStatusCode cannot be null');
        }
        $allowedValues = $this->getAvailableStatusCodeAllowableValues();
        if (!in_array($availableStatusCode, $allowedValues, true)) {
            throw new \InvalidArgumentException(sprintf("Invalid value '%s' for 'availableStatusCode', must be one of '%s'", $availableStatusCode, implode("', '", $allowedValues)));
        }
        $this->container['availableStatusCode'] = $availableStatusCode;

        return $this;
    }

    /**
     * Gets createDate.
     *
     * @return string|null
     */
    public function getCreateDate(): mixed
    {
        return $this->container['createDate'];
    }

    /**
     * Sets createDate.
     *
     * @param string $createDate ショップを作成したユーザーの登録日  形式：`yyyy/MM/dd`
     */
    public function setCreateDate(mixed $createDate): static
    {
        if (is_null($createDate)) {
            throw new \InvalidArgumentException('non-nullable createDate cannot be null');
        }
        $this->container['createDate'] = $createDate;

        return $this;
    }

    /**
     * Gets contractedAt.
     *
     * @return string|null
     */
    public function getContractedAt(): mixed
    {
        return $this->container['contractedAt'];
    }

    /**
     * Sets contractedAt.
     *
     * @param string|null $contractedAt 本番環境申請日  形式：`yyyy/MM/dd`
     */
    public function setContractedAt(mixed $contractedAt): static
    {
        if (is_null($contractedAt)) {
            $this->openAPINullablesSetToNull[] = 'contractedAt';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('contractedAt', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['contractedAt'] = $contractedAt;

        return $this;
    }

    /**
     * Gets startChargingAt.
     *
     * @return string|null
     */
    public function getStartChargingAt(): mixed
    {
        return $this->container['startChargingAt'];
    }

    /**
     * Sets startChargingAt.
     *
     * @param string|null $startChargingAt 初回登録完了日  形式：`yyyy/MM/dd`
     */
    public function setStartChargingAt(mixed $startChargingAt): static
    {
        if (is_null($startChargingAt)) {
            $this->openAPINullablesSetToNull[] = 'startChargingAt';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('startChargingAt', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['startChargingAt'] = $startChargingAt;

        return $this;
    }

    /**
     * Gets expiredAt.
     *
     * @return string|null
     */
    public function getExpiredAt(): mixed
    {
        return $this->container['expiredAt'];
    }

    /**
     * Sets expiredAt.
     *
     * @param string|null $expiredAt 解約日  形式：`yyyy/MM/dd`
     */
    public function setExpiredAt(mixed $expiredAt): static
    {
        if (is_null($expiredAt)) {
            $this->openAPINullablesSetToNull[] = 'expiredAt';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('expiredAt', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['expiredAt'] = $expiredAt;

        return $this;
    }

    /**
     * Gets salesDepositStatusCode.
     *
     * @return int|null
     */
    public function getSalesDepositStatusCode(): mixed
    {
        return $this->container['salesDepositStatusCode'];
    }

    /**
     * Sets salesDepositStatusCode.
     *
     * @param int|null $salesDepositStatusCode 本人確認手続き ステータス  入金開始に必要な本人確認手続きのステータスを表します。 - `501`: 入金に必要な手続きが未完了 - `502`: 入金可能
     */
    public function setSalesDepositStatusCode(mixed $salesDepositStatusCode): static
    {
        if (is_null($salesDepositStatusCode)) {
            $this->openAPINullablesSetToNull[] = 'salesDepositStatusCode';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('salesDepositStatusCode', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getSalesDepositStatusCodeAllowableValues();
        if (!is_null($salesDepositStatusCode) && !in_array($salesDepositStatusCode, $allowedValues, true)) {
            throw new \InvalidArgumentException(sprintf("Invalid value '%s' for 'salesDepositStatusCode', must be one of '%s'", $salesDepositStatusCode, implode("', '", $allowedValues)));
        }
        $this->container['salesDepositStatusCode'] = $salesDepositStatusCode;

        return $this;
    }

    /**
     * Gets salesDepositStatusUpdatedDate.
     *
     * @return string|null
     */
    public function getSalesDepositStatusUpdatedDate(): mixed
    {
        return $this->container['salesDepositStatusUpdatedDate'];
    }

    /**
     * Sets salesDepositStatusUpdatedDate.
     *
     * @param string|null $salesDepositStatusUpdatedDate 売上入金 可否ステータス 更新日  形式：`yyyy/MM/dd`
     */
    public function setSalesDepositStatusUpdatedDate(mixed $salesDepositStatusUpdatedDate): static
    {
        if (is_null($salesDepositStatusUpdatedDate)) {
            $this->openAPINullablesSetToNull[] = 'salesDepositStatusUpdatedDate';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('salesDepositStatusUpdatedDate', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['salesDepositStatusUpdatedDate'] = $salesDepositStatusUpdatedDate;

        return $this;
    }

    /**
     * Gets deniedAt.
     *
     * @return string|null
     */
    public function getDeniedAt(): mixed
    {
        return $this->container['deniedAt'];
    }

    /**
     * Sets deniedAt.
     *
     * @param string|null $deniedAt 契約不成立日  形式：`yyyy/MM/dd`
     */
    public function setDeniedAt(mixed $deniedAt): static
    {
        if (is_null($deniedAt)) {
            $this->openAPINullablesSetToNull[] = 'deniedAt';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('deniedAt', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['deniedAt'] = $deniedAt;

        return $this;
    }

    /**
     * Gets suspendedBilling.
     *
     * @return bool|null
     */
    public function getSuspendedBilling(): mixed
    {
        return $this->container['suspendedBilling'];
    }

    /**
     * Sets suspendedBilling.
     *
     * @param bool|null $suspendedBilling 請求停止フラグ
     */
    public function setSuspendedBilling(mixed $suspendedBilling): static
    {
        if (is_null($suspendedBilling)) {
            $this->openAPINullablesSetToNull[] = 'suspendedBilling';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('suspendedBilling', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['suspendedBilling'] = $suspendedBilling;

        return $this;
    }

    /**
     * Gets suspendedBillingDate.
     *
     * @return string|null
     */
    public function getSuspendedBillingDate(): mixed
    {
        return $this->container['suspendedBillingDate'];
    }

    /**
     * Sets suspendedBillingDate.
     *
     * @param string|null $suspendedBillingDate 請求停止フラグ 更新日  形式：`yyyy/MM/dd`
     */
    public function setSuspendedBillingDate(mixed $suspendedBillingDate): static
    {
        if (is_null($suspendedBillingDate)) {
            $this->openAPINullablesSetToNull[] = 'suspendedBillingDate';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('suspendedBillingDate', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['suspendedBillingDate'] = $suspendedBillingDate;

        return $this;
    }

    /**
     * Gets suspendedPayment.
     *
     * @return bool|null
     */
    public function getSuspendedPayment(): mixed
    {
        return $this->container['suspendedPayment'];
    }

    /**
     * Sets suspendedPayment.
     *
     * @param bool|null $suspendedPayment 入金停止フラグ
     */
    public function setSuspendedPayment(mixed $suspendedPayment): static
    {
        if (is_null($suspendedPayment)) {
            $this->openAPINullablesSetToNull[] = 'suspendedPayment';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('suspendedPayment', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['suspendedPayment'] = $suspendedPayment;

        return $this;
    }

    /**
     * Gets suspendedPaymentDate.
     *
     * @return string|null
     */
    public function getSuspendedPaymentDate(): mixed
    {
        return $this->container['suspendedPaymentDate'];
    }

    /**
     * Sets suspendedPaymentDate.
     *
     * @param string|null $suspendedPaymentDate 入金停止フラグ 更新日  形式：`yyyy/MM/dd`
     */
    public function setSuspendedPaymentDate(mixed $suspendedPaymentDate): static
    {
        if (is_null($suspendedPaymentDate)) {
            $this->openAPINullablesSetToNull[] = 'suspendedPaymentDate';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('suspendedPaymentDate', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['suspendedPaymentDate'] = $suspendedPaymentDate;

        return $this;
    }

    /**
     * Gets suspendedService.
     *
     * @return bool|null
     */
    public function getSuspendedService(): mixed
    {
        return $this->container['suspendedService'];
    }

    /**
     * Sets suspendedService.
     *
     * @param bool|null $suspendedService サービス停止フラグ
     */
    public function setSuspendedService(mixed $suspendedService): static
    {
        if (is_null($suspendedService)) {
            $this->openAPINullablesSetToNull[] = 'suspendedService';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('suspendedService', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['suspendedService'] = $suspendedService;

        return $this;
    }

    /**
     * Gets suspendedServiceDate.
     *
     * @return string|null
     */
    public function getSuspendedServiceDate(): mixed
    {
        return $this->container['suspendedServiceDate'];
    }

    /**
     * Sets suspendedServiceDate.
     *
     * @param string|null $suspendedServiceDate サービス停止フラグ 更新日  形式：`yyyy/MM/dd`
     */
    public function setSuspendedServiceDate(mixed $suspendedServiceDate): static
    {
        if (is_null($suspendedServiceDate)) {
            $this->openAPINullablesSetToNull[] = 'suspendedServiceDate';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('suspendedServiceDate', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['suspendedServiceDate'] = $suspendedServiceDate;

        return $this;
    }

    /**
     * Gets suspededImmediateUse.
     *
     * @return bool|null
     */
    public function getSuspededImmediateUse(): mixed
    {
        return $this->container['suspededImmediateUse'];
    }

    /**
     * Sets suspededImmediateUse.
     *
     * @param bool|null $suspededImmediateUse 即時利用停止フラグ
     */
    public function setSuspededImmediateUse(mixed $suspededImmediateUse): static
    {
        if (is_null($suspededImmediateUse)) {
            $this->openAPINullablesSetToNull[] = 'suspededImmediateUse';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('suspededImmediateUse', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['suspededImmediateUse'] = $suspededImmediateUse;

        return $this;
    }

    /**
     * Gets suspendedImmediateUseDate.
     *
     * @return string|null
     */
    public function getSuspendedImmediateUseDate(): mixed
    {
        return $this->container['suspendedImmediateUseDate'];
    }

    /**
     * Sets suspendedImmediateUseDate.
     *
     * @param string|null $suspendedImmediateUseDate 即時利用停止フラグ 更新日  形式：`yyyy/MM/dd`
     */
    public function setSuspendedImmediateUseDate(mixed $suspendedImmediateUseDate): static
    {
        if (is_null($suspendedImmediateUseDate)) {
            $this->openAPINullablesSetToNull[] = 'suspendedImmediateUseDate';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('suspendedImmediateUseDate', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['suspendedImmediateUseDate'] = $suspendedImmediateUseDate;

        return $this;
    }

    /**
     * Gets stopCancelaltionMemo.
     *
     * @return string|null
     */
    public function getStopCancelaltionMemo(): mixed
    {
        return $this->container['stopCancelaltionMemo'];
    }

    /**
     * Sets stopCancelaltionMemo.
     *
     * @param string|null $stopCancelaltionMemo 停止・解約 備考
     */
    public function setStopCancelaltionMemo(mixed $stopCancelaltionMemo): static
    {
        if (is_null($stopCancelaltionMemo)) {
            $this->openAPINullablesSetToNull[] = 'stopCancelaltionMemo';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('stopCancelaltionMemo', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($stopCancelaltionMemo) && mb_strlen($stopCancelaltionMemo) > 5000) {
            throw new \InvalidArgumentException('invalid length for $stopCancelaltionMemo when calling ContractsRetrievingResponse., must be smaller than or equal to 5000.');
        }
        if (!is_null($stopCancelaltionMemo) && mb_strlen($stopCancelaltionMemo) < 1) {
            throw new \InvalidArgumentException('invalid length for $stopCancelaltionMemo when calling ContractsRetrievingResponse., must be bigger than or equal to 1.');
        }
        $this->container['stopCancelaltionMemo'] = $stopCancelaltionMemo;

        return $this;
    }

    /**
     * Gets obligationsNotice.
     *
     * @return string|null
     */
    public function getObligationsNotice(): mixed
    {
        return $this->container['obligationsNotice'];
    }

    /**
     * Sets obligationsNotice.
     *
     * @param string|null $obligationsNotice 特記事項（債権債務）
     */
    public function setObligationsNotice(mixed $obligationsNotice): static
    {
        if (is_null($obligationsNotice)) {
            $this->openAPINullablesSetToNull[] = 'obligationsNotice';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('obligationsNotice', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($obligationsNotice) && mb_strlen($obligationsNotice) > 5000) {
            throw new \InvalidArgumentException('invalid length for $obligationsNotice when calling ContractsRetrievingResponse., must be smaller than or equal to 5000.');
        }
        if (!is_null($obligationsNotice) && mb_strlen($obligationsNotice) < 1) {
            throw new \InvalidArgumentException('invalid length for $obligationsNotice when calling ContractsRetrievingResponse., must be bigger than or equal to 1.');
        }
        $this->container['obligationsNotice'] = $obligationsNotice;

        return $this;
    }

    /**
     * Gets userShopName.
     *
     * @return string|null
     */
    public function getUserShopName(): mixed
    {
        return $this->container['userShopName'];
    }

    /**
     * Sets userShopName.
     *
     * @param string|null $userShopName ショップ名（ユーザー用）
     */
    public function setUserShopName(mixed $userShopName): static
    {
        if (is_null($userShopName)) {
            $this->openAPINullablesSetToNull[] = 'userShopName';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('userShopName', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($userShopName) && mb_strlen($userShopName) > 50) {
            throw new \InvalidArgumentException('invalid length for $userShopName when calling ContractsRetrievingResponse., must be smaller than or equal to 50.');
        }
        if (!is_null($userShopName) && mb_strlen($userShopName) < 1) {
            throw new \InvalidArgumentException('invalid length for $userShopName when calling ContractsRetrievingResponse., must be bigger than or equal to 1.');
        }
        $this->container['userShopName'] = $userShopName;

        return $this;
    }

    /**
     * Gets registerMail.
     *
     * @return string|null
     */
    public function getRegisterMail(): mixed
    {
        return $this->container['registerMail'];
    }

    /**
     * Sets registerMail.
     *
     * @param string|null $registerMail 登録メールアドレス
     */
    public function setRegisterMail(mixed $registerMail): static
    {
        if (is_null($registerMail)) {
            $this->openAPINullablesSetToNull[] = 'registerMail';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('registerMail', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($registerMail) && mb_strlen($registerMail) > 384) {
            throw new \InvalidArgumentException('invalid length for $registerMail when calling ContractsRetrievingResponse., must be smaller than or equal to 384.');
        }
        if (!is_null($registerMail) && mb_strlen($registerMail) < 1) {
            throw new \InvalidArgumentException('invalid length for $registerMail when calling ContractsRetrievingResponse., must be bigger than or equal to 1.');
        }
        $this->container['registerMail'] = $registerMail;

        return $this;
    }

    /**
     * Gets platformReprentativeShop.
     *
     * @return bool|null
     */
    public function getPlatformReprentativeShop(): mixed
    {
        return $this->container['platformReprentativeShop'];
    }

    /**
     * Sets platformReprentativeShop.
     *
     * @param bool|null $platformReprentativeShop プラットフォームの代表ショップか  - true: 代表ショップ - false: 代表ショップではない
     */
    public function setPlatformReprentativeShop(mixed $platformReprentativeShop): static
    {
        if (is_null($platformReprentativeShop)) {
            $this->openAPINullablesSetToNull[] = 'platformReprentativeShop';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('platformReprentativeShop', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['platformReprentativeShop'] = $platformReprentativeShop;

        return $this;
    }

    /**
     * Gets sharedCustomerFlag.
     *
     * @return SharedCustomerFlag|null
     */
    public function getSharedCustomerFlag(): mixed
    {
        return $this->container['sharedCustomerFlag'];
    }

    /**
     * Sets sharedCustomerFlag.
     *
     * @param SharedCustomerFlag|null $sharedCustomerFlag sharedCustomerFlag
     */
    public function setSharedCustomerFlag(mixed $sharedCustomerFlag): static
    {
        if (is_null($sharedCustomerFlag)) {
            $this->openAPINullablesSetToNull[] = 'sharedCustomerFlag';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sharedCustomerFlag', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sharedCustomerFlag'] = $sharedCustomerFlag;

        return $this;
    }

    /**
     * Gets contractDetail.
     *
     * @return ContractContractDetail|null
     */
    public function getContractDetail(): mixed
    {
        return $this->container['contractDetail'];
    }

    /**
     * Sets contractDetail.
     *
     * @param ContractContractDetail $contractDetail contractDetail
     */
    public function setContractDetail(mixed $contractDetail): static
    {
        if (is_null($contractDetail)) {
            throw new \InvalidArgumentException('non-nullable contractDetail cannot be null');
        }
        $this->container['contractDetail'] = $contractDetail;

        return $this;
    }

    /**
     * Gets contractBankAccount.
     *
     * @return ContractBankAccountInfo|null
     */
    public function getContractBankAccount(): mixed
    {
        return $this->container['contractBankAccount'];
    }

    /**
     * Sets contractBankAccount.
     *
     * @param ContractBankAccountInfo $contractBankAccount 入金先口座
     */
    public function setContractBankAccount(mixed $contractBankAccount): static
    {
        if (is_null($contractBankAccount)) {
            throw new \InvalidArgumentException('non-nullable contractBankAccount cannot be null');
        }
        $this->container['contractBankAccount'] = $contractBankAccount;

        return $this;
    }

    /**
     * Gets contractVirtualBank.
     *
     * @return ContractBankAccountInfo|null
     */
    public function getContractVirtualBank(): mixed
    {
        return $this->container['contractVirtualBank'];
    }

    /**
     * Sets contractVirtualBank.
     *
     * @param ContractBankAccountInfo $contractVirtualBank バーチャル口座情報\\ \\ このショップに関してfincodeへの支払いが売上入金額を上回った場合、この口座に所定の期日までに入金を行う必要があります
     */
    public function setContractVirtualBank(mixed $contractVirtualBank): static
    {
        if (is_null($contractVirtualBank)) {
            throw new \InvalidArgumentException('non-nullable contractVirtualBank cannot be null');
        }
        $this->container['contractVirtualBank'] = $contractVirtualBank;

        return $this;
    }

    /**
     * Gets contractCardDestination.
     *
     * @return CardDestination[]|null
     */
    public function getContractCardDestination(): mixed
    {
        return $this->container['contractCardDestination'];
    }

    /**
     * Sets contractCardDestination.
     *
     * @param CardDestination[] $contractCardDestination カード決済 仕向け先のリスト
     */
    public function setContractCardDestination(mixed $contractCardDestination): static
    {
        if (is_null($contractCardDestination)) {
            throw new \InvalidArgumentException('non-nullable contractCardDestination cannot be null');
        }
        $this->container['contractCardDestination'] = $contractCardDestination;

        return $this;
    }

    /**
     * Gets creditCardSetting.
     *
     * @return CardPaymentSetting|null
     */
    public function getCreditCardSetting(): mixed
    {
        return $this->container['creditCardSetting'];
    }

    /**
     * Sets creditCardSetting.
     *
     * @param CardPaymentSetting $creditCardSetting カード決済 設定\\ \\ 3Dセキュアが有効かどうか・審査の結果、3Dセキュアの利用が必須となったかどうか・分割払い／リボ払い利用ができるかどうかなどの情報が含まれます
     */
    public function setCreditCardSetting(mixed $creditCardSetting): static
    {
        if (is_null($creditCardSetting)) {
            throw new \InvalidArgumentException('non-nullable creditCardSetting cannot be null');
        }
        $this->container['creditCardSetting'] = $creditCardSetting;

        return $this;
    }

    /**
     * Gets officialRegisteredCorporateInfo.
     *
     * @return RegistryCorporateInfo|null
     */
    public function getOfficialRegisteredCorporateInfo(): mixed
    {
        return $this->container['officialRegisteredCorporateInfo'];
    }

    /**
     * Sets officialRegisteredCorporateInfo.
     *
     * @param RegistryCorporateInfo $officialRegisteredCorporateInfo 登記簿上の法人情報
     */
    public function setOfficialRegisteredCorporateInfo(mixed $officialRegisteredCorporateInfo): static
    {
        if (is_null($officialRegisteredCorporateInfo)) {
            throw new \InvalidArgumentException('non-nullable officialRegisteredCorporateInfo cannot be null');
        }
        $this->container['officialRegisteredCorporateInfo'] = $officialRegisteredCorporateInfo;

        return $this;
    }

    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @see https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    public function jsonSerialize(): mixed
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object.
     */
    public function __toString(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
    }

    /**
     * Gets a header-safe presentation of the object.
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
