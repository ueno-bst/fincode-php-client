<?php

declare(strict_types=1);
/**
 * fincode API.
 *
 * fincodeのAPIリファレンスです。\\ fincodeは決済情報のほか様々なリソースを管理できるため、リソース指向なREST APIをベースとしたインターフェイス設計のもとでAPIを提供しています。\\ APIの呼び出しにはAPIキーによる認証が必要であり、リクエストの際に`Authorization`ヘッダーに有効なAPIキーをセットすることで認証できます。
 *
 * The version of the OpenAPI document: 1.2.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Fincode\Model;

use OpenAPI\Fincode\ObjectSerializer;

/**
 * @implements \ArrayAccess<string, mixed>
 */
class ExaminationInfoUpdatingRequest implements ModelInterface, \ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;
    /**
     * The original name of the model.
     */
    protected static string $openAPIModelName = 'ExaminationInfo.Updating.Request';
    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var array<string, string>
     */
    protected static array $openAPITypes = ['updateContractDetail' => 'bool', 'updateShop' => 'bool', 'updateBankAccount' => 'bool', 'updateDepositCycle' => 'bool', 'depositCycleMasterId' => '\OpenAPI\Fincode\Model\DepositCycleMasterId', 'contractDetail' => '\OpenAPI\Fincode\Model\ExaminationInfoUpdatingRequestContractDetail', 'shopItemDetail' => '\OpenAPI\Fincode\Model\ContentInfo[]', 'contractBankAccount' => '\OpenAPI\Fincode\Model\ContractBankAccountInfo'];
    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var array<string, string|null>
     */
    protected static array $openAPIFormats = ['updateContractDetail' => null, 'updateShop' => null, 'updateBankAccount' => null, 'updateDepositCycle' => null, 'depositCycleMasterId' => null, 'contractDetail' => null, 'shopItemDetail' => null, 'contractBankAccount' => null];
    /**
     * Array of nullable properties. Used for (de)serialization.
     *
     * @var array<string, bool>
     */
    protected static array $openAPINullables = ['updateContractDetail' => true, 'updateShop' => true, 'updateBankAccount' => true, 'updateDepositCycle' => true, 'depositCycleMasterId' => false, 'contractDetail' => false, 'shopItemDetail' => false, 'contractBankAccount' => false];
    /**
     * If a nullable field gets set to null, insert it here.
     *
     * @var array<string, bool>
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return array<string, string|null>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties.
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null.
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null.
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable.
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }
    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = ['updateContractDetail' => 'update_contract_detail', 'updateShop' => 'update_shop', 'updateBankAccount' => 'update_bank_account', 'updateDepositCycle' => 'update_deposit_cycle', 'depositCycleMasterId' => 'deposit_cycle_master_id', 'contractDetail' => 'contract_detail', 'shopItemDetail' => 'shop_item_detail', 'contractBankAccount' => 'contract_bank_account'];
    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var array<string, string>
     */
    protected static array $setters = ['updateContractDetail' => 'setUpdateContractDetail', 'updateShop' => 'setUpdateShop', 'updateBankAccount' => 'setUpdateBankAccount', 'updateDepositCycle' => 'setUpdateDepositCycle', 'depositCycleMasterId' => 'setDepositCycleMasterId', 'contractDetail' => 'setContractDetail', 'shopItemDetail' => 'setShopItemDetail', 'contractBankAccount' => 'setContractBankAccount'];
    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var array<string, string>
     */
    protected static array $getters = ['updateContractDetail' => 'getUpdateContractDetail', 'updateShop' => 'getUpdateShop', 'updateBankAccount' => 'getUpdateBankAccount', 'updateDepositCycle' => 'getUpdateDepositCycle', 'depositCycleMasterId' => 'getDepositCycleMasterId', 'contractDetail' => 'getContractDetail', 'shopItemDetail' => 'getShopItemDetail', 'contractBankAccount' => 'getContractBankAccount'];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }
    /**
     * Associative array for storing property values.
     *
     * @phpstan-var array<string, mixed>
     *
     * @psalm-var array<string, mixed>
     */
    protected array $container = [];

    /**
     * Constructor.
     *
     * @param array<string, mixed> $data Associated array of property values
     *                                   initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('updateContractDetail', $data ?? [], null);
        $this->setIfExists('updateShop', $data ?? [], null);
        $this->setIfExists('updateBankAccount', $data ?? [], null);
        $this->setIfExists('updateDepositCycle', $data ?? [], null);
        $this->setIfExists('depositCycleMasterId', $data ?? [], null);
        $this->setIfExists('contractDetail', $data ?? [], null);
        $this->setIfExists('shopItemDetail', $data ?? [], null);
        $this->setIfExists('contractBankAccount', $data ?? [], null);
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array.
     *
     * @param array<string, mixed> $fields
     */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }
        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return list<string> invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return 0 === count($this->listInvalidProperties());
    }

    /**
     * Gets updateContractDetail.
     *
     * @return bool|null
     */
    public function getUpdateContractDetail(): mixed
    {
        return $this->container['updateContractDetail'];
    }

    /**
     * Sets updateContractDetail.
     *
     * @param bool|null $updateContractDetail 契約情報更新フラグ\\ \\ 契約情報の更新を行うかどうか  - `true`: 更新を行う
     */
    public function setUpdateContractDetail(mixed $updateContractDetail): static
    {
        if (is_null($updateContractDetail)) {
            $this->openAPINullablesSetToNull[] = 'updateContractDetail';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('updateContractDetail', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['updateContractDetail'] = $updateContractDetail;

        return $this;
    }

    /**
     * Gets updateShop.
     *
     * @return bool|null
     */
    public function getUpdateShop(): mixed
    {
        return $this->container['updateShop'];
    }

    /**
     * Sets updateShop.
     *
     * @param bool|null $updateShop ショップ情報更新フラグ\\ \\ ショップ情報の更新を行うかどうか  - `true`: 更新を行う
     */
    public function setUpdateShop(mixed $updateShop): static
    {
        if (is_null($updateShop)) {
            $this->openAPINullablesSetToNull[] = 'updateShop';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('updateShop', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['updateShop'] = $updateShop;

        return $this;
    }

    /**
     * Gets updateBankAccount.
     *
     * @return bool|null
     */
    public function getUpdateBankAccount(): mixed
    {
        return $this->container['updateBankAccount'];
    }

    /**
     * Sets updateBankAccount.
     *
     * @param bool|null $updateBankAccount 入金用銀行口座情報更新フラグ\\ \\ fincodeの売上の入金先となる銀行口座情報の更新を行うかどうか  - `true`: 更新を行う
     */
    public function setUpdateBankAccount(mixed $updateBankAccount): static
    {
        if (is_null($updateBankAccount)) {
            $this->openAPINullablesSetToNull[] = 'updateBankAccount';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('updateBankAccount', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['updateBankAccount'] = $updateBankAccount;

        return $this;
    }

    /**
     * Gets updateDepositCycle.
     *
     * @return bool|null
     */
    public function getUpdateDepositCycle(): mixed
    {
        return $this->container['updateDepositCycle'];
    }

    /**
     * Sets updateDepositCycle.
     *
     * @param bool|null $updateDepositCycle 入金サイクル情報更新フラグ\\ \\ fincodeの売上の入金サイクル情報の更新を行うかどうか  - `true`: 更新を行う
     */
    public function setUpdateDepositCycle(mixed $updateDepositCycle): static
    {
        if (is_null($updateDepositCycle)) {
            $this->openAPINullablesSetToNull[] = 'updateDepositCycle';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('updateDepositCycle', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['updateDepositCycle'] = $updateDepositCycle;

        return $this;
    }

    /**
     * Gets depositCycleMasterId.
     *
     * @return DepositCycleMasterId|null
     */
    public function getDepositCycleMasterId(): mixed
    {
        return $this->container['depositCycleMasterId'];
    }

    /**
     * Sets depositCycleMasterId.
     *
     * @param DepositCycleMasterId $depositCycleMasterId depositCycleMasterId
     */
    public function setDepositCycleMasterId(mixed $depositCycleMasterId): static
    {
        if (is_null($depositCycleMasterId)) {
            throw new \InvalidArgumentException('non-nullable depositCycleMasterId cannot be null');
        }
        $this->container['depositCycleMasterId'] = $depositCycleMasterId;

        return $this;
    }

    /**
     * Gets contractDetail.
     *
     * @return ExaminationInfoUpdatingRequestContractDetail|null
     */
    public function getContractDetail(): mixed
    {
        return $this->container['contractDetail'];
    }

    /**
     * Sets contractDetail.
     *
     * @param ExaminationInfoUpdatingRequestContractDetail $contractDetail contractDetail
     */
    public function setContractDetail(mixed $contractDetail): static
    {
        if (is_null($contractDetail)) {
            throw new \InvalidArgumentException('non-nullable contractDetail cannot be null');
        }
        $this->container['contractDetail'] = $contractDetail;

        return $this;
    }

    /**
     * Gets shopItemDetail.
     *
     * @return ContentInfo[]|null
     */
    public function getShopItemDetail(): mixed
    {
        return $this->container['shopItemDetail'];
    }

    /**
     * Sets shopItemDetail.
     *
     * @param ContentInfo[] $shopItemDetail ショップ 取扱商材情報\\ \\ fincodeに登録するショップの取扱商材情報
     */
    public function setShopItemDetail(mixed $shopItemDetail): static
    {
        if (is_null($shopItemDetail)) {
            throw new \InvalidArgumentException('non-nullable shopItemDetail cannot be null');
        }
        $this->container['shopItemDetail'] = $shopItemDetail;

        return $this;
    }

    /**
     * Gets contractBankAccount.
     *
     * @return ContractBankAccountInfo|null
     */
    public function getContractBankAccount(): mixed
    {
        return $this->container['contractBankAccount'];
    }

    /**
     * Sets contractBankAccount.
     *
     * @param ContractBankAccountInfo $contractBankAccount 銀行口座情報\\ \\ fincode上での売上入金を受け取るための銀行口座情報
     */
    public function setContractBankAccount(mixed $contractBankAccount): static
    {
        if (is_null($contractBankAccount)) {
            throw new \InvalidArgumentException('non-nullable contractBankAccount cannot be null');
        }
        $this->container['contractBankAccount'] = $contractBankAccount;

        return $this;
    }

    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @see https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    public function jsonSerialize(): mixed
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object.
     */
    public function __toString(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
    }

    /**
     * Gets a header-safe presentation of the object.
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
