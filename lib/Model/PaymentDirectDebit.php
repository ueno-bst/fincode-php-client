<?php

declare(strict_types=1);
/**
 * fincode API.
 *
 * fincodeのAPIリファレンスです。\\ fincodeは決済情報のほか様々なリソースを管理できるため、リソース指向なREST APIをベースとしたインターフェイス設計のもとでAPIを提供しています。\\ APIの呼び出しにはAPIキーによる認証が必要であり、リクエストの際に`Authorization`ヘッダーに有効なAPIキーをセットすることで認証できます。
 *
 * The version of the OpenAPI document: 1.2.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Fincode\Model;

use OpenAPI\Fincode\ObjectSerializer;

/**
 * @implements \ArrayAccess<string, mixed>
 */
class PaymentDirectDebit implements ModelInterface, \ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;
    /**
     * The original name of the model.
     */
    protected static string $openAPIModelName = 'Payment.DirectDebit';
    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var array<string, string>
     */
    protected static array $openAPITypes = ['payType' => '\OpenAPI\Fincode\Model\PayType', 'status' => '\OpenAPI\Fincode\Model\PaymentStatus', 'resultCode' => '\OpenAPI\Fincode\Model\DirectDebitResultCode', 'targetDate' => 'string', 'withdrawalDate' => 'string', 'requestAcceptEndDate' => 'string', 'transferReturnDate' => 'string', 'paymentMethodId' => 'string', 'bankCode' => 'string', 'bankName' => 'string', 'branchCode' => 'string', 'branchName' => 'string', 'remarks' => 'string', 'subscriptionId' => 'string'];
    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var array<string, string|null>
     */
    protected static array $openAPIFormats = ['payType' => null, 'status' => null, 'resultCode' => null, 'targetDate' => null, 'withdrawalDate' => null, 'requestAcceptEndDate' => null, 'transferReturnDate' => null, 'paymentMethodId' => null, 'bankCode' => null, 'bankName' => null, 'branchCode' => null, 'branchName' => null, 'remarks' => null, 'subscriptionId' => null];
    /**
     * Array of nullable properties. Used for (de)serialization.
     *
     * @var array<string, bool>
     */
    protected static array $openAPINullables = ['payType' => false, 'status' => false, 'resultCode' => true, 'targetDate' => true, 'withdrawalDate' => true, 'requestAcceptEndDate' => true, 'transferReturnDate' => true, 'paymentMethodId' => true, 'bankCode' => true, 'bankName' => true, 'branchCode' => true, 'branchName' => true, 'remarks' => true, 'subscriptionId' => true];
    /**
     * If a nullable field gets set to null, insert it here.
     *
     * @var array<string, bool>
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return array<string, string|null>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties.
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null.
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null.
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable.
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }
    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = ['payType' => 'pay_type', 'status' => 'status', 'resultCode' => 'result_code', 'targetDate' => 'target_date', 'withdrawalDate' => 'withdrawal_date', 'requestAcceptEndDate' => 'request_accept_end_date', 'transferReturnDate' => 'transfer_return_date', 'paymentMethodId' => 'payment_method_id', 'bankCode' => 'bank_code', 'bankName' => 'bank_name', 'branchCode' => 'branch_code', 'branchName' => 'branch_name', 'remarks' => 'remarks', 'subscriptionId' => 'subscription_id'];
    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var array<string, string>
     */
    protected static array $setters = ['payType' => 'setPayType', 'status' => 'setStatus', 'resultCode' => 'setResultCode', 'targetDate' => 'setTargetDate', 'withdrawalDate' => 'setWithdrawalDate', 'requestAcceptEndDate' => 'setRequestAcceptEndDate', 'transferReturnDate' => 'setTransferReturnDate', 'paymentMethodId' => 'setPaymentMethodId', 'bankCode' => 'setBankCode', 'bankName' => 'setBankName', 'branchCode' => 'setBranchCode', 'branchName' => 'setBranchName', 'remarks' => 'setRemarks', 'subscriptionId' => 'setSubscriptionId'];
    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var array<string, string>
     */
    protected static array $getters = ['payType' => 'getPayType', 'status' => 'getStatus', 'resultCode' => 'getResultCode', 'targetDate' => 'getTargetDate', 'withdrawalDate' => 'getWithdrawalDate', 'requestAcceptEndDate' => 'getRequestAcceptEndDate', 'transferReturnDate' => 'getTransferReturnDate', 'paymentMethodId' => 'getPaymentMethodId', 'bankCode' => 'getBankCode', 'bankName' => 'getBankName', 'branchCode' => 'getBranchCode', 'branchName' => 'getBranchName', 'remarks' => 'getRemarks', 'subscriptionId' => 'getSubscriptionId'];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }
    /**
     * Associative array for storing property values.
     *
     * @phpstan-var array<string, mixed>
     *
     * @psalm-var array<string, mixed>
     */
    protected array $container = [];

    /**
     * Constructor.
     *
     * @param array<string, mixed> $data Associated array of property values
     *                                   initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('payType', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('resultCode', $data ?? [], null);
        $this->setIfExists('targetDate', $data ?? [], null);
        $this->setIfExists('withdrawalDate', $data ?? [], null);
        $this->setIfExists('requestAcceptEndDate', $data ?? [], null);
        $this->setIfExists('transferReturnDate', $data ?? [], null);
        $this->setIfExists('paymentMethodId', $data ?? [], null);
        $this->setIfExists('bankCode', $data ?? [], null);
        $this->setIfExists('bankName', $data ?? [], null);
        $this->setIfExists('branchCode', $data ?? [], null);
        $this->setIfExists('branchName', $data ?? [], null);
        $this->setIfExists('remarks', $data ?? [], null);
        $this->setIfExists('subscriptionId', $data ?? [], null);
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array.
     *
     * @param array<string, mixed> $fields
     */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }
        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return list<string> invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];
        if (!is_null($this->container['paymentMethodId']) && mb_strlen($this->container['paymentMethodId']) > 25) {
            $invalidProperties[] = "invalid value for 'paymentMethodId', the character length must be smaller than or equal to 25.";
        }
        if (!is_null($this->container['paymentMethodId']) && mb_strlen($this->container['paymentMethodId']) < 25) {
            $invalidProperties[] = "invalid value for 'paymentMethodId', the character length must be bigger than or equal to 25.";
        }
        if (!is_null($this->container['bankCode']) && mb_strlen($this->container['bankCode']) > 4) {
            $invalidProperties[] = "invalid value for 'bankCode', the character length must be smaller than or equal to 4.";
        }
        if (!is_null($this->container['bankCode']) && mb_strlen($this->container['bankCode']) < 4) {
            $invalidProperties[] = "invalid value for 'bankCode', the character length must be bigger than or equal to 4.";
        }
        if (!is_null($this->container['bankName']) && mb_strlen($this->container['bankName']) > 45) {
            $invalidProperties[] = "invalid value for 'bankName', the character length must be smaller than or equal to 45.";
        }
        if (!is_null($this->container['bankName']) && mb_strlen($this->container['bankName']) < 1) {
            $invalidProperties[] = "invalid value for 'bankName', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['branchCode']) && mb_strlen($this->container['branchCode']) > 3) {
            $invalidProperties[] = "invalid value for 'branchCode', the character length must be smaller than or equal to 3.";
        }
        if (!is_null($this->container['branchCode']) && mb_strlen($this->container['branchCode']) < 3) {
            $invalidProperties[] = "invalid value for 'branchCode', the character length must be bigger than or equal to 3.";
        }
        if (!is_null($this->container['branchName']) && mb_strlen($this->container['branchName']) > 45) {
            $invalidProperties[] = "invalid value for 'branchName', the character length must be smaller than or equal to 45.";
        }
        if (!is_null($this->container['branchName']) && mb_strlen($this->container['branchName']) < 1) {
            $invalidProperties[] = "invalid value for 'branchName', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['remarks']) && mb_strlen($this->container['remarks']) > 9) {
            $invalidProperties[] = "invalid value for 'remarks', the character length must be smaller than or equal to 9.";
        }
        if (!is_null($this->container['remarks']) && mb_strlen($this->container['remarks']) < 1) {
            $invalidProperties[] = "invalid value for 'remarks', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['subscriptionId']) && mb_strlen($this->container['subscriptionId']) > 25) {
            $invalidProperties[] = "invalid value for 'subscriptionId', the character length must be smaller than or equal to 25.";
        }
        if (!is_null($this->container['subscriptionId']) && mb_strlen($this->container['subscriptionId']) < 1) {
            $invalidProperties[] = "invalid value for 'subscriptionId', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return 0 === count($this->listInvalidProperties());
    }

    /**
     * Gets payType.
     *
     * @return PayType|null
     */
    public function getPayType(): mixed
    {
        return $this->container['payType'];
    }

    /**
     * Sets payType.
     *
     * @param PayType $payType 決済種別\\ この決済で利用する決済手段です。  - `Directdebit`: 口座振替
     */
    public function setPayType(mixed $payType): static
    {
        if (is_null($payType)) {
            throw new \InvalidArgumentException('non-nullable payType cannot be null');
        }
        $this->container['payType'] = $payType;

        return $this;
    }

    /**
     * Gets status.
     *
     * @return PaymentStatus|null
     */
    public function getStatus(): mixed
    {
        return $this->container['status'];
    }

    /**
     * Sets status.
     *
     * @param PaymentStatus $status 決済ステータス  - `UNPROCESSED`: 未処理<br /><span class=\"smallText\">振替はまだ実行されていません。</span> - `AWAITING_PAYMENT_APPROVAL`: 決済処理待ち<br /><span class=\"smallText\">fincodeおよび金融機関による振替処理を待っています。</span> - `CAPTURED`: 売上確定<br /><span class=\"smallText\">振替が完了し、売上が確定しています。</span> - `CANCELED`: キャンセル<br /><span class=\"smallText\">この振替はキャンセルされました。</span> - `FAILED`: 請求失敗<br /><span class=\"smallText\">何らかの理由により振替に失敗しました。</span>
     */
    public function setStatus(mixed $status): static
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets resultCode.
     *
     * @return DirectDebitResultCode|null
     */
    public function getResultCode(): mixed
    {
        return $this->container['resultCode'];
    }

    /**
     * Sets resultCode.
     *
     * @param DirectDebitResultCode|null $resultCode resultCode
     */
    public function setResultCode(mixed $resultCode): static
    {
        if (is_null($resultCode)) {
            $this->openAPINullablesSetToNull[] = 'resultCode';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('resultCode', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['resultCode'] = $resultCode;

        return $this;
    }

    /**
     * Gets targetDate.
     *
     * @return string|null
     */
    public function getTargetDate(): mixed
    {
        return $this->container['targetDate'];
    }

    /**
     * Sets targetDate.
     *
     * @param string|null $targetDate 振替指定日\\ 振替を行う日を指定します。下記の日付を指定できます。  - `yyyy/MM/05`: 5日 - `yyyy/MM/06`: 6日 - `yyyy/MM/23`: 23日 - `yyyy/MM/27`: 27日  形式： `yyyy/MM/dd`\\ 実際の振替は営業日に行われるため、必ずしも指定した日付に引き落としはされません。\\ 詳細は[Docs > 口座振替年間スケジュール](https://docs.fincode.jp/payment/directdebit/schedule)の「振替日」の列で確認できます。
     */
    public function setTargetDate(mixed $targetDate): static
    {
        if (is_null($targetDate)) {
            $this->openAPINullablesSetToNull[] = 'targetDate';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('targetDate', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['targetDate'] = $targetDate;

        return $this;
    }

    /**
     * Gets withdrawalDate.
     *
     * @return string|null
     */
    public function getWithdrawalDate(): mixed
    {
        return $this->container['withdrawalDate'];
    }

    /**
     * Sets withdrawalDate.
     *
     * @param string|null $withdrawalDate 引き落とし日\\ 実際に購入者の口座から引き落としが行われた実績日です。\\ \\ 形式： `yyyy/MM/dd`
     */
    public function setWithdrawalDate(mixed $withdrawalDate): static
    {
        if (is_null($withdrawalDate)) {
            $this->openAPINullablesSetToNull[] = 'withdrawalDate';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('withdrawalDate', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['withdrawalDate'] = $withdrawalDate;

        return $this;
    }

    /**
     * Gets requestAcceptEndDate.
     *
     * @return string|null
     */
    public function getRequestAcceptEndDate(): mixed
    {
        return $this->container['requestAcceptEndDate'];
    }

    /**
     * Sets requestAcceptEndDate.
     *
     * @param string|null $requestAcceptEndDate 請求依頼受付期間 終了日\\ 振替依頼を受け付ける最終日。この日付の23:59までに振替依頼（決済実行）を受け付けます。\\ \\ 形式： `yyyy/MM/dd`\\ 詳細は[Docs > 口座振替年間スケジュール](https://docs.fincode.jp/payment/directdebit/schedule)の「請求依頼受付期間終了日」の列で確認できます。
     */
    public function setRequestAcceptEndDate(mixed $requestAcceptEndDate): static
    {
        if (is_null($requestAcceptEndDate)) {
            $this->openAPINullablesSetToNull[] = 'requestAcceptEndDate';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('requestAcceptEndDate', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['requestAcceptEndDate'] = $requestAcceptEndDate;

        return $this;
    }

    /**
     * Gets transferReturnDate.
     *
     * @return string|null
     */
    public function getTransferReturnDate(): mixed
    {
        return $this->container['transferReturnDate'];
    }

    /**
     * Sets transferReturnDate.
     *
     * @param string|null $transferReturnDate 請求結果反映 予定日\\ \\ 形式： `yyyy/MM/dd`\\ 詳細は[Docs > 口座振替年間スケジュール](https://docs.fincode.jp/payment/directdebit/schedule)の「振替結果返却日」の列で確認できます。
     */
    public function setTransferReturnDate(mixed $transferReturnDate): static
    {
        if (is_null($transferReturnDate)) {
            $this->openAPINullablesSetToNull[] = 'transferReturnDate';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('transferReturnDate', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['transferReturnDate'] = $transferReturnDate;

        return $this;
    }

    /**
     * Gets paymentMethodId.
     *
     * @return string|null
     */
    public function getPaymentMethodId(): mixed
    {
        return $this->container['paymentMethodId'];
    }

    /**
     * Sets paymentMethodId.
     *
     * @param string|null $paymentMethodId 決済手段ID\\ この決済に使用された決済手段のIDです
     */
    public function setPaymentMethodId(mixed $paymentMethodId): static
    {
        if (is_null($paymentMethodId)) {
            $this->openAPINullablesSetToNull[] = 'paymentMethodId';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('paymentMethodId', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($paymentMethodId) && mb_strlen($paymentMethodId) > 25) {
            throw new \InvalidArgumentException('invalid length for $paymentMethodId when calling PaymentDirectDebit., must be smaller than or equal to 25.');
        }
        if (!is_null($paymentMethodId) && mb_strlen($paymentMethodId) < 25) {
            throw new \InvalidArgumentException('invalid length for $paymentMethodId when calling PaymentDirectDebit., must be bigger than or equal to 25.');
        }
        $this->container['paymentMethodId'] = $paymentMethodId;

        return $this;
    }

    /**
     * Gets bankCode.
     *
     * @return string|null
     */
    public function getBankCode(): mixed
    {
        return $this->container['bankCode'];
    }

    /**
     * Sets bankCode.
     *
     * @param string|null $bankCode 金融機関コード\\ fincodeの口座振替に対応している金融機関のコードのリストは[Docs > 利用可能な金融機関（口座振替）](https://docs.fincode.jp/payment/directdebit/restriction)で参照できます。
     */
    public function setBankCode(mixed $bankCode): static
    {
        if (is_null($bankCode)) {
            $this->openAPINullablesSetToNull[] = 'bankCode';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bankCode', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($bankCode) && mb_strlen($bankCode) > 4) {
            throw new \InvalidArgumentException('invalid length for $bankCode when calling PaymentDirectDebit., must be smaller than or equal to 4.');
        }
        if (!is_null($bankCode) && mb_strlen($bankCode) < 4) {
            throw new \InvalidArgumentException('invalid length for $bankCode when calling PaymentDirectDebit., must be bigger than or equal to 4.');
        }
        $this->container['bankCode'] = $bankCode;

        return $this;
    }

    /**
     * Gets bankName.
     *
     * @return string|null
     */
    public function getBankName(): mixed
    {
        return $this->container['bankName'];
    }

    /**
     * Sets bankName.
     *
     * @param string|null $bankName 金融機関名
     */
    public function setBankName(mixed $bankName): static
    {
        if (is_null($bankName)) {
            $this->openAPINullablesSetToNull[] = 'bankName';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bankName', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($bankName) && mb_strlen($bankName) > 45) {
            throw new \InvalidArgumentException('invalid length for $bankName when calling PaymentDirectDebit., must be smaller than or equal to 45.');
        }
        if (!is_null($bankName) && mb_strlen($bankName) < 1) {
            throw new \InvalidArgumentException('invalid length for $bankName when calling PaymentDirectDebit., must be bigger than or equal to 1.');
        }
        $this->container['bankName'] = $bankName;

        return $this;
    }

    /**
     * Gets branchCode.
     *
     * @return string|null
     */
    public function getBranchCode(): mixed
    {
        return $this->container['branchCode'];
    }

    /**
     * Sets branchCode.
     *
     * @param string|null $branchCode 支店コード
     */
    public function setBranchCode(mixed $branchCode): static
    {
        if (is_null($branchCode)) {
            $this->openAPINullablesSetToNull[] = 'branchCode';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('branchCode', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($branchCode) && mb_strlen($branchCode) > 3) {
            throw new \InvalidArgumentException('invalid length for $branchCode when calling PaymentDirectDebit., must be smaller than or equal to 3.');
        }
        if (!is_null($branchCode) && mb_strlen($branchCode) < 3) {
            throw new \InvalidArgumentException('invalid length for $branchCode when calling PaymentDirectDebit., must be bigger than or equal to 3.');
        }
        $this->container['branchCode'] = $branchCode;

        return $this;
    }

    /**
     * Gets branchName.
     *
     * @return string|null
     */
    public function getBranchName(): mixed
    {
        return $this->container['branchName'];
    }

    /**
     * Sets branchName.
     *
     * @param string|null $branchName 支店名
     */
    public function setBranchName(mixed $branchName): static
    {
        if (is_null($branchName)) {
            $this->openAPINullablesSetToNull[] = 'branchName';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('branchName', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($branchName) && mb_strlen($branchName) > 45) {
            throw new \InvalidArgumentException('invalid length for $branchName when calling PaymentDirectDebit., must be smaller than or equal to 45.');
        }
        if (!is_null($branchName) && mb_strlen($branchName) < 1) {
            throw new \InvalidArgumentException('invalid length for $branchName when calling PaymentDirectDebit., must be bigger than or equal to 1.');
        }
        $this->container['branchName'] = $branchName;

        return $this;
    }

    /**
     * Gets remarks.
     *
     * @return string|null
     */
    public function getRemarks(): mixed
    {
        return $this->container['remarks'];
    }

    /**
     * Sets remarks.
     *
     * @param string|null $remarks ご利用明細表示内容  - フォーマット：半角英数カナ／全角英数カナ／一部の記号／半角全角スペース - デフォルト： `ショップ名カナの先頭9文字`  ※ 利用可能な記号  - 半角：`.`、`(`、`)`、`–` - 全角：`．`、`（`、`）`、`ー`
     */
    public function setRemarks(mixed $remarks): static
    {
        if (is_null($remarks)) {
            $this->openAPINullablesSetToNull[] = 'remarks';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('remarks', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($remarks) && mb_strlen($remarks) > 9) {
            throw new \InvalidArgumentException('invalid length for $remarks when calling PaymentDirectDebit., must be smaller than or equal to 9.');
        }
        if (!is_null($remarks) && mb_strlen($remarks) < 1) {
            throw new \InvalidArgumentException('invalid length for $remarks when calling PaymentDirectDebit., must be bigger than or equal to 1.');
        }
        $this->container['remarks'] = $remarks;

        return $this;
    }

    /**
     * Gets subscriptionId.
     *
     * @return string|null
     */
    public function getSubscriptionId(): mixed
    {
        return $this->container['subscriptionId'];
    }

    /**
     * Sets subscriptionId.
     *
     * @param string|null $subscriptionId サブスクリプションID\\ この決済情報がブスクリプションにより生成されたものである場合、このフィールドにサブスクリプションIDが設定されます
     */
    public function setSubscriptionId(mixed $subscriptionId): static
    {
        if (is_null($subscriptionId)) {
            $this->openAPINullablesSetToNull[] = 'subscriptionId';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('subscriptionId', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($subscriptionId) && mb_strlen($subscriptionId) > 25) {
            throw new \InvalidArgumentException('invalid length for $subscriptionId when calling PaymentDirectDebit., must be smaller than or equal to 25.');
        }
        if (!is_null($subscriptionId) && mb_strlen($subscriptionId) < 1) {
            throw new \InvalidArgumentException('invalid length for $subscriptionId when calling PaymentDirectDebit., must be bigger than or equal to 1.');
        }
        $this->container['subscriptionId'] = $subscriptionId;

        return $this;
    }

    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @see https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    public function jsonSerialize(): mixed
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object.
     */
    public function __toString(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
    }

    /**
     * Gets a header-safe presentation of the object.
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
