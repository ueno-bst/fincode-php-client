<?php

declare(strict_types=1);
/**
 * fincode API.
 *
 * fincodeのAPIリファレンスです。\\ fincodeは決済情報のほか様々なリソースを管理できるため、リソース指向なREST APIをベースとしたインターフェイス設計のもとでAPIを提供しています。\\ APIの呼び出しにはAPIキーによる認証が必要であり、リクエストの際に`Authorization`ヘッダーに有効なAPIキーをセットすることで認証できます。
 *
 * The version of the OpenAPI document: 1.2.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Fincode\Model;

use OpenAPI\Fincode\ObjectSerializer;

/**
 * @implements \ArrayAccess<string, mixed>
 */
class PaymentKonbini implements ModelInterface, \ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;
    /**
     * The original name of the model.
     */
    protected static string $openAPIModelName = 'Payment.Konbini';
    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var array<string, string>
     */
    protected static array $openAPITypes = ['payType' => '\OpenAPI\Fincode\Model\PayType', 'status' => '\OpenAPI\Fincode\Model\PaymentStatus', 'paymentTermDay' => 'int', 'paymentTerm' => 'string', 'paymentDate' => 'string', 'barcode' => 'string', 'barcodeFormat' => 'string', 'barcodeWidth' => 'string', 'barcodeHeight' => 'string', 'overpaymentFlag' => 'string', 'cancelOverpaymentFlag' => 'string', 'konbiniCode' => '\OpenAPI\Fincode\Model\KonbiniCode', 'konbiniStoreCode' => 'mixed', 'deviceName' => 'string', 'osVersion' => 'mixed', 'winWidth' => 'string', 'winHeight' => 'string', 'xdpi' => 'mixed', 'ydpi' => 'mixed', 'result' => '\OpenAPI\Fincode\Model\KonbiniPaymentProcessResult', 'orderSerial' => 'string', 'invoiceId' => 'string'];
    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var array<string, string|null>
     */
    protected static array $openAPIFormats = ['payType' => null, 'status' => null, 'paymentTermDay' => 'int64', 'paymentTerm' => null, 'paymentDate' => null, 'barcode' => null, 'barcodeFormat' => null, 'barcodeWidth' => null, 'barcodeHeight' => null, 'overpaymentFlag' => null, 'cancelOverpaymentFlag' => null, 'konbiniCode' => null, 'konbiniStoreCode' => null, 'deviceName' => null, 'osVersion' => null, 'winWidth' => null, 'winHeight' => null, 'xdpi' => null, 'ydpi' => null, 'result' => null, 'orderSerial' => null, 'invoiceId' => null];
    /**
     * Array of nullable properties. Used for (de)serialization.
     *
     * @var array<string, bool>
     */
    protected static array $openAPINullables = ['payType' => false, 'status' => false, 'paymentTermDay' => true, 'paymentTerm' => true, 'paymentDate' => true, 'barcode' => true, 'barcodeFormat' => true, 'barcodeWidth' => true, 'barcodeHeight' => true, 'overpaymentFlag' => false, 'cancelOverpaymentFlag' => false, 'konbiniCode' => true, 'konbiniStoreCode' => true, 'deviceName' => true, 'osVersion' => true, 'winWidth' => true, 'winHeight' => true, 'xdpi' => true, 'ydpi' => true, 'result' => false, 'orderSerial' => true, 'invoiceId' => true];
    /**
     * If a nullable field gets set to null, insert it here.
     *
     * @var array<string, bool>
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return array<string, string|null>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties.
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null.
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null.
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable.
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }
    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = ['payType' => 'pay_type', 'status' => 'status', 'paymentTermDay' => 'payment_term_day', 'paymentTerm' => 'payment_term', 'paymentDate' => 'payment_date', 'barcode' => 'barcode', 'barcodeFormat' => 'barcode_format', 'barcodeWidth' => 'barcode_width', 'barcodeHeight' => 'barcode_height', 'overpaymentFlag' => 'overpayment_flag', 'cancelOverpaymentFlag' => 'cancel_overpayment_flag', 'konbiniCode' => 'konbini_code', 'konbiniStoreCode' => 'konbini_store_code', 'deviceName' => 'device_name', 'osVersion' => 'os_version', 'winWidth' => 'win_width', 'winHeight' => 'win_height', 'xdpi' => 'xdpi', 'ydpi' => 'ydpi', 'result' => 'result', 'orderSerial' => 'order_serial', 'invoiceId' => 'invoice_id'];
    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var array<string, string>
     */
    protected static array $setters = ['payType' => 'setPayType', 'status' => 'setStatus', 'paymentTermDay' => 'setPaymentTermDay', 'paymentTerm' => 'setPaymentTerm', 'paymentDate' => 'setPaymentDate', 'barcode' => 'setBarcode', 'barcodeFormat' => 'setBarcodeFormat', 'barcodeWidth' => 'setBarcodeWidth', 'barcodeHeight' => 'setBarcodeHeight', 'overpaymentFlag' => 'setOverpaymentFlag', 'cancelOverpaymentFlag' => 'setCancelOverpaymentFlag', 'konbiniCode' => 'setKonbiniCode', 'konbiniStoreCode' => 'setKonbiniStoreCode', 'deviceName' => 'setDeviceName', 'osVersion' => 'setOsVersion', 'winWidth' => 'setWinWidth', 'winHeight' => 'setWinHeight', 'xdpi' => 'setXdpi', 'ydpi' => 'setYdpi', 'result' => 'setResult', 'orderSerial' => 'setOrderSerial', 'invoiceId' => 'setInvoiceId'];
    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var array<string, string>
     */
    protected static array $getters = ['payType' => 'getPayType', 'status' => 'getStatus', 'paymentTermDay' => 'getPaymentTermDay', 'paymentTerm' => 'getPaymentTerm', 'paymentDate' => 'getPaymentDate', 'barcode' => 'getBarcode', 'barcodeFormat' => 'getBarcodeFormat', 'barcodeWidth' => 'getBarcodeWidth', 'barcodeHeight' => 'getBarcodeHeight', 'overpaymentFlag' => 'getOverpaymentFlag', 'cancelOverpaymentFlag' => 'getCancelOverpaymentFlag', 'konbiniCode' => 'getKonbiniCode', 'konbiniStoreCode' => 'getKonbiniStoreCode', 'deviceName' => 'getDeviceName', 'osVersion' => 'getOsVersion', 'winWidth' => 'getWinWidth', 'winHeight' => 'getWinHeight', 'xdpi' => 'getXdpi', 'ydpi' => 'getYdpi', 'result' => 'getResult', 'orderSerial' => 'getOrderSerial', 'invoiceId' => 'getInvoiceId'];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }
    public const BARCODE_FORMAT_JPG = 'jpg';
    public const BARCODE_FORMAT_PNG = 'png';
    public const BARCODE_FORMAT_BMP = 'bmp';
    public const OVERPAYMENT_FLAG__0 = '0';
    public const OVERPAYMENT_FLAG__1 = '1';
    public const CANCEL_OVERPAYMENT_FLAG__0 = '0';
    public const CANCEL_OVERPAYMENT_FLAG__1 = '1';

    /**
     * Gets allowable values of the enum.
     *
     * @return list<string>
     */
    public function getBarcodeFormatAllowableValues(): array
    {
        return [self::BARCODE_FORMAT_JPG, self::BARCODE_FORMAT_PNG, self::BARCODE_FORMAT_BMP];
    }

    /**
     * Gets allowable values of the enum.
     *
     * @return list<string>
     */
    public function getOverpaymentFlagAllowableValues(): array
    {
        return [self::OVERPAYMENT_FLAG__0, self::OVERPAYMENT_FLAG__1];
    }

    /**
     * Gets allowable values of the enum.
     *
     * @return list<string>
     */
    public function getCancelOverpaymentFlagAllowableValues(): array
    {
        return [self::CANCEL_OVERPAYMENT_FLAG__0, self::CANCEL_OVERPAYMENT_FLAG__1];
    }
    /**
     * Associative array for storing property values.
     *
     * @phpstan-var array<string, mixed>
     *
     * @psalm-var array<string, mixed>
     */
    protected array $container = [];

    /**
     * Constructor.
     *
     * @param array<string, mixed> $data Associated array of property values
     *                                   initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('payType', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('paymentTermDay', $data ?? [], 2);
        $this->setIfExists('paymentTerm', $data ?? [], null);
        $this->setIfExists('paymentDate', $data ?? [], null);
        $this->setIfExists('barcode', $data ?? [], null);
        $this->setIfExists('barcodeFormat', $data ?? [], null);
        $this->setIfExists('barcodeWidth', $data ?? [], null);
        $this->setIfExists('barcodeHeight', $data ?? [], null);
        $this->setIfExists('overpaymentFlag', $data ?? [], null);
        $this->setIfExists('cancelOverpaymentFlag', $data ?? [], null);
        $this->setIfExists('konbiniCode', $data ?? [], null);
        $this->setIfExists('konbiniStoreCode', $data ?? [], null);
        $this->setIfExists('deviceName', $data ?? [], null);
        $this->setIfExists('osVersion', $data ?? [], null);
        $this->setIfExists('winWidth', $data ?? [], null);
        $this->setIfExists('winHeight', $data ?? [], null);
        $this->setIfExists('xdpi', $data ?? [], null);
        $this->setIfExists('ydpi', $data ?? [], null);
        $this->setIfExists('result', $data ?? [], null);
        $this->setIfExists('orderSerial', $data ?? [], null);
        $this->setIfExists('invoiceId', $data ?? [], null);
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array.
     *
     * @param array<string, mixed> $fields
     */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }
        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return list<string> invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];
        $allowedValues = $this->getBarcodeFormatAllowableValues();
        if (!is_null($this->container['barcodeFormat']) && !in_array($this->container['barcodeFormat'], $allowedValues, true)) {
            $invalidProperties[] = sprintf("invalid value '%s' for 'barcodeFormat', must be one of '%s'", $this->container['barcodeFormat'], implode("', '", $allowedValues));
        }
        if (!is_null($this->container['barcodeWidth']) && mb_strlen($this->container['barcodeWidth']) > 9) {
            $invalidProperties[] = "invalid value for 'barcodeWidth', the character length must be smaller than or equal to 9.";
        }
        if (!is_null($this->container['barcodeWidth']) && mb_strlen($this->container['barcodeWidth']) < 1) {
            $invalidProperties[] = "invalid value for 'barcodeWidth', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['barcodeHeight']) && mb_strlen($this->container['barcodeHeight']) > 9) {
            $invalidProperties[] = "invalid value for 'barcodeHeight', the character length must be smaller than or equal to 9.";
        }
        if (!is_null($this->container['barcodeHeight']) && mb_strlen($this->container['barcodeHeight']) < 1) {
            $invalidProperties[] = "invalid value for 'barcodeHeight', the character length must be bigger than or equal to 1.";
        }
        $allowedValues = $this->getOverpaymentFlagAllowableValues();
        if (!is_null($this->container['overpaymentFlag']) && !in_array($this->container['overpaymentFlag'], $allowedValues, true)) {
            $invalidProperties[] = sprintf("invalid value '%s' for 'overpaymentFlag', must be one of '%s'", $this->container['overpaymentFlag'], implode("', '", $allowedValues));
        }
        $allowedValues = $this->getCancelOverpaymentFlagAllowableValues();
        if (!is_null($this->container['cancelOverpaymentFlag']) && !in_array($this->container['cancelOverpaymentFlag'], $allowedValues, true)) {
            $invalidProperties[] = sprintf("invalid value '%s' for 'cancelOverpaymentFlag', must be one of '%s'", $this->container['cancelOverpaymentFlag'], implode("', '", $allowedValues));
        }
        if (!is_null($this->container['konbiniStoreCode']) && mb_strlen($this->container['konbiniStoreCode']) > 8) {
            $invalidProperties[] = "invalid value for 'konbiniStoreCode', the character length must be smaller than or equal to 8.";
        }
        if (!is_null($this->container['konbiniStoreCode']) && mb_strlen($this->container['konbiniStoreCode']) < 1) {
            $invalidProperties[] = "invalid value for 'konbiniStoreCode', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['deviceName']) && mb_strlen($this->container['deviceName']) > 20) {
            $invalidProperties[] = "invalid value for 'deviceName', the character length must be smaller than or equal to 20.";
        }
        if (!is_null($this->container['deviceName']) && mb_strlen($this->container['deviceName']) < 1) {
            $invalidProperties[] = "invalid value for 'deviceName', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['osVersion']) && mb_strlen($this->container['osVersion']) > 10) {
            $invalidProperties[] = "invalid value for 'osVersion', the character length must be smaller than or equal to 10.";
        }
        if (!is_null($this->container['osVersion']) && mb_strlen($this->container['osVersion']) < 1) {
            $invalidProperties[] = "invalid value for 'osVersion', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['winWidth']) && mb_strlen($this->container['winWidth']) > 5) {
            $invalidProperties[] = "invalid value for 'winWidth', the character length must be smaller than or equal to 5.";
        }
        if (!is_null($this->container['winWidth']) && mb_strlen($this->container['winWidth']) < 1) {
            $invalidProperties[] = "invalid value for 'winWidth', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['winHeight']) && mb_strlen($this->container['winHeight']) > 5) {
            $invalidProperties[] = "invalid value for 'winHeight', the character length must be smaller than or equal to 5.";
        }
        if (!is_null($this->container['winHeight']) && mb_strlen($this->container['winHeight']) < 1) {
            $invalidProperties[] = "invalid value for 'winHeight', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['xdpi']) && mb_strlen($this->container['xdpi']) > 6) {
            $invalidProperties[] = "invalid value for 'xdpi', the character length must be smaller than or equal to 6.";
        }
        if (!is_null($this->container['xdpi']) && mb_strlen($this->container['xdpi']) < 1) {
            $invalidProperties[] = "invalid value for 'xdpi', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['ydpi']) && mb_strlen($this->container['ydpi']) > 6) {
            $invalidProperties[] = "invalid value for 'ydpi', the character length must be smaller than or equal to 6.";
        }
        if (!is_null($this->container['ydpi']) && mb_strlen($this->container['ydpi']) < 1) {
            $invalidProperties[] = "invalid value for 'ydpi', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['orderSerial']) && mb_strlen($this->container['orderSerial']) > 18) {
            $invalidProperties[] = "invalid value for 'orderSerial', the character length must be smaller than or equal to 18.";
        }
        if (!is_null($this->container['orderSerial']) && mb_strlen($this->container['orderSerial']) < 1) {
            $invalidProperties[] = "invalid value for 'orderSerial', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['invoiceId']) && mb_strlen($this->container['invoiceId']) > 20) {
            $invalidProperties[] = "invalid value for 'invoiceId', the character length must be smaller than or equal to 20.";
        }
        if (!is_null($this->container['invoiceId']) && mb_strlen($this->container['invoiceId']) < 1) {
            $invalidProperties[] = "invalid value for 'invoiceId', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return 0 === count($this->listInvalidProperties());
    }

    /**
     * Gets payType.
     *
     * @return PayType|null
     */
    public function getPayType(): mixed
    {
        return $this->container['payType'];
    }

    /**
     * Sets payType.
     *
     * @param PayType $payType 決済種別\\ この決済で利用する決済手段です。  - `Konbini`: コンビニ決済
     */
    public function setPayType(mixed $payType): static
    {
        if (is_null($payType)) {
            throw new \InvalidArgumentException('non-nullable payType cannot be null');
        }
        $this->container['payType'] = $payType;

        return $this;
    }

    /**
     * Gets status.
     *
     * @return PaymentStatus|null
     */
    public function getStatus(): mixed
    {
        return $this->container['status'];
    }

    /**
     * Sets status.
     *
     * @param PaymentStatus $status 決済ステータス  - `UNPROCESSED`: 未処理<br /><span class=\"smallText\">請求はまだ実行されていません。</span> - `AWAITING_CUSTOMER_PAYMENT`: 購入者の支払い待ち<br /><span class=\"smallText\">購入者によるコンビニ店頭レジでの払い込みを待っている状態。</span> - `CAPTURED`: 売上確定<br /><span class=\"smallText\">請求が完了し、売上が確定しています。</span> - `CANCELED`: キャンセル<br /><span class=\"smallText\">この決済はキャンセルされました。</span> - `EXPIRED`: 決済の期限切れ<br /><span class=\"smallText\">この決済は期限が切れています。</span>
     */
    public function setStatus(mixed $status): static
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets paymentTermDay.
     *
     * @return int|null
     */
    public function getPaymentTermDay(): mixed
    {
        return $this->container['paymentTermDay'];
    }

    /**
     * Sets paymentTermDay.
     *
     * @param int|null $paymentTermDay 支払い期限日数
     */
    public function setPaymentTermDay(mixed $paymentTermDay): static
    {
        if (is_null($paymentTermDay)) {
            $this->openAPINullablesSetToNull[] = 'paymentTermDay';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('paymentTermDay', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['paymentTermDay'] = $paymentTermDay;

        return $this;
    }

    /**
     * Gets paymentTerm.
     *
     * @return string|null
     */
    public function getPaymentTerm(): mixed
    {
        return $this->container['paymentTerm'];
    }

    /**
     * Sets paymentTerm.
     *
     * @param string|null $paymentTerm 支払い期限日時\\ コンビニ決済の支払い期限日時です。\\ \\ 形式：`yyyy/MM/dd HH:mm:ss.SSS`
     */
    public function setPaymentTerm(mixed $paymentTerm): static
    {
        if (is_null($paymentTerm)) {
            $this->openAPINullablesSetToNull[] = 'paymentTerm';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('paymentTerm', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['paymentTerm'] = $paymentTerm;

        return $this;
    }

    /**
     * Gets paymentDate.
     *
     * @return string|null
     */
    public function getPaymentDate(): mixed
    {
        return $this->container['paymentDate'];
    }

    /**
     * Sets paymentDate.
     *
     * @param string|null $paymentDate 支払日時\\ コンビニ店頭で購入者が支払いを行った日時です。\\ \\ 形式：`yyyy/MM/dd HH:mm:ss.SSS`
     */
    public function setPaymentDate(mixed $paymentDate): static
    {
        if (is_null($paymentDate)) {
            $this->openAPINullablesSetToNull[] = 'paymentDate';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('paymentDate', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['paymentDate'] = $paymentDate;

        return $this;
    }

    /**
     * Gets barcode.
     *
     * @return string|null
     */
    public function getBarcode(): mixed
    {
        return $this->container['barcode'];
    }

    /**
     * Sets barcode.
     *
     * @param string|null $barcode バーコード画像 Base64エンコード済み画像データ\\ コンビニ店頭での支払いに使用するバーコード画像のBase64エンコード済みデータです。このデータをデコードして表示します。\\ バーコード画像はレギュレーションに従って表示する必要があります。詳細は[Docs > レギュレーションと注意事項](https://docs.fincode.jp/payment/konbini/note)から参照できます。
     */
    public function setBarcode(mixed $barcode): static
    {
        if (is_null($barcode)) {
            $this->openAPINullablesSetToNull[] = 'barcode';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('barcode', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['barcode'] = $barcode;

        return $this;
    }

    /**
     * Gets barcodeFormat.
     *
     * @return string|null
     */
    public function getBarcodeFormat(): mixed
    {
        return $this->container['barcodeFormat'];
    }

    /**
     * Sets barcodeFormat.
     *
     * @param string|null $barcodeFormat バーコード画像 フォーマット\\ 発行されたバーコード画像（`barcode`）のフォーマットです
     */
    public function setBarcodeFormat(mixed $barcodeFormat): static
    {
        if (is_null($barcodeFormat)) {
            $this->openAPINullablesSetToNull[] = 'barcodeFormat';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('barcodeFormat', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getBarcodeFormatAllowableValues();
        if (!is_null($barcodeFormat) && !in_array($barcodeFormat, $allowedValues, true)) {
            throw new \InvalidArgumentException(sprintf("Invalid value '%s' for 'barcodeFormat', must be one of '%s'", $barcodeFormat, implode("', '", $allowedValues)));
        }
        $this->container['barcodeFormat'] = $barcodeFormat;

        return $this;
    }

    /**
     * Gets barcodeWidth.
     *
     * @return string|null
     */
    public function getBarcodeWidth(): mixed
    {
        return $this->container['barcodeWidth'];
    }

    /**
     * Sets barcodeWidth.
     *
     * @param string|null $barcodeWidth バーコード画像 横幅（px）\\ 発行されたバーコード画像（`barcode`）の横幅です
     */
    public function setBarcodeWidth(mixed $barcodeWidth): static
    {
        if (is_null($barcodeWidth)) {
            $this->openAPINullablesSetToNull[] = 'barcodeWidth';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('barcodeWidth', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($barcodeWidth) && mb_strlen($barcodeWidth) > 9) {
            throw new \InvalidArgumentException('invalid length for $barcodeWidth when calling PaymentKonbini., must be smaller than or equal to 9.');
        }
        if (!is_null($barcodeWidth) && mb_strlen($barcodeWidth) < 1) {
            throw new \InvalidArgumentException('invalid length for $barcodeWidth when calling PaymentKonbini., must be bigger than or equal to 1.');
        }
        $this->container['barcodeWidth'] = $barcodeWidth;

        return $this;
    }

    /**
     * Gets barcodeHeight.
     *
     * @return string|null
     */
    public function getBarcodeHeight(): mixed
    {
        return $this->container['barcodeHeight'];
    }

    /**
     * Sets barcodeHeight.
     *
     * @param string|null $barcodeHeight バーコード画像 縦幅（px）\\ 発行されたバーコード画像（`barcode`）の縦幅です
     */
    public function setBarcodeHeight(mixed $barcodeHeight): static
    {
        if (is_null($barcodeHeight)) {
            $this->openAPINullablesSetToNull[] = 'barcodeHeight';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('barcodeHeight', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($barcodeHeight) && mb_strlen($barcodeHeight) > 9) {
            throw new \InvalidArgumentException('invalid length for $barcodeHeight when calling PaymentKonbini., must be smaller than or equal to 9.');
        }
        if (!is_null($barcodeHeight) && mb_strlen($barcodeHeight) < 1) {
            throw new \InvalidArgumentException('invalid length for $barcodeHeight when calling PaymentKonbini., must be bigger than or equal to 1.');
        }
        $this->container['barcodeHeight'] = $barcodeHeight;

        return $this;
    }

    /**
     * Gets overpaymentFlag.
     *
     * @return string|null
     */
    public function getOverpaymentFlag(): mixed
    {
        return $this->container['overpaymentFlag'];
    }

    /**
     * Sets overpaymentFlag.
     *
     * @param string $overpaymentFlag 多重支払フラグ\\ この決済に対して複数回支払いが行われた場合`1`になります。  - `0`: 0回、または1回の支払いが行われた - `1`: 2回以上、同一のバーコードを用いて支払いが行われた
     */
    public function setOverpaymentFlag(mixed $overpaymentFlag): static
    {
        if (is_null($overpaymentFlag)) {
            throw new \InvalidArgumentException('non-nullable overpaymentFlag cannot be null');
        }
        $allowedValues = $this->getOverpaymentFlagAllowableValues();
        if (!in_array($overpaymentFlag, $allowedValues, true)) {
            throw new \InvalidArgumentException(sprintf("Invalid value '%s' for 'overpaymentFlag', must be one of '%s'", $overpaymentFlag, implode("', '", $allowedValues)));
        }
        $this->container['overpaymentFlag'] = $overpaymentFlag;

        return $this;
    }

    /**
     * Gets cancelOverpaymentFlag.
     *
     * @return string|null
     */
    public function getCancelOverpaymentFlag(): mixed
    {
        return $this->container['cancelOverpaymentFlag'];
    }

    /**
     * Sets cancelOverpaymentFlag.
     *
     * @param string $cancelOverpaymentFlag キャンセル後支払フラグ\\ この決済をキャンセルした後に購入者がバーコードを用いて支払いを行った場合`1`になります。  - `0`: キャンセル後支払は行われていない - `1`: キャンセル後、購入者による支払いが行われた
     */
    public function setCancelOverpaymentFlag(mixed $cancelOverpaymentFlag): static
    {
        if (is_null($cancelOverpaymentFlag)) {
            throw new \InvalidArgumentException('non-nullable cancelOverpaymentFlag cannot be null');
        }
        $allowedValues = $this->getCancelOverpaymentFlagAllowableValues();
        if (!in_array($cancelOverpaymentFlag, $allowedValues, true)) {
            throw new \InvalidArgumentException(sprintf("Invalid value '%s' for 'cancelOverpaymentFlag', must be one of '%s'", $cancelOverpaymentFlag, implode("', '", $allowedValues)));
        }
        $this->container['cancelOverpaymentFlag'] = $cancelOverpaymentFlag;

        return $this;
    }

    /**
     * Gets konbiniCode.
     *
     * @return KonbiniCode|null
     */
    public function getKonbiniCode(): mixed
    {
        return $this->container['konbiniCode'];
    }

    /**
     * Sets konbiniCode.
     *
     * @param KonbiniCode|null $konbiniCode konbiniCode
     */
    public function setKonbiniCode(mixed $konbiniCode): static
    {
        if (is_null($konbiniCode)) {
            $this->openAPINullablesSetToNull[] = 'konbiniCode';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('konbiniCode', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['konbiniCode'] = $konbiniCode;

        return $this;
    }

    /**
     * Gets konbiniStoreCode.
     *
     * @return mixed|null
     */
    public function getKonbiniStoreCode(): mixed
    {
        return $this->container['konbiniStoreCode'];
    }

    /**
     * Sets konbiniStoreCode.
     *
     * @param mixed|null $konbiniStoreCode コンビニ店舗コード\\ コンビニ事業者ごとに独自体系の店舗コードです
     */
    public function setKonbiniStoreCode(mixed $konbiniStoreCode): static
    {
        if (is_null($konbiniStoreCode)) {
            $this->openAPINullablesSetToNull[] = 'konbiniStoreCode';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('konbiniStoreCode', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($konbiniStoreCode) && mb_strlen($konbiniStoreCode) > 8) {
            throw new \InvalidArgumentException('invalid length for $konbiniStoreCode when calling PaymentKonbini., must be smaller than or equal to 8.');
        }
        if (!is_null($konbiniStoreCode) && mb_strlen($konbiniStoreCode) < 1) {
            throw new \InvalidArgumentException('invalid length for $konbiniStoreCode when calling PaymentKonbini., must be bigger than or equal to 1.');
        }
        $this->container['konbiniStoreCode'] = $konbiniStoreCode;

        return $this;
    }

    /**
     * Gets deviceName.
     *
     * @return string|null
     */
    public function getDeviceName(): mixed
    {
        return $this->container['deviceName'];
    }

    /**
     * Sets deviceName.
     *
     * @param string|null $deviceName デバイス名\\ バーコード表示を行うデバイスの名前を指定します。  - Androidの場合： [ユーザーエージェントクライアントヒントAPI](https://developer.mozilla.org/ja/docs/Web/API/User-Agent_Client_Hints_API)またはNavigator: userAgentプロパティ（非推奨）で取得できる文字列から取得したデバイス名を指定します。 - iPhoneの場合： 固定文字列`iPhone`を指定します。
     */
    public function setDeviceName(mixed $deviceName): static
    {
        if (is_null($deviceName)) {
            $this->openAPINullablesSetToNull[] = 'deviceName';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('deviceName', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($deviceName) && mb_strlen($deviceName) > 20) {
            throw new \InvalidArgumentException('invalid length for $deviceName when calling PaymentKonbini., must be smaller than or equal to 20.');
        }
        if (!is_null($deviceName) && mb_strlen($deviceName) < 1) {
            throw new \InvalidArgumentException('invalid length for $deviceName when calling PaymentKonbini., must be bigger than or equal to 1.');
        }
        $this->container['deviceName'] = $deviceName;

        return $this;
    }

    /**
     * Gets osVersion.
     *
     * @return mixed|null
     */
    public function getOsVersion(): mixed
    {
        return $this->container['osVersion'];
    }

    /**
     * Sets osVersion.
     *
     * @param mixed|null $osVersion OSバージョン
     */
    public function setOsVersion(mixed $osVersion): static
    {
        if (is_null($osVersion)) {
            $this->openAPINullablesSetToNull[] = 'osVersion';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('osVersion', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($osVersion) && mb_strlen($osVersion) > 10) {
            throw new \InvalidArgumentException('invalid length for $osVersion when calling PaymentKonbini., must be smaller than or equal to 10.');
        }
        if (!is_null($osVersion) && mb_strlen($osVersion) < 1) {
            throw new \InvalidArgumentException('invalid length for $osVersion when calling PaymentKonbini., must be bigger than or equal to 1.');
        }
        $this->container['osVersion'] = $osVersion;

        return $this;
    }

    /**
     * Gets winWidth.
     *
     * @return string|null
     */
    public function getWinWidth(): mixed
    {
        return $this->container['winWidth'];
    }

    /**
     * Sets winWidth.
     *
     * @param string|null $winWidth デバイス画面幅\\ バーコード表示を行うデバイスの画面幅を指定します。  - Androidの場合： `window.screen.width`で取得した値に `pixel_ratio`（ピクセル比）の値を乗じたものを指定します。 - iPhoneの場合： `window.screen.width`で取得した値を指定します。
     */
    public function setWinWidth(mixed $winWidth): static
    {
        if (is_null($winWidth)) {
            $this->openAPINullablesSetToNull[] = 'winWidth';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('winWidth', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($winWidth) && mb_strlen($winWidth) > 5) {
            throw new \InvalidArgumentException('invalid length for $winWidth when calling PaymentKonbini., must be smaller than or equal to 5.');
        }
        if (!is_null($winWidth) && mb_strlen($winWidth) < 1) {
            throw new \InvalidArgumentException('invalid length for $winWidth when calling PaymentKonbini., must be bigger than or equal to 1.');
        }
        $this->container['winWidth'] = $winWidth;

        return $this;
    }

    /**
     * Gets winHeight.
     *
     * @return string|null
     */
    public function getWinHeight(): mixed
    {
        return $this->container['winHeight'];
    }

    /**
     * Sets winHeight.
     *
     * @param string|null $winHeight デバイス画面の高さ\\ バーコード表示を行うデバイス画面の高さを指定します。  - Androidの場合： `window.screen.height`で取得した値に `pixel_ratio`（ピクセル比）の値を乗じたものを指定します。 - iPhoneの場合： `window.screen.height`で取得した値を指定します。
     */
    public function setWinHeight(mixed $winHeight): static
    {
        if (is_null($winHeight)) {
            $this->openAPINullablesSetToNull[] = 'winHeight';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('winHeight', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($winHeight) && mb_strlen($winHeight) > 5) {
            throw new \InvalidArgumentException('invalid length for $winHeight when calling PaymentKonbini., must be smaller than or equal to 5.');
        }
        if (!is_null($winHeight) && mb_strlen($winHeight) < 1) {
            throw new \InvalidArgumentException('invalid length for $winHeight when calling PaymentKonbini., must be bigger than or equal to 1.');
        }
        $this->container['winHeight'] = $winHeight;

        return $this;
    }

    /**
     * Gets xdpi.
     *
     * @return mixed|null
     */
    public function getXdpi(): mixed
    {
        return $this->container['xdpi'];
    }

    /**
     * Sets xdpi.
     *
     * @param mixed|null $xdpi 画面横幅のDPI
     */
    public function setXdpi(mixed $xdpi): static
    {
        if (is_null($xdpi)) {
            $this->openAPINullablesSetToNull[] = 'xdpi';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('xdpi', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($xdpi) && mb_strlen($xdpi) > 6) {
            throw new \InvalidArgumentException('invalid length for $xdpi when calling PaymentKonbini., must be smaller than or equal to 6.');
        }
        if (!is_null($xdpi) && mb_strlen($xdpi) < 1) {
            throw new \InvalidArgumentException('invalid length for $xdpi when calling PaymentKonbini., must be bigger than or equal to 1.');
        }
        $this->container['xdpi'] = $xdpi;

        return $this;
    }

    /**
     * Gets ydpi.
     *
     * @return mixed|null
     */
    public function getYdpi(): mixed
    {
        return $this->container['ydpi'];
    }

    /**
     * Sets ydpi.
     *
     * @param mixed|null $ydpi 画面縦幅のDPI
     */
    public function setYdpi(mixed $ydpi): static
    {
        if (is_null($ydpi)) {
            $this->openAPINullablesSetToNull[] = 'ydpi';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ydpi', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($ydpi) && mb_strlen($ydpi) > 6) {
            throw new \InvalidArgumentException('invalid length for $ydpi when calling PaymentKonbini., must be smaller than or equal to 6.');
        }
        if (!is_null($ydpi) && mb_strlen($ydpi) < 1) {
            throw new \InvalidArgumentException('invalid length for $ydpi when calling PaymentKonbini., must be bigger than or equal to 1.');
        }
        $this->container['ydpi'] = $ydpi;

        return $this;
    }

    /**
     * Gets result.
     *
     * @return KonbiniPaymentProcessResult|null
     */
    public function getResult(): mixed
    {
        return $this->container['result'];
    }

    /**
     * Sets result.
     *
     * @param KonbiniPaymentProcessResult $result result
     */
    public function setResult(mixed $result): static
    {
        if (is_null($result)) {
            throw new \InvalidArgumentException('non-nullable result cannot be null');
        }
        $this->container['result'] = $result;

        return $this;
    }

    /**
     * Gets orderSerial.
     *
     * @return string|null
     */
    public function getOrderSerial(): mixed
    {
        return $this->container['orderSerial'];
    }

    /**
     * Sets orderSerial.
     *
     * @param string|null $orderSerial 注文管理ID
     */
    public function setOrderSerial(mixed $orderSerial): static
    {
        if (is_null($orderSerial)) {
            $this->openAPINullablesSetToNull[] = 'orderSerial';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('orderSerial', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($orderSerial) && mb_strlen($orderSerial) > 18) {
            throw new \InvalidArgumentException('invalid length for $orderSerial when calling PaymentKonbini., must be smaller than or equal to 18.');
        }
        if (!is_null($orderSerial) && mb_strlen($orderSerial) < 1) {
            throw new \InvalidArgumentException('invalid length for $orderSerial when calling PaymentKonbini., must be bigger than or equal to 1.');
        }
        $this->container['orderSerial'] = $orderSerial;

        return $this;
    }

    /**
     * Gets invoiceId.
     *
     * @return string|null
     */
    public function getInvoiceId(): mixed
    {
        return $this->container['invoiceId'];
    }

    /**
     * Sets invoiceId.
     *
     * @param string|null $invoiceId 請求ID
     */
    public function setInvoiceId(mixed $invoiceId): static
    {
        if (is_null($invoiceId)) {
            $this->openAPINullablesSetToNull[] = 'invoiceId';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('invoiceId', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($invoiceId) && mb_strlen($invoiceId) > 20) {
            throw new \InvalidArgumentException('invalid length for $invoiceId when calling PaymentKonbini., must be smaller than or equal to 20.');
        }
        if (!is_null($invoiceId) && mb_strlen($invoiceId) < 1) {
            throw new \InvalidArgumentException('invalid length for $invoiceId when calling PaymentKonbini., must be bigger than or equal to 1.');
        }
        $this->container['invoiceId'] = $invoiceId;

        return $this;
    }

    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @see https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    public function jsonSerialize(): mixed
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object.
     */
    public function __toString(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
    }

    /**
     * Gets a header-safe presentation of the object.
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
