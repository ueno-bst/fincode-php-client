<?php

declare(strict_types=1);
/**
 * fincode API.
 *
 * fincodeのAPIリファレンスです。\\ fincodeは決済情報のほか様々なリソースを管理できるため、リソース指向なREST APIをベースとしたインターフェイス設計のもとでAPIを提供しています。\\ APIの呼び出しにはAPIキーによる認証が必要であり、リクエストの際に`Authorization`ヘッダーに有効なAPIキーをセットすることで認証できます。
 *
 * The version of the OpenAPI document: 1.2.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Fincode\Model;

use OpenAPI\Fincode\ObjectSerializer;

/**
 * @implements \ArrayAccess<string, mixed>
 */
class PaymentListRetrievingKonbiniQueryParams implements ModelInterface, \ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;
    /**
     * The original name of the model.
     */
    protected static string $openAPIModelName = 'Payment.ListRetrieving.Konbini.QueryParams';
    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var array<string, string>
     */
    protected static array $openAPITypes = ['status' => '\OpenAPI\Fincode\Model\PaymentStatus', 'paymentTermFrom' => 'string', 'paymentTermTo' => 'string', 'paymentDateFrom' => 'string', 'paymentDateTo' => 'string', 'updatedFrom' => 'string', 'updatedTo' => 'string', 'overpaymentFlag' => 'string', 'cancelOverpaymentFlag' => 'string', 'sort' => 'string'];
    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var array<string, string|null>
     */
    protected static array $openAPIFormats = ['status' => null, 'paymentTermFrom' => null, 'paymentTermTo' => null, 'paymentDateFrom' => null, 'paymentDateTo' => null, 'updatedFrom' => null, 'updatedTo' => null, 'overpaymentFlag' => null, 'cancelOverpaymentFlag' => null, 'sort' => null];
    /**
     * Array of nullable properties. Used for (de)serialization.
     *
     * @var array<string, bool>
     */
    protected static array $openAPINullables = ['status' => false, 'paymentTermFrom' => false, 'paymentTermTo' => false, 'paymentDateFrom' => false, 'paymentDateTo' => false, 'updatedFrom' => false, 'updatedTo' => false, 'overpaymentFlag' => false, 'cancelOverpaymentFlag' => false, 'sort' => true];
    /**
     * If a nullable field gets set to null, insert it here.
     *
     * @var array<string, bool>
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return array<string, string|null>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties.
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null.
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null.
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable.
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }
    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = ['status' => 'status', 'paymentTermFrom' => 'payment_term_from', 'paymentTermTo' => 'payment_term_to', 'paymentDateFrom' => 'payment_date_from', 'paymentDateTo' => 'payment_date_to', 'updatedFrom' => 'updated_from', 'updatedTo' => 'updated_to', 'overpaymentFlag' => 'overpayment_flag', 'cancelOverpaymentFlag' => 'cancel_overpayment_flag', 'sort' => 'sort'];
    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var array<string, string>
     */
    protected static array $setters = ['status' => 'setStatus', 'paymentTermFrom' => 'setPaymentTermFrom', 'paymentTermTo' => 'setPaymentTermTo', 'paymentDateFrom' => 'setPaymentDateFrom', 'paymentDateTo' => 'setPaymentDateTo', 'updatedFrom' => 'setUpdatedFrom', 'updatedTo' => 'setUpdatedTo', 'overpaymentFlag' => 'setOverpaymentFlag', 'cancelOverpaymentFlag' => 'setCancelOverpaymentFlag', 'sort' => 'setSort'];
    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var array<string, string>
     */
    protected static array $getters = ['status' => 'getStatus', 'paymentTermFrom' => 'getPaymentTermFrom', 'paymentTermTo' => 'getPaymentTermTo', 'paymentDateFrom' => 'getPaymentDateFrom', 'paymentDateTo' => 'getPaymentDateTo', 'updatedFrom' => 'getUpdatedFrom', 'updatedTo' => 'getUpdatedTo', 'overpaymentFlag' => 'getOverpaymentFlag', 'cancelOverpaymentFlag' => 'getCancelOverpaymentFlag', 'sort' => 'getSort'];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }
    public const OVERPAYMENT_FLAG__0 = '0';
    public const OVERPAYMENT_FLAG__1 = '1';
    public const CANCEL_OVERPAYMENT_FLAG__0 = '0';
    public const CANCEL_OVERPAYMENT_FLAG__1 = '1';

    /**
     * Gets allowable values of the enum.
     *
     * @return list<string>
     */
    public function getOverpaymentFlagAllowableValues(): array
    {
        return [self::OVERPAYMENT_FLAG__0, self::OVERPAYMENT_FLAG__1];
    }

    /**
     * Gets allowable values of the enum.
     *
     * @return list<string>
     */
    public function getCancelOverpaymentFlagAllowableValues(): array
    {
        return [self::CANCEL_OVERPAYMENT_FLAG__0, self::CANCEL_OVERPAYMENT_FLAG__1];
    }
    /**
     * Associative array for storing property values.
     *
     * @phpstan-var array<string, mixed>
     *
     * @psalm-var array<string, mixed>
     */
    protected array $container = [];

    /**
     * Constructor.
     *
     * @param array<string, mixed> $data Associated array of property values
     *                                   initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('paymentTermFrom', $data ?? [], null);
        $this->setIfExists('paymentTermTo', $data ?? [], null);
        $this->setIfExists('paymentDateFrom', $data ?? [], null);
        $this->setIfExists('paymentDateTo', $data ?? [], null);
        $this->setIfExists('updatedFrom', $data ?? [], null);
        $this->setIfExists('updatedTo', $data ?? [], null);
        $this->setIfExists('overpaymentFlag', $data ?? [], null);
        $this->setIfExists('cancelOverpaymentFlag', $data ?? [], null);
        $this->setIfExists('sort', $data ?? [], null);
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array.
     *
     * @param array<string, mixed> $fields
     */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }
        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return list<string> invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];
        $allowedValues = $this->getOverpaymentFlagAllowableValues();
        if (!is_null($this->container['overpaymentFlag']) && !in_array($this->container['overpaymentFlag'], $allowedValues, true)) {
            $invalidProperties[] = sprintf("invalid value '%s' for 'overpaymentFlag', must be one of '%s'", $this->container['overpaymentFlag'], implode("', '", $allowedValues));
        }
        $allowedValues = $this->getCancelOverpaymentFlagAllowableValues();
        if (!is_null($this->container['cancelOverpaymentFlag']) && !in_array($this->container['cancelOverpaymentFlag'], $allowedValues, true)) {
            $invalidProperties[] = sprintf("invalid value '%s' for 'cancelOverpaymentFlag', must be one of '%s'", $this->container['cancelOverpaymentFlag'], implode("', '", $allowedValues));
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return 0 === count($this->listInvalidProperties());
    }

    /**
     * Gets status.
     *
     * @return PaymentStatus|null
     */
    public function getStatus(): mixed
    {
        return $this->container['status'];
    }

    /**
     * Sets status.
     *
     * @param PaymentStatus $status 決済ステータス\\ 指定したステータスの決済情報を取得します。カンマ区切りにすることで複数指定（OR検索）できます。  - `UNPROCESSED`: 未処理 - `AWAITING_CUSTOMER_PAYMENT`: 購入者の支払い待ち - `CAPTURED`: 売上確定 - `CANCELED`: キャンセル - `EXPIRED`: 決済の期限切れ
     */
    public function setStatus(mixed $status): static
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets paymentTermFrom.
     *
     * @return string|null
     */
    public function getPaymentTermFrom(): mixed
    {
        return $this->container['paymentTermFrom'];
    }

    /**
     * Sets paymentTermFrom.
     *
     * @param string $paymentTermFrom 支払い期限（始値）\\ 支払い期限（`payment_term`）を対象に範囲検索を行います。この日付以降に支払い期限が到来する決済情報を取得します。\\ \\ 形式：`yyyy/MM/dd`
     */
    public function setPaymentTermFrom(mixed $paymentTermFrom): static
    {
        if (is_null($paymentTermFrom)) {
            throw new \InvalidArgumentException('non-nullable paymentTermFrom cannot be null');
        }
        $this->container['paymentTermFrom'] = $paymentTermFrom;

        return $this;
    }

    /**
     * Gets paymentTermTo.
     *
     * @return string|null
     */
    public function getPaymentTermTo(): mixed
    {
        return $this->container['paymentTermTo'];
    }

    /**
     * Sets paymentTermTo.
     *
     * @param string $paymentTermTo 支払い期限（終値）\\ 支払い期限（`payment_term`）を対象に範囲検索を行います。この日付以前に支払い期限が到来する決済情報を取得します。\\ \\ 形式：`yyyy/MM/dd`
     */
    public function setPaymentTermTo(mixed $paymentTermTo): static
    {
        if (is_null($paymentTermTo)) {
            throw new \InvalidArgumentException('non-nullable paymentTermTo cannot be null');
        }
        $this->container['paymentTermTo'] = $paymentTermTo;

        return $this;
    }

    /**
     * Gets paymentDateFrom.
     *
     * @return string|null
     */
    public function getPaymentDateFrom(): mixed
    {
        return $this->container['paymentDateFrom'];
    }

    /**
     * Sets paymentDateFrom.
     *
     * @param string $paymentDateFrom 支払い日時（始値）\\ 支払い日時（`payment_date`）を対象に範囲検索を行います。この日付以降に支払いが行われた決済情報を取得します。\\ \\ 形式：`yyyy/MM/dd`
     */
    public function setPaymentDateFrom(mixed $paymentDateFrom): static
    {
        if (is_null($paymentDateFrom)) {
            throw new \InvalidArgumentException('non-nullable paymentDateFrom cannot be null');
        }
        $this->container['paymentDateFrom'] = $paymentDateFrom;

        return $this;
    }

    /**
     * Gets paymentDateTo.
     *
     * @return string|null
     */
    public function getPaymentDateTo(): mixed
    {
        return $this->container['paymentDateTo'];
    }

    /**
     * Sets paymentDateTo.
     *
     * @param string $paymentDateTo 支払い日時（終値）\\ 支払い日時（`payment_date`）を対象に範囲検索を行います。この日付以前に支払いが行われた決済情報を取得します。\\ \\ 形式：`yyyy/MM/dd`
     */
    public function setPaymentDateTo(mixed $paymentDateTo): static
    {
        if (is_null($paymentDateTo)) {
            throw new \InvalidArgumentException('non-nullable paymentDateTo cannot be null');
        }
        $this->container['paymentDateTo'] = $paymentDateTo;

        return $this;
    }

    /**
     * Gets updatedFrom.
     *
     * @return string|null
     */
    public function getUpdatedFrom(): mixed
    {
        return $this->container['updatedFrom'];
    }

    /**
     * Sets updatedFrom.
     *
     * @param string $updatedFrom 更新日（始値）\\ \\ 更新日時（`updated`）を対象に範囲検索を行います。この日付以降に更新された決済情報を取得します。\\ 形式：`yyyy/MM/dd`
     */
    public function setUpdatedFrom(mixed $updatedFrom): static
    {
        if (is_null($updatedFrom)) {
            throw new \InvalidArgumentException('non-nullable updatedFrom cannot be null');
        }
        $this->container['updatedFrom'] = $updatedFrom;

        return $this;
    }

    /**
     * Gets updatedTo.
     *
     * @return string|null
     */
    public function getUpdatedTo(): mixed
    {
        return $this->container['updatedTo'];
    }

    /**
     * Sets updatedTo.
     *
     * @param string $updatedTo 更新日（終値）\\ \\ 更新日時（`updated`）を対象に範囲検索を行います。この日付以前に更新された決済情報を取得します。\\ 形式：`yyyy/MM/dd`
     */
    public function setUpdatedTo(mixed $updatedTo): static
    {
        if (is_null($updatedTo)) {
            throw new \InvalidArgumentException('non-nullable updatedTo cannot be null');
        }
        $this->container['updatedTo'] = $updatedTo;

        return $this;
    }

    /**
     * Gets overpaymentFlag.
     *
     * @return string|null
     */
    public function getOverpaymentFlag(): mixed
    {
        return $this->container['overpaymentFlag'];
    }

    /**
     * Sets overpaymentFlag.
     *
     * @param string $overpaymentFlag 多重支払フラグ\\ 同一のバーコードで複数回支払いが行われた決済を検索する場合`1`を指定します
     */
    public function setOverpaymentFlag(mixed $overpaymentFlag): static
    {
        if (is_null($overpaymentFlag)) {
            throw new \InvalidArgumentException('non-nullable overpaymentFlag cannot be null');
        }
        $allowedValues = $this->getOverpaymentFlagAllowableValues();
        if (!in_array($overpaymentFlag, $allowedValues, true)) {
            throw new \InvalidArgumentException(sprintf("Invalid value '%s' for 'overpaymentFlag', must be one of '%s'", $overpaymentFlag, implode("', '", $allowedValues)));
        }
        $this->container['overpaymentFlag'] = $overpaymentFlag;

        return $this;
    }

    /**
     * Gets cancelOverpaymentFlag.
     *
     * @return string|null
     */
    public function getCancelOverpaymentFlag(): mixed
    {
        return $this->container['cancelOverpaymentFlag'];
    }

    /**
     * Sets cancelOverpaymentFlag.
     *
     * @param string $cancelOverpaymentFlag キャンセル後支払フラグ\\ キャンセルされた決済に対して支払いが行われた決済を検索する場合`1`を指定します
     */
    public function setCancelOverpaymentFlag(mixed $cancelOverpaymentFlag): static
    {
        if (is_null($cancelOverpaymentFlag)) {
            throw new \InvalidArgumentException('non-nullable cancelOverpaymentFlag cannot be null');
        }
        $allowedValues = $this->getCancelOverpaymentFlagAllowableValues();
        if (!in_array($cancelOverpaymentFlag, $allowedValues, true)) {
            throw new \InvalidArgumentException(sprintf("Invalid value '%s' for 'cancelOverpaymentFlag', must be one of '%s'", $cancelOverpaymentFlag, implode("', '", $allowedValues)));
        }
        $this->container['cancelOverpaymentFlag'] = $cancelOverpaymentFlag;

        return $this;
    }

    /**
     * Gets sort.
     *
     * @return string|null
     */
    public function getSort(): mixed
    {
        return $this->container['sort'];
    }

    /**
     * Sets sort.
     *
     * @param string|null $sort ソートする項目と順序を指定します。\\ 例： `?sort=updated␣desc,created␣asc`\\ \\ ソート可能な項目  - `status`: ステータス - `process_data`: 処理日時 - `total_amount`: 合計金額 - `payment_term`: 支払い期限 - `payment_date`: 支払い日時 - `created`: 作成日時 - `updated`: 更新日時
     */
    public function setSort(mixed $sort): static
    {
        if (is_null($sort)) {
            $this->openAPINullablesSetToNull[] = 'sort';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sort', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sort'] = $sort;

        return $this;
    }

    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @see https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    public function jsonSerialize(): mixed
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object.
     */
    public function __toString(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
    }

    /**
     * Gets a header-safe presentation of the object.
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
