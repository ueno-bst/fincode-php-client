<?php

declare(strict_types=1);
/**
 * fincode API.
 *
 * fincodeのAPIリファレンスです。\\ fincodeは決済情報のほか様々なリソースを管理できるため、リソース指向なREST APIをベースとしたインターフェイス設計のもとでAPIを提供しています。\\ APIの呼び出しにはAPIキーによる認証が必要であり、リクエストの際に`Authorization`ヘッダーに有効なAPIキーをセットすることで認証できます。
 *
 * The version of the OpenAPI document: 1.2.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Fincode\Model;

use OpenAPI\Fincode\ObjectSerializer;

/**
 * @implements \ArrayAccess<string, mixed>
 */
class User implements ModelInterface, \ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;
    /**
     * The original name of the model.
     */
    protected static string $openAPIModelName = 'User';
    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var array<string, string>
     */
    protected static array $openAPITypes = ['id' => 'string', 'defaultShopId' => 'string', 'roleId' => 'int', 'name' => 'string', 'email' => 'string', 'type' => 'string', 'twoFactorAuthStatus' => 'string', 'mailAuthStatus' => 'string', 'passwordLockStatus' => 'string', 'lastLoginDate' => 'string', 'loginFailureDate' => 'string', 'loginFailureTimes' => 'int', 'passwordExpire' => 'string', 'accountStatus' => 'string', 'inviteStatus' => 'string', 'created' => 'string', 'updated' => 'string'];
    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var array<string, string|null>
     */
    protected static array $openAPIFormats = ['id' => null, 'defaultShopId' => null, 'roleId' => null, 'name' => null, 'email' => null, 'type' => null, 'twoFactorAuthStatus' => null, 'mailAuthStatus' => null, 'passwordLockStatus' => null, 'lastLoginDate' => null, 'loginFailureDate' => null, 'loginFailureTimes' => null, 'passwordExpire' => null, 'accountStatus' => null, 'inviteStatus' => null, 'created' => null, 'updated' => null];
    /**
     * Array of nullable properties. Used for (de)serialization.
     *
     * @var array<string, bool>
     */
    protected static array $openAPINullables = ['id' => false, 'defaultShopId' => false, 'roleId' => false, 'name' => false, 'email' => false, 'type' => false, 'twoFactorAuthStatus' => false, 'mailAuthStatus' => false, 'passwordLockStatus' => false, 'lastLoginDate' => true, 'loginFailureDate' => true, 'loginFailureTimes' => false, 'passwordExpire' => true, 'accountStatus' => false, 'inviteStatus' => false, 'created' => false, 'updated' => true];
    /**
     * If a nullable field gets set to null, insert it here.
     *
     * @var array<string, bool>
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return array<string, string|null>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties.
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null.
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null.
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable.
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }
    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = ['id' => 'id', 'defaultShopId' => 'default_shop_id', 'roleId' => 'role_id', 'name' => 'name', 'email' => 'email', 'type' => 'type', 'twoFactorAuthStatus' => 'two_factor_auth_status', 'mailAuthStatus' => 'mail_auth_status', 'passwordLockStatus' => 'password_lock_status', 'lastLoginDate' => 'last_login_date', 'loginFailureDate' => 'login_failure_date', 'loginFailureTimes' => 'login_failure_times', 'passwordExpire' => 'password_expire', 'accountStatus' => 'account_status', 'inviteStatus' => 'invite_status', 'created' => 'created', 'updated' => 'updated'];
    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var array<string, string>
     */
    protected static array $setters = ['id' => 'setId', 'defaultShopId' => 'setDefaultShopId', 'roleId' => 'setRoleId', 'name' => 'setName', 'email' => 'setEmail', 'type' => 'setType', 'twoFactorAuthStatus' => 'setTwoFactorAuthStatus', 'mailAuthStatus' => 'setMailAuthStatus', 'passwordLockStatus' => 'setPasswordLockStatus', 'lastLoginDate' => 'setLastLoginDate', 'loginFailureDate' => 'setLoginFailureDate', 'loginFailureTimes' => 'setLoginFailureTimes', 'passwordExpire' => 'setPasswordExpire', 'accountStatus' => 'setAccountStatus', 'inviteStatus' => 'setInviteStatus', 'created' => 'setCreated', 'updated' => 'setUpdated'];
    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var array<string, string>
     */
    protected static array $getters = ['id' => 'getId', 'defaultShopId' => 'getDefaultShopId', 'roleId' => 'getRoleId', 'name' => 'getName', 'email' => 'getEmail', 'type' => 'getType', 'twoFactorAuthStatus' => 'getTwoFactorAuthStatus', 'mailAuthStatus' => 'getMailAuthStatus', 'passwordLockStatus' => 'getPasswordLockStatus', 'lastLoginDate' => 'getLastLoginDate', 'loginFailureDate' => 'getLoginFailureDate', 'loginFailureTimes' => 'getLoginFailureTimes', 'passwordExpire' => 'getPasswordExpire', 'accountStatus' => 'getAccountStatus', 'inviteStatus' => 'getInviteStatus', 'created' => 'getCreated', 'updated' => 'getUpdated'];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }
    public const TYPE__01 = '01';
    public const TWO_FACTOR_AUTH_STATUS__00 = '00';
    public const TWO_FACTOR_AUTH_STATUS__01 = '01';
    public const MAIL_AUTH_STATUS__00 = '00';
    public const MAIL_AUTH_STATUS__01 = '01';
    public const PASSWORD_LOCK_STATUS__00 = '00';
    public const PASSWORD_LOCK_STATUS__01 = '01';
    public const ACCOUNT_STATUS__00 = '00';
    public const ACCOUNT_STATUS__01 = '01';
    public const INVITE_STATUS__01 = '01';
    public const INVITE_STATUS__02 = '02';

    /**
     * Gets allowable values of the enum.
     *
     * @return list<string>
     */
    public function getTypeAllowableValues(): array
    {
        return [self::TYPE__01];
    }

    /**
     * Gets allowable values of the enum.
     *
     * @return list<string>
     */
    public function getTwoFactorAuthStatusAllowableValues(): array
    {
        return [self::TWO_FACTOR_AUTH_STATUS__00, self::TWO_FACTOR_AUTH_STATUS__01];
    }

    /**
     * Gets allowable values of the enum.
     *
     * @return list<string>
     */
    public function getMailAuthStatusAllowableValues(): array
    {
        return [self::MAIL_AUTH_STATUS__00, self::MAIL_AUTH_STATUS__01];
    }

    /**
     * Gets allowable values of the enum.
     *
     * @return list<string>
     */
    public function getPasswordLockStatusAllowableValues(): array
    {
        return [self::PASSWORD_LOCK_STATUS__00, self::PASSWORD_LOCK_STATUS__01];
    }

    /**
     * Gets allowable values of the enum.
     *
     * @return list<string>
     */
    public function getAccountStatusAllowableValues(): array
    {
        return [self::ACCOUNT_STATUS__00, self::ACCOUNT_STATUS__01];
    }

    /**
     * Gets allowable values of the enum.
     *
     * @return list<string>
     */
    public function getInviteStatusAllowableValues(): array
    {
        return [self::INVITE_STATUS__01, self::INVITE_STATUS__02];
    }
    /**
     * Associative array for storing property values.
     *
     * @phpstan-var array<string, mixed>
     *
     * @psalm-var array<string, mixed>
     */
    protected array $container = [];

    /**
     * Constructor.
     *
     * @param array<string, mixed> $data Associated array of property values
     *                                   initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('defaultShopId', $data ?? [], null);
        $this->setIfExists('roleId', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('twoFactorAuthStatus', $data ?? [], null);
        $this->setIfExists('mailAuthStatus', $data ?? [], null);
        $this->setIfExists('passwordLockStatus', $data ?? [], null);
        $this->setIfExists('lastLoginDate', $data ?? [], null);
        $this->setIfExists('loginFailureDate', $data ?? [], null);
        $this->setIfExists('loginFailureTimes', $data ?? [], null);
        $this->setIfExists('passwordExpire', $data ?? [], null);
        $this->setIfExists('accountStatus', $data ?? [], null);
        $this->setIfExists('inviteStatus', $data ?? [], null);
        $this->setIfExists('created', $data ?? [], null);
        $this->setIfExists('updated', $data ?? [], null);
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array.
     *
     * @param array<string, mixed> $fields
     */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }
        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return list<string> invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];
        if (!is_null($this->container['id']) && mb_strlen($this->container['id']) > 24) {
            $invalidProperties[] = "invalid value for 'id', the character length must be smaller than or equal to 24.";
        }
        if (!is_null($this->container['id']) && mb_strlen($this->container['id']) < 24) {
            $invalidProperties[] = "invalid value for 'id', the character length must be bigger than or equal to 24.";
        }
        if (!is_null($this->container['defaultShopId']) && mb_strlen($this->container['defaultShopId']) > 13) {
            $invalidProperties[] = "invalid value for 'defaultShopId', the character length must be smaller than or equal to 13.";
        }
        if (!is_null($this->container['defaultShopId']) && mb_strlen($this->container['defaultShopId']) < 13) {
            $invalidProperties[] = "invalid value for 'defaultShopId', the character length must be bigger than or equal to 13.";
        }
        if (!is_null($this->container['name']) && mb_strlen($this->container['name']) > 384) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 384.";
        }
        if (!is_null($this->container['name']) && mb_strlen($this->container['name']) < 1) {
            $invalidProperties[] = "invalid value for 'name', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['email']) && mb_strlen($this->container['email']) > 384) {
            $invalidProperties[] = "invalid value for 'email', the character length must be smaller than or equal to 384.";
        }
        if (!is_null($this->container['email']) && mb_strlen($this->container['email']) < 1) {
            $invalidProperties[] = "invalid value for 'email', the character length must be bigger than or equal to 1.";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf("invalid value '%s' for 'type', must be one of '%s'", $this->container['type'], implode("', '", $allowedValues));
        }
        $allowedValues = $this->getTwoFactorAuthStatusAllowableValues();
        if (!is_null($this->container['twoFactorAuthStatus']) && !in_array($this->container['twoFactorAuthStatus'], $allowedValues, true)) {
            $invalidProperties[] = sprintf("invalid value '%s' for 'twoFactorAuthStatus', must be one of '%s'", $this->container['twoFactorAuthStatus'], implode("', '", $allowedValues));
        }
        $allowedValues = $this->getMailAuthStatusAllowableValues();
        if (!is_null($this->container['mailAuthStatus']) && !in_array($this->container['mailAuthStatus'], $allowedValues, true)) {
            $invalidProperties[] = sprintf("invalid value '%s' for 'mailAuthStatus', must be one of '%s'", $this->container['mailAuthStatus'], implode("', '", $allowedValues));
        }
        $allowedValues = $this->getPasswordLockStatusAllowableValues();
        if (!is_null($this->container['passwordLockStatus']) && !in_array($this->container['passwordLockStatus'], $allowedValues, true)) {
            $invalidProperties[] = sprintf("invalid value '%s' for 'passwordLockStatus', must be one of '%s'", $this->container['passwordLockStatus'], implode("', '", $allowedValues));
        }
        $allowedValues = $this->getAccountStatusAllowableValues();
        if (!is_null($this->container['accountStatus']) && !in_array($this->container['accountStatus'], $allowedValues, true)) {
            $invalidProperties[] = sprintf("invalid value '%s' for 'accountStatus', must be one of '%s'", $this->container['accountStatus'], implode("', '", $allowedValues));
        }
        $allowedValues = $this->getInviteStatusAllowableValues();
        if (!is_null($this->container['inviteStatus']) && !in_array($this->container['inviteStatus'], $allowedValues, true)) {
            $invalidProperties[] = sprintf("invalid value '%s' for 'inviteStatus', must be one of '%s'", $this->container['inviteStatus'], implode("', '", $allowedValues));
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return 0 === count($this->listInvalidProperties());
    }

    /**
     * Gets id.
     *
     * @return string|null
     */
    public function getId(): mixed
    {
        return $this->container['id'];
    }

    /**
     * Sets id.
     *
     * @param string $id ユーザーID
     */
    public function setId(mixed $id): static
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        if (mb_strlen($id) > 24) {
            throw new \InvalidArgumentException('invalid length for $id when calling User., must be smaller than or equal to 24.');
        }
        if (mb_strlen($id) < 24) {
            throw new \InvalidArgumentException('invalid length for $id when calling User., must be bigger than or equal to 24.');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets defaultShopId.
     *
     * @return string|null
     */
    public function getDefaultShopId(): mixed
    {
        return $this->container['defaultShopId'];
    }

    /**
     * Sets defaultShopId.
     *
     * @param string $defaultShopId デフォルトショップID\\ \\ このユーザーがログインした際、どのショップにログインするかを示すID
     */
    public function setDefaultShopId(mixed $defaultShopId): static
    {
        if (is_null($defaultShopId)) {
            throw new \InvalidArgumentException('non-nullable defaultShopId cannot be null');
        }
        if (mb_strlen($defaultShopId) > 13) {
            throw new \InvalidArgumentException('invalid length for $defaultShopId when calling User., must be smaller than or equal to 13.');
        }
        if (mb_strlen($defaultShopId) < 13) {
            throw new \InvalidArgumentException('invalid length for $defaultShopId when calling User., must be bigger than or equal to 13.');
        }
        $this->container['defaultShopId'] = $defaultShopId;

        return $this;
    }

    /**
     * Gets roleId.
     *
     * @return int|null
     */
    public function getRoleId(): mixed
    {
        return $this->container['roleId'];
    }

    /**
     * Sets roleId.
     *
     * @param int $roleId ロールID\\ \\ ユーザーの管理画面における権限を示すIDです
     */
    public function setRoleId(mixed $roleId): static
    {
        if (is_null($roleId)) {
            throw new \InvalidArgumentException('non-nullable roleId cannot be null');
        }
        $this->container['roleId'] = $roleId;

        return $this;
    }

    /**
     * Gets name.
     *
     * @return string|null
     */
    public function getName(): mixed
    {
        return $this->container['name'];
    }

    /**
     * Sets name.
     *
     * @param string $name ユーザー名
     */
    public function setName(mixed $name): static
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        if (mb_strlen($name) > 384) {
            throw new \InvalidArgumentException('invalid length for $name when calling User., must be smaller than or equal to 384.');
        }
        if (mb_strlen($name) < 1) {
            throw new \InvalidArgumentException('invalid length for $name when calling User., must be bigger than or equal to 1.');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets email.
     *
     * @return string|null
     */
    public function getEmail(): mixed
    {
        return $this->container['email'];
    }

    /**
     * Sets email.
     *
     * @param string $email メールアドレス
     */
    public function setEmail(mixed $email): static
    {
        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }
        if (mb_strlen($email) > 384) {
            throw new \InvalidArgumentException('invalid length for $email when calling User., must be smaller than or equal to 384.');
        }
        if (mb_strlen($email) < 1) {
            throw new \InvalidArgumentException('invalid length for $email when calling User., must be bigger than or equal to 1.');
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets type.
     *
     * @return string|null
     */
    public function getType(): mixed
    {
        return $this->container['type'];
    }

    /**
     * Sets type.
     *
     * @param string $type ユーザー種別  - `01`: ショップユーザー
     */
    public function setType(mixed $type): static
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(sprintf("Invalid value '%s' for 'type', must be one of '%s'", $type, implode("', '", $allowedValues)));
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets twoFactorAuthStatus.
     *
     * @return string|null
     */
    public function getTwoFactorAuthStatus(): mixed
    {
        return $this->container['twoFactorAuthStatus'];
    }

    /**
     * Sets twoFactorAuthStatus.
     *
     * @param string $twoFactorAuthStatus 二要素認証ステータス  - `00`: 未設定\\ - `01`: 設定済み
     */
    public function setTwoFactorAuthStatus(mixed $twoFactorAuthStatus): static
    {
        if (is_null($twoFactorAuthStatus)) {
            throw new \InvalidArgumentException('non-nullable twoFactorAuthStatus cannot be null');
        }
        $allowedValues = $this->getTwoFactorAuthStatusAllowableValues();
        if (!in_array($twoFactorAuthStatus, $allowedValues, true)) {
            throw new \InvalidArgumentException(sprintf("Invalid value '%s' for 'twoFactorAuthStatus', must be one of '%s'", $twoFactorAuthStatus, implode("', '", $allowedValues)));
        }
        $this->container['twoFactorAuthStatus'] = $twoFactorAuthStatus;

        return $this;
    }

    /**
     * Gets mailAuthStatus.
     *
     * @return string|null
     */
    public function getMailAuthStatus(): mixed
    {
        return $this->container['mailAuthStatus'];
    }

    /**
     * Sets mailAuthStatus.
     *
     * @param string $mailAuthStatus メールアドレス認証ステータス  - `00`: 未設定\\ - `01`: 設定済み
     */
    public function setMailAuthStatus(mixed $mailAuthStatus): static
    {
        if (is_null($mailAuthStatus)) {
            throw new \InvalidArgumentException('non-nullable mailAuthStatus cannot be null');
        }
        $allowedValues = $this->getMailAuthStatusAllowableValues();
        if (!in_array($mailAuthStatus, $allowedValues, true)) {
            throw new \InvalidArgumentException(sprintf("Invalid value '%s' for 'mailAuthStatus', must be one of '%s'", $mailAuthStatus, implode("', '", $allowedValues)));
        }
        $this->container['mailAuthStatus'] = $mailAuthStatus;

        return $this;
    }

    /**
     * Gets passwordLockStatus.
     *
     * @return string|null
     */
    public function getPasswordLockStatus(): mixed
    {
        return $this->container['passwordLockStatus'];
    }

    /**
     * Sets passwordLockStatus.
     *
     * @param string $passwordLockStatus パスワードロックステータス  - `00`: ロックされていない\\ - `01`: ロック中
     */
    public function setPasswordLockStatus(mixed $passwordLockStatus): static
    {
        if (is_null($passwordLockStatus)) {
            throw new \InvalidArgumentException('non-nullable passwordLockStatus cannot be null');
        }
        $allowedValues = $this->getPasswordLockStatusAllowableValues();
        if (!in_array($passwordLockStatus, $allowedValues, true)) {
            throw new \InvalidArgumentException(sprintf("Invalid value '%s' for 'passwordLockStatus', must be one of '%s'", $passwordLockStatus, implode("', '", $allowedValues)));
        }
        $this->container['passwordLockStatus'] = $passwordLockStatus;

        return $this;
    }

    /**
     * Gets lastLoginDate.
     *
     * @return string|null
     */
    public function getLastLoginDate(): mixed
    {
        return $this->container['lastLoginDate'];
    }

    /**
     * Sets lastLoginDate.
     *
     * @param string|null $lastLoginDate 最終ログイン日時\\ \\ 形式：`yyyy/MM/dd HH:mm:ss.SSS`
     */
    public function setLastLoginDate(mixed $lastLoginDate): static
    {
        if (is_null($lastLoginDate)) {
            $this->openAPINullablesSetToNull[] = 'lastLoginDate';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('lastLoginDate', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['lastLoginDate'] = $lastLoginDate;

        return $this;
    }

    /**
     * Gets loginFailureDate.
     *
     * @return string|null
     */
    public function getLoginFailureDate(): mixed
    {
        return $this->container['loginFailureDate'];
    }

    /**
     * Sets loginFailureDate.
     *
     * @param string|null $loginFailureDate ログイン失敗日時\\ \\ 形式：`yyyy/MM/dd HH:mm:ss.SSS`
     */
    public function setLoginFailureDate(mixed $loginFailureDate): static
    {
        if (is_null($loginFailureDate)) {
            $this->openAPINullablesSetToNull[] = 'loginFailureDate';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('loginFailureDate', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['loginFailureDate'] = $loginFailureDate;

        return $this;
    }

    /**
     * Gets loginFailureTimes.
     *
     * @return int|null
     */
    public function getLoginFailureTimes(): mixed
    {
        return $this->container['loginFailureTimes'];
    }

    /**
     * Sets loginFailureTimes.
     *
     * @param int $loginFailureTimes ログイン失敗回数
     */
    public function setLoginFailureTimes(mixed $loginFailureTimes): static
    {
        if (is_null($loginFailureTimes)) {
            throw new \InvalidArgumentException('non-nullable loginFailureTimes cannot be null');
        }
        $this->container['loginFailureTimes'] = $loginFailureTimes;

        return $this;
    }

    /**
     * Gets passwordExpire.
     *
     * @return string|null
     */
    public function getPasswordExpire(): mixed
    {
        return $this->container['passwordExpire'];
    }

    /**
     * Sets passwordExpire.
     *
     * @param string|null $passwordExpire パスワード有効期限\\ \\ 形式：`yyyy/MM/dd HH:mm:ss.SSS`
     */
    public function setPasswordExpire(mixed $passwordExpire): static
    {
        if (is_null($passwordExpire)) {
            $this->openAPINullablesSetToNull[] = 'passwordExpire';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('passwordExpire', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['passwordExpire'] = $passwordExpire;

        return $this;
    }

    /**
     * Gets accountStatus.
     *
     * @return string|null
     */
    public function getAccountStatus(): mixed
    {
        return $this->container['accountStatus'];
    }

    /**
     * Sets accountStatus.
     *
     * @param string $accountStatus アカウントステータス  - `00`: 有効 - `01`: 無効
     */
    public function setAccountStatus(mixed $accountStatus): static
    {
        if (is_null($accountStatus)) {
            throw new \InvalidArgumentException('non-nullable accountStatus cannot be null');
        }
        $allowedValues = $this->getAccountStatusAllowableValues();
        if (!in_array($accountStatus, $allowedValues, true)) {
            throw new \InvalidArgumentException(sprintf("Invalid value '%s' for 'accountStatus', must be one of '%s'", $accountStatus, implode("', '", $allowedValues)));
        }
        $this->container['accountStatus'] = $accountStatus;

        return $this;
    }

    /**
     * Gets inviteStatus.
     *
     * @return string|null
     */
    public function getInviteStatus(): mixed
    {
        return $this->container['inviteStatus'];
    }

    /**
     * Sets inviteStatus.
     *
     * @param string $inviteStatus 招待ステータス  - `01`: 招待中 - `02`: 参加済み
     */
    public function setInviteStatus(mixed $inviteStatus): static
    {
        if (is_null($inviteStatus)) {
            throw new \InvalidArgumentException('non-nullable inviteStatus cannot be null');
        }
        $allowedValues = $this->getInviteStatusAllowableValues();
        if (!in_array($inviteStatus, $allowedValues, true)) {
            throw new \InvalidArgumentException(sprintf("Invalid value '%s' for 'inviteStatus', must be one of '%s'", $inviteStatus, implode("', '", $allowedValues)));
        }
        $this->container['inviteStatus'] = $inviteStatus;

        return $this;
    }

    /**
     * Gets created.
     *
     * @return string|null
     */
    public function getCreated(): mixed
    {
        return $this->container['created'];
    }

    /**
     * Sets created.
     *
     * @param string $created 作成日\\ 形式：`yyyy/MM/dd HH:mm:ss.SSS`
     */
    public function setCreated(mixed $created): static
    {
        if (is_null($created)) {
            throw new \InvalidArgumentException('non-nullable created cannot be null');
        }
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets updated.
     *
     * @return string|null
     */
    public function getUpdated(): mixed
    {
        return $this->container['updated'];
    }

    /**
     * Sets updated.
     *
     * @param string|null $updated 更新日\\ 形式：`yyyy/MM/dd HH:mm:ss.SSS`
     */
    public function setUpdated(mixed $updated): static
    {
        if (is_null($updated)) {
            $this->openAPINullablesSetToNull[] = 'updated';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('updated', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['updated'] = $updated;

        return $this;
    }

    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @see https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    public function jsonSerialize(): mixed
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object.
     */
    public function __toString(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
    }

    /**
     * Gets a header-safe presentation of the object.
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
