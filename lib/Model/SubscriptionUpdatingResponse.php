<?php

declare(strict_types=1);
/**
 * fincode API.
 *
 * fincodeのAPIリファレンスです。\\ fincodeは決済情報のほか様々なリソースを管理できるため、リソース指向なREST APIをベースとしたインターフェイス設計のもとでAPIを提供しています。\\ APIの呼び出しにはAPIキーによる認証が必要であり、リクエストの際に`Authorization`ヘッダーに有効なAPIキーをセットすることで認証できます。
 *
 * The version of the OpenAPI document: 1.2.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Fincode\Model;

use OpenAPI\Fincode\ObjectSerializer;

/**
 * @implements \ArrayAccess<string, mixed>
 */
class SubscriptionUpdatingResponse implements ModelInterface, \ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;
    /**
     * The original name of the model.
     */
    protected static string $openAPIModelName = 'Subscription.Updating.Response';
    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var array<string, string>
     */
    protected static array $openAPITypes = ['id' => 'string', 'shopId' => 'string', 'payType' => '\OpenAPI\Fincode\Model\SubscriptionPayType', 'planId' => 'string', 'planName' => 'string', 'customerId' => 'string', 'cardId' => 'string', 'paymentMethodId' => 'string', 'amount' => 'int', 'tax' => 'int', 'totalAmount' => 'int', 'initialAmount' => 'int', 'initialTax' => 'int', 'initialTotalAmount' => 'int', 'status' => '\OpenAPI\Fincode\Model\SubscriptionStatus', 'startDate' => 'string', 'nextChargeDate' => 'string', 'stopDate' => 'string', 'endMonthFlag' => 'string', 'sendUrl' => 'string', 'errorCode' => 'string', 'clientField1' => 'string', 'clientField2' => 'string', 'clientField3' => 'string', 'remarks' => 'string', 'created' => 'string', 'updated' => 'string'];
    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var array<string, string|null>
     */
    protected static array $openAPIFormats = ['id' => null, 'shopId' => null, 'payType' => null, 'planId' => null, 'planName' => null, 'customerId' => null, 'cardId' => null, 'paymentMethodId' => null, 'amount' => 'int64', 'tax' => 'int64', 'totalAmount' => 'int64', 'initialAmount' => null, 'initialTax' => null, 'initialTotalAmount' => null, 'status' => null, 'startDate' => null, 'nextChargeDate' => null, 'stopDate' => null, 'endMonthFlag' => null, 'sendUrl' => null, 'errorCode' => null, 'clientField1' => null, 'clientField2' => null, 'clientField3' => null, 'remarks' => null, 'created' => null, 'updated' => null];
    /**
     * Array of nullable properties. Used for (de)serialization.
     *
     * @var array<string, bool>
     */
    protected static array $openAPINullables = ['id' => false, 'shopId' => false, 'payType' => false, 'planId' => false, 'planName' => true, 'customerId' => false, 'cardId' => false, 'paymentMethodId' => false, 'amount' => false, 'tax' => false, 'totalAmount' => false, 'initialAmount' => false, 'initialTax' => false, 'initialTotalAmount' => false, 'status' => false, 'startDate' => false, 'nextChargeDate' => false, 'stopDate' => true, 'endMonthFlag' => false, 'sendUrl' => true, 'errorCode' => true, 'clientField1' => true, 'clientField2' => true, 'clientField3' => true, 'remarks' => true, 'created' => false, 'updated' => true];
    /**
     * If a nullable field gets set to null, insert it here.
     *
     * @var array<string, bool>
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return array<string, string|null>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties.
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null.
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null.
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable.
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }
    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = ['id' => 'id', 'shopId' => 'shop_id', 'payType' => 'pay_type', 'planId' => 'plan_id', 'planName' => 'plan_name', 'customerId' => 'customer_id', 'cardId' => 'card_id', 'paymentMethodId' => 'payment_method_id', 'amount' => 'amount', 'tax' => 'tax', 'totalAmount' => 'total_amount', 'initialAmount' => 'initial_amount', 'initialTax' => 'initial_tax', 'initialTotalAmount' => 'initial_total_amount', 'status' => 'status', 'startDate' => 'start_date', 'nextChargeDate' => 'next_charge_date', 'stopDate' => 'stop_date', 'endMonthFlag' => 'end_month_flag', 'sendUrl' => 'send_url', 'errorCode' => 'error_code', 'clientField1' => 'client_field_1', 'clientField2' => 'client_field_2', 'clientField3' => 'client_field_3', 'remarks' => 'remarks', 'created' => 'created', 'updated' => 'updated'];
    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var array<string, string>
     */
    protected static array $setters = ['id' => 'setId', 'shopId' => 'setShopId', 'payType' => 'setPayType', 'planId' => 'setPlanId', 'planName' => 'setPlanName', 'customerId' => 'setCustomerId', 'cardId' => 'setCardId', 'paymentMethodId' => 'setPaymentMethodId', 'amount' => 'setAmount', 'tax' => 'setTax', 'totalAmount' => 'setTotalAmount', 'initialAmount' => 'setInitialAmount', 'initialTax' => 'setInitialTax', 'initialTotalAmount' => 'setInitialTotalAmount', 'status' => 'setStatus', 'startDate' => 'setStartDate', 'nextChargeDate' => 'setNextChargeDate', 'stopDate' => 'setStopDate', 'endMonthFlag' => 'setEndMonthFlag', 'sendUrl' => 'setSendUrl', 'errorCode' => 'setErrorCode', 'clientField1' => 'setClientField1', 'clientField2' => 'setClientField2', 'clientField3' => 'setClientField3', 'remarks' => 'setRemarks', 'created' => 'setCreated', 'updated' => 'setUpdated'];
    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var array<string, string>
     */
    protected static array $getters = ['id' => 'getId', 'shopId' => 'getShopId', 'payType' => 'getPayType', 'planId' => 'getPlanId', 'planName' => 'getPlanName', 'customerId' => 'getCustomerId', 'cardId' => 'getCardId', 'paymentMethodId' => 'getPaymentMethodId', 'amount' => 'getAmount', 'tax' => 'getTax', 'totalAmount' => 'getTotalAmount', 'initialAmount' => 'getInitialAmount', 'initialTax' => 'getInitialTax', 'initialTotalAmount' => 'getInitialTotalAmount', 'status' => 'getStatus', 'startDate' => 'getStartDate', 'nextChargeDate' => 'getNextChargeDate', 'stopDate' => 'getStopDate', 'endMonthFlag' => 'getEndMonthFlag', 'sendUrl' => 'getSendUrl', 'errorCode' => 'getErrorCode', 'clientField1' => 'getClientField1', 'clientField2' => 'getClientField2', 'clientField3' => 'getClientField3', 'remarks' => 'getRemarks', 'created' => 'getCreated', 'updated' => 'getUpdated'];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }
    public const END_MONTH_FLAG__0 = '0';
    public const END_MONTH_FLAG__1 = '1';

    /**
     * Gets allowable values of the enum.
     *
     * @return list<string>
     */
    public function getEndMonthFlagAllowableValues(): array
    {
        return [self::END_MONTH_FLAG__0, self::END_MONTH_FLAG__1];
    }
    /**
     * Associative array for storing property values.
     *
     * @phpstan-var array<string, mixed>
     *
     * @psalm-var array<string, mixed>
     */
    protected array $container = [];

    /**
     * Constructor.
     *
     * @param array<string, mixed> $data Associated array of property values
     *                                   initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('shopId', $data ?? [], null);
        $this->setIfExists('payType', $data ?? [], null);
        $this->setIfExists('planId', $data ?? [], null);
        $this->setIfExists('planName', $data ?? [], null);
        $this->setIfExists('customerId', $data ?? [], null);
        $this->setIfExists('cardId', $data ?? [], null);
        $this->setIfExists('paymentMethodId', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('tax', $data ?? [], null);
        $this->setIfExists('totalAmount', $data ?? [], null);
        $this->setIfExists('initialAmount', $data ?? [], null);
        $this->setIfExists('initialTax', $data ?? [], null);
        $this->setIfExists('initialTotalAmount', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('startDate', $data ?? [], null);
        $this->setIfExists('nextChargeDate', $data ?? [], null);
        $this->setIfExists('stopDate', $data ?? [], null);
        $this->setIfExists('endMonthFlag', $data ?? [], null);
        $this->setIfExists('sendUrl', $data ?? [], null);
        $this->setIfExists('errorCode', $data ?? [], null);
        $this->setIfExists('clientField1', $data ?? [], null);
        $this->setIfExists('clientField2', $data ?? [], null);
        $this->setIfExists('clientField3', $data ?? [], null);
        $this->setIfExists('remarks', $data ?? [], null);
        $this->setIfExists('created', $data ?? [], null);
        $this->setIfExists('updated', $data ?? [], null);
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array.
     *
     * @param array<string, mixed> $fields
     */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }
        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return list<string> invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];
        if (!is_null($this->container['id']) && mb_strlen($this->container['id']) > 25) {
            $invalidProperties[] = "invalid value for 'id', the character length must be smaller than or equal to 25.";
        }
        if (!is_null($this->container['id']) && mb_strlen($this->container['id']) < 1) {
            $invalidProperties[] = "invalid value for 'id', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['shopId']) && mb_strlen($this->container['shopId']) > 13) {
            $invalidProperties[] = "invalid value for 'shopId', the character length must be smaller than or equal to 13.";
        }
        if (!is_null($this->container['shopId']) && mb_strlen($this->container['shopId']) < 13) {
            $invalidProperties[] = "invalid value for 'shopId', the character length must be bigger than or equal to 13.";
        }
        if (!is_null($this->container['planId']) && mb_strlen($this->container['planId']) > 25) {
            $invalidProperties[] = "invalid value for 'planId', the character length must be smaller than or equal to 25.";
        }
        if (!is_null($this->container['planId']) && mb_strlen($this->container['planId']) < 1) {
            $invalidProperties[] = "invalid value for 'planId', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['planName']) && mb_strlen($this->container['planName']) > 200) {
            $invalidProperties[] = "invalid value for 'planName', the character length must be smaller than or equal to 200.";
        }
        if (!is_null($this->container['customerId']) && mb_strlen($this->container['customerId']) > 60) {
            $invalidProperties[] = "invalid value for 'customerId', the character length must be smaller than or equal to 60.";
        }
        if (!is_null($this->container['customerId']) && mb_strlen($this->container['customerId']) < 1) {
            $invalidProperties[] = "invalid value for 'customerId', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['cardId']) && mb_strlen($this->container['cardId']) > 25) {
            $invalidProperties[] = "invalid value for 'cardId', the character length must be smaller than or equal to 25.";
        }
        if (!is_null($this->container['cardId']) && mb_strlen($this->container['cardId']) < 25) {
            $invalidProperties[] = "invalid value for 'cardId', the character length must be bigger than or equal to 25.";
        }
        if (!is_null($this->container['paymentMethodId']) && mb_strlen($this->container['paymentMethodId']) > 25) {
            $invalidProperties[] = "invalid value for 'paymentMethodId', the character length must be smaller than or equal to 25.";
        }
        if (!is_null($this->container['paymentMethodId']) && mb_strlen($this->container['paymentMethodId']) < 25) {
            $invalidProperties[] = "invalid value for 'paymentMethodId', the character length must be bigger than or equal to 25.";
        }
        $allowedValues = $this->getEndMonthFlagAllowableValues();
        if (!is_null($this->container['endMonthFlag']) && !in_array($this->container['endMonthFlag'], $allowedValues, true)) {
            $invalidProperties[] = sprintf("invalid value '%s' for 'endMonthFlag', must be one of '%s'", $this->container['endMonthFlag'], implode("', '", $allowedValues));
        }
        if (!is_null($this->container['errorCode']) && mb_strlen($this->container['errorCode']) > 11) {
            $invalidProperties[] = "invalid value for 'errorCode', the character length must be smaller than or equal to 11.";
        }
        if (!is_null($this->container['errorCode']) && mb_strlen($this->container['errorCode']) < 11) {
            $invalidProperties[] = "invalid value for 'errorCode', the character length must be bigger than or equal to 11.";
        }
        if (!is_null($this->container['clientField1']) && mb_strlen($this->container['clientField1']) > 100) {
            $invalidProperties[] = "invalid value for 'clientField1', the character length must be smaller than or equal to 100.";
        }
        if (!is_null($this->container['clientField1']) && mb_strlen($this->container['clientField1']) < 1) {
            $invalidProperties[] = "invalid value for 'clientField1', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['clientField2']) && mb_strlen($this->container['clientField2']) > 100) {
            $invalidProperties[] = "invalid value for 'clientField2', the character length must be smaller than or equal to 100.";
        }
        if (!is_null($this->container['clientField2']) && mb_strlen($this->container['clientField2']) < 1) {
            $invalidProperties[] = "invalid value for 'clientField2', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['clientField3']) && mb_strlen($this->container['clientField3']) > 100) {
            $invalidProperties[] = "invalid value for 'clientField3', the character length must be smaller than or equal to 100.";
        }
        if (!is_null($this->container['clientField3']) && mb_strlen($this->container['clientField3']) < 1) {
            $invalidProperties[] = "invalid value for 'clientField3', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['remarks']) && mb_strlen($this->container['remarks']) > 9) {
            $invalidProperties[] = "invalid value for 'remarks', the character length must be smaller than or equal to 9.";
        }
        if (!is_null($this->container['remarks']) && mb_strlen($this->container['remarks']) < 1) {
            $invalidProperties[] = "invalid value for 'remarks', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return 0 === count($this->listInvalidProperties());
    }

    /**
     * Gets id.
     *
     * @return string|null
     */
    public function getId(): mixed
    {
        return $this->container['id'];
    }

    /**
     * Sets id.
     *
     * @param string $id サブスクリプションID
     */
    public function setId(mixed $id): static
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        if (mb_strlen($id) > 25) {
            throw new \InvalidArgumentException('invalid length for $id when calling SubscriptionUpdatingResponse., must be smaller than or equal to 25.');
        }
        if (mb_strlen($id) < 1) {
            throw new \InvalidArgumentException('invalid length for $id when calling SubscriptionUpdatingResponse., must be bigger than or equal to 1.');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets shopId.
     *
     * @return string|null
     */
    public function getShopId(): mixed
    {
        return $this->container['shopId'];
    }

    /**
     * Sets shopId.
     *
     * @param string $shopId ショップID
     */
    public function setShopId(mixed $shopId): static
    {
        if (is_null($shopId)) {
            throw new \InvalidArgumentException('non-nullable shopId cannot be null');
        }
        if (mb_strlen($shopId) > 13) {
            throw new \InvalidArgumentException('invalid length for $shopId when calling SubscriptionUpdatingResponse., must be smaller than or equal to 13.');
        }
        if (mb_strlen($shopId) < 13) {
            throw new \InvalidArgumentException('invalid length for $shopId when calling SubscriptionUpdatingResponse., must be bigger than or equal to 13.');
        }
        $this->container['shopId'] = $shopId;

        return $this;
    }

    /**
     * Gets payType.
     *
     * @return SubscriptionPayType|null
     */
    public function getPayType(): mixed
    {
        return $this->container['payType'];
    }

    /**
     * Sets payType.
     *
     * @param SubscriptionPayType $payType payType
     */
    public function setPayType(mixed $payType): static
    {
        if (is_null($payType)) {
            throw new \InvalidArgumentException('non-nullable payType cannot be null');
        }
        $this->container['payType'] = $payType;

        return $this;
    }

    /**
     * Gets planId.
     *
     * @return string|null
     */
    public function getPlanId(): mixed
    {
        return $this->container['planId'];
    }

    /**
     * Sets planId.
     *
     * @param string $planId プランID
     */
    public function setPlanId(mixed $planId): static
    {
        if (is_null($planId)) {
            throw new \InvalidArgumentException('non-nullable planId cannot be null');
        }
        if (mb_strlen($planId) > 25) {
            throw new \InvalidArgumentException('invalid length for $planId when calling SubscriptionUpdatingResponse., must be smaller than or equal to 25.');
        }
        if (mb_strlen($planId) < 1) {
            throw new \InvalidArgumentException('invalid length for $planId when calling SubscriptionUpdatingResponse., must be bigger than or equal to 1.');
        }
        $this->container['planId'] = $planId;

        return $this;
    }

    /**
     * Gets planName.
     *
     * @return string|null
     */
    public function getPlanName(): mixed
    {
        return $this->container['planName'];
    }

    /**
     * Sets planName.
     *
     * @param string|null $planName プラン名
     */
    public function setPlanName(mixed $planName): static
    {
        if (is_null($planName)) {
            $this->openAPINullablesSetToNull[] = 'planName';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('planName', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($planName) && mb_strlen($planName) > 200) {
            throw new \InvalidArgumentException('invalid length for $planName when calling SubscriptionUpdatingResponse., must be smaller than or equal to 200.');
        }
        $this->container['planName'] = $planName;

        return $this;
    }

    /**
     * Gets customerId.
     *
     * @return string|null
     */
    public function getCustomerId(): mixed
    {
        return $this->container['customerId'];
    }

    /**
     * Sets customerId.
     *
     * @param string $customerId 顧客ID\\ \\ このサブスクリプションの請求先となる顧客のIDです
     */
    public function setCustomerId(mixed $customerId): static
    {
        if (is_null($customerId)) {
            throw new \InvalidArgumentException('non-nullable customerId cannot be null');
        }
        if (mb_strlen($customerId) > 60) {
            throw new \InvalidArgumentException('invalid length for $customerId when calling SubscriptionUpdatingResponse., must be smaller than or equal to 60.');
        }
        if (mb_strlen($customerId) < 1) {
            throw new \InvalidArgumentException('invalid length for $customerId when calling SubscriptionUpdatingResponse., must be bigger than or equal to 1.');
        }
        $this->container['customerId'] = $customerId;

        return $this;
    }

    /**
     * Gets cardId.
     *
     * @return string|null
     */
    public function getCardId(): mixed
    {
        return $this->container['cardId'];
    }

    /**
     * Sets cardId.
     *
     * @param string $cardId カードID\\ \\ このサブスクリプションの決済に使用するカードのIDです
     */
    public function setCardId(mixed $cardId): static
    {
        if (is_null($cardId)) {
            throw new \InvalidArgumentException('non-nullable cardId cannot be null');
        }
        if (mb_strlen($cardId) > 25) {
            throw new \InvalidArgumentException('invalid length for $cardId when calling SubscriptionUpdatingResponse., must be smaller than or equal to 25.');
        }
        if (mb_strlen($cardId) < 25) {
            throw new \InvalidArgumentException('invalid length for $cardId when calling SubscriptionUpdatingResponse., must be bigger than or equal to 25.');
        }
        $this->container['cardId'] = $cardId;

        return $this;
    }

    /**
     * Gets paymentMethodId.
     *
     * @return string|null
     */
    public function getPaymentMethodId(): mixed
    {
        return $this->container['paymentMethodId'];
    }

    /**
     * Sets paymentMethodId.
     *
     * @param string $paymentMethodId 決済手段ID\\ \\ このサブスクリプションの決済に使用する決済手段のIDです
     */
    public function setPaymentMethodId(mixed $paymentMethodId): static
    {
        if (is_null($paymentMethodId)) {
            throw new \InvalidArgumentException('non-nullable paymentMethodId cannot be null');
        }
        if (mb_strlen($paymentMethodId) > 25) {
            throw new \InvalidArgumentException('invalid length for $paymentMethodId when calling SubscriptionUpdatingResponse., must be smaller than or equal to 25.');
        }
        if (mb_strlen($paymentMethodId) < 25) {
            throw new \InvalidArgumentException('invalid length for $paymentMethodId when calling SubscriptionUpdatingResponse., must be bigger than or equal to 25.');
        }
        $this->container['paymentMethodId'] = $paymentMethodId;

        return $this;
    }

    /**
     * Gets amount.
     *
     * @return int|null
     */
    public function getAmount(): mixed
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount.
     *
     * @param int $amount 利用金額
     */
    public function setAmount(mixed $amount): static
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets tax.
     *
     * @return int|null
     */
    public function getTax(): mixed
    {
        return $this->container['tax'];
    }

    /**
     * Sets tax.
     *
     * @param int $tax 税送料
     */
    public function setTax(mixed $tax): static
    {
        if (is_null($tax)) {
            throw new \InvalidArgumentException('non-nullable tax cannot be null');
        }
        $this->container['tax'] = $tax;

        return $this;
    }

    /**
     * Gets totalAmount.
     *
     * @return int|null
     */
    public function getTotalAmount(): mixed
    {
        return $this->container['totalAmount'];
    }

    /**
     * Sets totalAmount.
     *
     * @param int $totalAmount 合計金額\\ 利用金額と税送料の合計金額です
     */
    public function setTotalAmount(mixed $totalAmount): static
    {
        if (is_null($totalAmount)) {
            throw new \InvalidArgumentException('non-nullable totalAmount cannot be null');
        }
        $this->container['totalAmount'] = $totalAmount;

        return $this;
    }

    /**
     * Gets initialAmount.
     *
     * @return int|null
     */
    public function getInitialAmount(): mixed
    {
        return $this->container['initialAmount'];
    }

    /**
     * Sets initialAmount.
     *
     * @param int $initialAmount 初回利用金額\\ \\ この値が設定されているとき、このサブスクリプションは初回の課金のみこの金額で課金し、2回目以降はプラン情報がもつ`amount`の金額で課金します
     */
    public function setInitialAmount(mixed $initialAmount): static
    {
        if (is_null($initialAmount)) {
            throw new \InvalidArgumentException('non-nullable initialAmount cannot be null');
        }
        $this->container['initialAmount'] = $initialAmount;

        return $this;
    }

    /**
     * Gets initialTax.
     *
     * @return int|null
     */
    public function getInitialTax(): mixed
    {
        return $this->container['initialTax'];
    }

    /**
     * Sets initialTax.
     *
     * @param int $initialTax 初回税送料\\ \\ この値が設定されているとき、このサブスクリプションは初回の課金のみこの金額で課金し、2回目以降はプラン情報がもつ`tax`の金額で課金します
     */
    public function setInitialTax(mixed $initialTax): static
    {
        if (is_null($initialTax)) {
            throw new \InvalidArgumentException('non-nullable initialTax cannot be null');
        }
        $this->container['initialTax'] = $initialTax;

        return $this;
    }

    /**
     * Gets initialTotalAmount.
     *
     * @return int|null
     */
    public function getInitialTotalAmount(): mixed
    {
        return $this->container['initialTotalAmount'];
    }

    /**
     * Sets initialTotalAmount.
     *
     * @param int $initialTotalAmount 初回合計金額\\ \\ `initial_amount`と`initial_tax`の合計金額です
     */
    public function setInitialTotalAmount(mixed $initialTotalAmount): static
    {
        if (is_null($initialTotalAmount)) {
            throw new \InvalidArgumentException('non-nullable initialTotalAmount cannot be null');
        }
        $this->container['initialTotalAmount'] = $initialTotalAmount;

        return $this;
    }

    /**
     * Gets status.
     *
     * @return SubscriptionStatus|null
     */
    public function getStatus(): mixed
    {
        return $this->container['status'];
    }

    /**
     * Sets status.
     *
     * @param SubscriptionStatus $status status
     */
    public function setStatus(mixed $status): static
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets startDate.
     *
     * @return string|null
     */
    public function getStartDate(): mixed
    {
        return $this->container['startDate'];
    }

    /**
     * Sets startDate.
     *
     * @param string $startDate 課金開始日\\ サブスクリプションの開始日です。\\ \\ 形式：`yyyy/MM/dd HH:mm:ss.SSS`
     */
    public function setStartDate(mixed $startDate): static
    {
        if (is_null($startDate)) {
            throw new \InvalidArgumentException('non-nullable startDate cannot be null');
        }
        $this->container['startDate'] = $startDate;

        return $this;
    }

    /**
     * Gets nextChargeDate.
     *
     * @return string|null
     */
    public function getNextChargeDate(): mixed
    {
        return $this->container['nextChargeDate'];
    }

    /**
     * Sets nextChargeDate.
     *
     * @param string $nextChargeDate 次回課金日\\ サブスクリプションの次回課金日です。\\ \\ 形式：`yyyy/MM/dd HH:mm:ss.SSS`
     */
    public function setNextChargeDate(mixed $nextChargeDate): static
    {
        if (is_null($nextChargeDate)) {
            throw new \InvalidArgumentException('non-nullable nextChargeDate cannot be null');
        }
        $this->container['nextChargeDate'] = $nextChargeDate;

        return $this;
    }

    /**
     * Gets stopDate.
     *
     * @return string|null
     */
    public function getStopDate(): mixed
    {
        return $this->container['stopDate'];
    }

    /**
     * Sets stopDate.
     *
     * @param string|null $stopDate 課金停止日\\ サブスクリプションの停止日です。\\ \\ 形式：`yyyy/MM/dd HH:mm:ss.SSS`
     */
    public function setStopDate(mixed $stopDate): static
    {
        if (is_null($stopDate)) {
            $this->openAPINullablesSetToNull[] = 'stopDate';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('stopDate', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['stopDate'] = $stopDate;

        return $this;
    }

    /**
     * Gets endMonthFlag.
     *
     * @return string|null
     */
    public function getEndMonthFlag(): mixed
    {
        return $this->container['endMonthFlag'];
    }

    /**
     * Sets endMonthFlag.
     *
     * @param string $endMonthFlag 月末課金フラグ  - `0`：月末課金を行わない - `1`：月末課金を行う
     */
    public function setEndMonthFlag(mixed $endMonthFlag): static
    {
        if (is_null($endMonthFlag)) {
            throw new \InvalidArgumentException('non-nullable endMonthFlag cannot be null');
        }
        $allowedValues = $this->getEndMonthFlagAllowableValues();
        if (!in_array($endMonthFlag, $allowedValues, true)) {
            throw new \InvalidArgumentException(sprintf("Invalid value '%s' for 'endMonthFlag', must be one of '%s'", $endMonthFlag, implode("', '", $allowedValues)));
        }
        $this->container['endMonthFlag'] = $endMonthFlag;

        return $this;
    }

    /**
     * Gets sendUrl.
     *
     * @return string|null
     */
    public function getSendUrl(): mixed
    {
        return $this->container['sendUrl'];
    }

    /**
     * Sets sendUrl.
     *
     * @param string|null $sendUrl ※ 閉塞機能
     */
    public function setSendUrl(mixed $sendUrl): static
    {
        if (is_null($sendUrl)) {
            $this->openAPINullablesSetToNull[] = 'sendUrl';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sendUrl', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sendUrl'] = $sendUrl;

        return $this;
    }

    /**
     * Gets errorCode.
     *
     * @return string|null
     */
    public function getErrorCode(): mixed
    {
        return $this->container['errorCode'];
    }

    /**
     * Sets errorCode.
     *
     * @param string|null $errorCode このサブスクリプションにおいて発生したエラーのうち、一番最新のエラーのエラーコードです。\\ [各エラーコードの定義はこちらを参照](https://docs.fincode.jp/develop_support/error)して確認できます。
     */
    public function setErrorCode(mixed $errorCode): static
    {
        if (is_null($errorCode)) {
            $this->openAPINullablesSetToNull[] = 'errorCode';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('errorCode', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($errorCode) && mb_strlen($errorCode) > 11) {
            throw new \InvalidArgumentException('invalid length for $errorCode when calling SubscriptionUpdatingResponse., must be smaller than or equal to 11.');
        }
        if (!is_null($errorCode) && mb_strlen($errorCode) < 11) {
            throw new \InvalidArgumentException('invalid length for $errorCode when calling SubscriptionUpdatingResponse., must be bigger than or equal to 11.');
        }
        $this->container['errorCode'] = $errorCode;

        return $this;
    }

    /**
     * Gets clientField1.
     *
     * @return string|null
     */
    public function getClientField1(): mixed
    {
        return $this->container['clientField1'];
    }

    /**
     * Sets clientField1.
     *
     * @param string|null $clientField1 加盟店自由項目 1
     */
    public function setClientField1(mixed $clientField1): static
    {
        if (is_null($clientField1)) {
            $this->openAPINullablesSetToNull[] = 'clientField1';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('clientField1', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($clientField1) && mb_strlen($clientField1) > 100) {
            throw new \InvalidArgumentException('invalid length for $clientField1 when calling SubscriptionUpdatingResponse., must be smaller than or equal to 100.');
        }
        if (!is_null($clientField1) && mb_strlen($clientField1) < 1) {
            throw new \InvalidArgumentException('invalid length for $clientField1 when calling SubscriptionUpdatingResponse., must be bigger than or equal to 1.');
        }
        $this->container['clientField1'] = $clientField1;

        return $this;
    }

    /**
     * Gets clientField2.
     *
     * @return string|null
     */
    public function getClientField2(): mixed
    {
        return $this->container['clientField2'];
    }

    /**
     * Sets clientField2.
     *
     * @param string|null $clientField2 加盟店自由項目 2
     */
    public function setClientField2(mixed $clientField2): static
    {
        if (is_null($clientField2)) {
            $this->openAPINullablesSetToNull[] = 'clientField2';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('clientField2', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($clientField2) && mb_strlen($clientField2) > 100) {
            throw new \InvalidArgumentException('invalid length for $clientField2 when calling SubscriptionUpdatingResponse., must be smaller than or equal to 100.');
        }
        if (!is_null($clientField2) && mb_strlen($clientField2) < 1) {
            throw new \InvalidArgumentException('invalid length for $clientField2 when calling SubscriptionUpdatingResponse., must be bigger than or equal to 1.');
        }
        $this->container['clientField2'] = $clientField2;

        return $this;
    }

    /**
     * Gets clientField3.
     *
     * @return string|null
     */
    public function getClientField3(): mixed
    {
        return $this->container['clientField3'];
    }

    /**
     * Sets clientField3.
     *
     * @param string|null $clientField3 加盟店自由項目 3
     */
    public function setClientField3(mixed $clientField3): static
    {
        if (is_null($clientField3)) {
            $this->openAPINullablesSetToNull[] = 'clientField3';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('clientField3', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($clientField3) && mb_strlen($clientField3) > 100) {
            throw new \InvalidArgumentException('invalid length for $clientField3 when calling SubscriptionUpdatingResponse., must be smaller than or equal to 100.');
        }
        if (!is_null($clientField3) && mb_strlen($clientField3) < 1) {
            throw new \InvalidArgumentException('invalid length for $clientField3 when calling SubscriptionUpdatingResponse., must be bigger than or equal to 1.');
        }
        $this->container['clientField3'] = $clientField3;

        return $this;
    }

    /**
     * Gets remarks.
     *
     * @return string|null
     */
    public function getRemarks(): mixed
    {
        return $this->container['remarks'];
    }

    /**
     * Sets remarks.
     *
     * @param string|null $remarks ご利用明細表示内容
     */
    public function setRemarks(mixed $remarks): static
    {
        if (is_null($remarks)) {
            $this->openAPINullablesSetToNull[] = 'remarks';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('remarks', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($remarks) && mb_strlen($remarks) > 9) {
            throw new \InvalidArgumentException('invalid length for $remarks when calling SubscriptionUpdatingResponse., must be smaller than or equal to 9.');
        }
        if (!is_null($remarks) && mb_strlen($remarks) < 1) {
            throw new \InvalidArgumentException('invalid length for $remarks when calling SubscriptionUpdatingResponse., must be bigger than or equal to 1.');
        }
        $this->container['remarks'] = $remarks;

        return $this;
    }

    /**
     * Gets created.
     *
     * @return string|null
     */
    public function getCreated(): mixed
    {
        return $this->container['created'];
    }

    /**
     * Sets created.
     *
     * @param string $created 作成日\\ 形式：`yyyy/MM/dd HH:mm:ss.SSS`
     */
    public function setCreated(mixed $created): static
    {
        if (is_null($created)) {
            throw new \InvalidArgumentException('non-nullable created cannot be null');
        }
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets updated.
     *
     * @return string|null
     */
    public function getUpdated(): mixed
    {
        return $this->container['updated'];
    }

    /**
     * Sets updated.
     *
     * @param string|null $updated 更新日\\ 形式：`yyyy/MM/dd HH:mm:ss.SSS`
     */
    public function setUpdated(mixed $updated): static
    {
        if (is_null($updated)) {
            $this->openAPINullablesSetToNull[] = 'updated';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('updated', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['updated'] = $updated;

        return $this;
    }

    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @see https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    public function jsonSerialize(): mixed
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object.
     */
    public function __toString(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
    }

    /**
     * Gets a header-safe presentation of the object.
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
