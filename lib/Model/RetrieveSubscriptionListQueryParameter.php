<?php

declare(strict_types=1);
/**
 * fincode API.
 *
 * fincodeのAPIリファレンスです。\\ fincodeは決済情報のほか様々なリソースを管理できるため、リソース指向なREST APIをベースとしたインターフェイス設計のもとでAPIを提供しています。\\ APIの呼び出しにはAPIキーによる認証が必要であり、リクエストの際に`Authorization`ヘッダーに有効なAPIキーをセットすることで認証できます。
 *
 * The version of the OpenAPI document: 1.2.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Fincode\Model;

use OpenAPI\Fincode\ObjectSerializer;

/**
 * @implements \ArrayAccess<string, mixed>
 */
class RetrieveSubscriptionListQueryParameter implements ModelInterface, \ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;
    /**
     * The original name of the model.
     */
    protected static string $openAPIModelName = 'retrieveSubscriptionList_query_parameter';
    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var array<string, string>
     */
    protected static array $openAPITypes = ['page' => 'int', 'limit' => 'int', 'countOnly' => 'bool', 'payType' => '\OpenAPI\Fincode\Model\SubscriptionPayType', 'id' => 'string', 'customerId' => 'string', 'planId' => 'string', 'status' => '\OpenAPI\Fincode\Model\SubscriptionStatus', 'totalAmountMin' => 'int', 'totalAmountMax' => 'int', 'intervalPattern' => '\OpenAPI\Fincode\Model\PropertiesIntervalPattern', 'startDateFrom' => 'string', 'startDateTo' => 'string', 'stopDateFrom' => 'string', 'stopDateTo' => 'string', 'nextChargeDateFrom' => 'string', 'nextChargeDateTo' => 'string', 'updateDateFrom' => 'string', 'updateDateTo' => 'string', 'sort' => 'string'];
    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var array<string, string|null>
     */
    protected static array $openAPIFormats = ['page' => null, 'limit' => null, 'countOnly' => null, 'payType' => null, 'id' => null, 'customerId' => null, 'planId' => null, 'status' => null, 'totalAmountMin' => 'int64', 'totalAmountMax' => 'int64', 'intervalPattern' => null, 'startDateFrom' => null, 'startDateTo' => null, 'stopDateFrom' => null, 'stopDateTo' => null, 'nextChargeDateFrom' => null, 'nextChargeDateTo' => null, 'updateDateFrom' => null, 'updateDateTo' => null, 'sort' => null];
    /**
     * Array of nullable properties. Used for (de)serialization.
     *
     * @var array<string, bool>
     */
    protected static array $openAPINullables = ['page' => true, 'limit' => true, 'countOnly' => true, 'payType' => false, 'id' => false, 'customerId' => false, 'planId' => false, 'status' => false, 'totalAmountMin' => false, 'totalAmountMax' => false, 'intervalPattern' => false, 'startDateFrom' => false, 'startDateTo' => false, 'stopDateFrom' => false, 'stopDateTo' => false, 'nextChargeDateFrom' => false, 'nextChargeDateTo' => false, 'updateDateFrom' => false, 'updateDateTo' => false, 'sort' => true];
    /**
     * If a nullable field gets set to null, insert it here.
     *
     * @var array<string, bool>
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return array<string, string|null>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties.
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null.
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null.
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable.
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }
    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = ['page' => 'page', 'limit' => 'limit', 'countOnly' => 'count_only', 'payType' => 'pay_type', 'id' => 'id', 'customerId' => 'customer_id', 'planId' => 'plan_id', 'status' => 'status', 'totalAmountMin' => 'total_amount_min', 'totalAmountMax' => 'total_amount_max', 'intervalPattern' => 'interval_pattern', 'startDateFrom' => 'start_date_from', 'startDateTo' => 'start_date_to', 'stopDateFrom' => 'stop_date_from', 'stopDateTo' => 'stop_date_to', 'nextChargeDateFrom' => 'next_charge_date_from', 'nextChargeDateTo' => 'next_charge_date_to', 'updateDateFrom' => 'update_date_from', 'updateDateTo' => 'update_date_to', 'sort' => 'sort'];
    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var array<string, string>
     */
    protected static array $setters = ['page' => 'setPage', 'limit' => 'setLimit', 'countOnly' => 'setCountOnly', 'payType' => 'setPayType', 'id' => 'setId', 'customerId' => 'setCustomerId', 'planId' => 'setPlanId', 'status' => 'setStatus', 'totalAmountMin' => 'setTotalAmountMin', 'totalAmountMax' => 'setTotalAmountMax', 'intervalPattern' => 'setIntervalPattern', 'startDateFrom' => 'setStartDateFrom', 'startDateTo' => 'setStartDateTo', 'stopDateFrom' => 'setStopDateFrom', 'stopDateTo' => 'setStopDateTo', 'nextChargeDateFrom' => 'setNextChargeDateFrom', 'nextChargeDateTo' => 'setNextChargeDateTo', 'updateDateFrom' => 'setUpdateDateFrom', 'updateDateTo' => 'setUpdateDateTo', 'sort' => 'setSort'];
    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var array<string, string>
     */
    protected static array $getters = ['page' => 'getPage', 'limit' => 'getLimit', 'countOnly' => 'getCountOnly', 'payType' => 'getPayType', 'id' => 'getId', 'customerId' => 'getCustomerId', 'planId' => 'getPlanId', 'status' => 'getStatus', 'totalAmountMin' => 'getTotalAmountMin', 'totalAmountMax' => 'getTotalAmountMax', 'intervalPattern' => 'getIntervalPattern', 'startDateFrom' => 'getStartDateFrom', 'startDateTo' => 'getStartDateTo', 'stopDateFrom' => 'getStopDateFrom', 'stopDateTo' => 'getStopDateTo', 'nextChargeDateFrom' => 'getNextChargeDateFrom', 'nextChargeDateTo' => 'getNextChargeDateTo', 'updateDateFrom' => 'getUpdateDateFrom', 'updateDateTo' => 'getUpdateDateTo', 'sort' => 'getSort'];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }
    /**
     * Associative array for storing property values.
     *
     * @phpstan-var array<string, mixed>
     *
     * @psalm-var array<string, mixed>
     */
    protected array $container = [];

    /**
     * Constructor.
     *
     * @param array<string, mixed> $data Associated array of property values
     *                                   initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('page', $data ?? [], null);
        $this->setIfExists('limit', $data ?? [], null);
        $this->setIfExists('countOnly', $data ?? [], null);
        $this->setIfExists('payType', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('customerId', $data ?? [], null);
        $this->setIfExists('planId', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('totalAmountMin', $data ?? [], null);
        $this->setIfExists('totalAmountMax', $data ?? [], null);
        $this->setIfExists('intervalPattern', $data ?? [], null);
        $this->setIfExists('startDateFrom', $data ?? [], null);
        $this->setIfExists('startDateTo', $data ?? [], null);
        $this->setIfExists('stopDateFrom', $data ?? [], null);
        $this->setIfExists('stopDateTo', $data ?? [], null);
        $this->setIfExists('nextChargeDateFrom', $data ?? [], null);
        $this->setIfExists('nextChargeDateTo', $data ?? [], null);
        $this->setIfExists('updateDateFrom', $data ?? [], null);
        $this->setIfExists('updateDateTo', $data ?? [], null);
        $this->setIfExists('sort', $data ?? [], null);
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array.
     *
     * @param array<string, mixed> $fields
     */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }
        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return list<string> invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];
        if (null === $this->container['payType']) {
            $invalidProperties[] = "'payType' can't be null";
        }
        if (!is_null($this->container['id']) && mb_strlen($this->container['id']) > 25) {
            $invalidProperties[] = "invalid value for 'id', the character length must be smaller than or equal to 25.";
        }
        if (!is_null($this->container['id']) && mb_strlen($this->container['id']) < 1) {
            $invalidProperties[] = "invalid value for 'id', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['customerId']) && mb_strlen($this->container['customerId']) > 60) {
            $invalidProperties[] = "invalid value for 'customerId', the character length must be smaller than or equal to 60.";
        }
        if (!is_null($this->container['customerId']) && mb_strlen($this->container['customerId']) < 1) {
            $invalidProperties[] = "invalid value for 'customerId', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['planId']) && mb_strlen($this->container['planId']) > 25) {
            $invalidProperties[] = "invalid value for 'planId', the character length must be smaller than or equal to 25.";
        }
        if (!is_null($this->container['planId']) && mb_strlen($this->container['planId']) < 1) {
            $invalidProperties[] = "invalid value for 'planId', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return 0 === count($this->listInvalidProperties());
    }

    /**
     * Gets page.
     *
     * @return int|null
     */
    public function getPage(): mixed
    {
        return $this->container['page'];
    }

    /**
     * Sets page.
     *
     * @param int|null $page ページ番号
     */
    public function setPage(mixed $page): static
    {
        if (is_null($page)) {
            $this->openAPINullablesSetToNull[] = 'page';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('page', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['page'] = $page;

        return $this;
    }

    /**
     * Gets limit.
     *
     * @return int|null
     */
    public function getLimit(): mixed
    {
        return $this->container['limit'];
    }

    /**
     * Sets limit.
     *
     * @param int|null $limit 1回で取得するデータの最大件数
     */
    public function setLimit(mixed $limit): static
    {
        if (is_null($limit)) {
            $this->openAPINullablesSetToNull[] = 'limit';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('limit', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['limit'] = $limit;

        return $this;
    }

    /**
     * Gets countOnly.
     *
     * @return bool|null
     */
    public function getCountOnly(): mixed
    {
        return $this->container['countOnly'];
    }

    /**
     * Sets countOnly.
     *
     * @param bool|null $countOnly 総件数のみ取得するか。\\ `true`を指定した場合、検索結果の総件数（`total_count`）のみ取得します。
     */
    public function setCountOnly(mixed $countOnly): static
    {
        if (is_null($countOnly)) {
            $this->openAPINullablesSetToNull[] = 'countOnly';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('countOnly', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['countOnly'] = $countOnly;

        return $this;
    }

    /**
     * Gets payType.
     *
     * @return SubscriptionPayType
     */
    public function getPayType(): mixed
    {
        return $this->container['payType'];
    }

    /**
     * Sets payType.
     *
     * @param SubscriptionPayType $payType 決済種別\\ 一覧で取得する対象の決済種別を指定します。  - `Card`: カード - `Directdebit`: 口座振替
     */
    public function setPayType(mixed $payType): static
    {
        if (is_null($payType)) {
            throw new \InvalidArgumentException('non-nullable payType cannot be null');
        }
        $this->container['payType'] = $payType;

        return $this;
    }

    /**
     * Gets id.
     *
     * @return string|null
     */
    public function getId(): mixed
    {
        return $this->container['id'];
    }

    /**
     * Sets id.
     *
     * @param string $id サブスクリプションID
     */
    public function setId(mixed $id): static
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        if (mb_strlen($id) > 25) {
            throw new \InvalidArgumentException('invalid length for $id when calling RetrieveSubscriptionListQueryParameter., must be smaller than or equal to 25.');
        }
        if (mb_strlen($id) < 1) {
            throw new \InvalidArgumentException('invalid length for $id when calling RetrieveSubscriptionListQueryParameter., must be bigger than or equal to 1.');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets customerId.
     *
     * @return string|null
     */
    public function getCustomerId(): mixed
    {
        return $this->container['customerId'];
    }

    /**
     * Sets customerId.
     *
     * @param string $customerId 顧客ID
     */
    public function setCustomerId(mixed $customerId): static
    {
        if (is_null($customerId)) {
            throw new \InvalidArgumentException('non-nullable customerId cannot be null');
        }
        if (mb_strlen($customerId) > 60) {
            throw new \InvalidArgumentException('invalid length for $customerId when calling RetrieveSubscriptionListQueryParameter., must be smaller than or equal to 60.');
        }
        if (mb_strlen($customerId) < 1) {
            throw new \InvalidArgumentException('invalid length for $customerId when calling RetrieveSubscriptionListQueryParameter., must be bigger than or equal to 1.');
        }
        $this->container['customerId'] = $customerId;

        return $this;
    }

    /**
     * Gets planId.
     *
     * @return string|null
     */
    public function getPlanId(): mixed
    {
        return $this->container['planId'];
    }

    /**
     * Sets planId.
     *
     * @param string $planId プランID
     */
    public function setPlanId(mixed $planId): static
    {
        if (is_null($planId)) {
            throw new \InvalidArgumentException('non-nullable planId cannot be null');
        }
        if (mb_strlen($planId) > 25) {
            throw new \InvalidArgumentException('invalid length for $planId when calling RetrieveSubscriptionListQueryParameter., must be smaller than or equal to 25.');
        }
        if (mb_strlen($planId) < 1) {
            throw new \InvalidArgumentException('invalid length for $planId when calling RetrieveSubscriptionListQueryParameter., must be bigger than or equal to 1.');
        }
        $this->container['planId'] = $planId;

        return $this;
    }

    /**
     * Gets status.
     *
     * @return SubscriptionStatus|null
     */
    public function getStatus(): mixed
    {
        return $this->container['status'];
    }

    /**
     * Sets status.
     *
     * @param SubscriptionStatus $status ステータス\\ 指定したステータスのサブスクリプション情報を取得します。カンマ区切りにすることで複数指定（OR検索）できます。  - `ACTIVE`: サブスクリプションが有効 - `RUNNING`: 課金処理中 - `CANCELED`: 解約済み - `INCOMPLETE`: サブスクリプションの登録時点で何らかの理由により失敗
     */
    public function setStatus(mixed $status): static
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets totalAmountMin.
     *
     * @return int|null
     */
    public function getTotalAmountMin(): mixed
    {
        return $this->container['totalAmountMin'];
    }

    /**
     * Sets totalAmountMin.
     *
     * @param int $totalAmountMin 合計金額（始値）\\ 利用金額と税送料の合計額（`total_amount`）を対象に範囲検索を行います。この値以上の合計金額を持つサブスクリプション情報を取得します。
     */
    public function setTotalAmountMin(mixed $totalAmountMin): static
    {
        if (is_null($totalAmountMin)) {
            throw new \InvalidArgumentException('non-nullable totalAmountMin cannot be null');
        }
        $this->container['totalAmountMin'] = $totalAmountMin;

        return $this;
    }

    /**
     * Gets totalAmountMax.
     *
     * @return int|null
     */
    public function getTotalAmountMax(): mixed
    {
        return $this->container['totalAmountMax'];
    }

    /**
     * Sets totalAmountMax.
     *
     * @param int $totalAmountMax 合計金額（終値）\\ 利用金額と税送料の合計額（`total_amount`）を対象に範囲検索を行います。この値以下の合計金額を持つサブスクリプション情報を取得します。
     */
    public function setTotalAmountMax(mixed $totalAmountMax): static
    {
        if (is_null($totalAmountMax)) {
            throw new \InvalidArgumentException('non-nullable totalAmountMax cannot be null');
        }
        $this->container['totalAmountMax'] = $totalAmountMax;

        return $this;
    }

    /**
     * Gets intervalPattern.
     *
     * @return PropertiesIntervalPattern|null
     */
    public function getIntervalPattern(): mixed
    {
        return $this->container['intervalPattern'];
    }

    /**
     * Sets intervalPattern.
     *
     * @param PropertiesIntervalPattern $intervalPattern intervalPattern
     */
    public function setIntervalPattern(mixed $intervalPattern): static
    {
        if (is_null($intervalPattern)) {
            throw new \InvalidArgumentException('non-nullable intervalPattern cannot be null');
        }
        $this->container['intervalPattern'] = $intervalPattern;

        return $this;
    }

    /**
     * Gets startDateFrom.
     *
     * @return string|null
     */
    public function getStartDateFrom(): mixed
    {
        return $this->container['startDateFrom'];
    }

    /**
     * Sets startDateFrom.
     *
     * @param string $startDateFrom 課金開始日（始値）\\ 課金開始日（`start_date`）を対象に範囲検索を行います。この日付以降に課金開始されたサブスクリプション情報を取得します。\\ \\ 形式：`yyyy/MM/dd`
     */
    public function setStartDateFrom(mixed $startDateFrom): static
    {
        if (is_null($startDateFrom)) {
            throw new \InvalidArgumentException('non-nullable startDateFrom cannot be null');
        }
        $this->container['startDateFrom'] = $startDateFrom;

        return $this;
    }

    /**
     * Gets startDateTo.
     *
     * @return string|null
     */
    public function getStartDateTo(): mixed
    {
        return $this->container['startDateTo'];
    }

    /**
     * Sets startDateTo.
     *
     * @param string $startDateTo 課金開始日（終値）\\ 課金開始日（`start_date`）を対象に範囲検索を行います。この日付以前に課金開始されたサブスクリプション情報を取得します。\\ \\ 形式：`yyyy/MM/dd`
     */
    public function setStartDateTo(mixed $startDateTo): static
    {
        if (is_null($startDateTo)) {
            throw new \InvalidArgumentException('non-nullable startDateTo cannot be null');
        }
        $this->container['startDateTo'] = $startDateTo;

        return $this;
    }

    /**
     * Gets stopDateFrom.
     *
     * @return string|null
     */
    public function getStopDateFrom(): mixed
    {
        return $this->container['stopDateFrom'];
    }

    /**
     * Sets stopDateFrom.
     *
     * @param string $stopDateFrom 課金停止日（始値）\\ 課金停止日（`stop_date`）を対象に範囲検索を行います。この日付以降に課金停止されたサブスクリプション情報を取得します。\\ \\ 形式：`yyyy/MM/dd`
     */
    public function setStopDateFrom(mixed $stopDateFrom): static
    {
        if (is_null($stopDateFrom)) {
            throw new \InvalidArgumentException('non-nullable stopDateFrom cannot be null');
        }
        $this->container['stopDateFrom'] = $stopDateFrom;

        return $this;
    }

    /**
     * Gets stopDateTo.
     *
     * @return string|null
     */
    public function getStopDateTo(): mixed
    {
        return $this->container['stopDateTo'];
    }

    /**
     * Sets stopDateTo.
     *
     * @param string $stopDateTo 課金停止日（終値）\\ 課金停止日（`stop_date`）を対象に範囲検索を行います。この日付以前に課金停止されたサブスクリプション情報を取得します。\\ \\ 形式：`yyyy/MM/dd`
     */
    public function setStopDateTo(mixed $stopDateTo): static
    {
        if (is_null($stopDateTo)) {
            throw new \InvalidArgumentException('non-nullable stopDateTo cannot be null');
        }
        $this->container['stopDateTo'] = $stopDateTo;

        return $this;
    }

    /**
     * Gets nextChargeDateFrom.
     *
     * @return string|null
     */
    public function getNextChargeDateFrom(): mixed
    {
        return $this->container['nextChargeDateFrom'];
    }

    /**
     * Sets nextChargeDateFrom.
     *
     * @param string $nextChargeDateFrom 次回課金日（始値）\\ 次回課金日（`next_charge_date`）を対象に範囲検索を行います。この日付以降に次回課金されるサブスクリプション情報を取得します。\\ \\ 形式：`yyyy/MM/dd`
     */
    public function setNextChargeDateFrom(mixed $nextChargeDateFrom): static
    {
        if (is_null($nextChargeDateFrom)) {
            throw new \InvalidArgumentException('non-nullable nextChargeDateFrom cannot be null');
        }
        $this->container['nextChargeDateFrom'] = $nextChargeDateFrom;

        return $this;
    }

    /**
     * Gets nextChargeDateTo.
     *
     * @return string|null
     */
    public function getNextChargeDateTo(): mixed
    {
        return $this->container['nextChargeDateTo'];
    }

    /**
     * Sets nextChargeDateTo.
     *
     * @param string $nextChargeDateTo 次回課金日（終値）\\ 次回課金日（`next_charge_date`）を対象に範囲検索を行います。この日付以前に次回課金されるサブスクリプション情報を取得します。\\ \\ 形式：`yyyy/MM/dd`
     */
    public function setNextChargeDateTo(mixed $nextChargeDateTo): static
    {
        if (is_null($nextChargeDateTo)) {
            throw new \InvalidArgumentException('non-nullable nextChargeDateTo cannot be null');
        }
        $this->container['nextChargeDateTo'] = $nextChargeDateTo;

        return $this;
    }

    /**
     * Gets updateDateFrom.
     *
     * @return string|null
     */
    public function getUpdateDateFrom(): mixed
    {
        return $this->container['updateDateFrom'];
    }

    /**
     * Sets updateDateFrom.
     *
     * @param string $updateDateFrom 更新日時（始値）\\ 更新日時（`updated`）を対象に範囲検索を行います。この日付以降に更新されたサブスクリプション情報を取得します。\\ \\ 形式：`yyyy/MM/dd`
     */
    public function setUpdateDateFrom(mixed $updateDateFrom): static
    {
        if (is_null($updateDateFrom)) {
            throw new \InvalidArgumentException('non-nullable updateDateFrom cannot be null');
        }
        $this->container['updateDateFrom'] = $updateDateFrom;

        return $this;
    }

    /**
     * Gets updateDateTo.
     *
     * @return string|null
     */
    public function getUpdateDateTo(): mixed
    {
        return $this->container['updateDateTo'];
    }

    /**
     * Sets updateDateTo.
     *
     * @param string $updateDateTo 更新日時（終値）\\ 更新日時（`updated`）を対象に範囲検索を行います。この日付以前に更新されたサブスクリプション情報を取得します。\\ \\ 形式：`yyyy/MM/dd`
     */
    public function setUpdateDateTo(mixed $updateDateTo): static
    {
        if (is_null($updateDateTo)) {
            throw new \InvalidArgumentException('non-nullable updateDateTo cannot be null');
        }
        $this->container['updateDateTo'] = $updateDateTo;

        return $this;
    }

    /**
     * Gets sort.
     *
     * @return string|null
     */
    public function getSort(): mixed
    {
        return $this->container['sort'];
    }

    /**
     * Sets sort.
     *
     * @param string|null $sort ソートする項目と順序を指定します。\\ 例： `?sort=updated␣desc,created␣asc`\\ \\ ソート可能な項目  - `plan_id`: プランID - `total_amount`: 合計金額 - `start_date`: 課金開始日 - `stop_date`: 課金停止日 - `next_charge_date`: 次回課金日 - `created`: 作成日時 - `updated`: 更新日時
     */
    public function setSort(mixed $sort): static
    {
        if (is_null($sort)) {
            $this->openAPINullablesSetToNull[] = 'sort';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sort', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sort'] = $sort;

        return $this;
    }

    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @see https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    public function jsonSerialize(): mixed
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object.
     */
    public function __toString(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
    }

    /**
     * Gets a header-safe presentation of the object.
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
