<?php

declare(strict_types=1);
/**
 * fincode API.
 *
 * fincodeのAPIリファレンスです。\\ fincodeは決済情報のほか様々なリソースを管理できるため、リソース指向なREST APIをベースとしたインターフェイス設計のもとでAPIを提供しています。\\ APIの呼び出しにはAPIキーによる認証が必要であり、リクエストの際に`Authorization`ヘッダーに有効なAPIキーをセットすることで認証できます。
 *
 * The version of the OpenAPI document: 1.2.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Fincode\Model;

use OpenAPI\Fincode\ObjectSerializer;

/**
 * @implements \ArrayAccess<string, mixed>
 */
class CustomerCardUpdatingRequest implements ModelInterface, \ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;
    /**
     * The original name of the model.
     */
    protected static string $openAPIModelName = 'CustomerCard.Updating.Request';
    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var array<string, string>
     */
    protected static array $openAPITypes = ['token' => 'string', 'defaultFlag' => '\OpenAPI\Fincode\Model\DefaultFlag', 'holderName' => 'string', 'expire' => 'string'];
    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var array<string, string|null>
     */
    protected static array $openAPIFormats = ['token' => null, 'defaultFlag' => null, 'holderName' => null, 'expire' => null];
    /**
     * Array of nullable properties. Used for (de)serialization.
     *
     * @var array<string, bool>
     */
    protected static array $openAPINullables = ['token' => true, 'defaultFlag' => true, 'holderName' => true, 'expire' => true];
    /**
     * If a nullable field gets set to null, insert it here.
     *
     * @var array<string, bool>
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return array<string, string|null>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties.
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null.
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null.
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable.
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }
    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = ['token' => 'token', 'defaultFlag' => 'default_flag', 'holderName' => 'holder_name', 'expire' => 'expire'];
    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var array<string, string>
     */
    protected static array $setters = ['token' => 'setToken', 'defaultFlag' => 'setDefaultFlag', 'holderName' => 'setHolderName', 'expire' => 'setExpire'];
    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var array<string, string>
     */
    protected static array $getters = ['token' => 'getToken', 'defaultFlag' => 'getDefaultFlag', 'holderName' => 'getHolderName', 'expire' => 'getExpire'];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }
    /**
     * Associative array for storing property values.
     *
     * @phpstan-var array<string, mixed>
     *
     * @psalm-var array<string, mixed>
     */
    protected array $container = [];

    /**
     * Constructor.
     *
     * @param array<string, mixed> $data Associated array of property values
     *                                   initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('token', $data ?? [], null);
        $this->setIfExists('defaultFlag', $data ?? [], null);
        $this->setIfExists('holderName', $data ?? [], null);
        $this->setIfExists('expire', $data ?? [], null);
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array.
     *
     * @param array<string, mixed> $fields
     */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }
        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return list<string> invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];
        if (!is_null($this->container['token']) && mb_strlen($this->container['token']) > 512) {
            $invalidProperties[] = "invalid value for 'token', the character length must be smaller than or equal to 512.";
        }
        if (!is_null($this->container['token']) && mb_strlen($this->container['token']) < 1) {
            $invalidProperties[] = "invalid value for 'token', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['holderName']) && mb_strlen($this->container['holderName']) > 50) {
            $invalidProperties[] = "invalid value for 'holderName', the character length must be smaller than or equal to 50.";
        }
        if (!is_null($this->container['holderName']) && mb_strlen($this->container['holderName']) < 1) {
            $invalidProperties[] = "invalid value for 'holderName', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['expire']) && mb_strlen($this->container['expire']) > 4) {
            $invalidProperties[] = "invalid value for 'expire', the character length must be smaller than or equal to 4.";
        }
        if (!is_null($this->container['expire']) && mb_strlen($this->container['expire']) < 4) {
            $invalidProperties[] = "invalid value for 'expire', the character length must be bigger than or equal to 4.";
        }
        if (!is_null($this->container['expire']) && !preg_match('/^\\d{2}\\d{2}$/', $this->container['expire'])) {
            $invalidProperties[] = "invalid value for 'expire', must be conform to the pattern /^\\d{2}\\d{2}\$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return 0 === count($this->listInvalidProperties());
    }

    /**
     * Gets token.
     *
     * @return string|null
     */
    public function getToken(): mixed
    {
        return $this->container['token'];
    }

    /**
     * Sets token.
     *
     * @param string|null $token カードトークン\\ \\ fincode JSの`tokens`メソッドで取得したトークンを指定します。\\ JavaScriptの利用については、[JavaScriptリファレンス](https://docs.fincode.jp/js)をご参照ください。
     */
    public function setToken(mixed $token): static
    {
        if (is_null($token)) {
            $this->openAPINullablesSetToNull[] = 'token';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('token', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($token) && mb_strlen($token) > 512) {
            throw new \InvalidArgumentException('invalid length for $token when calling CustomerCardUpdatingRequest., must be smaller than or equal to 512.');
        }
        if (!is_null($token) && mb_strlen($token) < 1) {
            throw new \InvalidArgumentException('invalid length for $token when calling CustomerCardUpdatingRequest., must be bigger than or equal to 1.');
        }
        $this->container['token'] = $token;

        return $this;
    }

    /**
     * Gets defaultFlag.
     *
     * @return DefaultFlag|null
     */
    public function getDefaultFlag(): mixed
    {
        return $this->container['defaultFlag'];
    }

    /**
     * Sets defaultFlag.
     *
     * @param DefaultFlag|null $defaultFlag デフォルトフラグ。\\ 指定した場合のみ更新されます。
     */
    public function setDefaultFlag(mixed $defaultFlag): static
    {
        if (is_null($defaultFlag)) {
            $this->openAPINullablesSetToNull[] = 'defaultFlag';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('defaultFlag', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['defaultFlag'] = $defaultFlag;

        return $this;
    }

    /**
     * Gets holderName.
     *
     * @return string|null
     */
    public function getHolderName(): mixed
    {
        return $this->container['holderName'];
    }

    /**
     * Sets holderName.
     *
     * @param string|null $holderName ※ `token`に入力がある場合は無視\\ カード名義人名
     */
    public function setHolderName(mixed $holderName): static
    {
        if (is_null($holderName)) {
            $this->openAPINullablesSetToNull[] = 'holderName';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('holderName', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($holderName) && mb_strlen($holderName) > 50) {
            throw new \InvalidArgumentException('invalid length for $holderName when calling CustomerCardUpdatingRequest., must be smaller than or equal to 50.');
        }
        if (!is_null($holderName) && mb_strlen($holderName) < 1) {
            throw new \InvalidArgumentException('invalid length for $holderName when calling CustomerCardUpdatingRequest., must be bigger than or equal to 1.');
        }
        $this->container['holderName'] = $holderName;

        return $this;
    }

    /**
     * Gets expire.
     *
     * @return string|null
     */
    public function getExpire(): mixed
    {
        return $this->container['expire'];
    }

    /**
     * Sets expire.
     *
     * @param string|null $expire ※ `token`に入力がある場合は無視\\ カード有効期限
     */
    public function setExpire(mixed $expire): static
    {
        if (is_null($expire)) {
            $this->openAPINullablesSetToNull[] = 'expire';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('expire', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($expire) && mb_strlen($expire) > 4) {
            throw new \InvalidArgumentException('invalid length for $expire when calling CustomerCardUpdatingRequest., must be smaller than or equal to 4.');
        }
        if (!is_null($expire) && mb_strlen($expire) < 4) {
            throw new \InvalidArgumentException('invalid length for $expire when calling CustomerCardUpdatingRequest., must be bigger than or equal to 4.');
        }
        if (!is_null($expire) && is_string($expire) && !preg_match('/^\\d{2}\\d{2}$/', $expire)) {
            throw new \InvalidArgumentException('invalid value for $expire when calling CustomerCardUpdatingRequest., must conform to the pattern /^\\d{2}\\d{2}$/.');
        }
        $this->container['expire'] = $expire;

        return $this;
    }

    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @see https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    public function jsonSerialize(): mixed
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object.
     */
    public function __toString(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
    }

    /**
     * Gets a header-safe presentation of the object.
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
