<?php

declare(strict_types=1);
/**
 * fincode API.
 *
 * fincodeのAPIリファレンスです。\\ fincodeは決済情報のほか様々なリソースを管理できるため、リソース指向なREST APIをベースとしたインターフェイス設計のもとでAPIを提供しています。\\ APIの呼び出しにはAPIキーによる認証が必要であり、リクエストの際に`Authorization`ヘッダーに有効なAPIキーをセットすることで認証できます。
 *
 * The version of the OpenAPI document: 1.2.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Fincode\Model;

use OpenAPI\Fincode\ObjectSerializer;

/**
 * @implements \ArrayAccess<string, mixed>
 */
class RetrievePaymentListQueryParameterOneOf3 implements ModelInterface, \ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;
    /**
     * The original name of the model.
     */
    protected static string $openAPIModelName = 'retrievePaymentList_query_parameter_oneOf_3';
    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var array<string, string>
     */
    protected static array $openAPITypes = ['payType' => '\OpenAPI\Fincode\Model\PayType', 'keyword' => 'string', 'totalAmountMin' => 'int', 'totalAmountMax' => 'int', 'customerId' => 'string', 'processDateFrom' => 'string', 'processDateTo' => 'string', 'status' => '\OpenAPI\Fincode\Model\PaymentStatus', 'billingTotalAmountMin' => 'string', 'billingTotalAmountMax' => 'string', 'paymentTermFrom' => 'string', 'paymentTermTo' => 'string', 'transactionDateFrom' => 'string', 'transactionDateTo' => 'string', 'updatedFrom' => 'string', 'updatedTo' => 'string', 'overpaymentFlag' => 'string', 'cancelOverpaymentFlag' => 'string', 'expireOverpaymentFlag' => 'string', 'amountPattern' => 'string', 'sort' => 'string', 'page' => 'int', 'limit' => 'int', 'countOnly' => 'bool'];
    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var array<string, string|null>
     */
    protected static array $openAPIFormats = ['payType' => null, 'keyword' => null, 'totalAmountMin' => 'int64', 'totalAmountMax' => 'int64', 'customerId' => null, 'processDateFrom' => null, 'processDateTo' => null, 'status' => null, 'billingTotalAmountMin' => null, 'billingTotalAmountMax' => null, 'paymentTermFrom' => null, 'paymentTermTo' => null, 'transactionDateFrom' => null, 'transactionDateTo' => null, 'updatedFrom' => null, 'updatedTo' => null, 'overpaymentFlag' => null, 'cancelOverpaymentFlag' => null, 'expireOverpaymentFlag' => null, 'amountPattern' => null, 'sort' => null, 'page' => null, 'limit' => null, 'countOnly' => null];
    /**
     * Array of nullable properties. Used for (de)serialization.
     *
     * @var array<string, bool>
     */
    protected static array $openAPINullables = ['payType' => false, 'keyword' => true, 'totalAmountMin' => false, 'totalAmountMax' => false, 'customerId' => false, 'processDateFrom' => false, 'processDateTo' => false, 'status' => false, 'billingTotalAmountMin' => false, 'billingTotalAmountMax' => false, 'paymentTermFrom' => false, 'paymentTermTo' => false, 'transactionDateFrom' => false, 'transactionDateTo' => false, 'updatedFrom' => false, 'updatedTo' => false, 'overpaymentFlag' => false, 'cancelOverpaymentFlag' => false, 'expireOverpaymentFlag' => false, 'amountPattern' => true, 'sort' => true, 'page' => true, 'limit' => true, 'countOnly' => true];
    /**
     * If a nullable field gets set to null, insert it here.
     *
     * @var array<string, bool>
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return array<string, string|null>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties.
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null.
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null.
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable.
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }
    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = ['payType' => 'pay_type', 'keyword' => 'keyword', 'totalAmountMin' => 'total_amount_min', 'totalAmountMax' => 'total_amount_max', 'customerId' => 'customer_id', 'processDateFrom' => 'process_date_from', 'processDateTo' => 'process_date_to', 'status' => 'status', 'billingTotalAmountMin' => 'billing_total_amount_min', 'billingTotalAmountMax' => 'billing_total_amount_max', 'paymentTermFrom' => 'payment_term_from', 'paymentTermTo' => 'payment_term_to', 'transactionDateFrom' => 'transaction_date_from', 'transactionDateTo' => 'transaction_date_to', 'updatedFrom' => 'updated_from', 'updatedTo' => 'updated_to', 'overpaymentFlag' => 'overpayment_flag', 'cancelOverpaymentFlag' => 'cancel_overpayment_flag', 'expireOverpaymentFlag' => 'expire_overpayment_flag', 'amountPattern' => 'amount_pattern', 'sort' => 'sort', 'page' => 'page', 'limit' => 'limit', 'countOnly' => 'count_only'];
    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var array<string, string>
     */
    protected static array $setters = ['payType' => 'setPayType', 'keyword' => 'setKeyword', 'totalAmountMin' => 'setTotalAmountMin', 'totalAmountMax' => 'setTotalAmountMax', 'customerId' => 'setCustomerId', 'processDateFrom' => 'setProcessDateFrom', 'processDateTo' => 'setProcessDateTo', 'status' => 'setStatus', 'billingTotalAmountMin' => 'setBillingTotalAmountMin', 'billingTotalAmountMax' => 'setBillingTotalAmountMax', 'paymentTermFrom' => 'setPaymentTermFrom', 'paymentTermTo' => 'setPaymentTermTo', 'transactionDateFrom' => 'setTransactionDateFrom', 'transactionDateTo' => 'setTransactionDateTo', 'updatedFrom' => 'setUpdatedFrom', 'updatedTo' => 'setUpdatedTo', 'overpaymentFlag' => 'setOverpaymentFlag', 'cancelOverpaymentFlag' => 'setCancelOverpaymentFlag', 'expireOverpaymentFlag' => 'setExpireOverpaymentFlag', 'amountPattern' => 'setAmountPattern', 'sort' => 'setSort', 'page' => 'setPage', 'limit' => 'setLimit', 'countOnly' => 'setCountOnly'];
    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var array<string, string>
     */
    protected static array $getters = ['payType' => 'getPayType', 'keyword' => 'getKeyword', 'totalAmountMin' => 'getTotalAmountMin', 'totalAmountMax' => 'getTotalAmountMax', 'customerId' => 'getCustomerId', 'processDateFrom' => 'getProcessDateFrom', 'processDateTo' => 'getProcessDateTo', 'status' => 'getStatus', 'billingTotalAmountMin' => 'getBillingTotalAmountMin', 'billingTotalAmountMax' => 'getBillingTotalAmountMax', 'paymentTermFrom' => 'getPaymentTermFrom', 'paymentTermTo' => 'getPaymentTermTo', 'transactionDateFrom' => 'getTransactionDateFrom', 'transactionDateTo' => 'getTransactionDateTo', 'updatedFrom' => 'getUpdatedFrom', 'updatedTo' => 'getUpdatedTo', 'overpaymentFlag' => 'getOverpaymentFlag', 'cancelOverpaymentFlag' => 'getCancelOverpaymentFlag', 'expireOverpaymentFlag' => 'getExpireOverpaymentFlag', 'amountPattern' => 'getAmountPattern', 'sort' => 'getSort', 'page' => 'getPage', 'limit' => 'getLimit', 'countOnly' => 'getCountOnly'];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }
    public const OVERPAYMENT_FLAG__0 = '0';
    public const OVERPAYMENT_FLAG__1 = '1';
    public const CANCEL_OVERPAYMENT_FLAG__0 = '0';
    public const CANCEL_OVERPAYMENT_FLAG__1 = '1';
    public const EXPIRE_OVERPAYMENT_FLAG__0 = '0';
    public const EXPIRE_OVERPAYMENT_FLAG__1 = '1';
    public const AMOUNT_PATTERN__1 = '1';
    public const AMOUNT_PATTERN__2 = '2';
    public const AMOUNT_PATTERN__3 = '3';
    public const AMOUNT_PATTERN__4 = '4';
    public const AMOUNT_PATTERN__5 = '5';
    public const AMOUNT_PATTERN__6 = '6';

    /**
     * Gets allowable values of the enum.
     *
     * @return list<string>
     */
    public function getOverpaymentFlagAllowableValues(): array
    {
        return [self::OVERPAYMENT_FLAG__0, self::OVERPAYMENT_FLAG__1];
    }

    /**
     * Gets allowable values of the enum.
     *
     * @return list<string>
     */
    public function getCancelOverpaymentFlagAllowableValues(): array
    {
        return [self::CANCEL_OVERPAYMENT_FLAG__0, self::CANCEL_OVERPAYMENT_FLAG__1];
    }

    /**
     * Gets allowable values of the enum.
     *
     * @return list<string>
     */
    public function getExpireOverpaymentFlagAllowableValues(): array
    {
        return [self::EXPIRE_OVERPAYMENT_FLAG__0, self::EXPIRE_OVERPAYMENT_FLAG__1];
    }

    /**
     * Gets allowable values of the enum.
     *
     * @return list<string>
     */
    public function getAmountPatternAllowableValues(): array
    {
        return [self::AMOUNT_PATTERN__1, self::AMOUNT_PATTERN__2, self::AMOUNT_PATTERN__3, self::AMOUNT_PATTERN__4, self::AMOUNT_PATTERN__5, self::AMOUNT_PATTERN__6];
    }
    /**
     * Associative array for storing property values.
     *
     * @phpstan-var array<string, mixed>
     *
     * @psalm-var array<string, mixed>
     */
    protected array $container = [];

    /**
     * Constructor.
     *
     * @param array<string, mixed> $data Associated array of property values
     *                                   initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('payType', $data ?? [], null);
        $this->setIfExists('keyword', $data ?? [], null);
        $this->setIfExists('totalAmountMin', $data ?? [], null);
        $this->setIfExists('totalAmountMax', $data ?? [], null);
        $this->setIfExists('customerId', $data ?? [], null);
        $this->setIfExists('processDateFrom', $data ?? [], null);
        $this->setIfExists('processDateTo', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('billingTotalAmountMin', $data ?? [], null);
        $this->setIfExists('billingTotalAmountMax', $data ?? [], null);
        $this->setIfExists('paymentTermFrom', $data ?? [], null);
        $this->setIfExists('paymentTermTo', $data ?? [], null);
        $this->setIfExists('transactionDateFrom', $data ?? [], null);
        $this->setIfExists('transactionDateTo', $data ?? [], null);
        $this->setIfExists('updatedFrom', $data ?? [], null);
        $this->setIfExists('updatedTo', $data ?? [], null);
        $this->setIfExists('overpaymentFlag', $data ?? [], null);
        $this->setIfExists('cancelOverpaymentFlag', $data ?? [], null);
        $this->setIfExists('expireOverpaymentFlag', $data ?? [], null);
        $this->setIfExists('amountPattern', $data ?? [], null);
        $this->setIfExists('sort', $data ?? [], null);
        $this->setIfExists('page', $data ?? [], null);
        $this->setIfExists('limit', $data ?? [], null);
        $this->setIfExists('countOnly', $data ?? [], null);
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array.
     *
     * @param array<string, mixed> $fields
     */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }
        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return list<string> invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];
        if (null === $this->container['payType']) {
            $invalidProperties[] = "'payType' can't be null";
        }
        if (!is_null($this->container['keyword']) && mb_strlen($this->container['keyword']) > 100) {
            $invalidProperties[] = "invalid value for 'keyword', the character length must be smaller than or equal to 100.";
        }
        if (!is_null($this->container['keyword']) && mb_strlen($this->container['keyword']) < 1) {
            $invalidProperties[] = "invalid value for 'keyword', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['customerId']) && mb_strlen($this->container['customerId']) > 60) {
            $invalidProperties[] = "invalid value for 'customerId', the character length must be smaller than or equal to 60.";
        }
        if (!is_null($this->container['customerId']) && mb_strlen($this->container['customerId']) < 1) {
            $invalidProperties[] = "invalid value for 'customerId', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['billingTotalAmountMin']) && mb_strlen($this->container['billingTotalAmountMin']) > 10) {
            $invalidProperties[] = "invalid value for 'billingTotalAmountMin', the character length must be smaller than or equal to 10.";
        }
        if (!is_null($this->container['billingTotalAmountMin']) && mb_strlen($this->container['billingTotalAmountMin']) < 1) {
            $invalidProperties[] = "invalid value for 'billingTotalAmountMin', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['billingTotalAmountMax']) && mb_strlen($this->container['billingTotalAmountMax']) > 10) {
            $invalidProperties[] = "invalid value for 'billingTotalAmountMax', the character length must be smaller than or equal to 10.";
        }
        if (!is_null($this->container['billingTotalAmountMax']) && mb_strlen($this->container['billingTotalAmountMax']) < 1) {
            $invalidProperties[] = "invalid value for 'billingTotalAmountMax', the character length must be bigger than or equal to 1.";
        }
        $allowedValues = $this->getOverpaymentFlagAllowableValues();
        if (!is_null($this->container['overpaymentFlag']) && !in_array($this->container['overpaymentFlag'], $allowedValues, true)) {
            $invalidProperties[] = sprintf("invalid value '%s' for 'overpaymentFlag', must be one of '%s'", $this->container['overpaymentFlag'], implode("', '", $allowedValues));
        }
        $allowedValues = $this->getCancelOverpaymentFlagAllowableValues();
        if (!is_null($this->container['cancelOverpaymentFlag']) && !in_array($this->container['cancelOverpaymentFlag'], $allowedValues, true)) {
            $invalidProperties[] = sprintf("invalid value '%s' for 'cancelOverpaymentFlag', must be one of '%s'", $this->container['cancelOverpaymentFlag'], implode("', '", $allowedValues));
        }
        $allowedValues = $this->getExpireOverpaymentFlagAllowableValues();
        if (!is_null($this->container['expireOverpaymentFlag']) && !in_array($this->container['expireOverpaymentFlag'], $allowedValues, true)) {
            $invalidProperties[] = sprintf("invalid value '%s' for 'expireOverpaymentFlag', must be one of '%s'", $this->container['expireOverpaymentFlag'], implode("', '", $allowedValues));
        }
        $allowedValues = $this->getAmountPatternAllowableValues();
        if (!is_null($this->container['amountPattern']) && !in_array($this->container['amountPattern'], $allowedValues, true)) {
            $invalidProperties[] = sprintf("invalid value '%s' for 'amountPattern', must be one of '%s'", $this->container['amountPattern'], implode("', '", $allowedValues));
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return 0 === count($this->listInvalidProperties());
    }

    /**
     * Gets payType.
     *
     * @return PayType
     */
    public function getPayType(): mixed
    {
        return $this->container['payType'];
    }

    /**
     * Sets payType.
     *
     * @param PayType $payType 決済種別\\ 一覧で取得する対象の決済種別を指定します。  - `Card`: カード - `Konbini`: コンビニ決済 - `Paypay`: PayPay - `Applepay`: Apple Pay - `Directdebit`: 口座振替
     */
    public function setPayType(mixed $payType): static
    {
        if (is_null($payType)) {
            throw new \InvalidArgumentException('non-nullable payType cannot be null');
        }
        $this->container['payType'] = $payType;

        return $this;
    }

    /**
     * Gets keyword.
     *
     * @return string|null
     */
    public function getKeyword(): mixed
    {
        return $this->container['keyword'];
    }

    /**
     * Sets keyword.
     *
     * @param string|null $keyword 加盟店自由項目1 ~ 3（`client_field_*`）を対象とした部分一致検索を行います
     */
    public function setKeyword(mixed $keyword): static
    {
        if (is_null($keyword)) {
            $this->openAPINullablesSetToNull[] = 'keyword';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('keyword', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($keyword) && mb_strlen($keyword) > 100) {
            throw new \InvalidArgumentException('invalid length for $keyword when calling RetrievePaymentListQueryParameterOneOf3., must be smaller than or equal to 100.');
        }
        if (!is_null($keyword) && mb_strlen($keyword) < 1) {
            throw new \InvalidArgumentException('invalid length for $keyword when calling RetrievePaymentListQueryParameterOneOf3., must be bigger than or equal to 1.');
        }
        $this->container['keyword'] = $keyword;

        return $this;
    }

    /**
     * Gets totalAmountMin.
     *
     * @return int|null
     */
    public function getTotalAmountMin(): mixed
    {
        return $this->container['totalAmountMin'];
    }

    /**
     * Sets totalAmountMin.
     *
     * @param int $totalAmountMin 合計金額（始値）\\ 利用金額と税送料の合計額（`total_amount`）を対象に範囲検索を行います。この値以上の合計金額を持つ決済情報を取得します。
     */
    public function setTotalAmountMin(mixed $totalAmountMin): static
    {
        if (is_null($totalAmountMin)) {
            throw new \InvalidArgumentException('non-nullable totalAmountMin cannot be null');
        }
        $this->container['totalAmountMin'] = $totalAmountMin;

        return $this;
    }

    /**
     * Gets totalAmountMax.
     *
     * @return int|null
     */
    public function getTotalAmountMax(): mixed
    {
        return $this->container['totalAmountMax'];
    }

    /**
     * Sets totalAmountMax.
     *
     * @param int $totalAmountMax 合計金額（終値）\\ 利用金額と税送料の合計額（`total_amount`）を対象に範囲検索を行います。この値以下の合計金額を持つ決済情報を取得します。
     */
    public function setTotalAmountMax(mixed $totalAmountMax): static
    {
        if (is_null($totalAmountMax)) {
            throw new \InvalidArgumentException('non-nullable totalAmountMax cannot be null');
        }
        $this->container['totalAmountMax'] = $totalAmountMax;

        return $this;
    }

    /**
     * Gets customerId.
     *
     * @return string|null
     */
    public function getCustomerId(): mixed
    {
        return $this->container['customerId'];
    }

    /**
     * Sets customerId.
     *
     * @param string $customerId 顧客ID\\ 指定した顧客IDに紐づく決済情報から一覧で取得します
     */
    public function setCustomerId(mixed $customerId): static
    {
        if (is_null($customerId)) {
            throw new \InvalidArgumentException('non-nullable customerId cannot be null');
        }
        if (mb_strlen($customerId) > 60) {
            throw new \InvalidArgumentException('invalid length for $customerId when calling RetrievePaymentListQueryParameterOneOf3., must be smaller than or equal to 60.');
        }
        if (mb_strlen($customerId) < 1) {
            throw new \InvalidArgumentException('invalid length for $customerId when calling RetrievePaymentListQueryParameterOneOf3., must be bigger than or equal to 1.');
        }
        $this->container['customerId'] = $customerId;

        return $this;
    }

    /**
     * Gets processDateFrom.
     *
     * @return string|null
     */
    public function getProcessDateFrom(): mixed
    {
        return $this->container['processDateFrom'];
    }

    /**
     * Sets processDateFrom.
     *
     * @param string $processDateFrom 処理日時（始値）\\ 処理日時（`process_date`）を対象に範囲検索を行います。この日付以降に処理された決済情報を取得します。\\ \\ 形式：`yyyy/MM/dd`
     */
    public function setProcessDateFrom(mixed $processDateFrom): static
    {
        if (is_null($processDateFrom)) {
            throw new \InvalidArgumentException('non-nullable processDateFrom cannot be null');
        }
        $this->container['processDateFrom'] = $processDateFrom;

        return $this;
    }

    /**
     * Gets processDateTo.
     *
     * @return string|null
     */
    public function getProcessDateTo(): mixed
    {
        return $this->container['processDateTo'];
    }

    /**
     * Sets processDateTo.
     *
     * @param string $processDateTo 処理日時（終値）\\ 処理日時（`process_date`）を対象に範囲検索を行います。この日付以前に処理された決済情報を取得します。\\ \\ 形式：`yyyy/MM/dd`
     */
    public function setProcessDateTo(mixed $processDateTo): static
    {
        if (is_null($processDateTo)) {
            throw new \InvalidArgumentException('non-nullable processDateTo cannot be null');
        }
        $this->container['processDateTo'] = $processDateTo;

        return $this;
    }

    /**
     * Gets status.
     *
     * @return PaymentStatus|null
     */
    public function getStatus(): mixed
    {
        return $this->container['status'];
    }

    /**
     * Sets status.
     *
     * @param PaymentStatus $status 決済ステータス\\ 指定したステータスの決済情報を取得します。カンマ区切りにすることで複数指定（OR検索）できます。  - `UNPROCESSED`: 未処理 - `AWAITING_CUSTOMER_PAYMENT`: 購入者の振込待ち - `CAPTURED`: 売上確定 - `CANCELED`: キャンセル - `EXPIRED`: 決済の期限切れ
     */
    public function setStatus(mixed $status): static
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets billingTotalAmountMin.
     *
     * @return string|null
     */
    public function getBillingTotalAmountMin(): mixed
    {
        return $this->container['billingTotalAmountMin'];
    }

    /**
     * Sets billingTotalAmountMin.
     *
     * @param string $billingTotalAmountMin 振込依頼金額 合計（始値）\\ 振込依頼金額 合計（`billing_total_amount`）を対象に範囲検索を行います。この値以上の合計 振込依頼金額を持つ決済情報を取得します。
     */
    public function setBillingTotalAmountMin(mixed $billingTotalAmountMin): static
    {
        if (is_null($billingTotalAmountMin)) {
            throw new \InvalidArgumentException('non-nullable billingTotalAmountMin cannot be null');
        }
        if (mb_strlen($billingTotalAmountMin) > 10) {
            throw new \InvalidArgumentException('invalid length for $billingTotalAmountMin when calling RetrievePaymentListQueryParameterOneOf3., must be smaller than or equal to 10.');
        }
        if (mb_strlen($billingTotalAmountMin) < 1) {
            throw new \InvalidArgumentException('invalid length for $billingTotalAmountMin when calling RetrievePaymentListQueryParameterOneOf3., must be bigger than or equal to 1.');
        }
        $this->container['billingTotalAmountMin'] = $billingTotalAmountMin;

        return $this;
    }

    /**
     * Gets billingTotalAmountMax.
     *
     * @return string|null
     */
    public function getBillingTotalAmountMax(): mixed
    {
        return $this->container['billingTotalAmountMax'];
    }

    /**
     * Sets billingTotalAmountMax.
     *
     * @param string $billingTotalAmountMax 振込依頼金額 合計（終値）\\ 振込依頼金額 合計（`billing_total_amount`）を対象に範囲検索を行います。この値以下の合計 振込依頼金額を持つ決済情報を取得します。
     */
    public function setBillingTotalAmountMax(mixed $billingTotalAmountMax): static
    {
        if (is_null($billingTotalAmountMax)) {
            throw new \InvalidArgumentException('non-nullable billingTotalAmountMax cannot be null');
        }
        if (mb_strlen($billingTotalAmountMax) > 10) {
            throw new \InvalidArgumentException('invalid length for $billingTotalAmountMax when calling RetrievePaymentListQueryParameterOneOf3., must be smaller than or equal to 10.');
        }
        if (mb_strlen($billingTotalAmountMax) < 1) {
            throw new \InvalidArgumentException('invalid length for $billingTotalAmountMax when calling RetrievePaymentListQueryParameterOneOf3., must be bigger than or equal to 1.');
        }
        $this->container['billingTotalAmountMax'] = $billingTotalAmountMax;

        return $this;
    }

    /**
     * Gets paymentTermFrom.
     *
     * @return string|null
     */
    public function getPaymentTermFrom(): mixed
    {
        return $this->container['paymentTermFrom'];
    }

    /**
     * Sets paymentTermFrom.
     *
     * @param string $paymentTermFrom 支払い期限（始値）\\ 支払い期限（`payment_term`）を対象に範囲検索を行います。この日付以降に支払い期限が到来する決済情報を取得します。\\ 形式：`yyyy/MM/dd`
     */
    public function setPaymentTermFrom(mixed $paymentTermFrom): static
    {
        if (is_null($paymentTermFrom)) {
            throw new \InvalidArgumentException('non-nullable paymentTermFrom cannot be null');
        }
        $this->container['paymentTermFrom'] = $paymentTermFrom;

        return $this;
    }

    /**
     * Gets paymentTermTo.
     *
     * @return string|null
     */
    public function getPaymentTermTo(): mixed
    {
        return $this->container['paymentTermTo'];
    }

    /**
     * Sets paymentTermTo.
     *
     * @param string $paymentTermTo 支払い期限（終値）\\ 支払い期限（`payment_term`）を対象に範囲検索を行います。この日付以前に支払い期限が到来する決済情報を取得します。\\ 形式：`yyyy/MM/dd`
     */
    public function setPaymentTermTo(mixed $paymentTermTo): static
    {
        if (is_null($paymentTermTo)) {
            throw new \InvalidArgumentException('non-nullable paymentTermTo cannot be null');
        }
        $this->container['paymentTermTo'] = $paymentTermTo;

        return $this;
    }

    /**
     * Gets transactionDateFrom.
     *
     * @return string|null
     */
    public function getTransactionDateFrom(): mixed
    {
        return $this->container['transactionDateFrom'];
    }

    /**
     * Sets transactionDateFrom.
     *
     * @param string $transactionDateFrom 取引日（始値）\\ \\ 取引日（`transaction_date`）を対象に範囲検索を行います。この日付以降に振込が行われた決済情報を取得します。\\ 形式：`yyyy/MM/dd`
     */
    public function setTransactionDateFrom(mixed $transactionDateFrom): static
    {
        if (is_null($transactionDateFrom)) {
            throw new \InvalidArgumentException('non-nullable transactionDateFrom cannot be null');
        }
        $this->container['transactionDateFrom'] = $transactionDateFrom;

        return $this;
    }

    /**
     * Gets transactionDateTo.
     *
     * @return string|null
     */
    public function getTransactionDateTo(): mixed
    {
        return $this->container['transactionDateTo'];
    }

    /**
     * Sets transactionDateTo.
     *
     * @param string $transactionDateTo 取引日（終値）\\ \\ 取引日（`transaction_date`）を対象に範囲検索を行います。この日付以前に振込が行われた決済情報を取得します。\\ 形式：`yyyy/MM/dd`
     */
    public function setTransactionDateTo(mixed $transactionDateTo): static
    {
        if (is_null($transactionDateTo)) {
            throw new \InvalidArgumentException('non-nullable transactionDateTo cannot be null');
        }
        $this->container['transactionDateTo'] = $transactionDateTo;

        return $this;
    }

    /**
     * Gets updatedFrom.
     *
     * @return string|null
     */
    public function getUpdatedFrom(): mixed
    {
        return $this->container['updatedFrom'];
    }

    /**
     * Sets updatedFrom.
     *
     * @param string $updatedFrom 更新日（始値）\\ \\ 更新日時（`updated`）を対象に範囲検索を行います。この日付以降に更新された決済情報を取得します。\\ 形式：`yyyy/MM/dd`
     */
    public function setUpdatedFrom(mixed $updatedFrom): static
    {
        if (is_null($updatedFrom)) {
            throw new \InvalidArgumentException('non-nullable updatedFrom cannot be null');
        }
        $this->container['updatedFrom'] = $updatedFrom;

        return $this;
    }

    /**
     * Gets updatedTo.
     *
     * @return string|null
     */
    public function getUpdatedTo(): mixed
    {
        return $this->container['updatedTo'];
    }

    /**
     * Sets updatedTo.
     *
     * @param string $updatedTo 更新日（終値）\\ \\ 更新日時（`updated`）を対象に範囲検索を行います。この日付以前に更新された決済情報を取得します。\\ 形式：`yyyy/MM/dd`
     */
    public function setUpdatedTo(mixed $updatedTo): static
    {
        if (is_null($updatedTo)) {
            throw new \InvalidArgumentException('non-nullable updatedTo cannot be null');
        }
        $this->container['updatedTo'] = $updatedTo;

        return $this;
    }

    /**
     * Gets overpaymentFlag.
     *
     * @return string|null
     */
    public function getOverpaymentFlag(): mixed
    {
        return $this->container['overpaymentFlag'];
    }

    /**
     * Sets overpaymentFlag.
     *
     * @param string $overpaymentFlag 多重支払フラグ\\ 同一のバーチャル口座に対して複数回支払いが行われた決済を検索する場合`1`を指定します
     */
    public function setOverpaymentFlag(mixed $overpaymentFlag): static
    {
        if (is_null($overpaymentFlag)) {
            throw new \InvalidArgumentException('non-nullable overpaymentFlag cannot be null');
        }
        $allowedValues = $this->getOverpaymentFlagAllowableValues();
        if (!in_array($overpaymentFlag, $allowedValues, true)) {
            throw new \InvalidArgumentException(sprintf("Invalid value '%s' for 'overpaymentFlag', must be one of '%s'", $overpaymentFlag, implode("', '", $allowedValues)));
        }
        $this->container['overpaymentFlag'] = $overpaymentFlag;

        return $this;
    }

    /**
     * Gets cancelOverpaymentFlag.
     *
     * @return string|null
     */
    public function getCancelOverpaymentFlag(): mixed
    {
        return $this->container['cancelOverpaymentFlag'];
    }

    /**
     * Sets cancelOverpaymentFlag.
     *
     * @param string $cancelOverpaymentFlag キャンセル後支払フラグ\\ キャンセルされた決済に対して支払いが行われた決済を検索する場合`1`を指定します
     */
    public function setCancelOverpaymentFlag(mixed $cancelOverpaymentFlag): static
    {
        if (is_null($cancelOverpaymentFlag)) {
            throw new \InvalidArgumentException('non-nullable cancelOverpaymentFlag cannot be null');
        }
        $allowedValues = $this->getCancelOverpaymentFlagAllowableValues();
        if (!in_array($cancelOverpaymentFlag, $allowedValues, true)) {
            throw new \InvalidArgumentException(sprintf("Invalid value '%s' for 'cancelOverpaymentFlag', must be one of '%s'", $cancelOverpaymentFlag, implode("', '", $allowedValues)));
        }
        $this->container['cancelOverpaymentFlag'] = $cancelOverpaymentFlag;

        return $this;
    }

    /**
     * Gets expireOverpaymentFlag.
     *
     * @return string|null
     */
    public function getExpireOverpaymentFlag(): mixed
    {
        return $this->container['expireOverpaymentFlag'];
    }

    /**
     * Sets expireOverpaymentFlag.
     *
     * @param string $expireOverpaymentFlag 期限切れ後支払フラグ\\ 期限切れになった決済に対して支払いが行われた決済を検索する場合`1`を指定します
     */
    public function setExpireOverpaymentFlag(mixed $expireOverpaymentFlag): static
    {
        if (is_null($expireOverpaymentFlag)) {
            throw new \InvalidArgumentException('non-nullable expireOverpaymentFlag cannot be null');
        }
        $allowedValues = $this->getExpireOverpaymentFlagAllowableValues();
        if (!in_array($expireOverpaymentFlag, $allowedValues, true)) {
            throw new \InvalidArgumentException(sprintf("Invalid value '%s' for 'expireOverpaymentFlag', must be one of '%s'", $expireOverpaymentFlag, implode("', '", $allowedValues)));
        }
        $this->container['expireOverpaymentFlag'] = $expireOverpaymentFlag;

        return $this;
    }

    /**
     * Gets amountPattern.
     *
     * @return string|null
     */
    public function getAmountPattern(): mixed
    {
        return $this->container['amountPattern'];
    }

    /**
     * Sets amountPattern.
     *
     * @param string|null $amountPattern 利用金額パターン  - `null`: 全件取得 - `1`: 振込依頼金額 合計 = 利用金額 合計 である決済を取得 - `2`: 振込依頼金額 合計 != 利用金額 合計 である決済を取得 - `3`: 振込依頼金額 合計 < 利用金額 合計 である決済を取得 - `4`: 振込依頼金額 合計 <= 利用金額 合計 である決済を取得 - `5`: 振込依頼金額 合計 > 利用金額 合計 である決済を取得 - `6`: 振込依頼金額 合計 >= 利用金額 合計 である決済を取得
     */
    public function setAmountPattern(mixed $amountPattern): static
    {
        if (is_null($amountPattern)) {
            $this->openAPINullablesSetToNull[] = 'amountPattern';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('amountPattern', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getAmountPatternAllowableValues();
        if (!is_null($amountPattern) && !in_array($amountPattern, $allowedValues, true)) {
            throw new \InvalidArgumentException(sprintf("Invalid value '%s' for 'amountPattern', must be one of '%s'", $amountPattern, implode("', '", $allowedValues)));
        }
        $this->container['amountPattern'] = $amountPattern;

        return $this;
    }

    /**
     * Gets sort.
     *
     * @return string|null
     */
    public function getSort(): mixed
    {
        return $this->container['sort'];
    }

    /**
     * Sets sort.
     *
     * @param string|null $sort ソートする項目と順序を指定します。\\ 例： `?sort=updated␣desc,created␣asc`\\ \\ ソート可能な項目  - `status`: ステータス - `process_data`: 処理日時 - `total_amount`: 合計金額 - `payment_term`: 支払い期限 - `payment_date`: 支払い日時 - `created`: 作成日時 - `updated`: 更新日時
     */
    public function setSort(mixed $sort): static
    {
        if (is_null($sort)) {
            $this->openAPINullablesSetToNull[] = 'sort';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sort', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sort'] = $sort;

        return $this;
    }

    /**
     * Gets page.
     *
     * @return int|null
     */
    public function getPage(): mixed
    {
        return $this->container['page'];
    }

    /**
     * Sets page.
     *
     * @param int|null $page ページ番号
     */
    public function setPage(mixed $page): static
    {
        if (is_null($page)) {
            $this->openAPINullablesSetToNull[] = 'page';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('page', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['page'] = $page;

        return $this;
    }

    /**
     * Gets limit.
     *
     * @return int|null
     */
    public function getLimit(): mixed
    {
        return $this->container['limit'];
    }

    /**
     * Sets limit.
     *
     * @param int|null $limit 1回で取得するデータの最大件数
     */
    public function setLimit(mixed $limit): static
    {
        if (is_null($limit)) {
            $this->openAPINullablesSetToNull[] = 'limit';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('limit', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['limit'] = $limit;

        return $this;
    }

    /**
     * Gets countOnly.
     *
     * @return bool|null
     */
    public function getCountOnly(): mixed
    {
        return $this->container['countOnly'];
    }

    /**
     * Sets countOnly.
     *
     * @param bool|null $countOnly 総件数のみ取得するか。\\ `true`を指定した場合、検索結果の総件数（`total_count`）のみ取得します。
     */
    public function setCountOnly(mixed $countOnly): static
    {
        if (is_null($countOnly)) {
            $this->openAPINullablesSetToNull[] = 'countOnly';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('countOnly', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['countOnly'] = $countOnly;

        return $this;
    }

    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @see https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    public function jsonSerialize(): mixed
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object.
     */
    public function __toString(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
    }

    /**
     * Gets a header-safe presentation of the object.
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
