<?php

declare(strict_types=1);
/**
 * fincode API.
 *
 * fincodeのAPIリファレンスです。\\ fincodeは決済情報のほか様々なリソースを管理できるため、リソース指向なREST APIをベースとしたインターフェイス設計のもとでAPIを提供しています。\\ APIの呼び出しにはAPIキーによる認証が必要であり、リクエストの際に`Authorization`ヘッダーに有効なAPIキーをセットすることで認証できます。
 *
 * The version of the OpenAPI document: 1.2.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Fincode\Model;

use OpenAPI\Fincode\ObjectSerializer;

/**
 * @implements \ArrayAccess<string, mixed>
 */
class WebhookEventRecurringBatchCard implements ModelInterface, \ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;
    /**
     * The original name of the model.
     */
    protected static string $openAPIModelName = 'WebhookEvent.RecurringBatch.Card';
    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var array<string, string>
     */
    protected static array $openAPITypes = ['shopId' => 'string', 'succeeded' => 'string', 'failed' => 'string', 'total' => 'string', 'processDate' => 'string', 'chargeDate' => 'string', 'payType' => '\OpenAPI\Fincode\Model\SubscriptionPayType', 'event' => '\OpenAPI\Fincode\Model\FincodeEvent'];
    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var array<string, string|null>
     */
    protected static array $openAPIFormats = ['shopId' => null, 'succeeded' => null, 'failed' => null, 'total' => null, 'processDate' => null, 'chargeDate' => null, 'payType' => null, 'event' => null];
    /**
     * Array of nullable properties. Used for (de)serialization.
     *
     * @var array<string, bool>
     */
    protected static array $openAPINullables = ['shopId' => false, 'succeeded' => false, 'failed' => false, 'total' => false, 'processDate' => true, 'chargeDate' => false, 'payType' => false, 'event' => false];
    /**
     * If a nullable field gets set to null, insert it here.
     *
     * @var array<string, bool>
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return array<string, string|null>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties.
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null.
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null.
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable.
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }
    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = ['shopId' => 'shop_id', 'succeeded' => 'succeeded', 'failed' => 'failed', 'total' => 'total', 'processDate' => 'process_date', 'chargeDate' => 'charge_date', 'payType' => 'pay_type', 'event' => 'event'];
    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var array<string, string>
     */
    protected static array $setters = ['shopId' => 'setShopId', 'succeeded' => 'setSucceeded', 'failed' => 'setFailed', 'total' => 'setTotal', 'processDate' => 'setProcessDate', 'chargeDate' => 'setChargeDate', 'payType' => 'setPayType', 'event' => 'setEvent'];
    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var array<string, string>
     */
    protected static array $getters = ['shopId' => 'getShopId', 'succeeded' => 'getSucceeded', 'failed' => 'getFailed', 'total' => 'getTotal', 'processDate' => 'getProcessDate', 'chargeDate' => 'getChargeDate', 'payType' => 'getPayType', 'event' => 'getEvent'];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }
    /**
     * Associative array for storing property values.
     *
     * @phpstan-var array<string, mixed>
     *
     * @psalm-var array<string, mixed>
     */
    protected array $container = [];

    /**
     * Constructor.
     *
     * @param array<string, mixed> $data Associated array of property values
     *                                   initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('shopId', $data ?? [], null);
        $this->setIfExists('succeeded', $data ?? [], null);
        $this->setIfExists('failed', $data ?? [], null);
        $this->setIfExists('total', $data ?? [], null);
        $this->setIfExists('processDate', $data ?? [], null);
        $this->setIfExists('chargeDate', $data ?? [], null);
        $this->setIfExists('payType', $data ?? [], null);
        $this->setIfExists('event', $data ?? [], null);
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array.
     *
     * @param array<string, mixed> $fields
     */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }
        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return list<string> invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];
        if (!is_null($this->container['shopId']) && mb_strlen($this->container['shopId']) > 13) {
            $invalidProperties[] = "invalid value for 'shopId', the character length must be smaller than or equal to 13.";
        }
        if (!is_null($this->container['shopId']) && mb_strlen($this->container['shopId']) < 13) {
            $invalidProperties[] = "invalid value for 'shopId', the character length must be bigger than or equal to 13.";
        }
        if (!is_null($this->container['succeeded']) && mb_strlen($this->container['succeeded']) > 10) {
            $invalidProperties[] = "invalid value for 'succeeded', the character length must be smaller than or equal to 10.";
        }
        if (!is_null($this->container['failed']) && mb_strlen($this->container['failed']) > 10) {
            $invalidProperties[] = "invalid value for 'failed', the character length must be smaller than or equal to 10.";
        }
        if (!is_null($this->container['total']) && mb_strlen($this->container['total']) > 10) {
            $invalidProperties[] = "invalid value for 'total', the character length must be smaller than or equal to 10.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return 0 === count($this->listInvalidProperties());
    }

    /**
     * Gets shopId.
     *
     * @return string|null
     */
    public function getShopId(): mixed
    {
        return $this->container['shopId'];
    }

    /**
     * Sets shopId.
     *
     * @param string $shopId ショップID
     */
    public function setShopId(mixed $shopId): static
    {
        if (is_null($shopId)) {
            throw new \InvalidArgumentException('non-nullable shopId cannot be null');
        }
        if (mb_strlen($shopId) > 13) {
            throw new \InvalidArgumentException('invalid length for $shopId when calling WebhookEventRecurringBatchCard., must be smaller than or equal to 13.');
        }
        if (mb_strlen($shopId) < 13) {
            throw new \InvalidArgumentException('invalid length for $shopId when calling WebhookEventRecurringBatchCard., must be bigger than or equal to 13.');
        }
        $this->container['shopId'] = $shopId;

        return $this;
    }

    /**
     * Gets succeeded.
     *
     * @return string|null
     */
    public function getSucceeded(): mixed
    {
        return $this->container['succeeded'];
    }

    /**
     * Sets succeeded.
     *
     * @param string $succeeded 成功件数\\ \\ 今回のサブスクリプション課金において成功した決済の件数です
     */
    public function setSucceeded(mixed $succeeded): static
    {
        if (is_null($succeeded)) {
            throw new \InvalidArgumentException('non-nullable succeeded cannot be null');
        }
        if (mb_strlen($succeeded) > 10) {
            throw new \InvalidArgumentException('invalid length for $succeeded when calling WebhookEventRecurringBatchCard., must be smaller than or equal to 10.');
        }
        $this->container['succeeded'] = $succeeded;

        return $this;
    }

    /**
     * Gets failed.
     *
     * @return string|null
     */
    public function getFailed(): mixed
    {
        return $this->container['failed'];
    }

    /**
     * Sets failed.
     *
     * @param string $failed 失敗件数\\ \\ 今回のサブスクリプション課金において失敗した決済の件数です
     */
    public function setFailed(mixed $failed): static
    {
        if (is_null($failed)) {
            throw new \InvalidArgumentException('non-nullable failed cannot be null');
        }
        if (mb_strlen($failed) > 10) {
            throw new \InvalidArgumentException('invalid length for $failed when calling WebhookEventRecurringBatchCard., must be smaller than or equal to 10.');
        }
        $this->container['failed'] = $failed;

        return $this;
    }

    /**
     * Gets total.
     *
     * @return string|null
     */
    public function getTotal(): mixed
    {
        return $this->container['total'];
    }

    /**
     * Sets total.
     *
     * @param string $total 合計件数\\ \\ 今回のサブスクリプション課金において発生した決済の合計件数です
     */
    public function setTotal(mixed $total): static
    {
        if (is_null($total)) {
            throw new \InvalidArgumentException('non-nullable total cannot be null');
        }
        if (mb_strlen($total) > 10) {
            throw new \InvalidArgumentException('invalid length for $total when calling WebhookEventRecurringBatchCard., must be smaller than or equal to 10.');
        }
        $this->container['total'] = $total;

        return $this;
    }

    /**
     * Gets processDate.
     *
     * @return string|null
     */
    public function getProcessDate(): mixed
    {
        return $this->container['processDate'];
    }

    /**
     * Sets processDate.
     *
     * @param string|null $processDate 決済 処理日時\\ 決済の各種処理（決済実行、キャンセルなど）が行われた日時です
     */
    public function setProcessDate(mixed $processDate): static
    {
        if (is_null($processDate)) {
            $this->openAPINullablesSetToNull[] = 'processDate';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('processDate', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['processDate'] = $processDate;

        return $this;
    }

    /**
     * Gets chargeDate.
     *
     * @return string|null
     */
    public function getChargeDate(): mixed
    {
        return $this->container['chargeDate'];
    }

    /**
     * Sets chargeDate.
     *
     * @param string $chargeDate 課金日\\ 今回のサブスクリプションの課金日です。\\ \\ 形式：`yyyy/MM/dd`
     */
    public function setChargeDate(mixed $chargeDate): static
    {
        if (is_null($chargeDate)) {
            throw new \InvalidArgumentException('non-nullable chargeDate cannot be null');
        }
        $this->container['chargeDate'] = $chargeDate;

        return $this;
    }

    /**
     * Gets payType.
     *
     * @return SubscriptionPayType|null
     */
    public function getPayType(): mixed
    {
        return $this->container['payType'];
    }

    /**
     * Sets payType.
     *
     * @param SubscriptionPayType $payType payType
     */
    public function setPayType(mixed $payType): static
    {
        if (is_null($payType)) {
            throw new \InvalidArgumentException('non-nullable payType cannot be null');
        }
        $this->container['payType'] = $payType;

        return $this;
    }

    /**
     * Gets event.
     *
     * @return FincodeEvent|null
     */
    public function getEvent(): mixed
    {
        return $this->container['event'];
    }

    /**
     * Sets event.
     *
     * @param FincodeEvent $event event
     */
    public function setEvent(mixed $event): static
    {
        if (is_null($event)) {
            throw new \InvalidArgumentException('non-nullable event cannot be null');
        }
        $this->container['event'] = $event;

        return $this;
    }

    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @see https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    public function jsonSerialize(): mixed
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object.
     */
    public function __toString(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
    }

    /**
     * Gets a header-safe presentation of the object.
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
