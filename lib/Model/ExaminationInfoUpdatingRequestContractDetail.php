<?php

declare(strict_types=1);
/**
 * fincode API.
 *
 * fincodeのAPIリファレンスです。\\ fincodeは決済情報のほか様々なリソースを管理できるため、リソース指向なREST APIをベースとしたインターフェイス設計のもとでAPIを提供しています。\\ APIの呼び出しにはAPIキーによる認証が必要であり、リクエストの際に`Authorization`ヘッダーに有効なAPIキーをセットすることで認証できます。
 *
 * The version of the OpenAPI document: 1.2.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Fincode\Model;

use OpenAPI\Fincode\ObjectSerializer;

/**
 * 契約情報\\ \\ fincodeに登録するショップ運営事業者の契約情報の詳細.
 *
 * @implements \ArrayAccess<string, mixed>
 */
class ExaminationInfoUpdatingRequestContractDetail implements ModelInterface, \ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;
    /**
     * The original name of the model.
     */
    protected static string $openAPIModelName = 'ExaminationInfo_Updating_Request_contract_detail';
    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var array<string, string>
     */
    protected static array $openAPITypes = ['corporate' => 'bool', 'corporateNumber' => 'string', 'corporateName' => 'string', 'corporateNameKana' => 'string', 'hp' => 'string', 'capital' => 'float', 'establishedAt' => 'string', 'yearlySales' => 'float', 'businessDetails' => 'string', 'companyPostalCode' => 'string', 'companyPrefecture' => 'string', 'companyPrefectureKana' => 'string', 'companyAddressMunicipality' => 'string', 'companyAddressMunicipalityKana' => 'string', 'companyAddressSection' => 'string', 'companyAddressSectionKana' => 'string', 'companyAddressChrome' => 'string', 'companyAddressChromeKana' => 'string', 'companyAddressBuildingName' => 'string', 'companyAddressBuildingNameKana' => 'string', 'companyTel' => 'string', 'representativeLastName' => 'string', 'representativeLastNameKana' => 'string', 'representativeFirstName' => 'string', 'representativeFirstNameKana' => 'string', 'representativeBirthday' => 'string', 'representativeGender' => '\OpenAPI\Fincode\Model\RepresentativeGender', 'representativePostalCode' => 'string', 'representativePrefecture' => 'string', 'representativePrefectureKana' => 'string', 'representativeAddressMunicipality' => 'string', 'representativeAddressMunicipalityKana' => 'string', 'representativeAddressSection' => 'string', 'representativeAddressSectionKana' => 'string', 'representativeAddressChrome' => 'string', 'representativeAddressChromeKana' => 'string', 'representativeAddressBuildingName' => 'string', 'representativeAddressBuildingNameKana' => 'string', 'representativeTel' => 'string', 'staff1LastName' => 'string', 'staff1LastNameKana' => 'string', 'staff1FirstName' => 'string', 'staff1FirstNameKana' => 'string', 'staff1CompanyName' => 'string', 'staff1Belongs' => 'string', 'staff1Tel' => 'string', 'staff1Mail' => 'string', 'staff2LastName' => 'string', 'staff2LastNameKana' => 'string', 'staff2FirstName' => 'string', 'staff2FirstNameKana' => 'string', 'staff2CompanyName' => 'string', 'staff2Belongs' => 'string', 'staff2Tel' => 'string', 'staff2Mail' => 'string', 'usedOnApp' => 'bool', 'usedOnWeb' => 'bool', 'usedOnOther' => 'bool', 'siteExisting' => 'float', 'url' => 'string', 'siteCredential' => 'string', 'shopName' => 'string', 'shopNameKana' => 'string', 'shopNameEn' => 'string', 'shopDistributorName' => 'string', 'shopSalesManagerName' => 'string', 'shopServiceName' => 'string', 'shopSupportTel' => 'string', 'shopSupportMail' => 'string', 'shopPostCode' => 'string', 'shopPrefecture' => 'string', 'shopAddressMunicipality' => 'string', 'shopAddressSection' => 'string', 'shopAddressChrome' => 'string', 'shopAddressBuildingName' => 'string', 'shopAddressBuildingNameKana' => 'string', 'shopPaymentMethod' => 'string', 'shopChargeDescription' => 'string', 'shopProductDelieveryTime' => 'string', 'shopReturnGoodsHandingConditions' => 'string', 'platformName' => 'string', 'supportTel' => 'string', 'supportMail' => 'string', 'providesProduct' => 'bool', 'providesService' => 'bool', 'providesDigitalContent' => 'bool', 'prepaid' => 'bool', 'unitPrice' => 'float', 'contentCategoryMasterId' => 'float', 'contentDescription' => 'string', 'expirationDateOfPoint' => 'string', 'usageOfPoint' => 'string', 'lostTrial' => 'bool', 'dealsInsecureContent' => 'bool', 'dealsLongApplyContent' => 'bool', 'payBy' => '\OpenAPI\Fincode\Model\ShopPaymentMethod'];
    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var array<string, string|null>
     */
    protected static array $openAPIFormats = ['corporate' => null, 'corporateNumber' => null, 'corporateName' => null, 'corporateNameKana' => null, 'hp' => null, 'capital' => null, 'establishedAt' => null, 'yearlySales' => null, 'businessDetails' => null, 'companyPostalCode' => null, 'companyPrefecture' => null, 'companyPrefectureKana' => null, 'companyAddressMunicipality' => null, 'companyAddressMunicipalityKana' => null, 'companyAddressSection' => null, 'companyAddressSectionKana' => null, 'companyAddressChrome' => null, 'companyAddressChromeKana' => null, 'companyAddressBuildingName' => null, 'companyAddressBuildingNameKana' => null, 'companyTel' => null, 'representativeLastName' => null, 'representativeLastNameKana' => null, 'representativeFirstName' => null, 'representativeFirstNameKana' => null, 'representativeBirthday' => null, 'representativeGender' => null, 'representativePostalCode' => null, 'representativePrefecture' => null, 'representativePrefectureKana' => null, 'representativeAddressMunicipality' => null, 'representativeAddressMunicipalityKana' => null, 'representativeAddressSection' => null, 'representativeAddressSectionKana' => null, 'representativeAddressChrome' => null, 'representativeAddressChromeKana' => null, 'representativeAddressBuildingName' => null, 'representativeAddressBuildingNameKana' => null, 'representativeTel' => null, 'staff1LastName' => null, 'staff1LastNameKana' => null, 'staff1FirstName' => null, 'staff1FirstNameKana' => null, 'staff1CompanyName' => null, 'staff1Belongs' => null, 'staff1Tel' => null, 'staff1Mail' => 'email', 'staff2LastName' => null, 'staff2LastNameKana' => null, 'staff2FirstName' => null, 'staff2FirstNameKana' => null, 'staff2CompanyName' => null, 'staff2Belongs' => null, 'staff2Tel' => null, 'staff2Mail' => 'email', 'usedOnApp' => null, 'usedOnWeb' => null, 'usedOnOther' => null, 'siteExisting' => null, 'url' => null, 'siteCredential' => null, 'shopName' => null, 'shopNameKana' => null, 'shopNameEn' => null, 'shopDistributorName' => null, 'shopSalesManagerName' => null, 'shopServiceName' => null, 'shopSupportTel' => null, 'shopSupportMail' => null, 'shopPostCode' => null, 'shopPrefecture' => null, 'shopAddressMunicipality' => null, 'shopAddressSection' => null, 'shopAddressChrome' => null, 'shopAddressBuildingName' => null, 'shopAddressBuildingNameKana' => null, 'shopPaymentMethod' => null, 'shopChargeDescription' => null, 'shopProductDelieveryTime' => null, 'shopReturnGoodsHandingConditions' => null, 'platformName' => null, 'supportTel' => null, 'supportMail' => null, 'providesProduct' => null, 'providesService' => null, 'providesDigitalContent' => null, 'prepaid' => null, 'unitPrice' => null, 'contentCategoryMasterId' => null, 'contentDescription' => null, 'expirationDateOfPoint' => null, 'usageOfPoint' => null, 'lostTrial' => null, 'dealsInsecureContent' => null, 'dealsLongApplyContent' => null, 'payBy' => null];
    /**
     * Array of nullable properties. Used for (de)serialization.
     *
     * @var array<string, bool>
     */
    protected static array $openAPINullables = ['corporate' => true, 'corporateNumber' => true, 'corporateName' => true, 'corporateNameKana' => true, 'hp' => true, 'capital' => true, 'establishedAt' => true, 'yearlySales' => true, 'businessDetails' => true, 'companyPostalCode' => true, 'companyPrefecture' => true, 'companyPrefectureKana' => true, 'companyAddressMunicipality' => true, 'companyAddressMunicipalityKana' => true, 'companyAddressSection' => true, 'companyAddressSectionKana' => true, 'companyAddressChrome' => true, 'companyAddressChromeKana' => true, 'companyAddressBuildingName' => true, 'companyAddressBuildingNameKana' => true, 'companyTel' => true, 'representativeLastName' => true, 'representativeLastNameKana' => true, 'representativeFirstName' => true, 'representativeFirstNameKana' => true, 'representativeBirthday' => true, 'representativeGender' => true, 'representativePostalCode' => true, 'representativePrefecture' => true, 'representativePrefectureKana' => true, 'representativeAddressMunicipality' => true, 'representativeAddressMunicipalityKana' => true, 'representativeAddressSection' => true, 'representativeAddressSectionKana' => true, 'representativeAddressChrome' => true, 'representativeAddressChromeKana' => true, 'representativeAddressBuildingName' => true, 'representativeAddressBuildingNameKana' => true, 'representativeTel' => true, 'staff1LastName' => true, 'staff1LastNameKana' => true, 'staff1FirstName' => true, 'staff1FirstNameKana' => true, 'staff1CompanyName' => true, 'staff1Belongs' => true, 'staff1Tel' => true, 'staff1Mail' => true, 'staff2LastName' => true, 'staff2LastNameKana' => true, 'staff2FirstName' => true, 'staff2FirstNameKana' => true, 'staff2CompanyName' => true, 'staff2Belongs' => true, 'staff2Tel' => true, 'staff2Mail' => true, 'usedOnApp' => true, 'usedOnWeb' => true, 'usedOnOther' => true, 'siteExisting' => false, 'url' => true, 'siteCredential' => true, 'shopName' => true, 'shopNameKana' => true, 'shopNameEn' => true, 'shopDistributorName' => true, 'shopSalesManagerName' => true, 'shopServiceName' => true, 'shopSupportTel' => true, 'shopSupportMail' => true, 'shopPostCode' => true, 'shopPrefecture' => true, 'shopAddressMunicipality' => true, 'shopAddressSection' => true, 'shopAddressChrome' => true, 'shopAddressBuildingName' => true, 'shopAddressBuildingNameKana' => true, 'shopPaymentMethod' => true, 'shopChargeDescription' => true, 'shopProductDelieveryTime' => true, 'shopReturnGoodsHandingConditions' => true, 'platformName' => true, 'supportTel' => true, 'supportMail' => true, 'providesProduct' => true, 'providesService' => true, 'providesDigitalContent' => true, 'prepaid' => true, 'unitPrice' => true, 'contentCategoryMasterId' => true, 'contentDescription' => true, 'expirationDateOfPoint' => true, 'usageOfPoint' => true, 'lostTrial' => true, 'dealsInsecureContent' => true, 'dealsLongApplyContent' => true, 'payBy' => false];
    /**
     * If a nullable field gets set to null, insert it here.
     *
     * @var array<string, bool>
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return array<string, string|null>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties.
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null.
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null.
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable.
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }
    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = ['corporate' => 'corporate', 'corporateNumber' => 'corporate_number', 'corporateName' => 'corporate_name', 'corporateNameKana' => 'corporate_name_kana', 'hp' => 'hp', 'capital' => 'capital', 'establishedAt' => 'established_at', 'yearlySales' => 'yearly_sales', 'businessDetails' => 'business_details', 'companyPostalCode' => 'company_postal_code', 'companyPrefecture' => 'company_prefecture', 'companyPrefectureKana' => 'company_prefecture_kana', 'companyAddressMunicipality' => 'company_address_municipality', 'companyAddressMunicipalityKana' => 'company_address_municipality_kana', 'companyAddressSection' => 'company_address_section', 'companyAddressSectionKana' => 'company_address_section_kana', 'companyAddressChrome' => 'company_address_chrome', 'companyAddressChromeKana' => 'company_address_chrome_kana', 'companyAddressBuildingName' => 'company_address_building_name', 'companyAddressBuildingNameKana' => 'company_address_building_name_kana', 'companyTel' => 'company_tel', 'representativeLastName' => 'representative_last_name', 'representativeLastNameKana' => 'representative_last_name_kana', 'representativeFirstName' => 'representative_first_name', 'representativeFirstNameKana' => 'representative_first_name_kana', 'representativeBirthday' => 'representative_birthday', 'representativeGender' => 'representative_gender', 'representativePostalCode' => 'representative_postal_code', 'representativePrefecture' => 'representative_prefecture', 'representativePrefectureKana' => 'representative_prefecture_kana', 'representativeAddressMunicipality' => 'representative_address_municipality', 'representativeAddressMunicipalityKana' => 'representative_address_municipality_kana', 'representativeAddressSection' => 'representative_address_section', 'representativeAddressSectionKana' => 'representative_address_section_kana', 'representativeAddressChrome' => 'representative_address_chrome', 'representativeAddressChromeKana' => 'representative_address_chrome_kana', 'representativeAddressBuildingName' => 'representative_address_building_name', 'representativeAddressBuildingNameKana' => 'representative_address_building_name_kana', 'representativeTel' => 'representative_tel', 'staff1LastName' => 'staff1_last_name', 'staff1LastNameKana' => 'staff1_last_name_kana', 'staff1FirstName' => 'staff1_first_name', 'staff1FirstNameKana' => 'staff1_first_name_kana', 'staff1CompanyName' => 'staff1_company_name', 'staff1Belongs' => 'staff1_belongs', 'staff1Tel' => 'staff1_tel', 'staff1Mail' => 'staff1_mail', 'staff2LastName' => 'staff2_last_name', 'staff2LastNameKana' => 'staff2_last_name_kana', 'staff2FirstName' => 'staff2_first_name', 'staff2FirstNameKana' => 'staff2_first_name_kana', 'staff2CompanyName' => 'staff2_company_name', 'staff2Belongs' => 'staff2_belongs', 'staff2Tel' => 'staff2_tel', 'staff2Mail' => 'staff2_mail', 'usedOnApp' => 'used_on_app', 'usedOnWeb' => 'used_on_web', 'usedOnOther' => 'used_on_other', 'siteExisting' => 'site_existing', 'url' => 'url', 'siteCredential' => 'site_credential', 'shopName' => 'shop_name', 'shopNameKana' => 'shop_name_kana', 'shopNameEn' => 'shop_name_en', 'shopDistributorName' => 'shop_distributor_name', 'shopSalesManagerName' => 'shop_sales_manager_name', 'shopServiceName' => 'shop_service_name', 'shopSupportTel' => 'shop_support_tel', 'shopSupportMail' => 'shop_support_mail', 'shopPostCode' => 'shop_post_code', 'shopPrefecture' => 'shop_prefecture', 'shopAddressMunicipality' => 'shop_address_municipality', 'shopAddressSection' => 'shop_address_section', 'shopAddressChrome' => 'shop_address_chrome', 'shopAddressBuildingName' => 'shop_address_building_name', 'shopAddressBuildingNameKana' => 'shop_address_building_name_kana', 'shopPaymentMethod' => 'shop_payment_method', 'shopChargeDescription' => 'shop_charge_description', 'shopProductDelieveryTime' => 'shop_product_delievery_time', 'shopReturnGoodsHandingConditions' => 'shop_return_goods_handing_conditions', 'platformName' => 'platform_name', 'supportTel' => 'support_tel', 'supportMail' => 'support_mail', 'providesProduct' => 'provides_product', 'providesService' => 'provides_service', 'providesDigitalContent' => 'provides_digital_content', 'prepaid' => 'prepaid', 'unitPrice' => 'unit_price', 'contentCategoryMasterId' => 'content_category_master_id', 'contentDescription' => 'content_description', 'expirationDateOfPoint' => 'expiration_date_of_point', 'usageOfPoint' => 'usage_of_point', 'lostTrial' => 'lost_trial', 'dealsInsecureContent' => 'deals_insecure_content', 'dealsLongApplyContent' => 'deals_long_apply_content', 'payBy' => 'pay_by'];
    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var array<string, string>
     */
    protected static array $setters = ['corporate' => 'setCorporate', 'corporateNumber' => 'setCorporateNumber', 'corporateName' => 'setCorporateName', 'corporateNameKana' => 'setCorporateNameKana', 'hp' => 'setHp', 'capital' => 'setCapital', 'establishedAt' => 'setEstablishedAt', 'yearlySales' => 'setYearlySales', 'businessDetails' => 'setBusinessDetails', 'companyPostalCode' => 'setCompanyPostalCode', 'companyPrefecture' => 'setCompanyPrefecture', 'companyPrefectureKana' => 'setCompanyPrefectureKana', 'companyAddressMunicipality' => 'setCompanyAddressMunicipality', 'companyAddressMunicipalityKana' => 'setCompanyAddressMunicipalityKana', 'companyAddressSection' => 'setCompanyAddressSection', 'companyAddressSectionKana' => 'setCompanyAddressSectionKana', 'companyAddressChrome' => 'setCompanyAddressChrome', 'companyAddressChromeKana' => 'setCompanyAddressChromeKana', 'companyAddressBuildingName' => 'setCompanyAddressBuildingName', 'companyAddressBuildingNameKana' => 'setCompanyAddressBuildingNameKana', 'companyTel' => 'setCompanyTel', 'representativeLastName' => 'setRepresentativeLastName', 'representativeLastNameKana' => 'setRepresentativeLastNameKana', 'representativeFirstName' => 'setRepresentativeFirstName', 'representativeFirstNameKana' => 'setRepresentativeFirstNameKana', 'representativeBirthday' => 'setRepresentativeBirthday', 'representativeGender' => 'setRepresentativeGender', 'representativePostalCode' => 'setRepresentativePostalCode', 'representativePrefecture' => 'setRepresentativePrefecture', 'representativePrefectureKana' => 'setRepresentativePrefectureKana', 'representativeAddressMunicipality' => 'setRepresentativeAddressMunicipality', 'representativeAddressMunicipalityKana' => 'setRepresentativeAddressMunicipalityKana', 'representativeAddressSection' => 'setRepresentativeAddressSection', 'representativeAddressSectionKana' => 'setRepresentativeAddressSectionKana', 'representativeAddressChrome' => 'setRepresentativeAddressChrome', 'representativeAddressChromeKana' => 'setRepresentativeAddressChromeKana', 'representativeAddressBuildingName' => 'setRepresentativeAddressBuildingName', 'representativeAddressBuildingNameKana' => 'setRepresentativeAddressBuildingNameKana', 'representativeTel' => 'setRepresentativeTel', 'staff1LastName' => 'setStaff1LastName', 'staff1LastNameKana' => 'setStaff1LastNameKana', 'staff1FirstName' => 'setStaff1FirstName', 'staff1FirstNameKana' => 'setStaff1FirstNameKana', 'staff1CompanyName' => 'setStaff1CompanyName', 'staff1Belongs' => 'setStaff1Belongs', 'staff1Tel' => 'setStaff1Tel', 'staff1Mail' => 'setStaff1Mail', 'staff2LastName' => 'setStaff2LastName', 'staff2LastNameKana' => 'setStaff2LastNameKana', 'staff2FirstName' => 'setStaff2FirstName', 'staff2FirstNameKana' => 'setStaff2FirstNameKana', 'staff2CompanyName' => 'setStaff2CompanyName', 'staff2Belongs' => 'setStaff2Belongs', 'staff2Tel' => 'setStaff2Tel', 'staff2Mail' => 'setStaff2Mail', 'usedOnApp' => 'setUsedOnApp', 'usedOnWeb' => 'setUsedOnWeb', 'usedOnOther' => 'setUsedOnOther', 'siteExisting' => 'setSiteExisting', 'url' => 'setUrl', 'siteCredential' => 'setSiteCredential', 'shopName' => 'setShopName', 'shopNameKana' => 'setShopNameKana', 'shopNameEn' => 'setShopNameEn', 'shopDistributorName' => 'setShopDistributorName', 'shopSalesManagerName' => 'setShopSalesManagerName', 'shopServiceName' => 'setShopServiceName', 'shopSupportTel' => 'setShopSupportTel', 'shopSupportMail' => 'setShopSupportMail', 'shopPostCode' => 'setShopPostCode', 'shopPrefecture' => 'setShopPrefecture', 'shopAddressMunicipality' => 'setShopAddressMunicipality', 'shopAddressSection' => 'setShopAddressSection', 'shopAddressChrome' => 'setShopAddressChrome', 'shopAddressBuildingName' => 'setShopAddressBuildingName', 'shopAddressBuildingNameKana' => 'setShopAddressBuildingNameKana', 'shopPaymentMethod' => 'setShopPaymentMethod', 'shopChargeDescription' => 'setShopChargeDescription', 'shopProductDelieveryTime' => 'setShopProductDelieveryTime', 'shopReturnGoodsHandingConditions' => 'setShopReturnGoodsHandingConditions', 'platformName' => 'setPlatformName', 'supportTel' => 'setSupportTel', 'supportMail' => 'setSupportMail', 'providesProduct' => 'setProvidesProduct', 'providesService' => 'setProvidesService', 'providesDigitalContent' => 'setProvidesDigitalContent', 'prepaid' => 'setPrepaid', 'unitPrice' => 'setUnitPrice', 'contentCategoryMasterId' => 'setContentCategoryMasterId', 'contentDescription' => 'setContentDescription', 'expirationDateOfPoint' => 'setExpirationDateOfPoint', 'usageOfPoint' => 'setUsageOfPoint', 'lostTrial' => 'setLostTrial', 'dealsInsecureContent' => 'setDealsInsecureContent', 'dealsLongApplyContent' => 'setDealsLongApplyContent', 'payBy' => 'setPayBy'];
    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var array<string, string>
     */
    protected static array $getters = ['corporate' => 'getCorporate', 'corporateNumber' => 'getCorporateNumber', 'corporateName' => 'getCorporateName', 'corporateNameKana' => 'getCorporateNameKana', 'hp' => 'getHp', 'capital' => 'getCapital', 'establishedAt' => 'getEstablishedAt', 'yearlySales' => 'getYearlySales', 'businessDetails' => 'getBusinessDetails', 'companyPostalCode' => 'getCompanyPostalCode', 'companyPrefecture' => 'getCompanyPrefecture', 'companyPrefectureKana' => 'getCompanyPrefectureKana', 'companyAddressMunicipality' => 'getCompanyAddressMunicipality', 'companyAddressMunicipalityKana' => 'getCompanyAddressMunicipalityKana', 'companyAddressSection' => 'getCompanyAddressSection', 'companyAddressSectionKana' => 'getCompanyAddressSectionKana', 'companyAddressChrome' => 'getCompanyAddressChrome', 'companyAddressChromeKana' => 'getCompanyAddressChromeKana', 'companyAddressBuildingName' => 'getCompanyAddressBuildingName', 'companyAddressBuildingNameKana' => 'getCompanyAddressBuildingNameKana', 'companyTel' => 'getCompanyTel', 'representativeLastName' => 'getRepresentativeLastName', 'representativeLastNameKana' => 'getRepresentativeLastNameKana', 'representativeFirstName' => 'getRepresentativeFirstName', 'representativeFirstNameKana' => 'getRepresentativeFirstNameKana', 'representativeBirthday' => 'getRepresentativeBirthday', 'representativeGender' => 'getRepresentativeGender', 'representativePostalCode' => 'getRepresentativePostalCode', 'representativePrefecture' => 'getRepresentativePrefecture', 'representativePrefectureKana' => 'getRepresentativePrefectureKana', 'representativeAddressMunicipality' => 'getRepresentativeAddressMunicipality', 'representativeAddressMunicipalityKana' => 'getRepresentativeAddressMunicipalityKana', 'representativeAddressSection' => 'getRepresentativeAddressSection', 'representativeAddressSectionKana' => 'getRepresentativeAddressSectionKana', 'representativeAddressChrome' => 'getRepresentativeAddressChrome', 'representativeAddressChromeKana' => 'getRepresentativeAddressChromeKana', 'representativeAddressBuildingName' => 'getRepresentativeAddressBuildingName', 'representativeAddressBuildingNameKana' => 'getRepresentativeAddressBuildingNameKana', 'representativeTel' => 'getRepresentativeTel', 'staff1LastName' => 'getStaff1LastName', 'staff1LastNameKana' => 'getStaff1LastNameKana', 'staff1FirstName' => 'getStaff1FirstName', 'staff1FirstNameKana' => 'getStaff1FirstNameKana', 'staff1CompanyName' => 'getStaff1CompanyName', 'staff1Belongs' => 'getStaff1Belongs', 'staff1Tel' => 'getStaff1Tel', 'staff1Mail' => 'getStaff1Mail', 'staff2LastName' => 'getStaff2LastName', 'staff2LastNameKana' => 'getStaff2LastNameKana', 'staff2FirstName' => 'getStaff2FirstName', 'staff2FirstNameKana' => 'getStaff2FirstNameKana', 'staff2CompanyName' => 'getStaff2CompanyName', 'staff2Belongs' => 'getStaff2Belongs', 'staff2Tel' => 'getStaff2Tel', 'staff2Mail' => 'getStaff2Mail', 'usedOnApp' => 'getUsedOnApp', 'usedOnWeb' => 'getUsedOnWeb', 'usedOnOther' => 'getUsedOnOther', 'siteExisting' => 'getSiteExisting', 'url' => 'getUrl', 'siteCredential' => 'getSiteCredential', 'shopName' => 'getShopName', 'shopNameKana' => 'getShopNameKana', 'shopNameEn' => 'getShopNameEn', 'shopDistributorName' => 'getShopDistributorName', 'shopSalesManagerName' => 'getShopSalesManagerName', 'shopServiceName' => 'getShopServiceName', 'shopSupportTel' => 'getShopSupportTel', 'shopSupportMail' => 'getShopSupportMail', 'shopPostCode' => 'getShopPostCode', 'shopPrefecture' => 'getShopPrefecture', 'shopAddressMunicipality' => 'getShopAddressMunicipality', 'shopAddressSection' => 'getShopAddressSection', 'shopAddressChrome' => 'getShopAddressChrome', 'shopAddressBuildingName' => 'getShopAddressBuildingName', 'shopAddressBuildingNameKana' => 'getShopAddressBuildingNameKana', 'shopPaymentMethod' => 'getShopPaymentMethod', 'shopChargeDescription' => 'getShopChargeDescription', 'shopProductDelieveryTime' => 'getShopProductDelieveryTime', 'shopReturnGoodsHandingConditions' => 'getShopReturnGoodsHandingConditions', 'platformName' => 'getPlatformName', 'supportTel' => 'getSupportTel', 'supportMail' => 'getSupportMail', 'providesProduct' => 'getProvidesProduct', 'providesService' => 'getProvidesService', 'providesDigitalContent' => 'getProvidesDigitalContent', 'prepaid' => 'getPrepaid', 'unitPrice' => 'getUnitPrice', 'contentCategoryMasterId' => 'getContentCategoryMasterId', 'contentDescription' => 'getContentDescription', 'expirationDateOfPoint' => 'getExpirationDateOfPoint', 'usageOfPoint' => 'getUsageOfPoint', 'lostTrial' => 'getLostTrial', 'dealsInsecureContent' => 'getDealsInsecureContent', 'dealsLongApplyContent' => 'getDealsLongApplyContent', 'payBy' => 'getPayBy'];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }
    public const SITE_EXISTING_NUMBER_0 = 0;
    public const SITE_EXISTING_NUMBER_1 = 1;
    public const SITE_EXISTING_NUMBER_2 = 2;

    /**
     * Gets allowable values of the enum.
     *
     * @return list<string>
     */
    public function getSiteExistingAllowableValues(): array
    {
        return [self::SITE_EXISTING_NUMBER_0, self::SITE_EXISTING_NUMBER_1, self::SITE_EXISTING_NUMBER_2];
    }
    /**
     * Associative array for storing property values.
     *
     * @phpstan-var array<string, mixed>
     *
     * @psalm-var array<string, mixed>
     */
    protected array $container = [];

    /**
     * Constructor.
     *
     * @param array<string, mixed> $data Associated array of property values
     *                                   initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('corporate', $data ?? [], null);
        $this->setIfExists('corporateNumber', $data ?? [], null);
        $this->setIfExists('corporateName', $data ?? [], null);
        $this->setIfExists('corporateNameKana', $data ?? [], null);
        $this->setIfExists('hp', $data ?? [], null);
        $this->setIfExists('capital', $data ?? [], null);
        $this->setIfExists('establishedAt', $data ?? [], null);
        $this->setIfExists('yearlySales', $data ?? [], null);
        $this->setIfExists('businessDetails', $data ?? [], null);
        $this->setIfExists('companyPostalCode', $data ?? [], null);
        $this->setIfExists('companyPrefecture', $data ?? [], null);
        $this->setIfExists('companyPrefectureKana', $data ?? [], null);
        $this->setIfExists('companyAddressMunicipality', $data ?? [], null);
        $this->setIfExists('companyAddressMunicipalityKana', $data ?? [], null);
        $this->setIfExists('companyAddressSection', $data ?? [], null);
        $this->setIfExists('companyAddressSectionKana', $data ?? [], null);
        $this->setIfExists('companyAddressChrome', $data ?? [], null);
        $this->setIfExists('companyAddressChromeKana', $data ?? [], null);
        $this->setIfExists('companyAddressBuildingName', $data ?? [], null);
        $this->setIfExists('companyAddressBuildingNameKana', $data ?? [], null);
        $this->setIfExists('companyTel', $data ?? [], null);
        $this->setIfExists('representativeLastName', $data ?? [], null);
        $this->setIfExists('representativeLastNameKana', $data ?? [], null);
        $this->setIfExists('representativeFirstName', $data ?? [], null);
        $this->setIfExists('representativeFirstNameKana', $data ?? [], null);
        $this->setIfExists('representativeBirthday', $data ?? [], null);
        $this->setIfExists('representativeGender', $data ?? [], null);
        $this->setIfExists('representativePostalCode', $data ?? [], null);
        $this->setIfExists('representativePrefecture', $data ?? [], null);
        $this->setIfExists('representativePrefectureKana', $data ?? [], null);
        $this->setIfExists('representativeAddressMunicipality', $data ?? [], null);
        $this->setIfExists('representativeAddressMunicipalityKana', $data ?? [], null);
        $this->setIfExists('representativeAddressSection', $data ?? [], null);
        $this->setIfExists('representativeAddressSectionKana', $data ?? [], null);
        $this->setIfExists('representativeAddressChrome', $data ?? [], null);
        $this->setIfExists('representativeAddressChromeKana', $data ?? [], null);
        $this->setIfExists('representativeAddressBuildingName', $data ?? [], null);
        $this->setIfExists('representativeAddressBuildingNameKana', $data ?? [], null);
        $this->setIfExists('representativeTel', $data ?? [], null);
        $this->setIfExists('staff1LastName', $data ?? [], null);
        $this->setIfExists('staff1LastNameKana', $data ?? [], null);
        $this->setIfExists('staff1FirstName', $data ?? [], null);
        $this->setIfExists('staff1FirstNameKana', $data ?? [], null);
        $this->setIfExists('staff1CompanyName', $data ?? [], null);
        $this->setIfExists('staff1Belongs', $data ?? [], null);
        $this->setIfExists('staff1Tel', $data ?? [], null);
        $this->setIfExists('staff1Mail', $data ?? [], null);
        $this->setIfExists('staff2LastName', $data ?? [], null);
        $this->setIfExists('staff2LastNameKana', $data ?? [], null);
        $this->setIfExists('staff2FirstName', $data ?? [], null);
        $this->setIfExists('staff2FirstNameKana', $data ?? [], null);
        $this->setIfExists('staff2CompanyName', $data ?? [], null);
        $this->setIfExists('staff2Belongs', $data ?? [], null);
        $this->setIfExists('staff2Tel', $data ?? [], null);
        $this->setIfExists('staff2Mail', $data ?? [], null);
        $this->setIfExists('usedOnApp', $data ?? [], null);
        $this->setIfExists('usedOnWeb', $data ?? [], null);
        $this->setIfExists('usedOnOther', $data ?? [], null);
        $this->setIfExists('siteExisting', $data ?? [], null);
        $this->setIfExists('url', $data ?? [], null);
        $this->setIfExists('siteCredential', $data ?? [], null);
        $this->setIfExists('shopName', $data ?? [], null);
        $this->setIfExists('shopNameKana', $data ?? [], null);
        $this->setIfExists('shopNameEn', $data ?? [], null);
        $this->setIfExists('shopDistributorName', $data ?? [], null);
        $this->setIfExists('shopSalesManagerName', $data ?? [], null);
        $this->setIfExists('shopServiceName', $data ?? [], null);
        $this->setIfExists('shopSupportTel', $data ?? [], null);
        $this->setIfExists('shopSupportMail', $data ?? [], null);
        $this->setIfExists('shopPostCode', $data ?? [], null);
        $this->setIfExists('shopPrefecture', $data ?? [], null);
        $this->setIfExists('shopAddressMunicipality', $data ?? [], null);
        $this->setIfExists('shopAddressSection', $data ?? [], null);
        $this->setIfExists('shopAddressChrome', $data ?? [], null);
        $this->setIfExists('shopAddressBuildingName', $data ?? [], null);
        $this->setIfExists('shopAddressBuildingNameKana', $data ?? [], null);
        $this->setIfExists('shopPaymentMethod', $data ?? [], null);
        $this->setIfExists('shopChargeDescription', $data ?? [], null);
        $this->setIfExists('shopProductDelieveryTime', $data ?? [], null);
        $this->setIfExists('shopReturnGoodsHandingConditions', $data ?? [], null);
        $this->setIfExists('platformName', $data ?? [], null);
        $this->setIfExists('supportTel', $data ?? [], null);
        $this->setIfExists('supportMail', $data ?? [], null);
        $this->setIfExists('providesProduct', $data ?? [], null);
        $this->setIfExists('providesService', $data ?? [], null);
        $this->setIfExists('providesDigitalContent', $data ?? [], null);
        $this->setIfExists('prepaid', $data ?? [], null);
        $this->setIfExists('unitPrice', $data ?? [], null);
        $this->setIfExists('contentCategoryMasterId', $data ?? [], null);
        $this->setIfExists('contentDescription', $data ?? [], null);
        $this->setIfExists('expirationDateOfPoint', $data ?? [], null);
        $this->setIfExists('usageOfPoint', $data ?? [], null);
        $this->setIfExists('lostTrial', $data ?? [], null);
        $this->setIfExists('dealsInsecureContent', $data ?? [], null);
        $this->setIfExists('dealsLongApplyContent', $data ?? [], null);
        $this->setIfExists('payBy', $data ?? [], null);
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array.
     *
     * @param array<string, mixed> $fields
     */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }
        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return list<string> invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];
        if (!is_null($this->container['corporateNumber']) && mb_strlen($this->container['corporateNumber']) > 13) {
            $invalidProperties[] = "invalid value for 'corporateNumber', the character length must be smaller than or equal to 13.";
        }
        if (!is_null($this->container['corporateNumber']) && mb_strlen($this->container['corporateNumber']) < 13) {
            $invalidProperties[] = "invalid value for 'corporateNumber', the character length must be bigger than or equal to 13.";
        }
        if (!is_null($this->container['corporateName']) && mb_strlen($this->container['corporateName']) > 150) {
            $invalidProperties[] = "invalid value for 'corporateName', the character length must be smaller than or equal to 150.";
        }
        if (!is_null($this->container['corporateName']) && mb_strlen($this->container['corporateName']) < 1) {
            $invalidProperties[] = "invalid value for 'corporateName', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['corporateNameKana']) && mb_strlen($this->container['corporateNameKana']) > 150) {
            $invalidProperties[] = "invalid value for 'corporateNameKana', the character length must be smaller than or equal to 150.";
        }
        if (!is_null($this->container['corporateNameKana']) && mb_strlen($this->container['corporateNameKana']) < 1) {
            $invalidProperties[] = "invalid value for 'corporateNameKana', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['hp']) && mb_strlen($this->container['hp']) > 300) {
            $invalidProperties[] = "invalid value for 'hp', the character length must be smaller than or equal to 300.";
        }
        if (!is_null($this->container['hp']) && mb_strlen($this->container['hp']) < 1) {
            $invalidProperties[] = "invalid value for 'hp', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['establishedAt']) && mb_strlen($this->container['establishedAt']) > 10) {
            $invalidProperties[] = "invalid value for 'establishedAt', the character length must be smaller than or equal to 10.";
        }
        if (!is_null($this->container['establishedAt']) && mb_strlen($this->container['establishedAt']) < 10) {
            $invalidProperties[] = "invalid value for 'establishedAt', the character length must be bigger than or equal to 10.";
        }
        if (!is_null($this->container['businessDetails']) && mb_strlen($this->container['businessDetails']) > 5000) {
            $invalidProperties[] = "invalid value for 'businessDetails', the character length must be smaller than or equal to 5000.";
        }
        if (!is_null($this->container['businessDetails']) && mb_strlen($this->container['businessDetails']) < 1) {
            $invalidProperties[] = "invalid value for 'businessDetails', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['companyPostalCode']) && mb_strlen($this->container['companyPostalCode']) > 8) {
            $invalidProperties[] = "invalid value for 'companyPostalCode', the character length must be smaller than or equal to 8.";
        }
        if (!is_null($this->container['companyPostalCode']) && mb_strlen($this->container['companyPostalCode']) < 8) {
            $invalidProperties[] = "invalid value for 'companyPostalCode', the character length must be bigger than or equal to 8.";
        }
        if (!is_null($this->container['companyPrefecture']) && mb_strlen($this->container['companyPrefecture']) > 4) {
            $invalidProperties[] = "invalid value for 'companyPrefecture', the character length must be smaller than or equal to 4.";
        }
        if (!is_null($this->container['companyPrefecture']) && mb_strlen($this->container['companyPrefecture']) < 3) {
            $invalidProperties[] = "invalid value for 'companyPrefecture', the character length must be bigger than or equal to 3.";
        }
        if (!is_null($this->container['companyPrefectureKana']) && mb_strlen($this->container['companyPrefectureKana']) > 6) {
            $invalidProperties[] = "invalid value for 'companyPrefectureKana', the character length must be smaller than or equal to 6.";
        }
        if (!is_null($this->container['companyPrefectureKana']) && mb_strlen($this->container['companyPrefectureKana']) < 1) {
            $invalidProperties[] = "invalid value for 'companyPrefectureKana', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['companyAddressMunicipality']) && mb_strlen($this->container['companyAddressMunicipality']) > 50) {
            $invalidProperties[] = "invalid value for 'companyAddressMunicipality', the character length must be smaller than or equal to 50.";
        }
        if (!is_null($this->container['companyAddressMunicipality']) && mb_strlen($this->container['companyAddressMunicipality']) < 1) {
            $invalidProperties[] = "invalid value for 'companyAddressMunicipality', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['companyAddressMunicipalityKana']) && mb_strlen($this->container['companyAddressMunicipalityKana']) > 100) {
            $invalidProperties[] = "invalid value for 'companyAddressMunicipalityKana', the character length must be smaller than or equal to 100.";
        }
        if (!is_null($this->container['companyAddressMunicipalityKana']) && mb_strlen($this->container['companyAddressMunicipalityKana']) < 1) {
            $invalidProperties[] = "invalid value for 'companyAddressMunicipalityKana', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['companyAddressSection']) && mb_strlen($this->container['companyAddressSection']) > 50) {
            $invalidProperties[] = "invalid value for 'companyAddressSection', the character length must be smaller than or equal to 50.";
        }
        if (!is_null($this->container['companyAddressSection']) && mb_strlen($this->container['companyAddressSection']) < 1) {
            $invalidProperties[] = "invalid value for 'companyAddressSection', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['companyAddressSectionKana']) && mb_strlen($this->container['companyAddressSectionKana']) > 100) {
            $invalidProperties[] = "invalid value for 'companyAddressSectionKana', the character length must be smaller than or equal to 100.";
        }
        if (!is_null($this->container['companyAddressSectionKana']) && mb_strlen($this->container['companyAddressSectionKana']) < 1) {
            $invalidProperties[] = "invalid value for 'companyAddressSectionKana', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['companyAddressChrome']) && mb_strlen($this->container['companyAddressChrome']) > 100) {
            $invalidProperties[] = "invalid value for 'companyAddressChrome', the character length must be smaller than or equal to 100.";
        }
        if (!is_null($this->container['companyAddressChrome']) && mb_strlen($this->container['companyAddressChrome']) < 1) {
            $invalidProperties[] = "invalid value for 'companyAddressChrome', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['companyAddressChromeKana']) && mb_strlen($this->container['companyAddressChromeKana']) > 100) {
            $invalidProperties[] = "invalid value for 'companyAddressChromeKana', the character length must be smaller than or equal to 100.";
        }
        if (!is_null($this->container['companyAddressChromeKana']) && mb_strlen($this->container['companyAddressChromeKana']) < 1) {
            $invalidProperties[] = "invalid value for 'companyAddressChromeKana', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['companyAddressBuildingName']) && mb_strlen($this->container['companyAddressBuildingName']) > 100) {
            $invalidProperties[] = "invalid value for 'companyAddressBuildingName', the character length must be smaller than or equal to 100.";
        }
        if (!is_null($this->container['companyAddressBuildingName']) && mb_strlen($this->container['companyAddressBuildingName']) < 1) {
            $invalidProperties[] = "invalid value for 'companyAddressBuildingName', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['companyAddressBuildingNameKana']) && mb_strlen($this->container['companyAddressBuildingNameKana']) > 100) {
            $invalidProperties[] = "invalid value for 'companyAddressBuildingNameKana', the character length must be smaller than or equal to 100.";
        }
        if (!is_null($this->container['companyAddressBuildingNameKana']) && mb_strlen($this->container['companyAddressBuildingNameKana']) < 1) {
            $invalidProperties[] = "invalid value for 'companyAddressBuildingNameKana', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['companyTel']) && mb_strlen($this->container['companyTel']) > 15) {
            $invalidProperties[] = "invalid value for 'companyTel', the character length must be smaller than or equal to 15.";
        }
        if (!is_null($this->container['companyTel']) && mb_strlen($this->container['companyTel']) < 1) {
            $invalidProperties[] = "invalid value for 'companyTel', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['representativeLastName']) && mb_strlen($this->container['representativeLastName']) > 20) {
            $invalidProperties[] = "invalid value for 'representativeLastName', the character length must be smaller than or equal to 20.";
        }
        if (!is_null($this->container['representativeLastName']) && mb_strlen($this->container['representativeLastName']) < 1) {
            $invalidProperties[] = "invalid value for 'representativeLastName', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['representativeLastNameKana']) && mb_strlen($this->container['representativeLastNameKana']) > 20) {
            $invalidProperties[] = "invalid value for 'representativeLastNameKana', the character length must be smaller than or equal to 20.";
        }
        if (!is_null($this->container['representativeLastNameKana']) && mb_strlen($this->container['representativeLastNameKana']) < 1) {
            $invalidProperties[] = "invalid value for 'representativeLastNameKana', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['representativeFirstName']) && mb_strlen($this->container['representativeFirstName']) > 20) {
            $invalidProperties[] = "invalid value for 'representativeFirstName', the character length must be smaller than or equal to 20.";
        }
        if (!is_null($this->container['representativeFirstName']) && mb_strlen($this->container['representativeFirstName']) < 1) {
            $invalidProperties[] = "invalid value for 'representativeFirstName', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['representativeFirstNameKana']) && mb_strlen($this->container['representativeFirstNameKana']) > 20) {
            $invalidProperties[] = "invalid value for 'representativeFirstNameKana', the character length must be smaller than or equal to 20.";
        }
        if (!is_null($this->container['representativeFirstNameKana']) && mb_strlen($this->container['representativeFirstNameKana']) < 1) {
            $invalidProperties[] = "invalid value for 'representativeFirstNameKana', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['representativeBirthday']) && !preg_match('/^\\d{4}\\/\\d{2}\\/\\d{2}$/', $this->container['representativeBirthday'])) {
            $invalidProperties[] = "invalid value for 'representativeBirthday', must be conform to the pattern /^\\d{4}\\/\\d{2}\\/\\d{2}\$/.";
        }
        if (!is_null($this->container['representativePostalCode']) && mb_strlen($this->container['representativePostalCode']) > 8) {
            $invalidProperties[] = "invalid value for 'representativePostalCode', the character length must be smaller than or equal to 8.";
        }
        if (!is_null($this->container['representativePostalCode']) && mb_strlen($this->container['representativePostalCode']) < 8) {
            $invalidProperties[] = "invalid value for 'representativePostalCode', the character length must be bigger than or equal to 8.";
        }
        if (!is_null($this->container['representativePostalCode']) && !preg_match('/^\\d{3}-\\d{4}$/', $this->container['representativePostalCode'])) {
            $invalidProperties[] = "invalid value for 'representativePostalCode', must be conform to the pattern /^\\d{3}-\\d{4}\$/.";
        }
        if (!is_null($this->container['representativePrefecture']) && mb_strlen($this->container['representativePrefecture']) > 4) {
            $invalidProperties[] = "invalid value for 'representativePrefecture', the character length must be smaller than or equal to 4.";
        }
        if (!is_null($this->container['representativePrefecture']) && mb_strlen($this->container['representativePrefecture']) < 1) {
            $invalidProperties[] = "invalid value for 'representativePrefecture', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['representativePrefectureKana']) && mb_strlen($this->container['representativePrefectureKana']) > 6) {
            $invalidProperties[] = "invalid value for 'representativePrefectureKana', the character length must be smaller than or equal to 6.";
        }
        if (!is_null($this->container['representativePrefectureKana']) && mb_strlen($this->container['representativePrefectureKana']) < 1) {
            $invalidProperties[] = "invalid value for 'representativePrefectureKana', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['representativeAddressMunicipality']) && mb_strlen($this->container['representativeAddressMunicipality']) > 50) {
            $invalidProperties[] = "invalid value for 'representativeAddressMunicipality', the character length must be smaller than or equal to 50.";
        }
        if (!is_null($this->container['representativeAddressMunicipality']) && mb_strlen($this->container['representativeAddressMunicipality']) < 1) {
            $invalidProperties[] = "invalid value for 'representativeAddressMunicipality', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['representativeAddressMunicipalityKana']) && mb_strlen($this->container['representativeAddressMunicipalityKana']) > 100) {
            $invalidProperties[] = "invalid value for 'representativeAddressMunicipalityKana', the character length must be smaller than or equal to 100.";
        }
        if (!is_null($this->container['representativeAddressMunicipalityKana']) && mb_strlen($this->container['representativeAddressMunicipalityKana']) < 1) {
            $invalidProperties[] = "invalid value for 'representativeAddressMunicipalityKana', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['representativeAddressSection']) && mb_strlen($this->container['representativeAddressSection']) > 50) {
            $invalidProperties[] = "invalid value for 'representativeAddressSection', the character length must be smaller than or equal to 50.";
        }
        if (!is_null($this->container['representativeAddressSection']) && mb_strlen($this->container['representativeAddressSection']) < 1) {
            $invalidProperties[] = "invalid value for 'representativeAddressSection', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['representativeAddressSectionKana']) && mb_strlen($this->container['representativeAddressSectionKana']) > 100) {
            $invalidProperties[] = "invalid value for 'representativeAddressSectionKana', the character length must be smaller than or equal to 100.";
        }
        if (!is_null($this->container['representativeAddressSectionKana']) && mb_strlen($this->container['representativeAddressSectionKana']) < 1) {
            $invalidProperties[] = "invalid value for 'representativeAddressSectionKana', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['representativeAddressChrome']) && mb_strlen($this->container['representativeAddressChrome']) > 50) {
            $invalidProperties[] = "invalid value for 'representativeAddressChrome', the character length must be smaller than or equal to 50.";
        }
        if (!is_null($this->container['representativeAddressChrome']) && mb_strlen($this->container['representativeAddressChrome']) < 1) {
            $invalidProperties[] = "invalid value for 'representativeAddressChrome', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['representativeAddressChromeKana']) && mb_strlen($this->container['representativeAddressChromeKana']) > 100) {
            $invalidProperties[] = "invalid value for 'representativeAddressChromeKana', the character length must be smaller than or equal to 100.";
        }
        if (!is_null($this->container['representativeAddressChromeKana']) && mb_strlen($this->container['representativeAddressChromeKana']) < 1) {
            $invalidProperties[] = "invalid value for 'representativeAddressChromeKana', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['representativeAddressBuildingName']) && mb_strlen($this->container['representativeAddressBuildingName']) > 100) {
            $invalidProperties[] = "invalid value for 'representativeAddressBuildingName', the character length must be smaller than or equal to 100.";
        }
        if (!is_null($this->container['representativeAddressBuildingName']) && mb_strlen($this->container['representativeAddressBuildingName']) < 1) {
            $invalidProperties[] = "invalid value for 'representativeAddressBuildingName', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['representativeAddressBuildingNameKana']) && mb_strlen($this->container['representativeAddressBuildingNameKana']) > 100) {
            $invalidProperties[] = "invalid value for 'representativeAddressBuildingNameKana', the character length must be smaller than or equal to 100.";
        }
        if (!is_null($this->container['representativeAddressBuildingNameKana']) && mb_strlen($this->container['representativeAddressBuildingNameKana']) < 1) {
            $invalidProperties[] = "invalid value for 'representativeAddressBuildingNameKana', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['representativeTel']) && mb_strlen($this->container['representativeTel']) > 12) {
            $invalidProperties[] = "invalid value for 'representativeTel', the character length must be smaller than or equal to 12.";
        }
        if (!is_null($this->container['representativeTel']) && mb_strlen($this->container['representativeTel']) < 11) {
            $invalidProperties[] = "invalid value for 'representativeTel', the character length must be bigger than or equal to 11.";
        }
        if (!is_null($this->container['representativeTel']) && !preg_match('/^\\d{11,12}$/', $this->container['representativeTel'])) {
            $invalidProperties[] = "invalid value for 'representativeTel', must be conform to the pattern /^\\d{11,12}\$/.";
        }
        if (!is_null($this->container['staff1LastName']) && mb_strlen($this->container['staff1LastName']) > 20) {
            $invalidProperties[] = "invalid value for 'staff1LastName', the character length must be smaller than or equal to 20.";
        }
        if (!is_null($this->container['staff1LastName']) && mb_strlen($this->container['staff1LastName']) < 1) {
            $invalidProperties[] = "invalid value for 'staff1LastName', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['staff1LastNameKana']) && mb_strlen($this->container['staff1LastNameKana']) > 20) {
            $invalidProperties[] = "invalid value for 'staff1LastNameKana', the character length must be smaller than or equal to 20.";
        }
        if (!is_null($this->container['staff1LastNameKana']) && mb_strlen($this->container['staff1LastNameKana']) < 1) {
            $invalidProperties[] = "invalid value for 'staff1LastNameKana', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['staff1FirstName']) && mb_strlen($this->container['staff1FirstName']) > 20) {
            $invalidProperties[] = "invalid value for 'staff1FirstName', the character length must be smaller than or equal to 20.";
        }
        if (!is_null($this->container['staff1FirstName']) && mb_strlen($this->container['staff1FirstName']) < 1) {
            $invalidProperties[] = "invalid value for 'staff1FirstName', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['staff1FirstNameKana']) && mb_strlen($this->container['staff1FirstNameKana']) > 20) {
            $invalidProperties[] = "invalid value for 'staff1FirstNameKana', the character length must be smaller than or equal to 20.";
        }
        if (!is_null($this->container['staff1FirstNameKana']) && mb_strlen($this->container['staff1FirstNameKana']) < 1) {
            $invalidProperties[] = "invalid value for 'staff1FirstNameKana', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['staff1CompanyName']) && mb_strlen($this->container['staff1CompanyName']) > 150) {
            $invalidProperties[] = "invalid value for 'staff1CompanyName', the character length must be smaller than or equal to 150.";
        }
        if (!is_null($this->container['staff1CompanyName']) && mb_strlen($this->container['staff1CompanyName']) < 1) {
            $invalidProperties[] = "invalid value for 'staff1CompanyName', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['staff1Belongs']) && mb_strlen($this->container['staff1Belongs']) > 50) {
            $invalidProperties[] = "invalid value for 'staff1Belongs', the character length must be smaller than or equal to 50.";
        }
        if (!is_null($this->container['staff1Belongs']) && mb_strlen($this->container['staff1Belongs']) < 1) {
            $invalidProperties[] = "invalid value for 'staff1Belongs', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['staff1Tel']) && mb_strlen($this->container['staff1Tel']) > 12) {
            $invalidProperties[] = "invalid value for 'staff1Tel', the character length must be smaller than or equal to 12.";
        }
        if (!is_null($this->container['staff1Tel']) && mb_strlen($this->container['staff1Tel']) < 11) {
            $invalidProperties[] = "invalid value for 'staff1Tel', the character length must be bigger than or equal to 11.";
        }
        if (!is_null($this->container['staff1Tel']) && !preg_match('/^\\d{11,12}$/', $this->container['staff1Tel'])) {
            $invalidProperties[] = "invalid value for 'staff1Tel', must be conform to the pattern /^\\d{11,12}\$/.";
        }
        if (!is_null($this->container['staff1Mail']) && mb_strlen($this->container['staff1Mail']) > 254) {
            $invalidProperties[] = "invalid value for 'staff1Mail', the character length must be smaller than or equal to 254.";
        }
        if (!is_null($this->container['staff1Mail']) && mb_strlen($this->container['staff1Mail']) < 1) {
            $invalidProperties[] = "invalid value for 'staff1Mail', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['staff2LastName']) && mb_strlen($this->container['staff2LastName']) > 20) {
            $invalidProperties[] = "invalid value for 'staff2LastName', the character length must be smaller than or equal to 20.";
        }
        if (!is_null($this->container['staff2LastName']) && mb_strlen($this->container['staff2LastName']) < 1) {
            $invalidProperties[] = "invalid value for 'staff2LastName', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['staff2LastNameKana']) && mb_strlen($this->container['staff2LastNameKana']) > 20) {
            $invalidProperties[] = "invalid value for 'staff2LastNameKana', the character length must be smaller than or equal to 20.";
        }
        if (!is_null($this->container['staff2LastNameKana']) && mb_strlen($this->container['staff2LastNameKana']) < 1) {
            $invalidProperties[] = "invalid value for 'staff2LastNameKana', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['staff2FirstName']) && mb_strlen($this->container['staff2FirstName']) > 20) {
            $invalidProperties[] = "invalid value for 'staff2FirstName', the character length must be smaller than or equal to 20.";
        }
        if (!is_null($this->container['staff2FirstName']) && mb_strlen($this->container['staff2FirstName']) < 1) {
            $invalidProperties[] = "invalid value for 'staff2FirstName', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['staff2FirstNameKana']) && mb_strlen($this->container['staff2FirstNameKana']) > 20) {
            $invalidProperties[] = "invalid value for 'staff2FirstNameKana', the character length must be smaller than or equal to 20.";
        }
        if (!is_null($this->container['staff2FirstNameKana']) && mb_strlen($this->container['staff2FirstNameKana']) < 1) {
            $invalidProperties[] = "invalid value for 'staff2FirstNameKana', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['staff2CompanyName']) && mb_strlen($this->container['staff2CompanyName']) > 150) {
            $invalidProperties[] = "invalid value for 'staff2CompanyName', the character length must be smaller than or equal to 150.";
        }
        if (!is_null($this->container['staff2CompanyName']) && mb_strlen($this->container['staff2CompanyName']) < 1) {
            $invalidProperties[] = "invalid value for 'staff2CompanyName', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['staff2Belongs']) && mb_strlen($this->container['staff2Belongs']) > 50) {
            $invalidProperties[] = "invalid value for 'staff2Belongs', the character length must be smaller than or equal to 50.";
        }
        if (!is_null($this->container['staff2Belongs']) && mb_strlen($this->container['staff2Belongs']) < 1) {
            $invalidProperties[] = "invalid value for 'staff2Belongs', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['staff2Tel']) && mb_strlen($this->container['staff2Tel']) > 12) {
            $invalidProperties[] = "invalid value for 'staff2Tel', the character length must be smaller than or equal to 12.";
        }
        if (!is_null($this->container['staff2Tel']) && mb_strlen($this->container['staff2Tel']) < 11) {
            $invalidProperties[] = "invalid value for 'staff2Tel', the character length must be bigger than or equal to 11.";
        }
        if (!is_null($this->container['staff2Tel']) && !preg_match('/^\\d{11,12}$/', $this->container['staff2Tel'])) {
            $invalidProperties[] = "invalid value for 'staff2Tel', must be conform to the pattern /^\\d{11,12}\$/.";
        }
        if (!is_null($this->container['staff2Mail']) && mb_strlen($this->container['staff2Mail']) > 254) {
            $invalidProperties[] = "invalid value for 'staff2Mail', the character length must be smaller than or equal to 254.";
        }
        if (!is_null($this->container['staff2Mail']) && mb_strlen($this->container['staff2Mail']) < 1) {
            $invalidProperties[] = "invalid value for 'staff2Mail', the character length must be bigger than or equal to 1.";
        }
        $allowedValues = $this->getSiteExistingAllowableValues();
        if (!is_null($this->container['siteExisting']) && !in_array($this->container['siteExisting'], $allowedValues, true)) {
            $invalidProperties[] = sprintf("invalid value '%s' for 'siteExisting', must be one of '%s'", $this->container['siteExisting'], implode("', '", $allowedValues));
        }
        if (!is_null($this->container['url']) && mb_strlen($this->container['url']) > 300) {
            $invalidProperties[] = "invalid value for 'url', the character length must be smaller than or equal to 300.";
        }
        if (!is_null($this->container['url']) && mb_strlen($this->container['url']) < 1) {
            $invalidProperties[] = "invalid value for 'url', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['siteCredential']) && mb_strlen($this->container['siteCredential']) > 100) {
            $invalidProperties[] = "invalid value for 'siteCredential', the character length must be smaller than or equal to 100.";
        }
        if (!is_null($this->container['siteCredential']) && mb_strlen($this->container['siteCredential']) < 1) {
            $invalidProperties[] = "invalid value for 'siteCredential', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['shopName']) && mb_strlen($this->container['shopName']) > 100) {
            $invalidProperties[] = "invalid value for 'shopName', the character length must be smaller than or equal to 100.";
        }
        if (!is_null($this->container['shopName']) && mb_strlen($this->container['shopName']) < 1) {
            $invalidProperties[] = "invalid value for 'shopName', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['shopNameKana']) && mb_strlen($this->container['shopNameKana']) > 100) {
            $invalidProperties[] = "invalid value for 'shopNameKana', the character length must be smaller than or equal to 100.";
        }
        if (!is_null($this->container['shopNameKana']) && mb_strlen($this->container['shopNameKana']) < 1) {
            $invalidProperties[] = "invalid value for 'shopNameKana', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['shopNameEn']) && mb_strlen($this->container['shopNameEn']) > 25) {
            $invalidProperties[] = "invalid value for 'shopNameEn', the character length must be smaller than or equal to 25.";
        }
        if (!is_null($this->container['shopNameEn']) && mb_strlen($this->container['shopNameEn']) < 1) {
            $invalidProperties[] = "invalid value for 'shopNameEn', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['shopDistributorName']) && mb_strlen($this->container['shopDistributorName']) > 300) {
            $invalidProperties[] = "invalid value for 'shopDistributorName', the character length must be smaller than or equal to 300.";
        }
        if (!is_null($this->container['shopDistributorName']) && mb_strlen($this->container['shopDistributorName']) < 1) {
            $invalidProperties[] = "invalid value for 'shopDistributorName', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['shopSalesManagerName']) && mb_strlen($this->container['shopSalesManagerName']) > 300) {
            $invalidProperties[] = "invalid value for 'shopSalesManagerName', the character length must be smaller than or equal to 300.";
        }
        if (!is_null($this->container['shopSalesManagerName']) && mb_strlen($this->container['shopSalesManagerName']) < 1) {
            $invalidProperties[] = "invalid value for 'shopSalesManagerName', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['shopServiceName']) && mb_strlen($this->container['shopServiceName']) > 300) {
            $invalidProperties[] = "invalid value for 'shopServiceName', the character length must be smaller than or equal to 300.";
        }
        if (!is_null($this->container['shopServiceName']) && mb_strlen($this->container['shopServiceName']) < 1) {
            $invalidProperties[] = "invalid value for 'shopServiceName', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['shopSupportTel']) && mb_strlen($this->container['shopSupportTel']) > 15) {
            $invalidProperties[] = "invalid value for 'shopSupportTel', the character length must be smaller than or equal to 15.";
        }
        if (!is_null($this->container['shopSupportTel']) && mb_strlen($this->container['shopSupportTel']) < 1) {
            $invalidProperties[] = "invalid value for 'shopSupportTel', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['shopSupportMail']) && mb_strlen($this->container['shopSupportMail']) > 254) {
            $invalidProperties[] = "invalid value for 'shopSupportMail', the character length must be smaller than or equal to 254.";
        }
        if (!is_null($this->container['shopSupportMail']) && mb_strlen($this->container['shopSupportMail']) < 1) {
            $invalidProperties[] = "invalid value for 'shopSupportMail', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['shopPostCode']) && mb_strlen($this->container['shopPostCode']) > 8) {
            $invalidProperties[] = "invalid value for 'shopPostCode', the character length must be smaller than or equal to 8.";
        }
        if (!is_null($this->container['shopPostCode']) && mb_strlen($this->container['shopPostCode']) < 1) {
            $invalidProperties[] = "invalid value for 'shopPostCode', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['shopPrefecture']) && mb_strlen($this->container['shopPrefecture']) > 4) {
            $invalidProperties[] = "invalid value for 'shopPrefecture', the character length must be smaller than or equal to 4.";
        }
        if (!is_null($this->container['shopPrefecture']) && mb_strlen($this->container['shopPrefecture']) < 1) {
            $invalidProperties[] = "invalid value for 'shopPrefecture', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['shopAddressMunicipality']) && mb_strlen($this->container['shopAddressMunicipality']) > 50) {
            $invalidProperties[] = "invalid value for 'shopAddressMunicipality', the character length must be smaller than or equal to 50.";
        }
        if (!is_null($this->container['shopAddressMunicipality']) && mb_strlen($this->container['shopAddressMunicipality']) < 1) {
            $invalidProperties[] = "invalid value for 'shopAddressMunicipality', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['shopAddressSection']) && mb_strlen($this->container['shopAddressSection']) > 50) {
            $invalidProperties[] = "invalid value for 'shopAddressSection', the character length must be smaller than or equal to 50.";
        }
        if (!is_null($this->container['shopAddressSection']) && mb_strlen($this->container['shopAddressSection']) < 1) {
            $invalidProperties[] = "invalid value for 'shopAddressSection', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['shopAddressChrome']) && mb_strlen($this->container['shopAddressChrome']) > 50) {
            $invalidProperties[] = "invalid value for 'shopAddressChrome', the character length must be smaller than or equal to 50.";
        }
        if (!is_null($this->container['shopAddressChrome']) && mb_strlen($this->container['shopAddressChrome']) < 1) {
            $invalidProperties[] = "invalid value for 'shopAddressChrome', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['shopAddressBuildingName']) && mb_strlen($this->container['shopAddressBuildingName']) > 100) {
            $invalidProperties[] = "invalid value for 'shopAddressBuildingName', the character length must be smaller than or equal to 100.";
        }
        if (!is_null($this->container['shopAddressBuildingName']) && mb_strlen($this->container['shopAddressBuildingName']) < 1) {
            $invalidProperties[] = "invalid value for 'shopAddressBuildingName', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['shopAddressBuildingNameKana']) && mb_strlen($this->container['shopAddressBuildingNameKana']) > 100) {
            $invalidProperties[] = "invalid value for 'shopAddressBuildingNameKana', the character length must be smaller than or equal to 100.";
        }
        if (!is_null($this->container['shopAddressBuildingNameKana']) && mb_strlen($this->container['shopAddressBuildingNameKana']) < 1) {
            $invalidProperties[] = "invalid value for 'shopAddressBuildingNameKana', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['shopPaymentMethod']) && mb_strlen($this->container['shopPaymentMethod']) > 1000) {
            $invalidProperties[] = "invalid value for 'shopPaymentMethod', the character length must be smaller than or equal to 1000.";
        }
        if (!is_null($this->container['shopPaymentMethod']) && mb_strlen($this->container['shopPaymentMethod']) < 1) {
            $invalidProperties[] = "invalid value for 'shopPaymentMethod', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['shopChargeDescription']) && mb_strlen($this->container['shopChargeDescription']) > 5000) {
            $invalidProperties[] = "invalid value for 'shopChargeDescription', the character length must be smaller than or equal to 5000.";
        }
        if (!is_null($this->container['shopChargeDescription']) && mb_strlen($this->container['shopChargeDescription']) < 1) {
            $invalidProperties[] = "invalid value for 'shopChargeDescription', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['shopProductDelieveryTime']) && mb_strlen($this->container['shopProductDelieveryTime']) > 1000) {
            $invalidProperties[] = "invalid value for 'shopProductDelieveryTime', the character length must be smaller than or equal to 1000.";
        }
        if (!is_null($this->container['shopProductDelieveryTime']) && mb_strlen($this->container['shopProductDelieveryTime']) < 1) {
            $invalidProperties[] = "invalid value for 'shopProductDelieveryTime', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['shopReturnGoodsHandingConditions']) && mb_strlen($this->container['shopReturnGoodsHandingConditions']) > 5000) {
            $invalidProperties[] = "invalid value for 'shopReturnGoodsHandingConditions', the character length must be smaller than or equal to 5000.";
        }
        if (!is_null($this->container['shopReturnGoodsHandingConditions']) && mb_strlen($this->container['shopReturnGoodsHandingConditions']) < 1) {
            $invalidProperties[] = "invalid value for 'shopReturnGoodsHandingConditions', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['platformName']) && mb_strlen($this->container['platformName']) > 100) {
            $invalidProperties[] = "invalid value for 'platformName', the character length must be smaller than or equal to 100.";
        }
        if (!is_null($this->container['platformName']) && mb_strlen($this->container['platformName']) < 1) {
            $invalidProperties[] = "invalid value for 'platformName', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['supportTel']) && mb_strlen($this->container['supportTel']) > 15) {
            $invalidProperties[] = "invalid value for 'supportTel', the character length must be smaller than or equal to 15.";
        }
        if (!is_null($this->container['supportTel']) && mb_strlen($this->container['supportTel']) < 1) {
            $invalidProperties[] = "invalid value for 'supportTel', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['supportMail']) && mb_strlen($this->container['supportMail']) > 254) {
            $invalidProperties[] = "invalid value for 'supportMail', the character length must be smaller than or equal to 254.";
        }
        if (!is_null($this->container['supportMail']) && mb_strlen($this->container['supportMail']) < 1) {
            $invalidProperties[] = "invalid value for 'supportMail', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['contentDescription']) && mb_strlen($this->container['contentDescription']) > 5000) {
            $invalidProperties[] = "invalid value for 'contentDescription', the character length must be smaller than or equal to 5000.";
        }
        if (!is_null($this->container['contentDescription']) && mb_strlen($this->container['contentDescription']) < 1) {
            $invalidProperties[] = "invalid value for 'contentDescription', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['expirationDateOfPoint']) && mb_strlen($this->container['expirationDateOfPoint']) > 300) {
            $invalidProperties[] = "invalid value for 'expirationDateOfPoint', the character length must be smaller than or equal to 300.";
        }
        if (!is_null($this->container['expirationDateOfPoint']) && mb_strlen($this->container['expirationDateOfPoint']) < 1) {
            $invalidProperties[] = "invalid value for 'expirationDateOfPoint', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['usageOfPoint']) && mb_strlen($this->container['usageOfPoint']) > 300) {
            $invalidProperties[] = "invalid value for 'usageOfPoint', the character length must be smaller than or equal to 300.";
        }
        if (!is_null($this->container['usageOfPoint']) && mb_strlen($this->container['usageOfPoint']) < 1) {
            $invalidProperties[] = "invalid value for 'usageOfPoint', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return 0 === count($this->listInvalidProperties());
    }

    /**
     * Gets corporate.
     *
     * @return bool|null
     */
    public function getCorporate(): mixed
    {
        return $this->container['corporate'];
    }

    /**
     * Sets corporate.
     *
     * @param bool|null $corporate 事業形態  - `true`: 法人 - `false`: 個人事業主
     */
    public function setCorporate(mixed $corporate): static
    {
        if (is_null($corporate)) {
            $this->openAPINullablesSetToNull[] = 'corporate';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('corporate', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['corporate'] = $corporate;

        return $this;
    }

    /**
     * Gets corporateNumber.
     *
     * @return string|null
     */
    public function getCorporateNumber(): mixed
    {
        return $this->container['corporateNumber'];
    }

    /**
     * Sets corporateNumber.
     *
     * @param string|null $corporateNumber 法人番号
     */
    public function setCorporateNumber(mixed $corporateNumber): static
    {
        if (is_null($corporateNumber)) {
            $this->openAPINullablesSetToNull[] = 'corporateNumber';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('corporateNumber', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($corporateNumber) && mb_strlen($corporateNumber) > 13) {
            throw new \InvalidArgumentException('invalid length for $corporateNumber when calling ExaminationInfoUpdatingRequestContractDetail., must be smaller than or equal to 13.');
        }
        if (!is_null($corporateNumber) && mb_strlen($corporateNumber) < 13) {
            throw new \InvalidArgumentException('invalid length for $corporateNumber when calling ExaminationInfoUpdatingRequestContractDetail., must be bigger than or equal to 13.');
        }
        $this->container['corporateNumber'] = $corporateNumber;

        return $this;
    }

    /**
     * Gets corporateName.
     *
     * @return string|null
     */
    public function getCorporateName(): mixed
    {
        return $this->container['corporateName'];
    }

    /**
     * Sets corporateName.
     *
     * @param string|null $corporateName 法人名
     */
    public function setCorporateName(mixed $corporateName): static
    {
        if (is_null($corporateName)) {
            $this->openAPINullablesSetToNull[] = 'corporateName';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('corporateName', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($corporateName) && mb_strlen($corporateName) > 150) {
            throw new \InvalidArgumentException('invalid length for $corporateName when calling ExaminationInfoUpdatingRequestContractDetail., must be smaller than or equal to 150.');
        }
        if (!is_null($corporateName) && mb_strlen($corporateName) < 1) {
            throw new \InvalidArgumentException('invalid length for $corporateName when calling ExaminationInfoUpdatingRequestContractDetail., must be bigger than or equal to 1.');
        }
        $this->container['corporateName'] = $corporateName;

        return $this;
    }

    /**
     * Gets corporateNameKana.
     *
     * @return string|null
     */
    public function getCorporateNameKana(): mixed
    {
        return $this->container['corporateNameKana'];
    }

    /**
     * Sets corporateNameKana.
     *
     * @param string|null $corporateNameKana 法人名（カナ）
     */
    public function setCorporateNameKana(mixed $corporateNameKana): static
    {
        if (is_null($corporateNameKana)) {
            $this->openAPINullablesSetToNull[] = 'corporateNameKana';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('corporateNameKana', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($corporateNameKana) && mb_strlen($corporateNameKana) > 150) {
            throw new \InvalidArgumentException('invalid length for $corporateNameKana when calling ExaminationInfoUpdatingRequestContractDetail., must be smaller than or equal to 150.');
        }
        if (!is_null($corporateNameKana) && mb_strlen($corporateNameKana) < 1) {
            throw new \InvalidArgumentException('invalid length for $corporateNameKana when calling ExaminationInfoUpdatingRequestContractDetail., must be bigger than or equal to 1.');
        }
        $this->container['corporateNameKana'] = $corporateNameKana;

        return $this;
    }

    /**
     * Gets hp.
     *
     * @return string|null
     */
    public function getHp(): mixed
    {
        return $this->container['hp'];
    }

    /**
     * Sets hp.
     *
     * @param string|null $hp 企業サイトURL
     */
    public function setHp(mixed $hp): static
    {
        if (is_null($hp)) {
            $this->openAPINullablesSetToNull[] = 'hp';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('hp', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($hp) && mb_strlen($hp) > 300) {
            throw new \InvalidArgumentException('invalid length for $hp when calling ExaminationInfoUpdatingRequestContractDetail., must be smaller than or equal to 300.');
        }
        if (!is_null($hp) && mb_strlen($hp) < 1) {
            throw new \InvalidArgumentException('invalid length for $hp when calling ExaminationInfoUpdatingRequestContractDetail., must be bigger than or equal to 1.');
        }
        $this->container['hp'] = $hp;

        return $this;
    }

    /**
     * Gets capital.
     *
     * @return float|null
     */
    public function getCapital(): mixed
    {
        return $this->container['capital'];
    }

    /**
     * Sets capital.
     *
     * @param float|null $capital 資本金
     */
    public function setCapital(mixed $capital): static
    {
        if (is_null($capital)) {
            $this->openAPINullablesSetToNull[] = 'capital';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('capital', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['capital'] = $capital;

        return $this;
    }

    /**
     * Gets establishedAt.
     *
     * @return string|null
     */
    public function getEstablishedAt(): mixed
    {
        return $this->container['establishedAt'];
    }

    /**
     * Sets establishedAt.
     *
     * @param string|null $establishedAt 設立日
     */
    public function setEstablishedAt(mixed $establishedAt): static
    {
        if (is_null($establishedAt)) {
            $this->openAPINullablesSetToNull[] = 'establishedAt';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('establishedAt', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($establishedAt) && mb_strlen($establishedAt) > 10) {
            throw new \InvalidArgumentException('invalid length for $establishedAt when calling ExaminationInfoUpdatingRequestContractDetail., must be smaller than or equal to 10.');
        }
        if (!is_null($establishedAt) && mb_strlen($establishedAt) < 10) {
            throw new \InvalidArgumentException('invalid length for $establishedAt when calling ExaminationInfoUpdatingRequestContractDetail., must be bigger than or equal to 10.');
        }
        $this->container['establishedAt'] = $establishedAt;

        return $this;
    }

    /**
     * Gets yearlySales.
     *
     * @return float|null
     */
    public function getYearlySales(): mixed
    {
        return $this->container['yearlySales'];
    }

    /**
     * Sets yearlySales.
     *
     * @param float|null $yearlySales 年商
     */
    public function setYearlySales(mixed $yearlySales): static
    {
        if (is_null($yearlySales)) {
            $this->openAPINullablesSetToNull[] = 'yearlySales';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('yearlySales', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['yearlySales'] = $yearlySales;

        return $this;
    }

    /**
     * Gets businessDetails.
     *
     * @return string|null
     */
    public function getBusinessDetails(): mixed
    {
        return $this->container['businessDetails'];
    }

    /**
     * Sets businessDetails.
     *
     * @param string|null $businessDetails 事業内容
     */
    public function setBusinessDetails(mixed $businessDetails): static
    {
        if (is_null($businessDetails)) {
            $this->openAPINullablesSetToNull[] = 'businessDetails';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('businessDetails', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($businessDetails) && mb_strlen($businessDetails) > 5000) {
            throw new \InvalidArgumentException('invalid length for $businessDetails when calling ExaminationInfoUpdatingRequestContractDetail., must be smaller than or equal to 5000.');
        }
        if (!is_null($businessDetails) && mb_strlen($businessDetails) < 1) {
            throw new \InvalidArgumentException('invalid length for $businessDetails when calling ExaminationInfoUpdatingRequestContractDetail., must be bigger than or equal to 1.');
        }
        $this->container['businessDetails'] = $businessDetails;

        return $this;
    }

    /**
     * Gets companyPostalCode.
     *
     * @return string|null
     */
    public function getCompanyPostalCode(): mixed
    {
        return $this->container['companyPostalCode'];
    }

    /**
     * Sets companyPostalCode.
     *
     * @param string|null $companyPostalCode 会社住所 郵便番号\\ 形式： 半角数字（ハイフンあり）
     */
    public function setCompanyPostalCode(mixed $companyPostalCode): static
    {
        if (is_null($companyPostalCode)) {
            $this->openAPINullablesSetToNull[] = 'companyPostalCode';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('companyPostalCode', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($companyPostalCode) && mb_strlen($companyPostalCode) > 8) {
            throw new \InvalidArgumentException('invalid length for $companyPostalCode when calling ExaminationInfoUpdatingRequestContractDetail., must be smaller than or equal to 8.');
        }
        if (!is_null($companyPostalCode) && mb_strlen($companyPostalCode) < 8) {
            throw new \InvalidArgumentException('invalid length for $companyPostalCode when calling ExaminationInfoUpdatingRequestContractDetail., must be bigger than or equal to 8.');
        }
        $this->container['companyPostalCode'] = $companyPostalCode;

        return $this;
    }

    /**
     * Gets companyPrefecture.
     *
     * @return string|null
     */
    public function getCompanyPrefecture(): mixed
    {
        return $this->container['companyPrefecture'];
    }

    /**
     * Sets companyPrefecture.
     *
     * @param string|null $companyPrefecture 会社住所 都道府県\\ 形式： 漢字
     */
    public function setCompanyPrefecture(mixed $companyPrefecture): static
    {
        if (is_null($companyPrefecture)) {
            $this->openAPINullablesSetToNull[] = 'companyPrefecture';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('companyPrefecture', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($companyPrefecture) && mb_strlen($companyPrefecture) > 4) {
            throw new \InvalidArgumentException('invalid length for $companyPrefecture when calling ExaminationInfoUpdatingRequestContractDetail., must be smaller than or equal to 4.');
        }
        if (!is_null($companyPrefecture) && mb_strlen($companyPrefecture) < 3) {
            throw new \InvalidArgumentException('invalid length for $companyPrefecture when calling ExaminationInfoUpdatingRequestContractDetail., must be bigger than or equal to 3.');
        }
        $this->container['companyPrefecture'] = $companyPrefecture;

        return $this;
    }

    /**
     * Gets companyPrefectureKana.
     *
     * @return string|null
     */
    public function getCompanyPrefectureKana(): mixed
    {
        return $this->container['companyPrefectureKana'];
    }

    /**
     * Sets companyPrefectureKana.
     *
     * @param string|null $companyPrefectureKana 会社住所 都道府県（カナ）\\ 形式： 全角カタカナ
     */
    public function setCompanyPrefectureKana(mixed $companyPrefectureKana): static
    {
        if (is_null($companyPrefectureKana)) {
            $this->openAPINullablesSetToNull[] = 'companyPrefectureKana';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('companyPrefectureKana', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($companyPrefectureKana) && mb_strlen($companyPrefectureKana) > 6) {
            throw new \InvalidArgumentException('invalid length for $companyPrefectureKana when calling ExaminationInfoUpdatingRequestContractDetail., must be smaller than or equal to 6.');
        }
        if (!is_null($companyPrefectureKana) && mb_strlen($companyPrefectureKana) < 1) {
            throw new \InvalidArgumentException('invalid length for $companyPrefectureKana when calling ExaminationInfoUpdatingRequestContractDetail., must be bigger than or equal to 1.');
        }
        $this->container['companyPrefectureKana'] = $companyPrefectureKana;

        return $this;
    }

    /**
     * Gets companyAddressMunicipality.
     *
     * @return string|null
     */
    public function getCompanyAddressMunicipality(): mixed
    {
        return $this->container['companyAddressMunicipality'];
    }

    /**
     * Sets companyAddressMunicipality.
     *
     * @param string|null $companyAddressMunicipality 会社住所 市区町村\\ 形式： 漢字/ひらがな/カタカナ/半角英数
     */
    public function setCompanyAddressMunicipality(mixed $companyAddressMunicipality): static
    {
        if (is_null($companyAddressMunicipality)) {
            $this->openAPINullablesSetToNull[] = 'companyAddressMunicipality';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('companyAddressMunicipality', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($companyAddressMunicipality) && mb_strlen($companyAddressMunicipality) > 50) {
            throw new \InvalidArgumentException('invalid length for $companyAddressMunicipality when calling ExaminationInfoUpdatingRequestContractDetail., must be smaller than or equal to 50.');
        }
        if (!is_null($companyAddressMunicipality) && mb_strlen($companyAddressMunicipality) < 1) {
            throw new \InvalidArgumentException('invalid length for $companyAddressMunicipality when calling ExaminationInfoUpdatingRequestContractDetail., must be bigger than or equal to 1.');
        }
        $this->container['companyAddressMunicipality'] = $companyAddressMunicipality;

        return $this;
    }

    /**
     * Gets companyAddressMunicipalityKana.
     *
     * @return string|null
     */
    public function getCompanyAddressMunicipalityKana(): mixed
    {
        return $this->container['companyAddressMunicipalityKana'];
    }

    /**
     * Sets companyAddressMunicipalityKana.
     *
     * @param string|null $companyAddressMunicipalityKana 会社住所 市区町村（カナ）\\ 形式： 全角カタカナ
     */
    public function setCompanyAddressMunicipalityKana(mixed $companyAddressMunicipalityKana): static
    {
        if (is_null($companyAddressMunicipalityKana)) {
            $this->openAPINullablesSetToNull[] = 'companyAddressMunicipalityKana';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('companyAddressMunicipalityKana', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($companyAddressMunicipalityKana) && mb_strlen($companyAddressMunicipalityKana) > 100) {
            throw new \InvalidArgumentException('invalid length for $companyAddressMunicipalityKana when calling ExaminationInfoUpdatingRequestContractDetail., must be smaller than or equal to 100.');
        }
        if (!is_null($companyAddressMunicipalityKana) && mb_strlen($companyAddressMunicipalityKana) < 1) {
            throw new \InvalidArgumentException('invalid length for $companyAddressMunicipalityKana when calling ExaminationInfoUpdatingRequestContractDetail., must be bigger than or equal to 1.');
        }
        $this->container['companyAddressMunicipalityKana'] = $companyAddressMunicipalityKana;

        return $this;
    }

    /**
     * Gets companyAddressSection.
     *
     * @return string|null
     */
    public function getCompanyAddressSection(): mixed
    {
        return $this->container['companyAddressSection'];
    }

    /**
     * Sets companyAddressSection.
     *
     * @param string|null $companyAddressSection 会社住所 町域\\ 形式： 漢字/ひらがな/カタカナ/半角英数
     */
    public function setCompanyAddressSection(mixed $companyAddressSection): static
    {
        if (is_null($companyAddressSection)) {
            $this->openAPINullablesSetToNull[] = 'companyAddressSection';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('companyAddressSection', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($companyAddressSection) && mb_strlen($companyAddressSection) > 50) {
            throw new \InvalidArgumentException('invalid length for $companyAddressSection when calling ExaminationInfoUpdatingRequestContractDetail., must be smaller than or equal to 50.');
        }
        if (!is_null($companyAddressSection) && mb_strlen($companyAddressSection) < 1) {
            throw new \InvalidArgumentException('invalid length for $companyAddressSection when calling ExaminationInfoUpdatingRequestContractDetail., must be bigger than or equal to 1.');
        }
        $this->container['companyAddressSection'] = $companyAddressSection;

        return $this;
    }

    /**
     * Gets companyAddressSectionKana.
     *
     * @return string|null
     */
    public function getCompanyAddressSectionKana(): mixed
    {
        return $this->container['companyAddressSectionKana'];
    }

    /**
     * Sets companyAddressSectionKana.
     *
     * @param string|null $companyAddressSectionKana 会社住所 町域（カナ）\\ 形式： 全角カタカナ
     */
    public function setCompanyAddressSectionKana(mixed $companyAddressSectionKana): static
    {
        if (is_null($companyAddressSectionKana)) {
            $this->openAPINullablesSetToNull[] = 'companyAddressSectionKana';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('companyAddressSectionKana', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($companyAddressSectionKana) && mb_strlen($companyAddressSectionKana) > 100) {
            throw new \InvalidArgumentException('invalid length for $companyAddressSectionKana when calling ExaminationInfoUpdatingRequestContractDetail., must be smaller than or equal to 100.');
        }
        if (!is_null($companyAddressSectionKana) && mb_strlen($companyAddressSectionKana) < 1) {
            throw new \InvalidArgumentException('invalid length for $companyAddressSectionKana when calling ExaminationInfoUpdatingRequestContractDetail., must be bigger than or equal to 1.');
        }
        $this->container['companyAddressSectionKana'] = $companyAddressSectionKana;

        return $this;
    }

    /**
     * Gets companyAddressChrome.
     *
     * @return string|null
     */
    public function getCompanyAddressChrome(): mixed
    {
        return $this->container['companyAddressChrome'];
    }

    /**
     * Sets companyAddressChrome.
     *
     * @param string|null $companyAddressChrome 会社住所 番地\\ 形式： 漢字/ひらがな/カタカナ/半角英数
     */
    public function setCompanyAddressChrome(mixed $companyAddressChrome): static
    {
        if (is_null($companyAddressChrome)) {
            $this->openAPINullablesSetToNull[] = 'companyAddressChrome';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('companyAddressChrome', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($companyAddressChrome) && mb_strlen($companyAddressChrome) > 100) {
            throw new \InvalidArgumentException('invalid length for $companyAddressChrome when calling ExaminationInfoUpdatingRequestContractDetail., must be smaller than or equal to 100.');
        }
        if (!is_null($companyAddressChrome) && mb_strlen($companyAddressChrome) < 1) {
            throw new \InvalidArgumentException('invalid length for $companyAddressChrome when calling ExaminationInfoUpdatingRequestContractDetail., must be bigger than or equal to 1.');
        }
        $this->container['companyAddressChrome'] = $companyAddressChrome;

        return $this;
    }

    /**
     * Gets companyAddressChromeKana.
     *
     * @return string|null
     */
    public function getCompanyAddressChromeKana(): mixed
    {
        return $this->container['companyAddressChromeKana'];
    }

    /**
     * Sets companyAddressChromeKana.
     *
     * @param string|null $companyAddressChromeKana 会社住所 番地（カナ）\\ 形式： 全角カタカナ
     */
    public function setCompanyAddressChromeKana(mixed $companyAddressChromeKana): static
    {
        if (is_null($companyAddressChromeKana)) {
            $this->openAPINullablesSetToNull[] = 'companyAddressChromeKana';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('companyAddressChromeKana', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($companyAddressChromeKana) && mb_strlen($companyAddressChromeKana) > 100) {
            throw new \InvalidArgumentException('invalid length for $companyAddressChromeKana when calling ExaminationInfoUpdatingRequestContractDetail., must be smaller than or equal to 100.');
        }
        if (!is_null($companyAddressChromeKana) && mb_strlen($companyAddressChromeKana) < 1) {
            throw new \InvalidArgumentException('invalid length for $companyAddressChromeKana when calling ExaminationInfoUpdatingRequestContractDetail., must be bigger than or equal to 1.');
        }
        $this->container['companyAddressChromeKana'] = $companyAddressChromeKana;

        return $this;
    }

    /**
     * Gets companyAddressBuildingName.
     *
     * @return string|null
     */
    public function getCompanyAddressBuildingName(): mixed
    {
        return $this->container['companyAddressBuildingName'];
    }

    /**
     * Sets companyAddressBuildingName.
     *
     * @param string|null $companyAddressBuildingName 会社住所 ビル名\\ 形式： 漢字/ひらがな/カタカナ/半角英数
     */
    public function setCompanyAddressBuildingName(mixed $companyAddressBuildingName): static
    {
        if (is_null($companyAddressBuildingName)) {
            $this->openAPINullablesSetToNull[] = 'companyAddressBuildingName';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('companyAddressBuildingName', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($companyAddressBuildingName) && mb_strlen($companyAddressBuildingName) > 100) {
            throw new \InvalidArgumentException('invalid length for $companyAddressBuildingName when calling ExaminationInfoUpdatingRequestContractDetail., must be smaller than or equal to 100.');
        }
        if (!is_null($companyAddressBuildingName) && mb_strlen($companyAddressBuildingName) < 1) {
            throw new \InvalidArgumentException('invalid length for $companyAddressBuildingName when calling ExaminationInfoUpdatingRequestContractDetail., must be bigger than or equal to 1.');
        }
        $this->container['companyAddressBuildingName'] = $companyAddressBuildingName;

        return $this;
    }

    /**
     * Gets companyAddressBuildingNameKana.
     *
     * @return string|null
     */
    public function getCompanyAddressBuildingNameKana(): mixed
    {
        return $this->container['companyAddressBuildingNameKana'];
    }

    /**
     * Sets companyAddressBuildingNameKana.
     *
     * @param string|null $companyAddressBuildingNameKana 会社住所 ビル名（カナ）\\ 形式： 全角カタカナ
     */
    public function setCompanyAddressBuildingNameKana(mixed $companyAddressBuildingNameKana): static
    {
        if (is_null($companyAddressBuildingNameKana)) {
            $this->openAPINullablesSetToNull[] = 'companyAddressBuildingNameKana';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('companyAddressBuildingNameKana', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($companyAddressBuildingNameKana) && mb_strlen($companyAddressBuildingNameKana) > 100) {
            throw new \InvalidArgumentException('invalid length for $companyAddressBuildingNameKana when calling ExaminationInfoUpdatingRequestContractDetail., must be smaller than or equal to 100.');
        }
        if (!is_null($companyAddressBuildingNameKana) && mb_strlen($companyAddressBuildingNameKana) < 1) {
            throw new \InvalidArgumentException('invalid length for $companyAddressBuildingNameKana when calling ExaminationInfoUpdatingRequestContractDetail., must be bigger than or equal to 1.');
        }
        $this->container['companyAddressBuildingNameKana'] = $companyAddressBuildingNameKana;

        return $this;
    }

    /**
     * Gets companyTel.
     *
     * @return string|null
     */
    public function getCompanyTel(): mixed
    {
        return $this->container['companyTel'];
    }

    /**
     * Sets companyTel.
     *
     * @param string|null $companyTel 会社情報 電話番号\\ 形式： 半角数字（ハイフンなし）
     */
    public function setCompanyTel(mixed $companyTel): static
    {
        if (is_null($companyTel)) {
            $this->openAPINullablesSetToNull[] = 'companyTel';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('companyTel', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($companyTel) && mb_strlen($companyTel) > 15) {
            throw new \InvalidArgumentException('invalid length for $companyTel when calling ExaminationInfoUpdatingRequestContractDetail., must be smaller than or equal to 15.');
        }
        if (!is_null($companyTel) && mb_strlen($companyTel) < 1) {
            throw new \InvalidArgumentException('invalid length for $companyTel when calling ExaminationInfoUpdatingRequestContractDetail., must be bigger than or equal to 1.');
        }
        $this->container['companyTel'] = $companyTel;

        return $this;
    }

    /**
     * Gets representativeLastName.
     *
     * @return string|null
     */
    public function getRepresentativeLastName(): mixed
    {
        return $this->container['representativeLastName'];
    }

    /**
     * Sets representativeLastName.
     *
     * @param string|null $representativeLastName 代表者 姓 形式： 漢字/ひらがな/カタカナ/半角英字
     */
    public function setRepresentativeLastName(mixed $representativeLastName): static
    {
        if (is_null($representativeLastName)) {
            $this->openAPINullablesSetToNull[] = 'representativeLastName';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('representativeLastName', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($representativeLastName) && mb_strlen($representativeLastName) > 20) {
            throw new \InvalidArgumentException('invalid length for $representativeLastName when calling ExaminationInfoUpdatingRequestContractDetail., must be smaller than or equal to 20.');
        }
        if (!is_null($representativeLastName) && mb_strlen($representativeLastName) < 1) {
            throw new \InvalidArgumentException('invalid length for $representativeLastName when calling ExaminationInfoUpdatingRequestContractDetail., must be bigger than or equal to 1.');
        }
        $this->container['representativeLastName'] = $representativeLastName;

        return $this;
    }

    /**
     * Gets representativeLastNameKana.
     *
     * @return string|null
     */
    public function getRepresentativeLastNameKana(): mixed
    {
        return $this->container['representativeLastNameKana'];
    }

    /**
     * Sets representativeLastNameKana.
     *
     * @param string|null $representativeLastNameKana 代表者 姓（カナ）\\ 形式： 全角カナ
     */
    public function setRepresentativeLastNameKana(mixed $representativeLastNameKana): static
    {
        if (is_null($representativeLastNameKana)) {
            $this->openAPINullablesSetToNull[] = 'representativeLastNameKana';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('representativeLastNameKana', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($representativeLastNameKana) && mb_strlen($representativeLastNameKana) > 20) {
            throw new \InvalidArgumentException('invalid length for $representativeLastNameKana when calling ExaminationInfoUpdatingRequestContractDetail., must be smaller than or equal to 20.');
        }
        if (!is_null($representativeLastNameKana) && mb_strlen($representativeLastNameKana) < 1) {
            throw new \InvalidArgumentException('invalid length for $representativeLastNameKana when calling ExaminationInfoUpdatingRequestContractDetail., must be bigger than or equal to 1.');
        }
        $this->container['representativeLastNameKana'] = $representativeLastNameKana;

        return $this;
    }

    /**
     * Gets representativeFirstName.
     *
     * @return string|null
     */
    public function getRepresentativeFirstName(): mixed
    {
        return $this->container['representativeFirstName'];
    }

    /**
     * Sets representativeFirstName.
     *
     * @param string|null $representativeFirstName 代表者 名\\ 形式： 漢字/ひらがな/カタカナ/半角英字
     */
    public function setRepresentativeFirstName(mixed $representativeFirstName): static
    {
        if (is_null($representativeFirstName)) {
            $this->openAPINullablesSetToNull[] = 'representativeFirstName';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('representativeFirstName', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($representativeFirstName) && mb_strlen($representativeFirstName) > 20) {
            throw new \InvalidArgumentException('invalid length for $representativeFirstName when calling ExaminationInfoUpdatingRequestContractDetail., must be smaller than or equal to 20.');
        }
        if (!is_null($representativeFirstName) && mb_strlen($representativeFirstName) < 1) {
            throw new \InvalidArgumentException('invalid length for $representativeFirstName when calling ExaminationInfoUpdatingRequestContractDetail., must be bigger than or equal to 1.');
        }
        $this->container['representativeFirstName'] = $representativeFirstName;

        return $this;
    }

    /**
     * Gets representativeFirstNameKana.
     *
     * @return string|null
     */
    public function getRepresentativeFirstNameKana(): mixed
    {
        return $this->container['representativeFirstNameKana'];
    }

    /**
     * Sets representativeFirstNameKana.
     *
     * @param string|null $representativeFirstNameKana 代表者 名（カナ）\\ 形式： 全角カナ
     */
    public function setRepresentativeFirstNameKana(mixed $representativeFirstNameKana): static
    {
        if (is_null($representativeFirstNameKana)) {
            $this->openAPINullablesSetToNull[] = 'representativeFirstNameKana';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('representativeFirstNameKana', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($representativeFirstNameKana) && mb_strlen($representativeFirstNameKana) > 20) {
            throw new \InvalidArgumentException('invalid length for $representativeFirstNameKana when calling ExaminationInfoUpdatingRequestContractDetail., must be smaller than or equal to 20.');
        }
        if (!is_null($representativeFirstNameKana) && mb_strlen($representativeFirstNameKana) < 1) {
            throw new \InvalidArgumentException('invalid length for $representativeFirstNameKana when calling ExaminationInfoUpdatingRequestContractDetail., must be bigger than or equal to 1.');
        }
        $this->container['representativeFirstNameKana'] = $representativeFirstNameKana;

        return $this;
    }

    /**
     * Gets representativeBirthday.
     *
     * @return string|null
     */
    public function getRepresentativeBirthday(): mixed
    {
        return $this->container['representativeBirthday'];
    }

    /**
     * Sets representativeBirthday.
     *
     * @param string|null $representativeBirthday 代表者 生年月日\\ \\ 形式：`yyyy/MM/dd`
     */
    public function setRepresentativeBirthday(mixed $representativeBirthday): static
    {
        if (is_null($representativeBirthday)) {
            $this->openAPINullablesSetToNull[] = 'representativeBirthday';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('representativeBirthday', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($representativeBirthday) && is_string($representativeBirthday) && !preg_match('/^\\d{4}\\/\\d{2}\\/\\d{2}$/', $representativeBirthday)) {
            throw new \InvalidArgumentException('invalid value for $representativeBirthday when calling ExaminationInfoUpdatingRequestContractDetail., must conform to the pattern /^\\d{4}\\/\\d{2}\\/\\d{2}$/.');
        }
        $this->container['representativeBirthday'] = $representativeBirthday;

        return $this;
    }

    /**
     * Gets representativeGender.
     *
     * @return RepresentativeGender|null
     */
    public function getRepresentativeGender(): mixed
    {
        return $this->container['representativeGender'];
    }

    /**
     * Sets representativeGender.
     *
     * @param RepresentativeGender|null $representativeGender representativeGender
     */
    public function setRepresentativeGender(mixed $representativeGender): static
    {
        if (is_null($representativeGender)) {
            $this->openAPINullablesSetToNull[] = 'representativeGender';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('representativeGender', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['representativeGender'] = $representativeGender;

        return $this;
    }

    /**
     * Gets representativePostalCode.
     *
     * @return string|null
     */
    public function getRepresentativePostalCode(): mixed
    {
        return $this->container['representativePostalCode'];
    }

    /**
     * Sets representativePostalCode.
     *
     * @param string|null $representativePostalCode 代表者 住所 郵便番号\\ 形式：`xxx-xxxx`
     */
    public function setRepresentativePostalCode(mixed $representativePostalCode): static
    {
        if (is_null($representativePostalCode)) {
            $this->openAPINullablesSetToNull[] = 'representativePostalCode';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('representativePostalCode', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($representativePostalCode) && mb_strlen($representativePostalCode) > 8) {
            throw new \InvalidArgumentException('invalid length for $representativePostalCode when calling ExaminationInfoUpdatingRequestContractDetail., must be smaller than or equal to 8.');
        }
        if (!is_null($representativePostalCode) && mb_strlen($representativePostalCode) < 8) {
            throw new \InvalidArgumentException('invalid length for $representativePostalCode when calling ExaminationInfoUpdatingRequestContractDetail., must be bigger than or equal to 8.');
        }
        if (!is_null($representativePostalCode) && is_string($representativePostalCode) && !preg_match('/^\\d{3}-\\d{4}$/', $representativePostalCode)) {
            throw new \InvalidArgumentException('invalid value for $representativePostalCode when calling ExaminationInfoUpdatingRequestContractDetail., must conform to the pattern /^\\d{3}-\\d{4}$/.');
        }
        $this->container['representativePostalCode'] = $representativePostalCode;

        return $this;
    }

    /**
     * Gets representativePrefecture.
     *
     * @return string|null
     */
    public function getRepresentativePrefecture(): mixed
    {
        return $this->container['representativePrefecture'];
    }

    /**
     * Sets representativePrefecture.
     *
     * @param string|null $representativePrefecture 代表者 住所 都道府県\\ 形式： 漢字
     */
    public function setRepresentativePrefecture(mixed $representativePrefecture): static
    {
        if (is_null($representativePrefecture)) {
            $this->openAPINullablesSetToNull[] = 'representativePrefecture';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('representativePrefecture', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($representativePrefecture) && mb_strlen($representativePrefecture) > 4) {
            throw new \InvalidArgumentException('invalid length for $representativePrefecture when calling ExaminationInfoUpdatingRequestContractDetail., must be smaller than or equal to 4.');
        }
        if (!is_null($representativePrefecture) && mb_strlen($representativePrefecture) < 1) {
            throw new \InvalidArgumentException('invalid length for $representativePrefecture when calling ExaminationInfoUpdatingRequestContractDetail., must be bigger than or equal to 1.');
        }
        $this->container['representativePrefecture'] = $representativePrefecture;

        return $this;
    }

    /**
     * Gets representativePrefectureKana.
     *
     * @return string|null
     */
    public function getRepresentativePrefectureKana(): mixed
    {
        return $this->container['representativePrefectureKana'];
    }

    /**
     * Sets representativePrefectureKana.
     *
     * @param string|null $representativePrefectureKana 代表者 住所 都道府県（カナ）\\ 形式： 全角カナ
     */
    public function setRepresentativePrefectureKana(mixed $representativePrefectureKana): static
    {
        if (is_null($representativePrefectureKana)) {
            $this->openAPINullablesSetToNull[] = 'representativePrefectureKana';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('representativePrefectureKana', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($representativePrefectureKana) && mb_strlen($representativePrefectureKana) > 6) {
            throw new \InvalidArgumentException('invalid length for $representativePrefectureKana when calling ExaminationInfoUpdatingRequestContractDetail., must be smaller than or equal to 6.');
        }
        if (!is_null($representativePrefectureKana) && mb_strlen($representativePrefectureKana) < 1) {
            throw new \InvalidArgumentException('invalid length for $representativePrefectureKana when calling ExaminationInfoUpdatingRequestContractDetail., must be bigger than or equal to 1.');
        }
        $this->container['representativePrefectureKana'] = $representativePrefectureKana;

        return $this;
    }

    /**
     * Gets representativeAddressMunicipality.
     *
     * @return string|null
     */
    public function getRepresentativeAddressMunicipality(): mixed
    {
        return $this->container['representativeAddressMunicipality'];
    }

    /**
     * Sets representativeAddressMunicipality.
     *
     * @param string|null $representativeAddressMunicipality 代表者 住所 市区町村\\ 形式： 漢字/ひらがな/カタカナ/半角英数
     */
    public function setRepresentativeAddressMunicipality(mixed $representativeAddressMunicipality): static
    {
        if (is_null($representativeAddressMunicipality)) {
            $this->openAPINullablesSetToNull[] = 'representativeAddressMunicipality';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('representativeAddressMunicipality', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($representativeAddressMunicipality) && mb_strlen($representativeAddressMunicipality) > 50) {
            throw new \InvalidArgumentException('invalid length for $representativeAddressMunicipality when calling ExaminationInfoUpdatingRequestContractDetail., must be smaller than or equal to 50.');
        }
        if (!is_null($representativeAddressMunicipality) && mb_strlen($representativeAddressMunicipality) < 1) {
            throw new \InvalidArgumentException('invalid length for $representativeAddressMunicipality when calling ExaminationInfoUpdatingRequestContractDetail., must be bigger than or equal to 1.');
        }
        $this->container['representativeAddressMunicipality'] = $representativeAddressMunicipality;

        return $this;
    }

    /**
     * Gets representativeAddressMunicipalityKana.
     *
     * @return string|null
     */
    public function getRepresentativeAddressMunicipalityKana(): mixed
    {
        return $this->container['representativeAddressMunicipalityKana'];
    }

    /**
     * Sets representativeAddressMunicipalityKana.
     *
     * @param string|null $representativeAddressMunicipalityKana 代表者 住所 市区町村（カナ）\\ 形式： 全角カナ
     */
    public function setRepresentativeAddressMunicipalityKana(mixed $representativeAddressMunicipalityKana): static
    {
        if (is_null($representativeAddressMunicipalityKana)) {
            $this->openAPINullablesSetToNull[] = 'representativeAddressMunicipalityKana';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('representativeAddressMunicipalityKana', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($representativeAddressMunicipalityKana) && mb_strlen($representativeAddressMunicipalityKana) > 100) {
            throw new \InvalidArgumentException('invalid length for $representativeAddressMunicipalityKana when calling ExaminationInfoUpdatingRequestContractDetail., must be smaller than or equal to 100.');
        }
        if (!is_null($representativeAddressMunicipalityKana) && mb_strlen($representativeAddressMunicipalityKana) < 1) {
            throw new \InvalidArgumentException('invalid length for $representativeAddressMunicipalityKana when calling ExaminationInfoUpdatingRequestContractDetail., must be bigger than or equal to 1.');
        }
        $this->container['representativeAddressMunicipalityKana'] = $representativeAddressMunicipalityKana;

        return $this;
    }

    /**
     * Gets representativeAddressSection.
     *
     * @return string|null
     */
    public function getRepresentativeAddressSection(): mixed
    {
        return $this->container['representativeAddressSection'];
    }

    /**
     * Sets representativeAddressSection.
     *
     * @param string|null $representativeAddressSection 代表者 住所 町域\\ 形式： 漢字/ひらがな/カタカナ/半角英数
     */
    public function setRepresentativeAddressSection(mixed $representativeAddressSection): static
    {
        if (is_null($representativeAddressSection)) {
            $this->openAPINullablesSetToNull[] = 'representativeAddressSection';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('representativeAddressSection', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($representativeAddressSection) && mb_strlen($representativeAddressSection) > 50) {
            throw new \InvalidArgumentException('invalid length for $representativeAddressSection when calling ExaminationInfoUpdatingRequestContractDetail., must be smaller than or equal to 50.');
        }
        if (!is_null($representativeAddressSection) && mb_strlen($representativeAddressSection) < 1) {
            throw new \InvalidArgumentException('invalid length for $representativeAddressSection when calling ExaminationInfoUpdatingRequestContractDetail., must be bigger than or equal to 1.');
        }
        $this->container['representativeAddressSection'] = $representativeAddressSection;

        return $this;
    }

    /**
     * Gets representativeAddressSectionKana.
     *
     * @return string|null
     */
    public function getRepresentativeAddressSectionKana(): mixed
    {
        return $this->container['representativeAddressSectionKana'];
    }

    /**
     * Sets representativeAddressSectionKana.
     *
     * @param string|null $representativeAddressSectionKana 代表者 住所 町域（カナ）\\ 形式： 全角カナ
     */
    public function setRepresentativeAddressSectionKana(mixed $representativeAddressSectionKana): static
    {
        if (is_null($representativeAddressSectionKana)) {
            $this->openAPINullablesSetToNull[] = 'representativeAddressSectionKana';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('representativeAddressSectionKana', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($representativeAddressSectionKana) && mb_strlen($representativeAddressSectionKana) > 100) {
            throw new \InvalidArgumentException('invalid length for $representativeAddressSectionKana when calling ExaminationInfoUpdatingRequestContractDetail., must be smaller than or equal to 100.');
        }
        if (!is_null($representativeAddressSectionKana) && mb_strlen($representativeAddressSectionKana) < 1) {
            throw new \InvalidArgumentException('invalid length for $representativeAddressSectionKana when calling ExaminationInfoUpdatingRequestContractDetail., must be bigger than or equal to 1.');
        }
        $this->container['representativeAddressSectionKana'] = $representativeAddressSectionKana;

        return $this;
    }

    /**
     * Gets representativeAddressChrome.
     *
     * @return string|null
     */
    public function getRepresentativeAddressChrome(): mixed
    {
        return $this->container['representativeAddressChrome'];
    }

    /**
     * Sets representativeAddressChrome.
     *
     * @param string|null $representativeAddressChrome 代表者 住所 番地\\ 形式： 漢字/ひらがな/カタカナ/半角英数
     */
    public function setRepresentativeAddressChrome(mixed $representativeAddressChrome): static
    {
        if (is_null($representativeAddressChrome)) {
            $this->openAPINullablesSetToNull[] = 'representativeAddressChrome';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('representativeAddressChrome', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($representativeAddressChrome) && mb_strlen($representativeAddressChrome) > 50) {
            throw new \InvalidArgumentException('invalid length for $representativeAddressChrome when calling ExaminationInfoUpdatingRequestContractDetail., must be smaller than or equal to 50.');
        }
        if (!is_null($representativeAddressChrome) && mb_strlen($representativeAddressChrome) < 1) {
            throw new \InvalidArgumentException('invalid length for $representativeAddressChrome when calling ExaminationInfoUpdatingRequestContractDetail., must be bigger than or equal to 1.');
        }
        $this->container['representativeAddressChrome'] = $representativeAddressChrome;

        return $this;
    }

    /**
     * Gets representativeAddressChromeKana.
     *
     * @return string|null
     */
    public function getRepresentativeAddressChromeKana(): mixed
    {
        return $this->container['representativeAddressChromeKana'];
    }

    /**
     * Sets representativeAddressChromeKana.
     *
     * @param string|null $representativeAddressChromeKana 代表者 住所 番地（カナ）
     */
    public function setRepresentativeAddressChromeKana(mixed $representativeAddressChromeKana): static
    {
        if (is_null($representativeAddressChromeKana)) {
            $this->openAPINullablesSetToNull[] = 'representativeAddressChromeKana';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('representativeAddressChromeKana', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($representativeAddressChromeKana) && mb_strlen($representativeAddressChromeKana) > 100) {
            throw new \InvalidArgumentException('invalid length for $representativeAddressChromeKana when calling ExaminationInfoUpdatingRequestContractDetail., must be smaller than or equal to 100.');
        }
        if (!is_null($representativeAddressChromeKana) && mb_strlen($representativeAddressChromeKana) < 1) {
            throw new \InvalidArgumentException('invalid length for $representativeAddressChromeKana when calling ExaminationInfoUpdatingRequestContractDetail., must be bigger than or equal to 1.');
        }
        $this->container['representativeAddressChromeKana'] = $representativeAddressChromeKana;

        return $this;
    }

    /**
     * Gets representativeAddressBuildingName.
     *
     * @return string|null
     */
    public function getRepresentativeAddressBuildingName(): mixed
    {
        return $this->container['representativeAddressBuildingName'];
    }

    /**
     * Sets representativeAddressBuildingName.
     *
     * @param string|null $representativeAddressBuildingName 代表者 住所 建物名\\ 形式： 漢字/ひらがな/カタカナ/半角英数
     */
    public function setRepresentativeAddressBuildingName(mixed $representativeAddressBuildingName): static
    {
        if (is_null($representativeAddressBuildingName)) {
            $this->openAPINullablesSetToNull[] = 'representativeAddressBuildingName';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('representativeAddressBuildingName', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($representativeAddressBuildingName) && mb_strlen($representativeAddressBuildingName) > 100) {
            throw new \InvalidArgumentException('invalid length for $representativeAddressBuildingName when calling ExaminationInfoUpdatingRequestContractDetail., must be smaller than or equal to 100.');
        }
        if (!is_null($representativeAddressBuildingName) && mb_strlen($representativeAddressBuildingName) < 1) {
            throw new \InvalidArgumentException('invalid length for $representativeAddressBuildingName when calling ExaminationInfoUpdatingRequestContractDetail., must be bigger than or equal to 1.');
        }
        $this->container['representativeAddressBuildingName'] = $representativeAddressBuildingName;

        return $this;
    }

    /**
     * Gets representativeAddressBuildingNameKana.
     *
     * @return string|null
     */
    public function getRepresentativeAddressBuildingNameKana(): mixed
    {
        return $this->container['representativeAddressBuildingNameKana'];
    }

    /**
     * Sets representativeAddressBuildingNameKana.
     *
     * @param string|null $representativeAddressBuildingNameKana 代表者 住所 建物名（カナ）\\ 形式： 全角カナ
     */
    public function setRepresentativeAddressBuildingNameKana(mixed $representativeAddressBuildingNameKana): static
    {
        if (is_null($representativeAddressBuildingNameKana)) {
            $this->openAPINullablesSetToNull[] = 'representativeAddressBuildingNameKana';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('representativeAddressBuildingNameKana', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($representativeAddressBuildingNameKana) && mb_strlen($representativeAddressBuildingNameKana) > 100) {
            throw new \InvalidArgumentException('invalid length for $representativeAddressBuildingNameKana when calling ExaminationInfoUpdatingRequestContractDetail., must be smaller than or equal to 100.');
        }
        if (!is_null($representativeAddressBuildingNameKana) && mb_strlen($representativeAddressBuildingNameKana) < 1) {
            throw new \InvalidArgumentException('invalid length for $representativeAddressBuildingNameKana when calling ExaminationInfoUpdatingRequestContractDetail., must be bigger than or equal to 1.');
        }
        $this->container['representativeAddressBuildingNameKana'] = $representativeAddressBuildingNameKana;

        return $this;
    }

    /**
     * Gets representativeTel.
     *
     * @return string|null
     */
    public function getRepresentativeTel(): mixed
    {
        return $this->container['representativeTel'];
    }

    /**
     * Sets representativeTel.
     *
     * @param string|null $representativeTel 代表者 電話番号\\ 形式： 半角数字（ハイフンなし、PHS番号不可）
     */
    public function setRepresentativeTel(mixed $representativeTel): static
    {
        if (is_null($representativeTel)) {
            $this->openAPINullablesSetToNull[] = 'representativeTel';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('representativeTel', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($representativeTel) && mb_strlen($representativeTel) > 12) {
            throw new \InvalidArgumentException('invalid length for $representativeTel when calling ExaminationInfoUpdatingRequestContractDetail., must be smaller than or equal to 12.');
        }
        if (!is_null($representativeTel) && mb_strlen($representativeTel) < 11) {
            throw new \InvalidArgumentException('invalid length for $representativeTel when calling ExaminationInfoUpdatingRequestContractDetail., must be bigger than or equal to 11.');
        }
        if (!is_null($representativeTel) && is_string($representativeTel) && !preg_match('/^\\d{11,12}$/', $representativeTel)) {
            throw new \InvalidArgumentException('invalid value for $representativeTel when calling ExaminationInfoUpdatingRequestContractDetail., must conform to the pattern /^\\d{11,12}$/.');
        }
        $this->container['representativeTel'] = $representativeTel;

        return $this;
    }

    /**
     * Gets staff1LastName.
     *
     * @return string|null
     */
    public function getStaff1LastName(): mixed
    {
        return $this->container['staff1LastName'];
    }

    /**
     * Sets staff1LastName.
     *
     * @param string|null $staff1LastName 担当者1 姓\\ 形式： 漢字/ひらがな/カタカナ/半角英字\\ \\ fincodeは担当者1,2宛てに審査結果の通知や審査保留対応の連絡などを行います
     */
    public function setStaff1LastName(mixed $staff1LastName): static
    {
        if (is_null($staff1LastName)) {
            $this->openAPINullablesSetToNull[] = 'staff1LastName';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('staff1LastName', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($staff1LastName) && mb_strlen($staff1LastName) > 20) {
            throw new \InvalidArgumentException('invalid length for $staff1LastName when calling ExaminationInfoUpdatingRequestContractDetail., must be smaller than or equal to 20.');
        }
        if (!is_null($staff1LastName) && mb_strlen($staff1LastName) < 1) {
            throw new \InvalidArgumentException('invalid length for $staff1LastName when calling ExaminationInfoUpdatingRequestContractDetail., must be bigger than or equal to 1.');
        }
        $this->container['staff1LastName'] = $staff1LastName;

        return $this;
    }

    /**
     * Gets staff1LastNameKana.
     *
     * @return string|null
     */
    public function getStaff1LastNameKana(): mixed
    {
        return $this->container['staff1LastNameKana'];
    }

    /**
     * Sets staff1LastNameKana.
     *
     * @param string|null $staff1LastNameKana 担当者1 姓（カナ）\\ 形式： 全角カナ
     */
    public function setStaff1LastNameKana(mixed $staff1LastNameKana): static
    {
        if (is_null($staff1LastNameKana)) {
            $this->openAPINullablesSetToNull[] = 'staff1LastNameKana';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('staff1LastNameKana', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($staff1LastNameKana) && mb_strlen($staff1LastNameKana) > 20) {
            throw new \InvalidArgumentException('invalid length for $staff1LastNameKana when calling ExaminationInfoUpdatingRequestContractDetail., must be smaller than or equal to 20.');
        }
        if (!is_null($staff1LastNameKana) && mb_strlen($staff1LastNameKana) < 1) {
            throw new \InvalidArgumentException('invalid length for $staff1LastNameKana when calling ExaminationInfoUpdatingRequestContractDetail., must be bigger than or equal to 1.');
        }
        $this->container['staff1LastNameKana'] = $staff1LastNameKana;

        return $this;
    }

    /**
     * Gets staff1FirstName.
     *
     * @return string|null
     */
    public function getStaff1FirstName(): mixed
    {
        return $this->container['staff1FirstName'];
    }

    /**
     * Sets staff1FirstName.
     *
     * @param string|null $staff1FirstName 担当者1 名\\ 形式： 漢字/ひらがな/カタカナ/半角英字
     */
    public function setStaff1FirstName(mixed $staff1FirstName): static
    {
        if (is_null($staff1FirstName)) {
            $this->openAPINullablesSetToNull[] = 'staff1FirstName';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('staff1FirstName', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($staff1FirstName) && mb_strlen($staff1FirstName) > 20) {
            throw new \InvalidArgumentException('invalid length for $staff1FirstName when calling ExaminationInfoUpdatingRequestContractDetail., must be smaller than or equal to 20.');
        }
        if (!is_null($staff1FirstName) && mb_strlen($staff1FirstName) < 1) {
            throw new \InvalidArgumentException('invalid length for $staff1FirstName when calling ExaminationInfoUpdatingRequestContractDetail., must be bigger than or equal to 1.');
        }
        $this->container['staff1FirstName'] = $staff1FirstName;

        return $this;
    }

    /**
     * Gets staff1FirstNameKana.
     *
     * @return string|null
     */
    public function getStaff1FirstNameKana(): mixed
    {
        return $this->container['staff1FirstNameKana'];
    }

    /**
     * Sets staff1FirstNameKana.
     *
     * @param string|null $staff1FirstNameKana 担当者1 名（カナ）\\ 形式： 全角カナ
     */
    public function setStaff1FirstNameKana(mixed $staff1FirstNameKana): static
    {
        if (is_null($staff1FirstNameKana)) {
            $this->openAPINullablesSetToNull[] = 'staff1FirstNameKana';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('staff1FirstNameKana', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($staff1FirstNameKana) && mb_strlen($staff1FirstNameKana) > 20) {
            throw new \InvalidArgumentException('invalid length for $staff1FirstNameKana when calling ExaminationInfoUpdatingRequestContractDetail., must be smaller than or equal to 20.');
        }
        if (!is_null($staff1FirstNameKana) && mb_strlen($staff1FirstNameKana) < 1) {
            throw new \InvalidArgumentException('invalid length for $staff1FirstNameKana when calling ExaminationInfoUpdatingRequestContractDetail., must be bigger than or equal to 1.');
        }
        $this->container['staff1FirstNameKana'] = $staff1FirstNameKana;

        return $this;
    }

    /**
     * Gets staff1CompanyName.
     *
     * @return string|null
     */
    public function getStaff1CompanyName(): mixed
    {
        return $this->container['staff1CompanyName'];
    }

    /**
     * Sets staff1CompanyName.
     *
     * @param string|null $staff1CompanyName 担当者1 会社名\\ 形式： 漢字/ひらがな/カタカナ/半角英数
     */
    public function setStaff1CompanyName(mixed $staff1CompanyName): static
    {
        if (is_null($staff1CompanyName)) {
            $this->openAPINullablesSetToNull[] = 'staff1CompanyName';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('staff1CompanyName', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($staff1CompanyName) && mb_strlen($staff1CompanyName) > 150) {
            throw new \InvalidArgumentException('invalid length for $staff1CompanyName when calling ExaminationInfoUpdatingRequestContractDetail., must be smaller than or equal to 150.');
        }
        if (!is_null($staff1CompanyName) && mb_strlen($staff1CompanyName) < 1) {
            throw new \InvalidArgumentException('invalid length for $staff1CompanyName when calling ExaminationInfoUpdatingRequestContractDetail., must be bigger than or equal to 1.');
        }
        $this->container['staff1CompanyName'] = $staff1CompanyName;

        return $this;
    }

    /**
     * Gets staff1Belongs.
     *
     * @return string|null
     */
    public function getStaff1Belongs(): mixed
    {
        return $this->container['staff1Belongs'];
    }

    /**
     * Sets staff1Belongs.
     *
     * @param string|null $staff1Belongs 担当者1 部署名\\ 形式： 漢字/ひらがな/カタカナ/半角英数
     */
    public function setStaff1Belongs(mixed $staff1Belongs): static
    {
        if (is_null($staff1Belongs)) {
            $this->openAPINullablesSetToNull[] = 'staff1Belongs';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('staff1Belongs', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($staff1Belongs) && mb_strlen($staff1Belongs) > 50) {
            throw new \InvalidArgumentException('invalid length for $staff1Belongs when calling ExaminationInfoUpdatingRequestContractDetail., must be smaller than or equal to 50.');
        }
        if (!is_null($staff1Belongs) && mb_strlen($staff1Belongs) < 1) {
            throw new \InvalidArgumentException('invalid length for $staff1Belongs when calling ExaminationInfoUpdatingRequestContractDetail., must be bigger than or equal to 1.');
        }
        $this->container['staff1Belongs'] = $staff1Belongs;

        return $this;
    }

    /**
     * Gets staff1Tel.
     *
     * @return string|null
     */
    public function getStaff1Tel(): mixed
    {
        return $this->container['staff1Tel'];
    }

    /**
     * Sets staff1Tel.
     *
     * @param string|null $staff1Tel 担当者1 電話番号\\ 形式： 半角数字（ハイフンなし、PHS番号不可）
     */
    public function setStaff1Tel(mixed $staff1Tel): static
    {
        if (is_null($staff1Tel)) {
            $this->openAPINullablesSetToNull[] = 'staff1Tel';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('staff1Tel', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($staff1Tel) && mb_strlen($staff1Tel) > 12) {
            throw new \InvalidArgumentException('invalid length for $staff1Tel when calling ExaminationInfoUpdatingRequestContractDetail., must be smaller than or equal to 12.');
        }
        if (!is_null($staff1Tel) && mb_strlen($staff1Tel) < 11) {
            throw new \InvalidArgumentException('invalid length for $staff1Tel when calling ExaminationInfoUpdatingRequestContractDetail., must be bigger than or equal to 11.');
        }
        if (!is_null($staff1Tel) && is_string($staff1Tel) && !preg_match('/^\\d{11,12}$/', $staff1Tel)) {
            throw new \InvalidArgumentException('invalid value for $staff1Tel when calling ExaminationInfoUpdatingRequestContractDetail., must conform to the pattern /^\\d{11,12}$/.');
        }
        $this->container['staff1Tel'] = $staff1Tel;

        return $this;
    }

    /**
     * Gets staff1Mail.
     *
     * @return string|null
     */
    public function getStaff1Mail(): mixed
    {
        return $this->container['staff1Mail'];
    }

    /**
     * Sets staff1Mail.
     *
     * @param string|null $staff1Mail 担当者1 メールアドレス\\ 形式： RFC 5322
     */
    public function setStaff1Mail(mixed $staff1Mail): static
    {
        if (is_null($staff1Mail)) {
            $this->openAPINullablesSetToNull[] = 'staff1Mail';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('staff1Mail', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($staff1Mail) && mb_strlen($staff1Mail) > 254) {
            throw new \InvalidArgumentException('invalid length for $staff1Mail when calling ExaminationInfoUpdatingRequestContractDetail., must be smaller than or equal to 254.');
        }
        if (!is_null($staff1Mail) && mb_strlen($staff1Mail) < 1) {
            throw new \InvalidArgumentException('invalid length for $staff1Mail when calling ExaminationInfoUpdatingRequestContractDetail., must be bigger than or equal to 1.');
        }
        $this->container['staff1Mail'] = $staff1Mail;

        return $this;
    }

    /**
     * Gets staff2LastName.
     *
     * @return string|null
     */
    public function getStaff2LastName(): mixed
    {
        return $this->container['staff2LastName'];
    }

    /**
     * Sets staff2LastName.
     *
     * @param string|null $staff2LastName 担当者2 姓\\ 形式： 漢字/ひらがな/カタカナ/半角英字
     */
    public function setStaff2LastName(mixed $staff2LastName): static
    {
        if (is_null($staff2LastName)) {
            $this->openAPINullablesSetToNull[] = 'staff2LastName';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('staff2LastName', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($staff2LastName) && mb_strlen($staff2LastName) > 20) {
            throw new \InvalidArgumentException('invalid length for $staff2LastName when calling ExaminationInfoUpdatingRequestContractDetail., must be smaller than or equal to 20.');
        }
        if (!is_null($staff2LastName) && mb_strlen($staff2LastName) < 1) {
            throw new \InvalidArgumentException('invalid length for $staff2LastName when calling ExaminationInfoUpdatingRequestContractDetail., must be bigger than or equal to 1.');
        }
        $this->container['staff2LastName'] = $staff2LastName;

        return $this;
    }

    /**
     * Gets staff2LastNameKana.
     *
     * @return string|null
     */
    public function getStaff2LastNameKana(): mixed
    {
        return $this->container['staff2LastNameKana'];
    }

    /**
     * Sets staff2LastNameKana.
     *
     * @param string|null $staff2LastNameKana 担当者2 姓（カナ）\\ 形式： 全角カナ
     */
    public function setStaff2LastNameKana(mixed $staff2LastNameKana): static
    {
        if (is_null($staff2LastNameKana)) {
            $this->openAPINullablesSetToNull[] = 'staff2LastNameKana';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('staff2LastNameKana', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($staff2LastNameKana) && mb_strlen($staff2LastNameKana) > 20) {
            throw new \InvalidArgumentException('invalid length for $staff2LastNameKana when calling ExaminationInfoUpdatingRequestContractDetail., must be smaller than or equal to 20.');
        }
        if (!is_null($staff2LastNameKana) && mb_strlen($staff2LastNameKana) < 1) {
            throw new \InvalidArgumentException('invalid length for $staff2LastNameKana when calling ExaminationInfoUpdatingRequestContractDetail., must be bigger than or equal to 1.');
        }
        $this->container['staff2LastNameKana'] = $staff2LastNameKana;

        return $this;
    }

    /**
     * Gets staff2FirstName.
     *
     * @return string|null
     */
    public function getStaff2FirstName(): mixed
    {
        return $this->container['staff2FirstName'];
    }

    /**
     * Sets staff2FirstName.
     *
     * @param string|null $staff2FirstName 担当者2 名\\ 形式： 漢字/ひらがな/カタカナ/半角英字
     */
    public function setStaff2FirstName(mixed $staff2FirstName): static
    {
        if (is_null($staff2FirstName)) {
            $this->openAPINullablesSetToNull[] = 'staff2FirstName';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('staff2FirstName', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($staff2FirstName) && mb_strlen($staff2FirstName) > 20) {
            throw new \InvalidArgumentException('invalid length for $staff2FirstName when calling ExaminationInfoUpdatingRequestContractDetail., must be smaller than or equal to 20.');
        }
        if (!is_null($staff2FirstName) && mb_strlen($staff2FirstName) < 1) {
            throw new \InvalidArgumentException('invalid length for $staff2FirstName when calling ExaminationInfoUpdatingRequestContractDetail., must be bigger than or equal to 1.');
        }
        $this->container['staff2FirstName'] = $staff2FirstName;

        return $this;
    }

    /**
     * Gets staff2FirstNameKana.
     *
     * @return string|null
     */
    public function getStaff2FirstNameKana(): mixed
    {
        return $this->container['staff2FirstNameKana'];
    }

    /**
     * Sets staff2FirstNameKana.
     *
     * @param string|null $staff2FirstNameKana 担当者2 名（カナ）\\ 形式： 全角カナ
     */
    public function setStaff2FirstNameKana(mixed $staff2FirstNameKana): static
    {
        if (is_null($staff2FirstNameKana)) {
            $this->openAPINullablesSetToNull[] = 'staff2FirstNameKana';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('staff2FirstNameKana', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($staff2FirstNameKana) && mb_strlen($staff2FirstNameKana) > 20) {
            throw new \InvalidArgumentException('invalid length for $staff2FirstNameKana when calling ExaminationInfoUpdatingRequestContractDetail., must be smaller than or equal to 20.');
        }
        if (!is_null($staff2FirstNameKana) && mb_strlen($staff2FirstNameKana) < 1) {
            throw new \InvalidArgumentException('invalid length for $staff2FirstNameKana when calling ExaminationInfoUpdatingRequestContractDetail., must be bigger than or equal to 1.');
        }
        $this->container['staff2FirstNameKana'] = $staff2FirstNameKana;

        return $this;
    }

    /**
     * Gets staff2CompanyName.
     *
     * @return string|null
     */
    public function getStaff2CompanyName(): mixed
    {
        return $this->container['staff2CompanyName'];
    }

    /**
     * Sets staff2CompanyName.
     *
     * @param string|null $staff2CompanyName 担当者2 会社名\\ 形式： 漢字/ひらがな/カタカナ/半角英数
     */
    public function setStaff2CompanyName(mixed $staff2CompanyName): static
    {
        if (is_null($staff2CompanyName)) {
            $this->openAPINullablesSetToNull[] = 'staff2CompanyName';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('staff2CompanyName', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($staff2CompanyName) && mb_strlen($staff2CompanyName) > 150) {
            throw new \InvalidArgumentException('invalid length for $staff2CompanyName when calling ExaminationInfoUpdatingRequestContractDetail., must be smaller than or equal to 150.');
        }
        if (!is_null($staff2CompanyName) && mb_strlen($staff2CompanyName) < 1) {
            throw new \InvalidArgumentException('invalid length for $staff2CompanyName when calling ExaminationInfoUpdatingRequestContractDetail., must be bigger than or equal to 1.');
        }
        $this->container['staff2CompanyName'] = $staff2CompanyName;

        return $this;
    }

    /**
     * Gets staff2Belongs.
     *
     * @return string|null
     */
    public function getStaff2Belongs(): mixed
    {
        return $this->container['staff2Belongs'];
    }

    /**
     * Sets staff2Belongs.
     *
     * @param string|null $staff2Belongs 担当者2 部署名\\ 形式： 漢字/ひらがな/カタカナ/半角英数
     */
    public function setStaff2Belongs(mixed $staff2Belongs): static
    {
        if (is_null($staff2Belongs)) {
            $this->openAPINullablesSetToNull[] = 'staff2Belongs';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('staff2Belongs', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($staff2Belongs) && mb_strlen($staff2Belongs) > 50) {
            throw new \InvalidArgumentException('invalid length for $staff2Belongs when calling ExaminationInfoUpdatingRequestContractDetail., must be smaller than or equal to 50.');
        }
        if (!is_null($staff2Belongs) && mb_strlen($staff2Belongs) < 1) {
            throw new \InvalidArgumentException('invalid length for $staff2Belongs when calling ExaminationInfoUpdatingRequestContractDetail., must be bigger than or equal to 1.');
        }
        $this->container['staff2Belongs'] = $staff2Belongs;

        return $this;
    }

    /**
     * Gets staff2Tel.
     *
     * @return string|null
     */
    public function getStaff2Tel(): mixed
    {
        return $this->container['staff2Tel'];
    }

    /**
     * Sets staff2Tel.
     *
     * @param string|null $staff2Tel 担当者2 電話番号\\ 形式： 半角数字（ハイフンなし、PHS番号不可）
     */
    public function setStaff2Tel(mixed $staff2Tel): static
    {
        if (is_null($staff2Tel)) {
            $this->openAPINullablesSetToNull[] = 'staff2Tel';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('staff2Tel', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($staff2Tel) && mb_strlen($staff2Tel) > 12) {
            throw new \InvalidArgumentException('invalid length for $staff2Tel when calling ExaminationInfoUpdatingRequestContractDetail., must be smaller than or equal to 12.');
        }
        if (!is_null($staff2Tel) && mb_strlen($staff2Tel) < 11) {
            throw new \InvalidArgumentException('invalid length for $staff2Tel when calling ExaminationInfoUpdatingRequestContractDetail., must be bigger than or equal to 11.');
        }
        if (!is_null($staff2Tel) && is_string($staff2Tel) && !preg_match('/^\\d{11,12}$/', $staff2Tel)) {
            throw new \InvalidArgumentException('invalid value for $staff2Tel when calling ExaminationInfoUpdatingRequestContractDetail., must conform to the pattern /^\\d{11,12}$/.');
        }
        $this->container['staff2Tel'] = $staff2Tel;

        return $this;
    }

    /**
     * Gets staff2Mail.
     *
     * @return string|null
     */
    public function getStaff2Mail(): mixed
    {
        return $this->container['staff2Mail'];
    }

    /**
     * Sets staff2Mail.
     *
     * @param string|null $staff2Mail 担当者2 メールアドレス\\ 形式： RFC 5322
     */
    public function setStaff2Mail(mixed $staff2Mail): static
    {
        if (is_null($staff2Mail)) {
            $this->openAPINullablesSetToNull[] = 'staff2Mail';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('staff2Mail', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($staff2Mail) && mb_strlen($staff2Mail) > 254) {
            throw new \InvalidArgumentException('invalid length for $staff2Mail when calling ExaminationInfoUpdatingRequestContractDetail., must be smaller than or equal to 254.');
        }
        if (!is_null($staff2Mail) && mb_strlen($staff2Mail) < 1) {
            throw new \InvalidArgumentException('invalid length for $staff2Mail when calling ExaminationInfoUpdatingRequestContractDetail., must be bigger than or equal to 1.');
        }
        $this->container['staff2Mail'] = $staff2Mail;

        return $this;
    }

    /**
     * Gets usedOnApp.
     *
     * @return bool|null
     */
    public function getUsedOnApp(): mixed
    {
        return $this->container['usedOnApp'];
    }

    /**
     * Sets usedOnApp.
     *
     * @param bool|null $usedOnApp ネイティブアプリ利用有無\\ \\ ネイティブアプリでfincodeを使用するかどうか  - `true`: ネイティブアプリでfincodeを使用する
     */
    public function setUsedOnApp(mixed $usedOnApp): static
    {
        if (is_null($usedOnApp)) {
            $this->openAPINullablesSetToNull[] = 'usedOnApp';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('usedOnApp', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['usedOnApp'] = $usedOnApp;

        return $this;
    }

    /**
     * Gets usedOnWeb.
     *
     * @return bool|null
     */
    public function getUsedOnWeb(): mixed
    {
        return $this->container['usedOnWeb'];
    }

    /**
     * Sets usedOnWeb.
     *
     * @param bool|null $usedOnWeb Webサイト利用有無\\ \\ Webサイト/Webアプリでfincodeを使用するかどうか  - `true`: Webサイト/Webアプリでfincodeを使用する
     */
    public function setUsedOnWeb(mixed $usedOnWeb): static
    {
        if (is_null($usedOnWeb)) {
            $this->openAPINullablesSetToNull[] = 'usedOnWeb';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('usedOnWeb', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['usedOnWeb'] = $usedOnWeb;

        return $this;
    }

    /**
     * Gets usedOnOther.
     *
     * @return bool|null
     */
    public function getUsedOnOther(): mixed
    {
        return $this->container['usedOnOther'];
    }

    /**
     * Sets usedOnOther.
     *
     * @param bool|null $usedOnOther その他の箇所での利用有無\\ \\ Webアプリケーションやネイティブアプリ上でない箇所で利用があるかどうか  - `true`: Webアプリ／ネイティブアプリでない箇所でfincodeを使用する
     */
    public function setUsedOnOther(mixed $usedOnOther): static
    {
        if (is_null($usedOnOther)) {
            $this->openAPINullablesSetToNull[] = 'usedOnOther';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('usedOnOther', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['usedOnOther'] = $usedOnOther;

        return $this;
    }

    /**
     * Gets siteExisting.
     *
     * @return float|null
     */
    public function getSiteExisting(): mixed
    {
        return $this->container['siteExisting'];
    }

    /**
     * Sets siteExisting.
     *
     * @param float $siteExisting Webサイトの公開状況\\ \\ fincode審査時点で決済機能を提供するWebサイトが閲覧可能かどうかを示します。  - `0`: fincode審査チームがサイトを閲覧可能 - `1`: fincode審査チームがサイトを閲覧不可能（ただし準備中） - `2`: fincode審査チームがサイトを閲覧不可能
     */
    public function setSiteExisting(mixed $siteExisting): static
    {
        if (is_null($siteExisting)) {
            throw new \InvalidArgumentException('non-nullable siteExisting cannot be null');
        }
        $allowedValues = $this->getSiteExistingAllowableValues();
        if (!in_array($siteExisting, $allowedValues, true)) {
            throw new \InvalidArgumentException(sprintf("Invalid value '%s' for 'siteExisting', must be one of '%s'", $siteExisting, implode("', '", $allowedValues)));
        }
        $this->container['siteExisting'] = $siteExisting;

        return $this;
    }

    /**
     * Gets url.
     *
     * @return string|null
     */
    public function getUrl(): mixed
    {
        return $this->container['url'];
    }

    /**
     * Sets url.
     *
     * @param string|null $url WebサイトURL\\ \\ fincode審査チームがサイトを閲覧するためのURL
     */
    public function setUrl(mixed $url): static
    {
        if (is_null($url)) {
            $this->openAPINullablesSetToNull[] = 'url';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('url', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($url) && mb_strlen($url) > 300) {
            throw new \InvalidArgumentException('invalid length for $url when calling ExaminationInfoUpdatingRequestContractDetail., must be smaller than or equal to 300.');
        }
        if (!is_null($url) && mb_strlen($url) < 1) {
            throw new \InvalidArgumentException('invalid length for $url when calling ExaminationInfoUpdatingRequestContractDetail., must be bigger than or equal to 1.');
        }
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets siteCredential.
     *
     * @return string|null
     */
    public function getSiteCredential(): mixed
    {
        return $this->container['siteCredential'];
    }

    /**
     * Sets siteCredential.
     *
     * @param string|null $siteCredential ログイン情報\\ \\ fincode審査チームがサイトを閲覧するためのログイン情報
     */
    public function setSiteCredential(mixed $siteCredential): static
    {
        if (is_null($siteCredential)) {
            $this->openAPINullablesSetToNull[] = 'siteCredential';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('siteCredential', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($siteCredential) && mb_strlen($siteCredential) > 100) {
            throw new \InvalidArgumentException('invalid length for $siteCredential when calling ExaminationInfoUpdatingRequestContractDetail., must be smaller than or equal to 100.');
        }
        if (!is_null($siteCredential) && mb_strlen($siteCredential) < 1) {
            throw new \InvalidArgumentException('invalid length for $siteCredential when calling ExaminationInfoUpdatingRequestContractDetail., must be bigger than or equal to 1.');
        }
        $this->container['siteCredential'] = $siteCredential;

        return $this;
    }

    /**
     * Gets shopName.
     *
     * @return string|null
     */
    public function getShopName(): mixed
    {
        return $this->container['shopName'];
    }

    /**
     * Sets shopName.
     *
     * @param string|null $shopName fincodeにおけるショップ名
     */
    public function setShopName(mixed $shopName): static
    {
        if (is_null($shopName)) {
            $this->openAPINullablesSetToNull[] = 'shopName';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shopName', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($shopName) && mb_strlen($shopName) > 100) {
            throw new \InvalidArgumentException('invalid length for $shopName when calling ExaminationInfoUpdatingRequestContractDetail., must be smaller than or equal to 100.');
        }
        if (!is_null($shopName) && mb_strlen($shopName) < 1) {
            throw new \InvalidArgumentException('invalid length for $shopName when calling ExaminationInfoUpdatingRequestContractDetail., must be bigger than or equal to 1.');
        }
        $this->container['shopName'] = $shopName;

        return $this;
    }

    /**
     * Gets shopNameKana.
     *
     * @return string|null
     */
    public function getShopNameKana(): mixed
    {
        return $this->container['shopNameKana'];
    }

    /**
     * Sets shopNameKana.
     *
     * @param string|null $shopNameKana fincodeにおけるショップ名（カナ）
     */
    public function setShopNameKana(mixed $shopNameKana): static
    {
        if (is_null($shopNameKana)) {
            $this->openAPINullablesSetToNull[] = 'shopNameKana';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shopNameKana', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($shopNameKana) && mb_strlen($shopNameKana) > 100) {
            throw new \InvalidArgumentException('invalid length for $shopNameKana when calling ExaminationInfoUpdatingRequestContractDetail., must be smaller than or equal to 100.');
        }
        if (!is_null($shopNameKana) && mb_strlen($shopNameKana) < 1) {
            throw new \InvalidArgumentException('invalid length for $shopNameKana when calling ExaminationInfoUpdatingRequestContractDetail., must be bigger than or equal to 1.');
        }
        $this->container['shopNameKana'] = $shopNameKana;

        return $this;
    }

    /**
     * Gets shopNameEn.
     *
     * @return string|null
     */
    public function getShopNameEn(): mixed
    {
        return $this->container['shopNameEn'];
    }

    /**
     * Sets shopNameEn.
     *
     * @param string|null $shopNameEn fincodeにおけるショップ名（英語）
     */
    public function setShopNameEn(mixed $shopNameEn): static
    {
        if (is_null($shopNameEn)) {
            $this->openAPINullablesSetToNull[] = 'shopNameEn';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shopNameEn', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($shopNameEn) && mb_strlen($shopNameEn) > 25) {
            throw new \InvalidArgumentException('invalid length for $shopNameEn when calling ExaminationInfoUpdatingRequestContractDetail., must be smaller than or equal to 25.');
        }
        if (!is_null($shopNameEn) && mb_strlen($shopNameEn) < 1) {
            throw new \InvalidArgumentException('invalid length for $shopNameEn when calling ExaminationInfoUpdatingRequestContractDetail., must be bigger than or equal to 1.');
        }
        $this->container['shopNameEn'] = $shopNameEn;

        return $this;
    }

    /**
     * Gets shopDistributorName.
     *
     * @return string|null
     */
    public function getShopDistributorName(): mixed
    {
        return $this->container['shopDistributorName'];
    }

    /**
     * Sets shopDistributorName.
     *
     * @param string|null $shopDistributorName 販売者業者名
     */
    public function setShopDistributorName(mixed $shopDistributorName): static
    {
        if (is_null($shopDistributorName)) {
            $this->openAPINullablesSetToNull[] = 'shopDistributorName';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shopDistributorName', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($shopDistributorName) && mb_strlen($shopDistributorName) > 300) {
            throw new \InvalidArgumentException('invalid length for $shopDistributorName when calling ExaminationInfoUpdatingRequestContractDetail., must be smaller than or equal to 300.');
        }
        if (!is_null($shopDistributorName) && mb_strlen($shopDistributorName) < 1) {
            throw new \InvalidArgumentException('invalid length for $shopDistributorName when calling ExaminationInfoUpdatingRequestContractDetail., must be bigger than or equal to 1.');
        }
        $this->container['shopDistributorName'] = $shopDistributorName;

        return $this;
    }

    /**
     * Gets shopSalesManagerName.
     *
     * @return string|null
     */
    public function getShopSalesManagerName(): mixed
    {
        return $this->container['shopSalesManagerName'];
    }

    /**
     * Sets shopSalesManagerName.
     *
     * @param string|null $shopSalesManagerName 販売責任者氏名\\ \\ ショップの販売責任者の氏名
     */
    public function setShopSalesManagerName(mixed $shopSalesManagerName): static
    {
        if (is_null($shopSalesManagerName)) {
            $this->openAPINullablesSetToNull[] = 'shopSalesManagerName';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shopSalesManagerName', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($shopSalesManagerName) && mb_strlen($shopSalesManagerName) > 300) {
            throw new \InvalidArgumentException('invalid length for $shopSalesManagerName when calling ExaminationInfoUpdatingRequestContractDetail., must be smaller than or equal to 300.');
        }
        if (!is_null($shopSalesManagerName) && mb_strlen($shopSalesManagerName) < 1) {
            throw new \InvalidArgumentException('invalid length for $shopSalesManagerName when calling ExaminationInfoUpdatingRequestContractDetail., must be bigger than or equal to 1.');
        }
        $this->container['shopSalesManagerName'] = $shopSalesManagerName;

        return $this;
    }

    /**
     * Gets shopServiceName.
     *
     * @return string|null
     */
    public function getShopServiceName(): mixed
    {
        return $this->container['shopServiceName'];
    }

    /**
     * Sets shopServiceName.
     *
     * @param string|null $shopServiceName 屋号・サービス名\\ \\ ショップのサービスの名称
     */
    public function setShopServiceName(mixed $shopServiceName): static
    {
        if (is_null($shopServiceName)) {
            $this->openAPINullablesSetToNull[] = 'shopServiceName';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shopServiceName', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($shopServiceName) && mb_strlen($shopServiceName) > 300) {
            throw new \InvalidArgumentException('invalid length for $shopServiceName when calling ExaminationInfoUpdatingRequestContractDetail., must be smaller than or equal to 300.');
        }
        if (!is_null($shopServiceName) && mb_strlen($shopServiceName) < 1) {
            throw new \InvalidArgumentException('invalid length for $shopServiceName when calling ExaminationInfoUpdatingRequestContractDetail., must be bigger than or equal to 1.');
        }
        $this->container['shopServiceName'] = $shopServiceName;

        return $this;
    }

    /**
     * Gets shopSupportTel.
     *
     * @return string|null
     */
    public function getShopSupportTel(): mixed
    {
        return $this->container['shopSupportTel'];
    }

    /**
     * Sets shopSupportTel.
     *
     * @param string|null $shopSupportTel 問い合わせ先電話番号\\ \\ 購入者が問い合わせる窓口となる電話番号
     */
    public function setShopSupportTel(mixed $shopSupportTel): static
    {
        if (is_null($shopSupportTel)) {
            $this->openAPINullablesSetToNull[] = 'shopSupportTel';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shopSupportTel', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($shopSupportTel) && mb_strlen($shopSupportTel) > 15) {
            throw new \InvalidArgumentException('invalid length for $shopSupportTel when calling ExaminationInfoUpdatingRequestContractDetail., must be smaller than or equal to 15.');
        }
        if (!is_null($shopSupportTel) && mb_strlen($shopSupportTel) < 1) {
            throw new \InvalidArgumentException('invalid length for $shopSupportTel when calling ExaminationInfoUpdatingRequestContractDetail., must be bigger than or equal to 1.');
        }
        $this->container['shopSupportTel'] = $shopSupportTel;

        return $this;
    }

    /**
     * Gets shopSupportMail.
     *
     * @return string|null
     */
    public function getShopSupportMail(): mixed
    {
        return $this->container['shopSupportMail'];
    }

    /**
     * Sets shopSupportMail.
     *
     * @param string|null $shopSupportMail 問い合わせ先メールアドレス\\ \\ 購入者が問い合わせる窓口となるメールアドレス
     */
    public function setShopSupportMail(mixed $shopSupportMail): static
    {
        if (is_null($shopSupportMail)) {
            $this->openAPINullablesSetToNull[] = 'shopSupportMail';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shopSupportMail', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($shopSupportMail) && mb_strlen($shopSupportMail) > 254) {
            throw new \InvalidArgumentException('invalid length for $shopSupportMail when calling ExaminationInfoUpdatingRequestContractDetail., must be smaller than or equal to 254.');
        }
        if (!is_null($shopSupportMail) && mb_strlen($shopSupportMail) < 1) {
            throw new \InvalidArgumentException('invalid length for $shopSupportMail when calling ExaminationInfoUpdatingRequestContractDetail., must be bigger than or equal to 1.');
        }
        $this->container['shopSupportMail'] = $shopSupportMail;

        return $this;
    }

    /**
     * Gets shopPostCode.
     *
     * @return string|null
     */
    public function getShopPostCode(): mixed
    {
        return $this->container['shopPostCode'];
    }

    /**
     * Sets shopPostCode.
     *
     * @param string|null $shopPostCode ショップ住所 郵便番号
     */
    public function setShopPostCode(mixed $shopPostCode): static
    {
        if (is_null($shopPostCode)) {
            $this->openAPINullablesSetToNull[] = 'shopPostCode';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shopPostCode', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($shopPostCode) && mb_strlen($shopPostCode) > 8) {
            throw new \InvalidArgumentException('invalid length for $shopPostCode when calling ExaminationInfoUpdatingRequestContractDetail., must be smaller than or equal to 8.');
        }
        if (!is_null($shopPostCode) && mb_strlen($shopPostCode) < 1) {
            throw new \InvalidArgumentException('invalid length for $shopPostCode when calling ExaminationInfoUpdatingRequestContractDetail., must be bigger than or equal to 1.');
        }
        $this->container['shopPostCode'] = $shopPostCode;

        return $this;
    }

    /**
     * Gets shopPrefecture.
     *
     * @return string|null
     */
    public function getShopPrefecture(): mixed
    {
        return $this->container['shopPrefecture'];
    }

    /**
     * Sets shopPrefecture.
     *
     * @param string|null $shopPrefecture ショップ住所 都道府県
     */
    public function setShopPrefecture(mixed $shopPrefecture): static
    {
        if (is_null($shopPrefecture)) {
            $this->openAPINullablesSetToNull[] = 'shopPrefecture';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shopPrefecture', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($shopPrefecture) && mb_strlen($shopPrefecture) > 4) {
            throw new \InvalidArgumentException('invalid length for $shopPrefecture when calling ExaminationInfoUpdatingRequestContractDetail., must be smaller than or equal to 4.');
        }
        if (!is_null($shopPrefecture) && mb_strlen($shopPrefecture) < 1) {
            throw new \InvalidArgumentException('invalid length for $shopPrefecture when calling ExaminationInfoUpdatingRequestContractDetail., must be bigger than or equal to 1.');
        }
        $this->container['shopPrefecture'] = $shopPrefecture;

        return $this;
    }

    /**
     * Gets shopAddressMunicipality.
     *
     * @return string|null
     */
    public function getShopAddressMunicipality(): mixed
    {
        return $this->container['shopAddressMunicipality'];
    }

    /**
     * Sets shopAddressMunicipality.
     *
     * @param string|null $shopAddressMunicipality ショップ住所 市区町村
     */
    public function setShopAddressMunicipality(mixed $shopAddressMunicipality): static
    {
        if (is_null($shopAddressMunicipality)) {
            $this->openAPINullablesSetToNull[] = 'shopAddressMunicipality';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shopAddressMunicipality', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($shopAddressMunicipality) && mb_strlen($shopAddressMunicipality) > 50) {
            throw new \InvalidArgumentException('invalid length for $shopAddressMunicipality when calling ExaminationInfoUpdatingRequestContractDetail., must be smaller than or equal to 50.');
        }
        if (!is_null($shopAddressMunicipality) && mb_strlen($shopAddressMunicipality) < 1) {
            throw new \InvalidArgumentException('invalid length for $shopAddressMunicipality when calling ExaminationInfoUpdatingRequestContractDetail., must be bigger than or equal to 1.');
        }
        $this->container['shopAddressMunicipality'] = $shopAddressMunicipality;

        return $this;
    }

    /**
     * Gets shopAddressSection.
     *
     * @return string|null
     */
    public function getShopAddressSection(): mixed
    {
        return $this->container['shopAddressSection'];
    }

    /**
     * Sets shopAddressSection.
     *
     * @param string|null $shopAddressSection ショップ住所 町域
     */
    public function setShopAddressSection(mixed $shopAddressSection): static
    {
        if (is_null($shopAddressSection)) {
            $this->openAPINullablesSetToNull[] = 'shopAddressSection';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shopAddressSection', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($shopAddressSection) && mb_strlen($shopAddressSection) > 50) {
            throw new \InvalidArgumentException('invalid length for $shopAddressSection when calling ExaminationInfoUpdatingRequestContractDetail., must be smaller than or equal to 50.');
        }
        if (!is_null($shopAddressSection) && mb_strlen($shopAddressSection) < 1) {
            throw new \InvalidArgumentException('invalid length for $shopAddressSection when calling ExaminationInfoUpdatingRequestContractDetail., must be bigger than or equal to 1.');
        }
        $this->container['shopAddressSection'] = $shopAddressSection;

        return $this;
    }

    /**
     * Gets shopAddressChrome.
     *
     * @return string|null
     */
    public function getShopAddressChrome(): mixed
    {
        return $this->container['shopAddressChrome'];
    }

    /**
     * Sets shopAddressChrome.
     *
     * @param string|null $shopAddressChrome ショップ住所 番地
     */
    public function setShopAddressChrome(mixed $shopAddressChrome): static
    {
        if (is_null($shopAddressChrome)) {
            $this->openAPINullablesSetToNull[] = 'shopAddressChrome';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shopAddressChrome', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($shopAddressChrome) && mb_strlen($shopAddressChrome) > 50) {
            throw new \InvalidArgumentException('invalid length for $shopAddressChrome when calling ExaminationInfoUpdatingRequestContractDetail., must be smaller than or equal to 50.');
        }
        if (!is_null($shopAddressChrome) && mb_strlen($shopAddressChrome) < 1) {
            throw new \InvalidArgumentException('invalid length for $shopAddressChrome when calling ExaminationInfoUpdatingRequestContractDetail., must be bigger than or equal to 1.');
        }
        $this->container['shopAddressChrome'] = $shopAddressChrome;

        return $this;
    }

    /**
     * Gets shopAddressBuildingName.
     *
     * @return string|null
     */
    public function getShopAddressBuildingName(): mixed
    {
        return $this->container['shopAddressBuildingName'];
    }

    /**
     * Sets shopAddressBuildingName.
     *
     * @param string|null $shopAddressBuildingName ショップ住所 建物名等
     */
    public function setShopAddressBuildingName(mixed $shopAddressBuildingName): static
    {
        if (is_null($shopAddressBuildingName)) {
            $this->openAPINullablesSetToNull[] = 'shopAddressBuildingName';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shopAddressBuildingName', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($shopAddressBuildingName) && mb_strlen($shopAddressBuildingName) > 100) {
            throw new \InvalidArgumentException('invalid length for $shopAddressBuildingName when calling ExaminationInfoUpdatingRequestContractDetail., must be smaller than or equal to 100.');
        }
        if (!is_null($shopAddressBuildingName) && mb_strlen($shopAddressBuildingName) < 1) {
            throw new \InvalidArgumentException('invalid length for $shopAddressBuildingName when calling ExaminationInfoUpdatingRequestContractDetail., must be bigger than or equal to 1.');
        }
        $this->container['shopAddressBuildingName'] = $shopAddressBuildingName;

        return $this;
    }

    /**
     * Gets shopAddressBuildingNameKana.
     *
     * @return string|null
     */
    public function getShopAddressBuildingNameKana(): mixed
    {
        return $this->container['shopAddressBuildingNameKana'];
    }

    /**
     * Sets shopAddressBuildingNameKana.
     *
     * @param string|null $shopAddressBuildingNameKana ショップ住所 建物名等（カナ）
     */
    public function setShopAddressBuildingNameKana(mixed $shopAddressBuildingNameKana): static
    {
        if (is_null($shopAddressBuildingNameKana)) {
            $this->openAPINullablesSetToNull[] = 'shopAddressBuildingNameKana';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shopAddressBuildingNameKana', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($shopAddressBuildingNameKana) && mb_strlen($shopAddressBuildingNameKana) > 100) {
            throw new \InvalidArgumentException('invalid length for $shopAddressBuildingNameKana when calling ExaminationInfoUpdatingRequestContractDetail., must be smaller than or equal to 100.');
        }
        if (!is_null($shopAddressBuildingNameKana) && mb_strlen($shopAddressBuildingNameKana) < 1) {
            throw new \InvalidArgumentException('invalid length for $shopAddressBuildingNameKana when calling ExaminationInfoUpdatingRequestContractDetail., must be bigger than or equal to 1.');
        }
        $this->container['shopAddressBuildingNameKana'] = $shopAddressBuildingNameKana;

        return $this;
    }

    /**
     * Gets shopPaymentMethod.
     *
     * @return string|null
     */
    public function getShopPaymentMethod(): mixed
    {
        return $this->container['shopPaymentMethod'];
    }

    /**
     * Sets shopPaymentMethod.
     *
     * @param string|null $shopPaymentMethod 支払い方法\\ \\ ショップで利用可能な支払い方法
     */
    public function setShopPaymentMethod(mixed $shopPaymentMethod): static
    {
        if (is_null($shopPaymentMethod)) {
            $this->openAPINullablesSetToNull[] = 'shopPaymentMethod';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shopPaymentMethod', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($shopPaymentMethod) && mb_strlen($shopPaymentMethod) > 1000) {
            throw new \InvalidArgumentException('invalid length for $shopPaymentMethod when calling ExaminationInfoUpdatingRequestContractDetail., must be smaller than or equal to 1000.');
        }
        if (!is_null($shopPaymentMethod) && mb_strlen($shopPaymentMethod) < 1) {
            throw new \InvalidArgumentException('invalid length for $shopPaymentMethod when calling ExaminationInfoUpdatingRequestContractDetail., must be bigger than or equal to 1.');
        }
        $this->container['shopPaymentMethod'] = $shopPaymentMethod;

        return $this;
    }

    /**
     * Gets shopChargeDescription.
     *
     * @return string|null
     */
    public function getShopChargeDescription(): mixed
    {
        return $this->container['shopChargeDescription'];
    }

    /**
     * Sets shopChargeDescription.
     *
     * @param string|null $shopChargeDescription 商品代金以外の料金の説明\\ \\ 送料、手数料、消費税などの商品代金以外の料金についての説明
     */
    public function setShopChargeDescription(mixed $shopChargeDescription): static
    {
        if (is_null($shopChargeDescription)) {
            $this->openAPINullablesSetToNull[] = 'shopChargeDescription';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shopChargeDescription', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($shopChargeDescription) && mb_strlen($shopChargeDescription) > 5000) {
            throw new \InvalidArgumentException('invalid length for $shopChargeDescription when calling ExaminationInfoUpdatingRequestContractDetail., must be smaller than or equal to 5000.');
        }
        if (!is_null($shopChargeDescription) && mb_strlen($shopChargeDescription) < 1) {
            throw new \InvalidArgumentException('invalid length for $shopChargeDescription when calling ExaminationInfoUpdatingRequestContractDetail., must be bigger than or equal to 1.');
        }
        $this->container['shopChargeDescription'] = $shopChargeDescription;

        return $this;
    }

    /**
     * Gets shopProductDelieveryTime.
     *
     * @return string|null
     */
    public function getShopProductDelieveryTime(): mixed
    {
        return $this->container['shopProductDelieveryTime'];
    }

    /**
     * Sets shopProductDelieveryTime.
     *
     * @param string|null $shopProductDelieveryTime 商品の引き渡し時期\\ \\ 商品の引き渡し時期についての説明
     */
    public function setShopProductDelieveryTime(mixed $shopProductDelieveryTime): static
    {
        if (is_null($shopProductDelieveryTime)) {
            $this->openAPINullablesSetToNull[] = 'shopProductDelieveryTime';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shopProductDelieveryTime', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($shopProductDelieveryTime) && mb_strlen($shopProductDelieveryTime) > 1000) {
            throw new \InvalidArgumentException('invalid length for $shopProductDelieveryTime when calling ExaminationInfoUpdatingRequestContractDetail., must be smaller than or equal to 1000.');
        }
        if (!is_null($shopProductDelieveryTime) && mb_strlen($shopProductDelieveryTime) < 1) {
            throw new \InvalidArgumentException('invalid length for $shopProductDelieveryTime when calling ExaminationInfoUpdatingRequestContractDetail., must be bigger than or equal to 1.');
        }
        $this->container['shopProductDelieveryTime'] = $shopProductDelieveryTime;

        return $this;
    }

    /**
     * Gets shopReturnGoodsHandingConditions.
     *
     * @return string|null
     */
    public function getShopReturnGoodsHandingConditions(): mixed
    {
        return $this->container['shopReturnGoodsHandingConditions'];
    }

    /**
     * Sets shopReturnGoodsHandingConditions.
     *
     * @param string|null $shopReturnGoodsHandingConditions 返品・交換に関する条件\\ \\ 返品・交換に関する条件についての説明
     */
    public function setShopReturnGoodsHandingConditions(mixed $shopReturnGoodsHandingConditions): static
    {
        if (is_null($shopReturnGoodsHandingConditions)) {
            $this->openAPINullablesSetToNull[] = 'shopReturnGoodsHandingConditions';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shopReturnGoodsHandingConditions', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($shopReturnGoodsHandingConditions) && mb_strlen($shopReturnGoodsHandingConditions) > 5000) {
            throw new \InvalidArgumentException('invalid length for $shopReturnGoodsHandingConditions when calling ExaminationInfoUpdatingRequestContractDetail., must be smaller than or equal to 5000.');
        }
        if (!is_null($shopReturnGoodsHandingConditions) && mb_strlen($shopReturnGoodsHandingConditions) < 1) {
            throw new \InvalidArgumentException('invalid length for $shopReturnGoodsHandingConditions when calling ExaminationInfoUpdatingRequestContractDetail., must be bigger than or equal to 1.');
        }
        $this->container['shopReturnGoodsHandingConditions'] = $shopReturnGoodsHandingConditions;

        return $this;
    }

    /**
     * Gets platformName.
     *
     * @return string|null
     */
    public function getPlatformName(): mixed
    {
        return $this->container['platformName'];
    }

    /**
     * Sets platformName.
     *
     * @param string|null $platformName プラットフォーム名
     */
    public function setPlatformName(mixed $platformName): static
    {
        if (is_null($platformName)) {
            $this->openAPINullablesSetToNull[] = 'platformName';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('platformName', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($platformName) && mb_strlen($platformName) > 100) {
            throw new \InvalidArgumentException('invalid length for $platformName when calling ExaminationInfoUpdatingRequestContractDetail., must be smaller than or equal to 100.');
        }
        if (!is_null($platformName) && mb_strlen($platformName) < 1) {
            throw new \InvalidArgumentException('invalid length for $platformName when calling ExaminationInfoUpdatingRequestContractDetail., must be bigger than or equal to 1.');
        }
        $this->container['platformName'] = $platformName;

        return $this;
    }

    /**
     * Gets supportTel.
     *
     * @return string|null
     */
    public function getSupportTel(): mixed
    {
        return $this->container['supportTel'];
    }

    /**
     * Sets supportTel.
     *
     * @param string|null $supportTel 購入者向けサポート窓口 電話番号\\ 形式： 電話番号（ハイフンなし）
     */
    public function setSupportTel(mixed $supportTel): static
    {
        if (is_null($supportTel)) {
            $this->openAPINullablesSetToNull[] = 'supportTel';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('supportTel', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($supportTel) && mb_strlen($supportTel) > 15) {
            throw new \InvalidArgumentException('invalid length for $supportTel when calling ExaminationInfoUpdatingRequestContractDetail., must be smaller than or equal to 15.');
        }
        if (!is_null($supportTel) && mb_strlen($supportTel) < 1) {
            throw new \InvalidArgumentException('invalid length for $supportTel when calling ExaminationInfoUpdatingRequestContractDetail., must be bigger than or equal to 1.');
        }
        $this->container['supportTel'] = $supportTel;

        return $this;
    }

    /**
     * Gets supportMail.
     *
     * @return string|null
     */
    public function getSupportMail(): mixed
    {
        return $this->container['supportMail'];
    }

    /**
     * Sets supportMail.
     *
     * @param string|null $supportMail 購入者向けサポート窓口 メールアドレス\\ 形式： RFC 5322
     */
    public function setSupportMail(mixed $supportMail): static
    {
        if (is_null($supportMail)) {
            $this->openAPINullablesSetToNull[] = 'supportMail';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('supportMail', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($supportMail) && mb_strlen($supportMail) > 254) {
            throw new \InvalidArgumentException('invalid length for $supportMail when calling ExaminationInfoUpdatingRequestContractDetail., must be smaller than or equal to 254.');
        }
        if (!is_null($supportMail) && mb_strlen($supportMail) < 1) {
            throw new \InvalidArgumentException('invalid length for $supportMail when calling ExaminationInfoUpdatingRequestContractDetail., must be bigger than or equal to 1.');
        }
        $this->container['supportMail'] = $supportMail;

        return $this;
    }

    /**
     * Gets providesProduct.
     *
     * @return bool|null
     */
    public function getProvidesProduct(): mixed
    {
        return $this->container['providesProduct'];
    }

    /**
     * Sets providesProduct.
     *
     * @param bool|null $providesProduct 物販商材 提供有無\\ \\ ショップが物品販売を行うかどうか
     */
    public function setProvidesProduct(mixed $providesProduct): static
    {
        if (is_null($providesProduct)) {
            $this->openAPINullablesSetToNull[] = 'providesProduct';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('providesProduct', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['providesProduct'] = $providesProduct;

        return $this;
    }

    /**
     * Gets providesService.
     *
     * @return bool|null
     */
    public function getProvidesService(): mixed
    {
        return $this->container['providesService'];
    }

    /**
     * Sets providesService.
     *
     * @param bool|null $providesService サービス商材 提供有無\\ \\ ショップがサービス提供を行うかどうか
     */
    public function setProvidesService(mixed $providesService): static
    {
        if (is_null($providesService)) {
            $this->openAPINullablesSetToNull[] = 'providesService';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('providesService', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['providesService'] = $providesService;

        return $this;
    }

    /**
     * Gets providesDigitalContent.
     *
     * @return bool|null
     */
    public function getProvidesDigitalContent(): mixed
    {
        return $this->container['providesDigitalContent'];
    }

    /**
     * Sets providesDigitalContent.
     *
     * @param bool|null $providesDigitalContent デジタルコンテンツ 提供有無\\ \\ ショップがデジタルコンテンツ販売を行うかどうか
     */
    public function setProvidesDigitalContent(mixed $providesDigitalContent): static
    {
        if (is_null($providesDigitalContent)) {
            $this->openAPINullablesSetToNull[] = 'providesDigitalContent';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('providesDigitalContent', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['providesDigitalContent'] = $providesDigitalContent;

        return $this;
    }

    /**
     * Gets prepaid.
     *
     * @return bool|null
     */
    public function getPrepaid(): mixed
    {
        return $this->container['prepaid'];
    }

    /**
     * Sets prepaid.
     *
     * @param bool|null $prepaid プリペイドポイントの有無\\ \\ ショップがプリペイドポイントを導入しているかどうか
     */
    public function setPrepaid(mixed $prepaid): static
    {
        if (is_null($prepaid)) {
            $this->openAPINullablesSetToNull[] = 'prepaid';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('prepaid', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['prepaid'] = $prepaid;

        return $this;
    }

    /**
     * Gets unitPrice.
     *
     * @return float|null
     */
    public function getUnitPrice(): mixed
    {
        return $this->container['unitPrice'];
    }

    /**
     * Sets unitPrice.
     *
     * @param float|null $unitPrice 1回の決済における金額（単価）\\ \\ 例： `1000`（1000円）
     */
    public function setUnitPrice(mixed $unitPrice): static
    {
        if (is_null($unitPrice)) {
            $this->openAPINullablesSetToNull[] = 'unitPrice';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('unitPrice', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['unitPrice'] = $unitPrice;

        return $this;
    }

    /**
     * Gets contentCategoryMasterId.
     *
     * @return float|null
     */
    public function getContentCategoryMasterId(): mixed
    {
        return $this->container['contentCategoryMasterId'];
    }

    /**
     * Sets contentCategoryMasterId.
     *
     * @param float|null $contentCategoryMasterId 取扱商材カテゴリID
     */
    public function setContentCategoryMasterId(mixed $contentCategoryMasterId): static
    {
        if (is_null($contentCategoryMasterId)) {
            $this->openAPINullablesSetToNull[] = 'contentCategoryMasterId';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('contentCategoryMasterId', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['contentCategoryMasterId'] = $contentCategoryMasterId;

        return $this;
    }

    /**
     * Gets contentDescription.
     *
     * @return string|null
     */
    public function getContentDescription(): mixed
    {
        return $this->container['contentDescription'];
    }

    /**
     * Sets contentDescription.
     *
     * @param string|null $contentDescription 取扱商材の説明\\ \\ ショップの提供する商材についての説明
     */
    public function setContentDescription(mixed $contentDescription): static
    {
        if (is_null($contentDescription)) {
            $this->openAPINullablesSetToNull[] = 'contentDescription';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('contentDescription', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($contentDescription) && mb_strlen($contentDescription) > 5000) {
            throw new \InvalidArgumentException('invalid length for $contentDescription when calling ExaminationInfoUpdatingRequestContractDetail., must be smaller than or equal to 5000.');
        }
        if (!is_null($contentDescription) && mb_strlen($contentDescription) < 1) {
            throw new \InvalidArgumentException('invalid length for $contentDescription when calling ExaminationInfoUpdatingRequestContractDetail., must be bigger than or equal to 1.');
        }
        $this->container['contentDescription'] = $contentDescription;

        return $this;
    }

    /**
     * Gets expirationDateOfPoint.
     *
     * @return string|null
     */
    public function getExpirationDateOfPoint(): mixed
    {
        return $this->container['expirationDateOfPoint'];
    }

    /**
     * Sets expirationDateOfPoint.
     *
     * @param string|null $expirationDateOfPoint ポイント有効期限について\\ \\ プリペイドポイントの有効期限について
     */
    public function setExpirationDateOfPoint(mixed $expirationDateOfPoint): static
    {
        if (is_null($expirationDateOfPoint)) {
            $this->openAPINullablesSetToNull[] = 'expirationDateOfPoint';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('expirationDateOfPoint', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($expirationDateOfPoint) && mb_strlen($expirationDateOfPoint) > 300) {
            throw new \InvalidArgumentException('invalid length for $expirationDateOfPoint when calling ExaminationInfoUpdatingRequestContractDetail., must be smaller than or equal to 300.');
        }
        if (!is_null($expirationDateOfPoint) && mb_strlen($expirationDateOfPoint) < 1) {
            throw new \InvalidArgumentException('invalid length for $expirationDateOfPoint when calling ExaminationInfoUpdatingRequestContractDetail., must be bigger than or equal to 1.');
        }
        $this->container['expirationDateOfPoint'] = $expirationDateOfPoint;

        return $this;
    }

    /**
     * Gets usageOfPoint.
     *
     * @return string|null
     */
    public function getUsageOfPoint(): mixed
    {
        return $this->container['usageOfPoint'];
    }

    /**
     * Sets usageOfPoint.
     *
     * @param string|null $usageOfPoint ポイント利用方法\\ \\ プリペイドポイントの利用方法
     */
    public function setUsageOfPoint(mixed $usageOfPoint): static
    {
        if (is_null($usageOfPoint)) {
            $this->openAPINullablesSetToNull[] = 'usageOfPoint';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('usageOfPoint', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($usageOfPoint) && mb_strlen($usageOfPoint) > 300) {
            throw new \InvalidArgumentException('invalid length for $usageOfPoint when calling ExaminationInfoUpdatingRequestContractDetail., must be smaller than or equal to 300.');
        }
        if (!is_null($usageOfPoint) && mb_strlen($usageOfPoint) < 1) {
            throw new \InvalidArgumentException('invalid length for $usageOfPoint when calling ExaminationInfoUpdatingRequestContractDetail., must be bigger than or equal to 1.');
        }
        $this->container['usageOfPoint'] = $usageOfPoint;

        return $this;
    }

    /**
     * Gets lostTrial.
     *
     * @return bool|null
     */
    public function getLostTrial(): mixed
    {
        return $this->container['lostTrial'];
    }

    /**
     * Sets lostTrial.
     *
     * @param bool|null $lostTrial 改正割賦販売法に基づく訴訟敗訴歴があるかどうかの表明  - `true`: 改正割賦販売法に基づく訴訟敗訴歴がある - `false`: 改正割賦販売法に基づく訴訟敗訴歴はない
     */
    public function setLostTrial(mixed $lostTrial): static
    {
        if (is_null($lostTrial)) {
            $this->openAPINullablesSetToNull[] = 'lostTrial';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('lostTrial', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['lostTrial'] = $lostTrial;

        return $this;
    }

    /**
     * Gets dealsInsecureContent.
     *
     * @return bool|null
     */
    public function getDealsInsecureContent(): mixed
    {
        return $this->container['dealsInsecureContent'];
    }

    /**
     * Sets dealsInsecureContent.
     *
     * @param bool|null $dealsInsecureContent fincodeで取扱不可の商材を取り扱わないことの表明  - `true`: 取扱不可の商材を取り扱う予定はない - `false`: 取扱不可の商材を取り扱う予定がある  fincodeの禁止商材は以下の通りです。  - 金融行為（クレジットカードショッピング枠の現金化等） - 仮想通貨取引、金券（印紙、切手等含む）、商品券、プリペイドカード、有価証券 - 賭博、ギャンブル - RMT（リアルマネートレーディング） - ペット等の生き物全般（※標本・剥製も含む） - お布施 - 危険ドラッグ、デザイナーズドラッグ - 処方箋なしで購入できる処方薬（ルミガン・ラディース・クラッシュビスタ・ケアプロスト等） - 第三者の著作権・肖像権・知的所有権等を侵害する恐れがあるもの - 公序良俗に反するもの（アダルト、出会い系サイトを含む） - 法律・法令の定めに違反するもの（銃刀法・麻薬取締法・ワシントン条約・薬事法）
     */
    public function setDealsInsecureContent(mixed $dealsInsecureContent): static
    {
        if (is_null($dealsInsecureContent)) {
            $this->openAPINullablesSetToNull[] = 'dealsInsecureContent';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('dealsInsecureContent', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['dealsInsecureContent'] = $dealsInsecureContent;

        return $this;
    }

    /**
     * Gets dealsLongApplyContent.
     *
     * @return bool|null
     */
    public function getDealsLongApplyContent(): mixed
    {
        return $this->container['dealsLongApplyContent'];
    }

    /**
     * Sets dealsLongApplyContent.
     *
     * @param bool|null $dealsLongApplyContent fincode審査に時間がかかるコンテンツを取り扱うかどうかの表明  - `true`: fincode審査に時間がかかるコンテンツを取り扱う - `false`: fincode審査に時間がかかるコンテンツを取り扱わない  以下の商材を取り扱う場合は`true`を指定する必要があります。  - 呉服 - コンサルディングサービス - エステ、美容サロン、美容医療 - スポーツ施設・フィットネスクラブ - カルチャースクール・通信講座 - データ販売 - 情報詳細（情報の内容自体が商品となるもの） - 占い - サプリメント・健康食品 - 美容品・化粧品 - カツラ - 旅行業に該当するサービス - タバコ・CBD - 寄付金
     */
    public function setDealsLongApplyContent(mixed $dealsLongApplyContent): static
    {
        if (is_null($dealsLongApplyContent)) {
            $this->openAPINullablesSetToNull[] = 'dealsLongApplyContent';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('dealsLongApplyContent', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['dealsLongApplyContent'] = $dealsLongApplyContent;

        return $this;
    }

    /**
     * Gets payBy.
     *
     * @return ShopPaymentMethod|null
     */
    public function getPayBy(): mixed
    {
        return $this->container['payBy'];
    }

    /**
     * Sets payBy.
     *
     * @param ShopPaymentMethod $payBy payBy
     */
    public function setPayBy(mixed $payBy): static
    {
        if (is_null($payBy)) {
            throw new \InvalidArgumentException('non-nullable payBy cannot be null');
        }
        $this->container['payBy'] = $payBy;

        return $this;
    }

    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @see https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    public function jsonSerialize(): mixed
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object.
     */
    public function __toString(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
    }

    /**
     * Gets a header-safe presentation of the object.
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
