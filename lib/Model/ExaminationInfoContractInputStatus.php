<?php

declare(strict_types=1);
/**
 * fincode API.
 *
 * fincodeのAPIリファレンスです。\\ fincodeは決済情報のほか様々なリソースを管理できるため、リソース指向なREST APIをベースとしたインターフェイス設計のもとでAPIを提供しています。\\ APIの呼び出しにはAPIキーによる認証が必要であり、リクエストの際に`Authorization`ヘッダーに有効なAPIキーをセットすることで認証できます。
 *
 * The version of the OpenAPI document: 1.2.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Fincode\Model;

use OpenAPI\Fincode\ObjectSerializer;

/**
 * @implements \ArrayAccess<string, mixed>
 */
class ExaminationInfoContractInputStatus implements ModelInterface, \ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;
    /**
     * The original name of the model.
     */
    protected static string $openAPIModelName = 'ExaminationInfo_contract_input_status';
    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var array<string, string>
     */
    protected static array $openAPITypes = ['statusCode' => '\OpenAPI\Fincode\Model\ContractInputStatus', 'contractInfoInput' => 'bool', 'shopInfoInput' => 'bool', 'accountInfoInput' => 'bool', 'cardInfoInput' => 'bool'];
    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var array<string, string|null>
     */
    protected static array $openAPIFormats = ['statusCode' => null, 'contractInfoInput' => null, 'shopInfoInput' => null, 'accountInfoInput' => null, 'cardInfoInput' => null];
    /**
     * Array of nullable properties. Used for (de)serialization.
     *
     * @var array<string, bool>
     */
    protected static array $openAPINullables = ['statusCode' => false, 'contractInfoInput' => false, 'shopInfoInput' => false, 'accountInfoInput' => false, 'cardInfoInput' => false];
    /**
     * If a nullable field gets set to null, insert it here.
     *
     * @var array<string, bool>
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return array<string, string|null>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties.
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null.
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null.
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable.
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }
    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = ['statusCode' => 'status_code', 'contractInfoInput' => 'contract_info_input', 'shopInfoInput' => 'shop_info_input', 'accountInfoInput' => 'account_info_input', 'cardInfoInput' => 'card_info_input'];
    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var array<string, string>
     */
    protected static array $setters = ['statusCode' => 'setStatusCode', 'contractInfoInput' => 'setContractInfoInput', 'shopInfoInput' => 'setShopInfoInput', 'accountInfoInput' => 'setAccountInfoInput', 'cardInfoInput' => 'setCardInfoInput'];
    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var array<string, string>
     */
    protected static array $getters = ['statusCode' => 'getStatusCode', 'contractInfoInput' => 'getContractInfoInput', 'shopInfoInput' => 'getShopInfoInput', 'accountInfoInput' => 'getAccountInfoInput', 'cardInfoInput' => 'getCardInfoInput'];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }
    /**
     * Associative array for storing property values.
     *
     * @phpstan-var array<string, mixed>
     *
     * @psalm-var array<string, mixed>
     */
    protected array $container = [];

    /**
     * Constructor.
     *
     * @param array<string, mixed> $data Associated array of property values
     *                                   initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('statusCode', $data ?? [], null);
        $this->setIfExists('contractInfoInput', $data ?? [], null);
        $this->setIfExists('shopInfoInput', $data ?? [], null);
        $this->setIfExists('accountInfoInput', $data ?? [], null);
        $this->setIfExists('cardInfoInput', $data ?? [], null);
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array.
     *
     * @param array<string, mixed> $fields
     */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }
        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return list<string> invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return 0 === count($this->listInvalidProperties());
    }

    /**
     * Gets statusCode.
     *
     * @return ContractInputStatus|null
     */
    public function getStatusCode(): mixed
    {
        return $this->container['statusCode'];
    }

    /**
     * Sets statusCode.
     *
     * @param ContractInputStatus $statusCode statusCode
     */
    public function setStatusCode(mixed $statusCode): static
    {
        if (is_null($statusCode)) {
            throw new \InvalidArgumentException('non-nullable statusCode cannot be null');
        }
        $this->container['statusCode'] = $statusCode;

        return $this;
    }

    /**
     * Gets contractInfoInput.
     *
     * @return bool|null
     */
    public function getContractInfoInput(): mixed
    {
        return $this->container['contractInfoInput'];
    }

    /**
     * Sets contractInfoInput.
     *
     * @param bool $contractInfoInput 契約情報入力完了フラグ\\ \\ 契約情報の入力が完了しているかどうか
     */
    public function setContractInfoInput(mixed $contractInfoInput): static
    {
        if (is_null($contractInfoInput)) {
            throw new \InvalidArgumentException('non-nullable contractInfoInput cannot be null');
        }
        $this->container['contractInfoInput'] = $contractInfoInput;

        return $this;
    }

    /**
     * Gets shopInfoInput.
     *
     * @return bool|null
     */
    public function getShopInfoInput(): mixed
    {
        return $this->container['shopInfoInput'];
    }

    /**
     * Sets shopInfoInput.
     *
     * @param bool $shopInfoInput ショップ情報入力完了フラグ\\ \\ ショップ情報の入力が完了しているかどうか
     */
    public function setShopInfoInput(mixed $shopInfoInput): static
    {
        if (is_null($shopInfoInput)) {
            throw new \InvalidArgumentException('non-nullable shopInfoInput cannot be null');
        }
        $this->container['shopInfoInput'] = $shopInfoInput;

        return $this;
    }

    /**
     * Gets accountInfoInput.
     *
     * @return bool|null
     */
    public function getAccountInfoInput(): mixed
    {
        return $this->container['accountInfoInput'];
    }

    /**
     * Sets accountInfoInput.
     *
     * @param bool $accountInfoInput 銀行口座情報入力完了フラグ\\ \\ 銀行口座情報の入力が完了しているかどうか
     */
    public function setAccountInfoInput(mixed $accountInfoInput): static
    {
        if (is_null($accountInfoInput)) {
            throw new \InvalidArgumentException('non-nullable accountInfoInput cannot be null');
        }
        $this->container['accountInfoInput'] = $accountInfoInput;

        return $this;
    }

    /**
     * Gets cardInfoInput.
     *
     * @return bool|null
     */
    public function getCardInfoInput(): mixed
    {
        return $this->container['cardInfoInput'];
    }

    /**
     * Sets cardInfoInput.
     *
     * @param bool $cardInfoInput 請求先クレジットカード情報入力完了フラグ\\ \\ fincodeが請求を行う際に請求先となるクレジットカード情報の入力が完了しているかどうか
     */
    public function setCardInfoInput(mixed $cardInfoInput): static
    {
        if (is_null($cardInfoInput)) {
            throw new \InvalidArgumentException('non-nullable cardInfoInput cannot be null');
        }
        $this->container['cardInfoInput'] = $cardInfoInput;

        return $this;
    }

    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @see https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    public function jsonSerialize(): mixed
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object.
     */
    public function __toString(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
    }

    /**
     * Gets a header-safe presentation of the object.
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
