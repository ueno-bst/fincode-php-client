<?php

declare(strict_types=1);
/**
 * fincode API.
 *
 * fincodeのAPIリファレンスです。\\ fincodeは決済情報のほか様々なリソースを管理できるため、リソース指向なREST APIをベースとしたインターフェイス設計のもとでAPIを提供しています。\\ APIの呼び出しにはAPIキーによる認証が必要であり、リクエストの際に`Authorization`ヘッダーに有効なAPIキーをセットすることで認証できます。
 *
 * The version of the OpenAPI document: 1.2.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Fincode\Model;

use OpenAPI\Fincode\ObjectSerializer;

/**
 * @implements \ArrayAccess<string, mixed>
 */
class PaymentSessionCard implements ModelInterface, \ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;
    /**
     * The original name of the model.
     */
    protected static string $openAPIModelName = 'PaymentSession.Card';
    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var array<string, string>
     */
    protected static array $openAPITypes = ['jobCode' => '\OpenAPI\Fincode\Model\CardPaymentSessionJobCode', 'tdsType' => '\OpenAPI\Fincode\Model\TdsType', 'tdTenantName' => 'string', 'tds2Type' => '\OpenAPI\Fincode\Model\Tds2Type', 'itemCode' => 'string'];
    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var array<string, string|null>
     */
    protected static array $openAPIFormats = ['jobCode' => null, 'tdsType' => null, 'tdTenantName' => null, 'tds2Type' => null, 'itemCode' => null];
    /**
     * Array of nullable properties. Used for (de)serialization.
     *
     * @var array<string, bool>
     */
    protected static array $openAPINullables = ['jobCode' => false, 'tdsType' => true, 'tdTenantName' => false, 'tds2Type' => true, 'itemCode' => true];
    /**
     * If a nullable field gets set to null, insert it here.
     *
     * @var array<string, bool>
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return array<string, string|null>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties.
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null.
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null.
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable.
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }
    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = ['jobCode' => 'job_code', 'tdsType' => 'tds_type', 'tdTenantName' => 'td_tenant_name', 'tds2Type' => 'tds2_type', 'itemCode' => 'item_code'];
    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var array<string, string>
     */
    protected static array $setters = ['jobCode' => 'setJobCode', 'tdsType' => 'setTdsType', 'tdTenantName' => 'setTdTenantName', 'tds2Type' => 'setTds2Type', 'itemCode' => 'setItemCode'];
    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var array<string, string>
     */
    protected static array $getters = ['jobCode' => 'getJobCode', 'tdsType' => 'getTdsType', 'tdTenantName' => 'getTdTenantName', 'tds2Type' => 'getTds2Type', 'itemCode' => 'getItemCode'];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }
    /**
     * Associative array for storing property values.
     *
     * @phpstan-var array<string, mixed>
     *
     * @psalm-var array<string, mixed>
     */
    protected array $container = [];

    /**
     * Constructor.
     *
     * @param array<string, mixed> $data Associated array of property values
     *                                   initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('jobCode', $data ?? [], null);
        $this->setIfExists('tdsType', $data ?? [], null);
        $this->setIfExists('tdTenantName', $data ?? [], null);
        $this->setIfExists('tds2Type', $data ?? [], null);
        $this->setIfExists('itemCode', $data ?? [], null);
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array.
     *
     * @param array<string, mixed> $fields
     */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }
        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return list<string> invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];
        if (!is_null($this->container['tdTenantName']) && mb_strlen($this->container['tdTenantName']) > 25) {
            $invalidProperties[] = "invalid value for 'tdTenantName', the character length must be smaller than or equal to 25.";
        }
        if (!is_null($this->container['itemCode']) && mb_strlen($this->container['itemCode']) > 100) {
            $invalidProperties[] = "invalid value for 'itemCode', the character length must be smaller than or equal to 100.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return 0 === count($this->listInvalidProperties());
    }

    /**
     * Gets jobCode.
     *
     * @return CardPaymentSessionJobCode|null
     */
    public function getJobCode(): mixed
    {
        return $this->container['jobCode'];
    }

    /**
     * Sets jobCode.
     *
     * @param CardPaymentSessionJobCode $jobCode jobCode
     */
    public function setJobCode(mixed $jobCode): static
    {
        if (is_null($jobCode)) {
            throw new \InvalidArgumentException('non-nullable jobCode cannot be null');
        }
        $this->container['jobCode'] = $jobCode;

        return $this;
    }

    /**
     * Gets tdsType.
     *
     * @return TdsType|null
     */
    public function getTdsType(): mixed
    {
        return $this->container['tdsType'];
    }

    /**
     * Sets tdsType.
     *
     * @param TdsType|null $tdsType tdsType
     */
    public function setTdsType(mixed $tdsType): static
    {
        if (is_null($tdsType)) {
            $this->openAPINullablesSetToNull[] = 'tdsType';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tdsType', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tdsType'] = $tdsType;

        return $this;
    }

    /**
     * Gets tdTenantName.
     *
     * @return string|null
     */
    public function getTdTenantName(): mixed
    {
        return $this->container['tdTenantName'];
    }

    /**
     * Sets tdTenantName.
     *
     * @param string $tdTenantName <span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\ 加盟店名。\\ 3Dセキュア認証の際に表示されるショップ名や加盟店名を指定できます。\\ 使用可能な文字は以下の通りです。 - 半角英数 - 半角記号： !\"#$%&'()*+,-./:;<=>?@[\\]`^_{|}~ - 半角スペース  未指定の場合、 カード決済の契約時にfincodeが下記の形式に従って設定した値が自動的に使用されます。\\ \\ 形式：`{{ショップID}}-{{英数字からなる固定値}}`
     */
    public function setTdTenantName(mixed $tdTenantName): static
    {
        if (is_null($tdTenantName)) {
            throw new \InvalidArgumentException('non-nullable tdTenantName cannot be null');
        }
        if (mb_strlen($tdTenantName) > 25) {
            throw new \InvalidArgumentException('invalid length for $tdTenantName when calling PaymentSessionCard., must be smaller than or equal to 25.');
        }
        $this->container['tdTenantName'] = $tdTenantName;

        return $this;
    }

    /**
     * Gets tds2Type.
     *
     * @return Tds2Type|null
     */
    public function getTds2Type(): mixed
    {
        return $this->container['tds2Type'];
    }

    /**
     * Sets tds2Type.
     *
     * @param Tds2Type|null $tds2Type tds2Type
     */
    public function setTds2Type(mixed $tds2Type): static
    {
        if (is_null($tds2Type)) {
            $this->openAPINullablesSetToNull[] = 'tds2Type';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tds2Type', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tds2Type'] = $tds2Type;

        return $this;
    }

    /**
     * Gets itemCode.
     *
     * @return string|null
     */
    public function getItemCode(): mixed
    {
        return $this->container['itemCode'];
    }

    /**
     * Sets itemCode.
     *
     * @param string|null $itemCode 商品コード\\ ※ 通常は`null`
     */
    public function setItemCode(mixed $itemCode): static
    {
        if (is_null($itemCode)) {
            $this->openAPINullablesSetToNull[] = 'itemCode';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('itemCode', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($itemCode) && mb_strlen($itemCode) > 100) {
            throw new \InvalidArgumentException('invalid length for $itemCode when calling PaymentSessionCard., must be smaller than or equal to 100.');
        }
        $this->container['itemCode'] = $itemCode;

        return $this;
    }

    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @see https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    public function jsonSerialize(): mixed
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object.
     */
    public function __toString(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
    }

    /**
     * Gets a header-safe presentation of the object.
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
