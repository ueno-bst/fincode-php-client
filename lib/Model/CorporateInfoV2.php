<?php

declare(strict_types=1);
/**
 * fincode API.
 *
 * fincodeのAPIリファレンスです。\\ fincodeは決済情報のほか様々なリソースを管理できるため、リソース指向なREST APIをベースとしたインターフェイス設計のもとでAPIを提供しています。\\ APIの呼び出しにはAPIキーによる認証が必要であり、リクエストの際に`Authorization`ヘッダーに有効なAPIキーをセットすることで認証できます。
 *
 * The version of the OpenAPI document: 1.2.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Fincode\Model;

use OpenAPI\Fincode\ObjectSerializer;

/**
 * @implements \ArrayAccess<string, mixed>
 */
class CorporateInfoV2 implements ModelInterface, \ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;
    /**
     * The original name of the model.
     */
    protected static string $openAPIModelName = 'CorporateInfo.V2';
    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var array<string, string>
     */
    protected static array $openAPITypes = ['corporateNumber' => 'string', 'corporateName' => 'string', 'corporateNameKana' => 'string', 'hp' => 'string', 'capital' => 'float', 'establishedAt' => 'string', 'yearlySales' => 'float', 'businessDetails' => 'string', 'companyPostalCode' => 'string', 'companyPrefecture' => 'string', 'companyPrefectureKana' => 'string', 'companyAddressMunicipality' => 'string', 'companyAddressMunicipalityKana' => 'string', 'companyAddressSection' => 'string', 'companyAddressSectionKana' => 'string', 'companyAddressChrome' => 'string', 'companyAddressChromeKana' => 'string', 'companyAddressBuildingName' => 'string', 'companyAddressBuildingNameKana' => 'string', 'companyTel' => 'string'];
    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var array<string, string|null>
     */
    protected static array $openAPIFormats = ['corporateNumber' => null, 'corporateName' => null, 'corporateNameKana' => null, 'hp' => null, 'capital' => null, 'establishedAt' => null, 'yearlySales' => null, 'businessDetails' => null, 'companyPostalCode' => null, 'companyPrefecture' => null, 'companyPrefectureKana' => null, 'companyAddressMunicipality' => null, 'companyAddressMunicipalityKana' => null, 'companyAddressSection' => null, 'companyAddressSectionKana' => null, 'companyAddressChrome' => null, 'companyAddressChromeKana' => null, 'companyAddressBuildingName' => null, 'companyAddressBuildingNameKana' => null, 'companyTel' => null];
    /**
     * Array of nullable properties. Used for (de)serialization.
     *
     * @var array<string, bool>
     */
    protected static array $openAPINullables = ['corporateNumber' => true, 'corporateName' => false, 'corporateNameKana' => false, 'hp' => true, 'capital' => true, 'establishedAt' => true, 'yearlySales' => true, 'businessDetails' => true, 'companyPostalCode' => true, 'companyPrefecture' => true, 'companyPrefectureKana' => true, 'companyAddressMunicipality' => true, 'companyAddressMunicipalityKana' => true, 'companyAddressSection' => true, 'companyAddressSectionKana' => true, 'companyAddressChrome' => true, 'companyAddressChromeKana' => true, 'companyAddressBuildingName' => true, 'companyAddressBuildingNameKana' => true, 'companyTel' => true];
    /**
     * If a nullable field gets set to null, insert it here.
     *
     * @var array<string, bool>
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return array<string, string|null>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties.
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null.
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null.
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable.
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }
    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = ['corporateNumber' => 'corporate_number', 'corporateName' => 'corporate_name', 'corporateNameKana' => 'corporate_name_kana', 'hp' => 'hp', 'capital' => 'capital', 'establishedAt' => 'established_at', 'yearlySales' => 'yearly_sales', 'businessDetails' => 'business_details', 'companyPostalCode' => 'company_postal_code', 'companyPrefecture' => 'company_prefecture', 'companyPrefectureKana' => 'company_prefecture_kana', 'companyAddressMunicipality' => 'company_address_municipality', 'companyAddressMunicipalityKana' => 'company_address_municipality_kana', 'companyAddressSection' => 'company_address_section', 'companyAddressSectionKana' => 'company_address_section_kana', 'companyAddressChrome' => 'company_address_chrome', 'companyAddressChromeKana' => 'company_address_chrome_kana', 'companyAddressBuildingName' => 'company_address_building_name', 'companyAddressBuildingNameKana' => 'company_address_building_name_kana', 'companyTel' => 'company_tel'];
    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var array<string, string>
     */
    protected static array $setters = ['corporateNumber' => 'setCorporateNumber', 'corporateName' => 'setCorporateName', 'corporateNameKana' => 'setCorporateNameKana', 'hp' => 'setHp', 'capital' => 'setCapital', 'establishedAt' => 'setEstablishedAt', 'yearlySales' => 'setYearlySales', 'businessDetails' => 'setBusinessDetails', 'companyPostalCode' => 'setCompanyPostalCode', 'companyPrefecture' => 'setCompanyPrefecture', 'companyPrefectureKana' => 'setCompanyPrefectureKana', 'companyAddressMunicipality' => 'setCompanyAddressMunicipality', 'companyAddressMunicipalityKana' => 'setCompanyAddressMunicipalityKana', 'companyAddressSection' => 'setCompanyAddressSection', 'companyAddressSectionKana' => 'setCompanyAddressSectionKana', 'companyAddressChrome' => 'setCompanyAddressChrome', 'companyAddressChromeKana' => 'setCompanyAddressChromeKana', 'companyAddressBuildingName' => 'setCompanyAddressBuildingName', 'companyAddressBuildingNameKana' => 'setCompanyAddressBuildingNameKana', 'companyTel' => 'setCompanyTel'];
    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var array<string, string>
     */
    protected static array $getters = ['corporateNumber' => 'getCorporateNumber', 'corporateName' => 'getCorporateName', 'corporateNameKana' => 'getCorporateNameKana', 'hp' => 'getHp', 'capital' => 'getCapital', 'establishedAt' => 'getEstablishedAt', 'yearlySales' => 'getYearlySales', 'businessDetails' => 'getBusinessDetails', 'companyPostalCode' => 'getCompanyPostalCode', 'companyPrefecture' => 'getCompanyPrefecture', 'companyPrefectureKana' => 'getCompanyPrefectureKana', 'companyAddressMunicipality' => 'getCompanyAddressMunicipality', 'companyAddressMunicipalityKana' => 'getCompanyAddressMunicipalityKana', 'companyAddressSection' => 'getCompanyAddressSection', 'companyAddressSectionKana' => 'getCompanyAddressSectionKana', 'companyAddressChrome' => 'getCompanyAddressChrome', 'companyAddressChromeKana' => 'getCompanyAddressChromeKana', 'companyAddressBuildingName' => 'getCompanyAddressBuildingName', 'companyAddressBuildingNameKana' => 'getCompanyAddressBuildingNameKana', 'companyTel' => 'getCompanyTel'];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }
    /**
     * Associative array for storing property values.
     *
     * @phpstan-var array<string, mixed>
     *
     * @psalm-var array<string, mixed>
     */
    protected array $container = [];

    /**
     * Constructor.
     *
     * @param array<string, mixed> $data Associated array of property values
     *                                   initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('corporateNumber', $data ?? [], null);
        $this->setIfExists('corporateName', $data ?? [], null);
        $this->setIfExists('corporateNameKana', $data ?? [], null);
        $this->setIfExists('hp', $data ?? [], null);
        $this->setIfExists('capital', $data ?? [], null);
        $this->setIfExists('establishedAt', $data ?? [], null);
        $this->setIfExists('yearlySales', $data ?? [], null);
        $this->setIfExists('businessDetails', $data ?? [], null);
        $this->setIfExists('companyPostalCode', $data ?? [], null);
        $this->setIfExists('companyPrefecture', $data ?? [], null);
        $this->setIfExists('companyPrefectureKana', $data ?? [], null);
        $this->setIfExists('companyAddressMunicipality', $data ?? [], null);
        $this->setIfExists('companyAddressMunicipalityKana', $data ?? [], null);
        $this->setIfExists('companyAddressSection', $data ?? [], null);
        $this->setIfExists('companyAddressSectionKana', $data ?? [], null);
        $this->setIfExists('companyAddressChrome', $data ?? [], null);
        $this->setIfExists('companyAddressChromeKana', $data ?? [], null);
        $this->setIfExists('companyAddressBuildingName', $data ?? [], null);
        $this->setIfExists('companyAddressBuildingNameKana', $data ?? [], null);
        $this->setIfExists('companyTel', $data ?? [], null);
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array.
     *
     * @param array<string, mixed> $fields
     */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }
        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return list<string> invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];
        if (null === $this->container['corporateNumber']) {
            $invalidProperties[] = "'corporateNumber' can't be null";
        }
        if (mb_strlen($this->container['corporateNumber']) > 13) {
            $invalidProperties[] = "invalid value for 'corporateNumber', the character length must be smaller than or equal to 13.";
        }
        if (mb_strlen($this->container['corporateNumber']) < 13) {
            $invalidProperties[] = "invalid value for 'corporateNumber', the character length must be bigger than or equal to 13.";
        }
        if (null === $this->container['corporateName']) {
            $invalidProperties[] = "'corporateName' can't be null";
        }
        if (mb_strlen($this->container['corporateName']) > 150) {
            $invalidProperties[] = "invalid value for 'corporateName', the character length must be smaller than or equal to 150.";
        }
        if (mb_strlen($this->container['corporateName']) < 1) {
            $invalidProperties[] = "invalid value for 'corporateName', the character length must be bigger than or equal to 1.";
        }
        if (null === $this->container['corporateNameKana']) {
            $invalidProperties[] = "'corporateNameKana' can't be null";
        }
        if (mb_strlen($this->container['corporateNameKana']) > 150) {
            $invalidProperties[] = "invalid value for 'corporateNameKana', the character length must be smaller than or equal to 150.";
        }
        if (mb_strlen($this->container['corporateNameKana']) < 1) {
            $invalidProperties[] = "invalid value for 'corporateNameKana', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['hp']) && mb_strlen($this->container['hp']) > 300) {
            $invalidProperties[] = "invalid value for 'hp', the character length must be smaller than or equal to 300.";
        }
        if (!is_null($this->container['hp']) && mb_strlen($this->container['hp']) < 1) {
            $invalidProperties[] = "invalid value for 'hp', the character length must be bigger than or equal to 1.";
        }
        if (null === $this->container['capital']) {
            $invalidProperties[] = "'capital' can't be null";
        }
        if (null === $this->container['establishedAt']) {
            $invalidProperties[] = "'establishedAt' can't be null";
        }
        if (mb_strlen($this->container['establishedAt']) > 10) {
            $invalidProperties[] = "invalid value for 'establishedAt', the character length must be smaller than or equal to 10.";
        }
        if (mb_strlen($this->container['establishedAt']) < 10) {
            $invalidProperties[] = "invalid value for 'establishedAt', the character length must be bigger than or equal to 10.";
        }
        if (null === $this->container['yearlySales']) {
            $invalidProperties[] = "'yearlySales' can't be null";
        }
        if (null === $this->container['businessDetails']) {
            $invalidProperties[] = "'businessDetails' can't be null";
        }
        if (mb_strlen($this->container['businessDetails']) > 5000) {
            $invalidProperties[] = "invalid value for 'businessDetails', the character length must be smaller than or equal to 5000.";
        }
        if (mb_strlen($this->container['businessDetails']) < 1) {
            $invalidProperties[] = "invalid value for 'businessDetails', the character length must be bigger than or equal to 1.";
        }
        if (null === $this->container['companyPostalCode']) {
            $invalidProperties[] = "'companyPostalCode' can't be null";
        }
        if (mb_strlen($this->container['companyPostalCode']) > 8) {
            $invalidProperties[] = "invalid value for 'companyPostalCode', the character length must be smaller than or equal to 8.";
        }
        if (mb_strlen($this->container['companyPostalCode']) < 8) {
            $invalidProperties[] = "invalid value for 'companyPostalCode', the character length must be bigger than or equal to 8.";
        }
        if (null === $this->container['companyPrefecture']) {
            $invalidProperties[] = "'companyPrefecture' can't be null";
        }
        if (mb_strlen($this->container['companyPrefecture']) > 4) {
            $invalidProperties[] = "invalid value for 'companyPrefecture', the character length must be smaller than or equal to 4.";
        }
        if (mb_strlen($this->container['companyPrefecture']) < 3) {
            $invalidProperties[] = "invalid value for 'companyPrefecture', the character length must be bigger than or equal to 3.";
        }
        if (null === $this->container['companyPrefectureKana']) {
            $invalidProperties[] = "'companyPrefectureKana' can't be null";
        }
        if (mb_strlen($this->container['companyPrefectureKana']) > 6) {
            $invalidProperties[] = "invalid value for 'companyPrefectureKana', the character length must be smaller than or equal to 6.";
        }
        if (mb_strlen($this->container['companyPrefectureKana']) < 1) {
            $invalidProperties[] = "invalid value for 'companyPrefectureKana', the character length must be bigger than or equal to 1.";
        }
        if (null === $this->container['companyAddressMunicipality']) {
            $invalidProperties[] = "'companyAddressMunicipality' can't be null";
        }
        if (mb_strlen($this->container['companyAddressMunicipality']) > 50) {
            $invalidProperties[] = "invalid value for 'companyAddressMunicipality', the character length must be smaller than or equal to 50.";
        }
        if (mb_strlen($this->container['companyAddressMunicipality']) < 1) {
            $invalidProperties[] = "invalid value for 'companyAddressMunicipality', the character length must be bigger than or equal to 1.";
        }
        if (null === $this->container['companyAddressMunicipalityKana']) {
            $invalidProperties[] = "'companyAddressMunicipalityKana' can't be null";
        }
        if (mb_strlen($this->container['companyAddressMunicipalityKana']) > 100) {
            $invalidProperties[] = "invalid value for 'companyAddressMunicipalityKana', the character length must be smaller than or equal to 100.";
        }
        if (mb_strlen($this->container['companyAddressMunicipalityKana']) < 1) {
            $invalidProperties[] = "invalid value for 'companyAddressMunicipalityKana', the character length must be bigger than or equal to 1.";
        }
        if (null === $this->container['companyAddressSection']) {
            $invalidProperties[] = "'companyAddressSection' can't be null";
        }
        if (mb_strlen($this->container['companyAddressSection']) > 50) {
            $invalidProperties[] = "invalid value for 'companyAddressSection', the character length must be smaller than or equal to 50.";
        }
        if (mb_strlen($this->container['companyAddressSection']) < 1) {
            $invalidProperties[] = "invalid value for 'companyAddressSection', the character length must be bigger than or equal to 1.";
        }
        if (null === $this->container['companyAddressSectionKana']) {
            $invalidProperties[] = "'companyAddressSectionKana' can't be null";
        }
        if (mb_strlen($this->container['companyAddressSectionKana']) > 100) {
            $invalidProperties[] = "invalid value for 'companyAddressSectionKana', the character length must be smaller than or equal to 100.";
        }
        if (mb_strlen($this->container['companyAddressSectionKana']) < 1) {
            $invalidProperties[] = "invalid value for 'companyAddressSectionKana', the character length must be bigger than or equal to 1.";
        }
        if (null === $this->container['companyAddressChrome']) {
            $invalidProperties[] = "'companyAddressChrome' can't be null";
        }
        if (mb_strlen($this->container['companyAddressChrome']) > 100) {
            $invalidProperties[] = "invalid value for 'companyAddressChrome', the character length must be smaller than or equal to 100.";
        }
        if (mb_strlen($this->container['companyAddressChrome']) < 1) {
            $invalidProperties[] = "invalid value for 'companyAddressChrome', the character length must be bigger than or equal to 1.";
        }
        if (null === $this->container['companyAddressChromeKana']) {
            $invalidProperties[] = "'companyAddressChromeKana' can't be null";
        }
        if (mb_strlen($this->container['companyAddressChromeKana']) > 100) {
            $invalidProperties[] = "invalid value for 'companyAddressChromeKana', the character length must be smaller than or equal to 100.";
        }
        if (mb_strlen($this->container['companyAddressChromeKana']) < 1) {
            $invalidProperties[] = "invalid value for 'companyAddressChromeKana', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['companyAddressBuildingName']) && mb_strlen($this->container['companyAddressBuildingName']) > 100) {
            $invalidProperties[] = "invalid value for 'companyAddressBuildingName', the character length must be smaller than or equal to 100.";
        }
        if (!is_null($this->container['companyAddressBuildingName']) && mb_strlen($this->container['companyAddressBuildingName']) < 1) {
            $invalidProperties[] = "invalid value for 'companyAddressBuildingName', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['companyAddressBuildingNameKana']) && mb_strlen($this->container['companyAddressBuildingNameKana']) > 100) {
            $invalidProperties[] = "invalid value for 'companyAddressBuildingNameKana', the character length must be smaller than or equal to 100.";
        }
        if (!is_null($this->container['companyAddressBuildingNameKana']) && mb_strlen($this->container['companyAddressBuildingNameKana']) < 1) {
            $invalidProperties[] = "invalid value for 'companyAddressBuildingNameKana', the character length must be bigger than or equal to 1.";
        }
        if (null === $this->container['companyTel']) {
            $invalidProperties[] = "'companyTel' can't be null";
        }
        if (mb_strlen($this->container['companyTel']) > 15) {
            $invalidProperties[] = "invalid value for 'companyTel', the character length must be smaller than or equal to 15.";
        }
        if (mb_strlen($this->container['companyTel']) < 1) {
            $invalidProperties[] = "invalid value for 'companyTel', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return 0 === count($this->listInvalidProperties());
    }

    /**
     * Gets corporateNumber.
     *
     * @return string
     */
    public function getCorporateNumber(): mixed
    {
        return $this->container['corporateNumber'];
    }

    /**
     * Sets corporateNumber.
     *
     * @param string|null $corporateNumber 法人番号
     */
    public function setCorporateNumber(mixed $corporateNumber): static
    {
        if (is_null($corporateNumber)) {
            $this->openAPINullablesSetToNull[] = 'corporateNumber';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('corporateNumber', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($corporateNumber) && mb_strlen($corporateNumber) > 13) {
            throw new \InvalidArgumentException('invalid length for $corporateNumber when calling CorporateInfoV2., must be smaller than or equal to 13.');
        }
        if (!is_null($corporateNumber) && mb_strlen($corporateNumber) < 13) {
            throw new \InvalidArgumentException('invalid length for $corporateNumber when calling CorporateInfoV2., must be bigger than or equal to 13.');
        }
        $this->container['corporateNumber'] = $corporateNumber;

        return $this;
    }

    /**
     * Gets corporateName.
     *
     * @return string
     */
    public function getCorporateName(): mixed
    {
        return $this->container['corporateName'];
    }

    /**
     * Sets corporateName.
     *
     * @param string $corporateName 法人名
     */
    public function setCorporateName(mixed $corporateName): static
    {
        if (is_null($corporateName)) {
            throw new \InvalidArgumentException('non-nullable corporateName cannot be null');
        }
        if (mb_strlen($corporateName) > 150) {
            throw new \InvalidArgumentException('invalid length for $corporateName when calling CorporateInfoV2., must be smaller than or equal to 150.');
        }
        if (mb_strlen($corporateName) < 1) {
            throw new \InvalidArgumentException('invalid length for $corporateName when calling CorporateInfoV2., must be bigger than or equal to 1.');
        }
        $this->container['corporateName'] = $corporateName;

        return $this;
    }

    /**
     * Gets corporateNameKana.
     *
     * @return string
     */
    public function getCorporateNameKana(): mixed
    {
        return $this->container['corporateNameKana'];
    }

    /**
     * Sets corporateNameKana.
     *
     * @param string $corporateNameKana 法人名（カナ）
     */
    public function setCorporateNameKana(mixed $corporateNameKana): static
    {
        if (is_null($corporateNameKana)) {
            throw new \InvalidArgumentException('non-nullable corporateNameKana cannot be null');
        }
        if (mb_strlen($corporateNameKana) > 150) {
            throw new \InvalidArgumentException('invalid length for $corporateNameKana when calling CorporateInfoV2., must be smaller than or equal to 150.');
        }
        if (mb_strlen($corporateNameKana) < 1) {
            throw new \InvalidArgumentException('invalid length for $corporateNameKana when calling CorporateInfoV2., must be bigger than or equal to 1.');
        }
        $this->container['corporateNameKana'] = $corporateNameKana;

        return $this;
    }

    /**
     * Gets hp.
     *
     * @return string|null
     */
    public function getHp(): mixed
    {
        return $this->container['hp'];
    }

    /**
     * Sets hp.
     *
     * @param string|null $hp 企業サイトURL
     */
    public function setHp(mixed $hp): static
    {
        if (is_null($hp)) {
            $this->openAPINullablesSetToNull[] = 'hp';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('hp', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($hp) && mb_strlen($hp) > 300) {
            throw new \InvalidArgumentException('invalid length for $hp when calling CorporateInfoV2., must be smaller than or equal to 300.');
        }
        if (!is_null($hp) && mb_strlen($hp) < 1) {
            throw new \InvalidArgumentException('invalid length for $hp when calling CorporateInfoV2., must be bigger than or equal to 1.');
        }
        $this->container['hp'] = $hp;

        return $this;
    }

    /**
     * Gets capital.
     *
     * @return float
     */
    public function getCapital(): mixed
    {
        return $this->container['capital'];
    }

    /**
     * Sets capital.
     *
     * @param float|null $capital 資本金
     */
    public function setCapital(mixed $capital): static
    {
        if (is_null($capital)) {
            $this->openAPINullablesSetToNull[] = 'capital';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('capital', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['capital'] = $capital;

        return $this;
    }

    /**
     * Gets establishedAt.
     *
     * @return string
     */
    public function getEstablishedAt(): mixed
    {
        return $this->container['establishedAt'];
    }

    /**
     * Sets establishedAt.
     *
     * @param string|null $establishedAt 設立日
     */
    public function setEstablishedAt(mixed $establishedAt): static
    {
        if (is_null($establishedAt)) {
            $this->openAPINullablesSetToNull[] = 'establishedAt';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('establishedAt', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($establishedAt) && mb_strlen($establishedAt) > 10) {
            throw new \InvalidArgumentException('invalid length for $establishedAt when calling CorporateInfoV2., must be smaller than or equal to 10.');
        }
        if (!is_null($establishedAt) && mb_strlen($establishedAt) < 10) {
            throw new \InvalidArgumentException('invalid length for $establishedAt when calling CorporateInfoV2., must be bigger than or equal to 10.');
        }
        $this->container['establishedAt'] = $establishedAt;

        return $this;
    }

    /**
     * Gets yearlySales.
     *
     * @return float
     */
    public function getYearlySales(): mixed
    {
        return $this->container['yearlySales'];
    }

    /**
     * Sets yearlySales.
     *
     * @param float|null $yearlySales 年商
     */
    public function setYearlySales(mixed $yearlySales): static
    {
        if (is_null($yearlySales)) {
            $this->openAPINullablesSetToNull[] = 'yearlySales';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('yearlySales', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['yearlySales'] = $yearlySales;

        return $this;
    }

    /**
     * Gets businessDetails.
     *
     * @return string
     */
    public function getBusinessDetails(): mixed
    {
        return $this->container['businessDetails'];
    }

    /**
     * Sets businessDetails.
     *
     * @param string|null $businessDetails 事業内容
     */
    public function setBusinessDetails(mixed $businessDetails): static
    {
        if (is_null($businessDetails)) {
            $this->openAPINullablesSetToNull[] = 'businessDetails';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('businessDetails', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($businessDetails) && mb_strlen($businessDetails) > 5000) {
            throw new \InvalidArgumentException('invalid length for $businessDetails when calling CorporateInfoV2., must be smaller than or equal to 5000.');
        }
        if (!is_null($businessDetails) && mb_strlen($businessDetails) < 1) {
            throw new \InvalidArgumentException('invalid length for $businessDetails when calling CorporateInfoV2., must be bigger than or equal to 1.');
        }
        $this->container['businessDetails'] = $businessDetails;

        return $this;
    }

    /**
     * Gets companyPostalCode.
     *
     * @return string
     */
    public function getCompanyPostalCode(): mixed
    {
        return $this->container['companyPostalCode'];
    }

    /**
     * Sets companyPostalCode.
     *
     * @param string|null $companyPostalCode 会社住所 郵便番号\\ 形式： 半角数字（ハイフンあり）
     */
    public function setCompanyPostalCode(mixed $companyPostalCode): static
    {
        if (is_null($companyPostalCode)) {
            $this->openAPINullablesSetToNull[] = 'companyPostalCode';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('companyPostalCode', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($companyPostalCode) && mb_strlen($companyPostalCode) > 8) {
            throw new \InvalidArgumentException('invalid length for $companyPostalCode when calling CorporateInfoV2., must be smaller than or equal to 8.');
        }
        if (!is_null($companyPostalCode) && mb_strlen($companyPostalCode) < 8) {
            throw new \InvalidArgumentException('invalid length for $companyPostalCode when calling CorporateInfoV2., must be bigger than or equal to 8.');
        }
        $this->container['companyPostalCode'] = $companyPostalCode;

        return $this;
    }

    /**
     * Gets companyPrefecture.
     *
     * @return string
     */
    public function getCompanyPrefecture(): mixed
    {
        return $this->container['companyPrefecture'];
    }

    /**
     * Sets companyPrefecture.
     *
     * @param string|null $companyPrefecture 会社住所 都道府県\\ 形式： 漢字
     */
    public function setCompanyPrefecture(mixed $companyPrefecture): static
    {
        if (is_null($companyPrefecture)) {
            $this->openAPINullablesSetToNull[] = 'companyPrefecture';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('companyPrefecture', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($companyPrefecture) && mb_strlen($companyPrefecture) > 4) {
            throw new \InvalidArgumentException('invalid length for $companyPrefecture when calling CorporateInfoV2., must be smaller than or equal to 4.');
        }
        if (!is_null($companyPrefecture) && mb_strlen($companyPrefecture) < 3) {
            throw new \InvalidArgumentException('invalid length for $companyPrefecture when calling CorporateInfoV2., must be bigger than or equal to 3.');
        }
        $this->container['companyPrefecture'] = $companyPrefecture;

        return $this;
    }

    /**
     * Gets companyPrefectureKana.
     *
     * @return string
     */
    public function getCompanyPrefectureKana(): mixed
    {
        return $this->container['companyPrefectureKana'];
    }

    /**
     * Sets companyPrefectureKana.
     *
     * @param string|null $companyPrefectureKana 会社住所 都道府県（カナ）\\ 形式： 全角カタカナ
     */
    public function setCompanyPrefectureKana(mixed $companyPrefectureKana): static
    {
        if (is_null($companyPrefectureKana)) {
            $this->openAPINullablesSetToNull[] = 'companyPrefectureKana';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('companyPrefectureKana', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($companyPrefectureKana) && mb_strlen($companyPrefectureKana) > 6) {
            throw new \InvalidArgumentException('invalid length for $companyPrefectureKana when calling CorporateInfoV2., must be smaller than or equal to 6.');
        }
        if (!is_null($companyPrefectureKana) && mb_strlen($companyPrefectureKana) < 1) {
            throw new \InvalidArgumentException('invalid length for $companyPrefectureKana when calling CorporateInfoV2., must be bigger than or equal to 1.');
        }
        $this->container['companyPrefectureKana'] = $companyPrefectureKana;

        return $this;
    }

    /**
     * Gets companyAddressMunicipality.
     *
     * @return string
     */
    public function getCompanyAddressMunicipality(): mixed
    {
        return $this->container['companyAddressMunicipality'];
    }

    /**
     * Sets companyAddressMunicipality.
     *
     * @param string|null $companyAddressMunicipality 会社住所 市区町村\\ 形式： 漢字/ひらがな/カタカナ/半角英数
     */
    public function setCompanyAddressMunicipality(mixed $companyAddressMunicipality): static
    {
        if (is_null($companyAddressMunicipality)) {
            $this->openAPINullablesSetToNull[] = 'companyAddressMunicipality';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('companyAddressMunicipality', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($companyAddressMunicipality) && mb_strlen($companyAddressMunicipality) > 50) {
            throw new \InvalidArgumentException('invalid length for $companyAddressMunicipality when calling CorporateInfoV2., must be smaller than or equal to 50.');
        }
        if (!is_null($companyAddressMunicipality) && mb_strlen($companyAddressMunicipality) < 1) {
            throw new \InvalidArgumentException('invalid length for $companyAddressMunicipality when calling CorporateInfoV2., must be bigger than or equal to 1.');
        }
        $this->container['companyAddressMunicipality'] = $companyAddressMunicipality;

        return $this;
    }

    /**
     * Gets companyAddressMunicipalityKana.
     *
     * @return string
     */
    public function getCompanyAddressMunicipalityKana(): mixed
    {
        return $this->container['companyAddressMunicipalityKana'];
    }

    /**
     * Sets companyAddressMunicipalityKana.
     *
     * @param string|null $companyAddressMunicipalityKana 会社住所 市区町村（カナ）\\ 形式： 全角カタカナ
     */
    public function setCompanyAddressMunicipalityKana(mixed $companyAddressMunicipalityKana): static
    {
        if (is_null($companyAddressMunicipalityKana)) {
            $this->openAPINullablesSetToNull[] = 'companyAddressMunicipalityKana';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('companyAddressMunicipalityKana', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($companyAddressMunicipalityKana) && mb_strlen($companyAddressMunicipalityKana) > 100) {
            throw new \InvalidArgumentException('invalid length for $companyAddressMunicipalityKana when calling CorporateInfoV2., must be smaller than or equal to 100.');
        }
        if (!is_null($companyAddressMunicipalityKana) && mb_strlen($companyAddressMunicipalityKana) < 1) {
            throw new \InvalidArgumentException('invalid length for $companyAddressMunicipalityKana when calling CorporateInfoV2., must be bigger than or equal to 1.');
        }
        $this->container['companyAddressMunicipalityKana'] = $companyAddressMunicipalityKana;

        return $this;
    }

    /**
     * Gets companyAddressSection.
     *
     * @return string
     */
    public function getCompanyAddressSection(): mixed
    {
        return $this->container['companyAddressSection'];
    }

    /**
     * Sets companyAddressSection.
     *
     * @param string|null $companyAddressSection 会社住所 町域\\ 形式： 漢字/ひらがな/カタカナ/半角英数
     */
    public function setCompanyAddressSection(mixed $companyAddressSection): static
    {
        if (is_null($companyAddressSection)) {
            $this->openAPINullablesSetToNull[] = 'companyAddressSection';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('companyAddressSection', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($companyAddressSection) && mb_strlen($companyAddressSection) > 50) {
            throw new \InvalidArgumentException('invalid length for $companyAddressSection when calling CorporateInfoV2., must be smaller than or equal to 50.');
        }
        if (!is_null($companyAddressSection) && mb_strlen($companyAddressSection) < 1) {
            throw new \InvalidArgumentException('invalid length for $companyAddressSection when calling CorporateInfoV2., must be bigger than or equal to 1.');
        }
        $this->container['companyAddressSection'] = $companyAddressSection;

        return $this;
    }

    /**
     * Gets companyAddressSectionKana.
     *
     * @return string
     */
    public function getCompanyAddressSectionKana(): mixed
    {
        return $this->container['companyAddressSectionKana'];
    }

    /**
     * Sets companyAddressSectionKana.
     *
     * @param string|null $companyAddressSectionKana 会社住所 町域（カナ）\\ 形式： 全角カタカナ
     */
    public function setCompanyAddressSectionKana(mixed $companyAddressSectionKana): static
    {
        if (is_null($companyAddressSectionKana)) {
            $this->openAPINullablesSetToNull[] = 'companyAddressSectionKana';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('companyAddressSectionKana', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($companyAddressSectionKana) && mb_strlen($companyAddressSectionKana) > 100) {
            throw new \InvalidArgumentException('invalid length for $companyAddressSectionKana when calling CorporateInfoV2., must be smaller than or equal to 100.');
        }
        if (!is_null($companyAddressSectionKana) && mb_strlen($companyAddressSectionKana) < 1) {
            throw new \InvalidArgumentException('invalid length for $companyAddressSectionKana when calling CorporateInfoV2., must be bigger than or equal to 1.');
        }
        $this->container['companyAddressSectionKana'] = $companyAddressSectionKana;

        return $this;
    }

    /**
     * Gets companyAddressChrome.
     *
     * @return string
     */
    public function getCompanyAddressChrome(): mixed
    {
        return $this->container['companyAddressChrome'];
    }

    /**
     * Sets companyAddressChrome.
     *
     * @param string|null $companyAddressChrome 会社住所 番地\\ 形式： 漢字/ひらがな/カタカナ/半角英数
     */
    public function setCompanyAddressChrome(mixed $companyAddressChrome): static
    {
        if (is_null($companyAddressChrome)) {
            $this->openAPINullablesSetToNull[] = 'companyAddressChrome';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('companyAddressChrome', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($companyAddressChrome) && mb_strlen($companyAddressChrome) > 100) {
            throw new \InvalidArgumentException('invalid length for $companyAddressChrome when calling CorporateInfoV2., must be smaller than or equal to 100.');
        }
        if (!is_null($companyAddressChrome) && mb_strlen($companyAddressChrome) < 1) {
            throw new \InvalidArgumentException('invalid length for $companyAddressChrome when calling CorporateInfoV2., must be bigger than or equal to 1.');
        }
        $this->container['companyAddressChrome'] = $companyAddressChrome;

        return $this;
    }

    /**
     * Gets companyAddressChromeKana.
     *
     * @return string
     */
    public function getCompanyAddressChromeKana(): mixed
    {
        return $this->container['companyAddressChromeKana'];
    }

    /**
     * Sets companyAddressChromeKana.
     *
     * @param string|null $companyAddressChromeKana 会社住所 番地（カナ）\\ 形式： 全角カタカナ
     */
    public function setCompanyAddressChromeKana(mixed $companyAddressChromeKana): static
    {
        if (is_null($companyAddressChromeKana)) {
            $this->openAPINullablesSetToNull[] = 'companyAddressChromeKana';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('companyAddressChromeKana', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($companyAddressChromeKana) && mb_strlen($companyAddressChromeKana) > 100) {
            throw new \InvalidArgumentException('invalid length for $companyAddressChromeKana when calling CorporateInfoV2., must be smaller than or equal to 100.');
        }
        if (!is_null($companyAddressChromeKana) && mb_strlen($companyAddressChromeKana) < 1) {
            throw new \InvalidArgumentException('invalid length for $companyAddressChromeKana when calling CorporateInfoV2., must be bigger than or equal to 1.');
        }
        $this->container['companyAddressChromeKana'] = $companyAddressChromeKana;

        return $this;
    }

    /**
     * Gets companyAddressBuildingName.
     *
     * @return string|null
     */
    public function getCompanyAddressBuildingName(): mixed
    {
        return $this->container['companyAddressBuildingName'];
    }

    /**
     * Sets companyAddressBuildingName.
     *
     * @param string|null $companyAddressBuildingName 会社住所 ビル名\\ 形式： 漢字/ひらがな/カタカナ/半角英数
     */
    public function setCompanyAddressBuildingName(mixed $companyAddressBuildingName): static
    {
        if (is_null($companyAddressBuildingName)) {
            $this->openAPINullablesSetToNull[] = 'companyAddressBuildingName';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('companyAddressBuildingName', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($companyAddressBuildingName) && mb_strlen($companyAddressBuildingName) > 100) {
            throw new \InvalidArgumentException('invalid length for $companyAddressBuildingName when calling CorporateInfoV2., must be smaller than or equal to 100.');
        }
        if (!is_null($companyAddressBuildingName) && mb_strlen($companyAddressBuildingName) < 1) {
            throw new \InvalidArgumentException('invalid length for $companyAddressBuildingName when calling CorporateInfoV2., must be bigger than or equal to 1.');
        }
        $this->container['companyAddressBuildingName'] = $companyAddressBuildingName;

        return $this;
    }

    /**
     * Gets companyAddressBuildingNameKana.
     *
     * @return string|null
     */
    public function getCompanyAddressBuildingNameKana(): mixed
    {
        return $this->container['companyAddressBuildingNameKana'];
    }

    /**
     * Sets companyAddressBuildingNameKana.
     *
     * @param string|null $companyAddressBuildingNameKana 会社住所 ビル名（カナ）\\ 形式： 全角カタカナ
     */
    public function setCompanyAddressBuildingNameKana(mixed $companyAddressBuildingNameKana): static
    {
        if (is_null($companyAddressBuildingNameKana)) {
            $this->openAPINullablesSetToNull[] = 'companyAddressBuildingNameKana';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('companyAddressBuildingNameKana', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($companyAddressBuildingNameKana) && mb_strlen($companyAddressBuildingNameKana) > 100) {
            throw new \InvalidArgumentException('invalid length for $companyAddressBuildingNameKana when calling CorporateInfoV2., must be smaller than or equal to 100.');
        }
        if (!is_null($companyAddressBuildingNameKana) && mb_strlen($companyAddressBuildingNameKana) < 1) {
            throw new \InvalidArgumentException('invalid length for $companyAddressBuildingNameKana when calling CorporateInfoV2., must be bigger than or equal to 1.');
        }
        $this->container['companyAddressBuildingNameKana'] = $companyAddressBuildingNameKana;

        return $this;
    }

    /**
     * Gets companyTel.
     *
     * @return string
     */
    public function getCompanyTel(): mixed
    {
        return $this->container['companyTel'];
    }

    /**
     * Sets companyTel.
     *
     * @param string|null $companyTel 会社情報 電話番号\\ 形式： 半角数字（ハイフンなし）
     */
    public function setCompanyTel(mixed $companyTel): static
    {
        if (is_null($companyTel)) {
            $this->openAPINullablesSetToNull[] = 'companyTel';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('companyTel', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($companyTel) && mb_strlen($companyTel) > 15) {
            throw new \InvalidArgumentException('invalid length for $companyTel when calling CorporateInfoV2., must be smaller than or equal to 15.');
        }
        if (!is_null($companyTel) && mb_strlen($companyTel) < 1) {
            throw new \InvalidArgumentException('invalid length for $companyTel when calling CorporateInfoV2., must be bigger than or equal to 1.');
        }
        $this->container['companyTel'] = $companyTel;

        return $this;
    }

    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @see https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    public function jsonSerialize(): mixed
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object.
     */
    public function __toString(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
    }

    /**
     * Gets a header-safe presentation of the object.
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
