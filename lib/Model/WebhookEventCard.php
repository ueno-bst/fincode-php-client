<?php

declare(strict_types=1);
/**
 * fincode API.
 *
 * fincodeのAPIリファレンスです。\\ fincodeは決済情報のほか様々なリソースを管理できるため、リソース指向なREST APIをベースとしたインターフェイス設計のもとでAPIを提供しています。\\ APIの呼び出しにはAPIキーによる認証が必要であり、リクエストの際に`Authorization`ヘッダーに有効なAPIキーをセットすることで認証できます。
 *
 * The version of the OpenAPI document: 1.2.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Fincode\Model;

use OpenAPI\Fincode\ObjectSerializer;

/**
 * @implements \ArrayAccess<string, mixed>
 */
class WebhookEventCard implements ModelInterface, \ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;
    /**
     * The original name of the model.
     */
    protected static string $openAPIModelName = 'WebhookEvent.Card';
    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var array<string, string>
     */
    protected static array $openAPITypes = ['shopId' => 'string', 'customerId' => 'string', 'customerGroupId' => 'string', 'cardId' => 'string', 'defaultFlag' => '\OpenAPI\Fincode\Model\DefaultFlag', 'cardNoDisplay' => 'mixed', 'expireDisplay' => 'mixed', 'processDate' => 'string', 'processType' => 'string', 'payType' => 'string', 'forward' => 'string', 'event' => '\OpenAPI\Fincode\Model\FincodeEvent'];
    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var array<string, string|null>
     */
    protected static array $openAPIFormats = ['shopId' => null, 'customerId' => null, 'customerGroupId' => null, 'cardId' => null, 'defaultFlag' => null, 'cardNoDisplay' => null, 'expireDisplay' => null, 'processDate' => null, 'processType' => null, 'payType' => null, 'forward' => null, 'event' => null];
    /**
     * Array of nullable properties. Used for (de)serialization.
     *
     * @var array<string, bool>
     */
    protected static array $openAPINullables = ['shopId' => false, 'customerId' => true, 'customerGroupId' => true, 'cardId' => true, 'defaultFlag' => true, 'cardNoDisplay' => true, 'expireDisplay' => true, 'processDate' => false, 'processType' => false, 'payType' => false, 'forward' => true, 'event' => false];
    /**
     * If a nullable field gets set to null, insert it here.
     *
     * @var array<string, bool>
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return array<string, string|null>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties.
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null.
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null.
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable.
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }
    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = ['shopId' => 'shop_id', 'customerId' => 'customer_id', 'customerGroupId' => 'customer_group_id', 'cardId' => 'card_id', 'defaultFlag' => 'default_flag', 'cardNoDisplay' => 'card_no_display', 'expireDisplay' => 'expire_display', 'processDate' => 'process_date', 'processType' => 'process_type', 'payType' => 'pay_type', 'forward' => 'forward', 'event' => 'event'];
    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var array<string, string>
     */
    protected static array $setters = ['shopId' => 'setShopId', 'customerId' => 'setCustomerId', 'customerGroupId' => 'setCustomerGroupId', 'cardId' => 'setCardId', 'defaultFlag' => 'setDefaultFlag', 'cardNoDisplay' => 'setCardNoDisplay', 'expireDisplay' => 'setExpireDisplay', 'processDate' => 'setProcessDate', 'processType' => 'setProcessType', 'payType' => 'setPayType', 'forward' => 'setForward', 'event' => 'setEvent'];
    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var array<string, string>
     */
    protected static array $getters = ['shopId' => 'getShopId', 'customerId' => 'getCustomerId', 'customerGroupId' => 'getCustomerGroupId', 'cardId' => 'getCardId', 'defaultFlag' => 'getDefaultFlag', 'cardNoDisplay' => 'getCardNoDisplay', 'expireDisplay' => 'getExpireDisplay', 'processDate' => 'getProcessDate', 'processType' => 'getProcessType', 'payType' => 'getPayType', 'forward' => 'getForward', 'event' => 'getEvent'];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }
    public const PROCESS_TYPE_I = 'I';
    public const PROCESS_TYPE_U = 'U';
    public const PAY_TYPE_CARD = 'Card';

    /**
     * Gets allowable values of the enum.
     *
     * @return list<string>
     */
    public function getProcessTypeAllowableValues(): array
    {
        return [self::PROCESS_TYPE_I, self::PROCESS_TYPE_U];
    }

    /**
     * Gets allowable values of the enum.
     *
     * @return list<string>
     */
    public function getPayTypeAllowableValues(): array
    {
        return [self::PAY_TYPE_CARD];
    }
    /**
     * Associative array for storing property values.
     *
     * @phpstan-var array<string, mixed>
     *
     * @psalm-var array<string, mixed>
     */
    protected array $container = [];

    /**
     * Constructor.
     *
     * @param array<string, mixed> $data Associated array of property values
     *                                   initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('shopId', $data ?? [], null);
        $this->setIfExists('customerId', $data ?? [], null);
        $this->setIfExists('customerGroupId', $data ?? [], null);
        $this->setIfExists('cardId', $data ?? [], null);
        $this->setIfExists('defaultFlag', $data ?? [], null);
        $this->setIfExists('cardNoDisplay', $data ?? [], null);
        $this->setIfExists('expireDisplay', $data ?? [], null);
        $this->setIfExists('processDate', $data ?? [], null);
        $this->setIfExists('processType', $data ?? [], null);
        $this->setIfExists('payType', $data ?? [], null);
        $this->setIfExists('forward', $data ?? [], null);
        $this->setIfExists('event', $data ?? [], null);
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array.
     *
     * @param array<string, mixed> $fields
     */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }
        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return list<string> invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];
        if (!is_null($this->container['shopId']) && mb_strlen($this->container['shopId']) > 13) {
            $invalidProperties[] = "invalid value for 'shopId', the character length must be smaller than or equal to 13.";
        }
        if (!is_null($this->container['shopId']) && mb_strlen($this->container['shopId']) < 13) {
            $invalidProperties[] = "invalid value for 'shopId', the character length must be bigger than or equal to 13.";
        }
        if (!is_null($this->container['customerId']) && mb_strlen($this->container['customerId']) > 60) {
            $invalidProperties[] = "invalid value for 'customerId', the character length must be smaller than or equal to 60.";
        }
        if (!is_null($this->container['customerId']) && mb_strlen($this->container['customerId']) < 1) {
            $invalidProperties[] = "invalid value for 'customerId', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['customerGroupId']) && mb_strlen($this->container['customerGroupId']) > 13) {
            $invalidProperties[] = "invalid value for 'customerGroupId', the character length must be smaller than or equal to 13.";
        }
        if (!is_null($this->container['customerGroupId']) && mb_strlen($this->container['customerGroupId']) < 13) {
            $invalidProperties[] = "invalid value for 'customerGroupId', the character length must be bigger than or equal to 13.";
        }
        if (!is_null($this->container['cardId']) && mb_strlen($this->container['cardId']) > 25) {
            $invalidProperties[] = "invalid value for 'cardId', the character length must be smaller than or equal to 25.";
        }
        if (!is_null($this->container['cardId']) && mb_strlen($this->container['cardId']) < 25) {
            $invalidProperties[] = "invalid value for 'cardId', the character length must be bigger than or equal to 25.";
        }
        $allowedValues = $this->getProcessTypeAllowableValues();
        if (!is_null($this->container['processType']) && !in_array($this->container['processType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf("invalid value '%s' for 'processType', must be one of '%s'", $this->container['processType'], implode("', '", $allowedValues));
        }
        $allowedValues = $this->getPayTypeAllowableValues();
        if (!is_null($this->container['payType']) && !in_array($this->container['payType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf("invalid value '%s' for 'payType', must be one of '%s'", $this->container['payType'], implode("', '", $allowedValues));
        }
        if (!is_null($this->container['forward']) && mb_strlen($this->container['forward']) > 7) {
            $invalidProperties[] = "invalid value for 'forward', the character length must be smaller than or equal to 7.";
        }
        if (!is_null($this->container['forward']) && mb_strlen($this->container['forward']) < 1) {
            $invalidProperties[] = "invalid value for 'forward', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return 0 === count($this->listInvalidProperties());
    }

    /**
     * Gets shopId.
     *
     * @return string|null
     */
    public function getShopId(): mixed
    {
        return $this->container['shopId'];
    }

    /**
     * Sets shopId.
     *
     * @param string $shopId ショップID
     */
    public function setShopId(mixed $shopId): static
    {
        if (is_null($shopId)) {
            throw new \InvalidArgumentException('non-nullable shopId cannot be null');
        }
        if (mb_strlen($shopId) > 13) {
            throw new \InvalidArgumentException('invalid length for $shopId when calling WebhookEventCard., must be smaller than or equal to 13.');
        }
        if (mb_strlen($shopId) < 13) {
            throw new \InvalidArgumentException('invalid length for $shopId when calling WebhookEventCard., must be bigger than or equal to 13.');
        }
        $this->container['shopId'] = $shopId;

        return $this;
    }

    /**
     * Gets customerId.
     *
     * @return string|null
     */
    public function getCustomerId(): mixed
    {
        return $this->container['customerId'];
    }

    /**
     * Sets customerId.
     *
     * @param string|null $customerId 顧客ID
     */
    public function setCustomerId(mixed $customerId): static
    {
        if (is_null($customerId)) {
            $this->openAPINullablesSetToNull[] = 'customerId';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customerId', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($customerId) && mb_strlen($customerId) > 60) {
            throw new \InvalidArgumentException('invalid length for $customerId when calling WebhookEventCard., must be smaller than or equal to 60.');
        }
        if (!is_null($customerId) && mb_strlen($customerId) < 1) {
            throw new \InvalidArgumentException('invalid length for $customerId when calling WebhookEventCard., must be bigger than or equal to 1.');
        }
        $this->container['customerId'] = $customerId;

        return $this;
    }

    /**
     * Gets customerGroupId.
     *
     * @return string|null
     */
    public function getCustomerGroupId(): mixed
    {
        return $this->container['customerGroupId'];
    }

    /**
     * Sets customerGroupId.
     *
     * @param string|null $customerGroupId 顧客情報共有グループID\\ プラットフォームショップにおいて顧客情報が共有されている場合、顧客が所属する共有グループのIDです
     */
    public function setCustomerGroupId(mixed $customerGroupId): static
    {
        if (is_null($customerGroupId)) {
            $this->openAPINullablesSetToNull[] = 'customerGroupId';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customerGroupId', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($customerGroupId) && mb_strlen($customerGroupId) > 13) {
            throw new \InvalidArgumentException('invalid length for $customerGroupId when calling WebhookEventCard., must be smaller than or equal to 13.');
        }
        if (!is_null($customerGroupId) && mb_strlen($customerGroupId) < 13) {
            throw new \InvalidArgumentException('invalid length for $customerGroupId when calling WebhookEventCard., must be bigger than or equal to 13.');
        }
        $this->container['customerGroupId'] = $customerGroupId;

        return $this;
    }

    /**
     * Gets cardId.
     *
     * @return string|null
     */
    public function getCardId(): mixed
    {
        return $this->container['cardId'];
    }

    /**
     * Sets cardId.
     *
     * @param string|null $cardId カードID
     */
    public function setCardId(mixed $cardId): static
    {
        if (is_null($cardId)) {
            $this->openAPINullablesSetToNull[] = 'cardId';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cardId', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($cardId) && mb_strlen($cardId) > 25) {
            throw new \InvalidArgumentException('invalid length for $cardId when calling WebhookEventCard., must be smaller than or equal to 25.');
        }
        if (!is_null($cardId) && mb_strlen($cardId) < 25) {
            throw new \InvalidArgumentException('invalid length for $cardId when calling WebhookEventCard., must be bigger than or equal to 25.');
        }
        $this->container['cardId'] = $cardId;

        return $this;
    }

    /**
     * Gets defaultFlag.
     *
     * @return DefaultFlag|null
     */
    public function getDefaultFlag(): mixed
    {
        return $this->container['defaultFlag'];
    }

    /**
     * Sets defaultFlag.
     *
     * @param DefaultFlag|null $defaultFlag defaultFlag
     */
    public function setDefaultFlag(mixed $defaultFlag): static
    {
        if (is_null($defaultFlag)) {
            $this->openAPINullablesSetToNull[] = 'defaultFlag';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('defaultFlag', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['defaultFlag'] = $defaultFlag;

        return $this;
    }

    /**
     * Gets cardNoDisplay.
     *
     * @return mixed|null
     */
    public function getCardNoDisplay(): mixed
    {
        return $this->container['cardNoDisplay'];
    }

    /**
     * Sets cardNoDisplay.
     *
     * @param mixed|null $cardNoDisplay cardNoDisplay
     */
    public function setCardNoDisplay(mixed $cardNoDisplay): static
    {
        if (is_null($cardNoDisplay)) {
            $this->openAPINullablesSetToNull[] = 'cardNoDisplay';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cardNoDisplay', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cardNoDisplay'] = $cardNoDisplay;

        return $this;
    }

    /**
     * Gets expireDisplay.
     *
     * @return mixed|null
     */
    public function getExpireDisplay(): mixed
    {
        return $this->container['expireDisplay'];
    }

    /**
     * Sets expireDisplay.
     *
     * @param mixed|null $expireDisplay expireDisplay
     */
    public function setExpireDisplay(mixed $expireDisplay): static
    {
        if (is_null($expireDisplay)) {
            $this->openAPINullablesSetToNull[] = 'expireDisplay';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('expireDisplay', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['expireDisplay'] = $expireDisplay;

        return $this;
    }

    /**
     * Gets processDate.
     *
     * @return string|null
     */
    public function getProcessDate(): mixed
    {
        return $this->container['processDate'];
    }

    /**
     * Sets processDate.
     *
     * @param string $processDate 処理日時
     */
    public function setProcessDate(mixed $processDate): static
    {
        if (is_null($processDate)) {
            throw new \InvalidArgumentException('non-nullable processDate cannot be null');
        }
        $this->container['processDate'] = $processDate;

        return $this;
    }

    /**
     * Gets processType.
     *
     * @return string|null
     */
    public function getProcessType(): mixed
    {
        return $this->container['processType'];
    }

    /**
     * Sets processType.
     *
     * @param string $processType 処理タイプ  - `I`: 登録 - `U`: 更新
     */
    public function setProcessType(mixed $processType): static
    {
        if (is_null($processType)) {
            throw new \InvalidArgumentException('non-nullable processType cannot be null');
        }
        $allowedValues = $this->getProcessTypeAllowableValues();
        if (!in_array($processType, $allowedValues, true)) {
            throw new \InvalidArgumentException(sprintf("Invalid value '%s' for 'processType', must be one of '%s'", $processType, implode("', '", $allowedValues)));
        }
        $this->container['processType'] = $processType;

        return $this;
    }

    /**
     * Gets payType.
     *
     * @return string|null
     */
    public function getPayType(): mixed
    {
        return $this->container['payType'];
    }

    /**
     * Sets payType.
     *
     * @param string $payType 決済種別
     */
    public function setPayType(mixed $payType): static
    {
        if (is_null($payType)) {
            throw new \InvalidArgumentException('non-nullable payType cannot be null');
        }
        $allowedValues = $this->getPayTypeAllowableValues();
        if (!in_array($payType, $allowedValues, true)) {
            throw new \InvalidArgumentException(sprintf("Invalid value '%s' for 'payType', must be one of '%s'", $payType, implode("', '", $allowedValues)));
        }
        $this->container['payType'] = $payType;

        return $this;
    }

    /**
     * Gets forward.
     *
     * @return string|null
     */
    public function getForward(): mixed
    {
        return $this->container['forward'];
    }

    /**
     * Sets forward.
     *
     * @param string|null $forward 仕向け先
     */
    public function setForward(mixed $forward): static
    {
        if (is_null($forward)) {
            $this->openAPINullablesSetToNull[] = 'forward';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('forward', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($forward) && mb_strlen($forward) > 7) {
            throw new \InvalidArgumentException('invalid length for $forward when calling WebhookEventCard., must be smaller than or equal to 7.');
        }
        if (!is_null($forward) && mb_strlen($forward) < 1) {
            throw new \InvalidArgumentException('invalid length for $forward when calling WebhookEventCard., must be bigger than or equal to 1.');
        }
        $this->container['forward'] = $forward;

        return $this;
    }

    /**
     * Gets event.
     *
     * @return FincodeEvent|null
     */
    public function getEvent(): mixed
    {
        return $this->container['event'];
    }

    /**
     * Sets event.
     *
     * @param FincodeEvent $event event
     */
    public function setEvent(mixed $event): static
    {
        if (is_null($event)) {
            throw new \InvalidArgumentException('non-nullable event cannot be null');
        }
        $this->container['event'] = $event;

        return $this;
    }

    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @see https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    public function jsonSerialize(): mixed
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object.
     */
    public function __toString(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
    }

    /**
     * Gets a header-safe presentation of the object.
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
