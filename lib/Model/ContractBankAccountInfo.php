<?php

declare(strict_types=1);
/**
 * fincode API.
 *
 * fincodeのAPIリファレンスです。\\ fincodeは決済情報のほか様々なリソースを管理できるため、リソース指向なREST APIをベースとしたインターフェイス設計のもとでAPIを提供しています。\\ APIの呼び出しにはAPIキーによる認証が必要であり、リクエストの際に`Authorization`ヘッダーに有効なAPIキーをセットすることで認証できます。
 *
 * The version of the OpenAPI document: 1.2.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Fincode\Model;

use OpenAPI\Fincode\ObjectSerializer;

/**
 * @implements \ArrayAccess<string, mixed>
 */
class ContractBankAccountInfo implements ModelInterface, \ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;
    /**
     * The original name of the model.
     */
    protected static string $openAPIModelName = 'ContractBankAccountInfo';
    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var array<string, string>
     */
    protected static array $openAPITypes = ['bankName' => 'string', 'bankNameKana' => 'string', 'bankCode' => 'string', 'branchCode' => 'string', 'branchName' => 'string', 'branchNameKana' => 'string', 'accountKind' => 'float', 'accountNumber' => 'string', 'accountName' => 'string'];
    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var array<string, string|null>
     */
    protected static array $openAPIFormats = ['bankName' => null, 'bankNameKana' => null, 'bankCode' => null, 'branchCode' => null, 'branchName' => null, 'branchNameKana' => null, 'accountKind' => null, 'accountNumber' => null, 'accountName' => null];
    /**
     * Array of nullable properties. Used for (de)serialization.
     *
     * @var array<string, bool>
     */
    protected static array $openAPINullables = ['bankName' => false, 'bankNameKana' => false, 'bankCode' => false, 'branchCode' => false, 'branchName' => false, 'branchNameKana' => false, 'accountKind' => false, 'accountNumber' => false, 'accountName' => false];
    /**
     * If a nullable field gets set to null, insert it here.
     *
     * @var array<string, bool>
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return array<string, string|null>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties.
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null.
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null.
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable.
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }
    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = ['bankName' => 'bank_name', 'bankNameKana' => 'bank_name_kana', 'bankCode' => 'bank_code', 'branchCode' => 'branch_code', 'branchName' => 'branch_name', 'branchNameKana' => 'branch_name_kana', 'accountKind' => 'account_kind', 'accountNumber' => 'account_number', 'accountName' => 'account_name'];
    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var array<string, string>
     */
    protected static array $setters = ['bankName' => 'setBankName', 'bankNameKana' => 'setBankNameKana', 'bankCode' => 'setBankCode', 'branchCode' => 'setBranchCode', 'branchName' => 'setBranchName', 'branchNameKana' => 'setBranchNameKana', 'accountKind' => 'setAccountKind', 'accountNumber' => 'setAccountNumber', 'accountName' => 'setAccountName'];
    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var array<string, string>
     */
    protected static array $getters = ['bankName' => 'getBankName', 'bankNameKana' => 'getBankNameKana', 'bankCode' => 'getBankCode', 'branchCode' => 'getBranchCode', 'branchName' => 'getBranchName', 'branchNameKana' => 'getBranchNameKana', 'accountKind' => 'getAccountKind', 'accountNumber' => 'getAccountNumber', 'accountName' => 'getAccountName'];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }
    public const ACCOUNT_KIND_NUMBER_0 = 0;
    public const ACCOUNT_KIND_NUMBER_1 = 1;

    /**
     * Gets allowable values of the enum.
     *
     * @return list<string>
     */
    public function getAccountKindAllowableValues(): array
    {
        return [self::ACCOUNT_KIND_NUMBER_0, self::ACCOUNT_KIND_NUMBER_1];
    }
    /**
     * Associative array for storing property values.
     *
     * @phpstan-var array<string, mixed>
     *
     * @psalm-var array<string, mixed>
     */
    protected array $container = [];

    /**
     * Constructor.
     *
     * @param array<string, mixed> $data Associated array of property values
     *                                   initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('bankName', $data ?? [], null);
        $this->setIfExists('bankNameKana', $data ?? [], null);
        $this->setIfExists('bankCode', $data ?? [], null);
        $this->setIfExists('branchCode', $data ?? [], null);
        $this->setIfExists('branchName', $data ?? [], null);
        $this->setIfExists('branchNameKana', $data ?? [], null);
        $this->setIfExists('accountKind', $data ?? [], null);
        $this->setIfExists('accountNumber', $data ?? [], null);
        $this->setIfExists('accountName', $data ?? [], null);
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array.
     *
     * @param array<string, mixed> $fields
     */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }
        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return list<string> invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];
        if (!is_null($this->container['bankName']) && mb_strlen($this->container['bankName']) > 20) {
            $invalidProperties[] = "invalid value for 'bankName', the character length must be smaller than or equal to 20.";
        }
        if (!is_null($this->container['bankName']) && mb_strlen($this->container['bankName']) < 1) {
            $invalidProperties[] = "invalid value for 'bankName', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['bankNameKana']) && mb_strlen($this->container['bankNameKana']) > 100) {
            $invalidProperties[] = "invalid value for 'bankNameKana', the character length must be smaller than or equal to 100.";
        }
        if (!is_null($this->container['bankNameKana']) && mb_strlen($this->container['bankNameKana']) < 1) {
            $invalidProperties[] = "invalid value for 'bankNameKana', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['bankCode']) && mb_strlen($this->container['bankCode']) > 4) {
            $invalidProperties[] = "invalid value for 'bankCode', the character length must be smaller than or equal to 4.";
        }
        if (!is_null($this->container['bankCode']) && mb_strlen($this->container['bankCode']) < 4) {
            $invalidProperties[] = "invalid value for 'bankCode', the character length must be bigger than or equal to 4.";
        }
        if (!is_null($this->container['branchCode']) && mb_strlen($this->container['branchCode']) > 3) {
            $invalidProperties[] = "invalid value for 'branchCode', the character length must be smaller than or equal to 3.";
        }
        if (!is_null($this->container['branchCode']) && mb_strlen($this->container['branchCode']) < 3) {
            $invalidProperties[] = "invalid value for 'branchCode', the character length must be bigger than or equal to 3.";
        }
        if (!is_null($this->container['branchName']) && mb_strlen($this->container['branchName']) > 100) {
            $invalidProperties[] = "invalid value for 'branchName', the character length must be smaller than or equal to 100.";
        }
        if (!is_null($this->container['branchName']) && mb_strlen($this->container['branchName']) < 1) {
            $invalidProperties[] = "invalid value for 'branchName', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['branchNameKana']) && mb_strlen($this->container['branchNameKana']) > 100) {
            $invalidProperties[] = "invalid value for 'branchNameKana', the character length must be smaller than or equal to 100.";
        }
        if (!is_null($this->container['branchNameKana']) && mb_strlen($this->container['branchNameKana']) < 1) {
            $invalidProperties[] = "invalid value for 'branchNameKana', the character length must be bigger than or equal to 1.";
        }
        $allowedValues = $this->getAccountKindAllowableValues();
        if (!is_null($this->container['accountKind']) && !in_array($this->container['accountKind'], $allowedValues, true)) {
            $invalidProperties[] = sprintf("invalid value '%s' for 'accountKind', must be one of '%s'", $this->container['accountKind'], implode("', '", $allowedValues));
        }
        if (!is_null($this->container['accountNumber']) && mb_strlen($this->container['accountNumber']) > 7) {
            $invalidProperties[] = "invalid value for 'accountNumber', the character length must be smaller than or equal to 7.";
        }
        if (!is_null($this->container['accountNumber']) && mb_strlen($this->container['accountNumber']) < 7) {
            $invalidProperties[] = "invalid value for 'accountNumber', the character length must be bigger than or equal to 7.";
        }
        if (!is_null($this->container['accountName']) && mb_strlen($this->container['accountName']) > 47) {
            $invalidProperties[] = "invalid value for 'accountName', the character length must be smaller than or equal to 47.";
        }
        if (!is_null($this->container['accountName']) && mb_strlen($this->container['accountName']) < 1) {
            $invalidProperties[] = "invalid value for 'accountName', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return 0 === count($this->listInvalidProperties());
    }

    /**
     * Gets bankName.
     *
     * @return string|null
     */
    public function getBankName(): mixed
    {
        return $this->container['bankName'];
    }

    /**
     * Sets bankName.
     *
     * @param string $bankName 銀行名
     */
    public function setBankName(mixed $bankName): static
    {
        if (is_null($bankName)) {
            throw new \InvalidArgumentException('non-nullable bankName cannot be null');
        }
        if (mb_strlen($bankName) > 20) {
            throw new \InvalidArgumentException('invalid length for $bankName when calling ContractBankAccountInfo., must be smaller than or equal to 20.');
        }
        if (mb_strlen($bankName) < 1) {
            throw new \InvalidArgumentException('invalid length for $bankName when calling ContractBankAccountInfo., must be bigger than or equal to 1.');
        }
        $this->container['bankName'] = $bankName;

        return $this;
    }

    /**
     * Gets bankNameKana.
     *
     * @return string|null
     */
    public function getBankNameKana(): mixed
    {
        return $this->container['bankNameKana'];
    }

    /**
     * Sets bankNameKana.
     *
     * @param string $bankNameKana 銀行名（カナ）
     */
    public function setBankNameKana(mixed $bankNameKana): static
    {
        if (is_null($bankNameKana)) {
            throw new \InvalidArgumentException('non-nullable bankNameKana cannot be null');
        }
        if (mb_strlen($bankNameKana) > 100) {
            throw new \InvalidArgumentException('invalid length for $bankNameKana when calling ContractBankAccountInfo., must be smaller than or equal to 100.');
        }
        if (mb_strlen($bankNameKana) < 1) {
            throw new \InvalidArgumentException('invalid length for $bankNameKana when calling ContractBankAccountInfo., must be bigger than or equal to 1.');
        }
        $this->container['bankNameKana'] = $bankNameKana;

        return $this;
    }

    /**
     * Gets bankCode.
     *
     * @return string|null
     */
    public function getBankCode(): mixed
    {
        return $this->container['bankCode'];
    }

    /**
     * Sets bankCode.
     *
     * @param string $bankCode 金融機関コード
     */
    public function setBankCode(mixed $bankCode): static
    {
        if (is_null($bankCode)) {
            throw new \InvalidArgumentException('non-nullable bankCode cannot be null');
        }
        if (mb_strlen($bankCode) > 4) {
            throw new \InvalidArgumentException('invalid length for $bankCode when calling ContractBankAccountInfo., must be smaller than or equal to 4.');
        }
        if (mb_strlen($bankCode) < 4) {
            throw new \InvalidArgumentException('invalid length for $bankCode when calling ContractBankAccountInfo., must be bigger than or equal to 4.');
        }
        $this->container['bankCode'] = $bankCode;

        return $this;
    }

    /**
     * Gets branchCode.
     *
     * @return string|null
     */
    public function getBranchCode(): mixed
    {
        return $this->container['branchCode'];
    }

    /**
     * Sets branchCode.
     *
     * @param string $branchCode 支店コード
     */
    public function setBranchCode(mixed $branchCode): static
    {
        if (is_null($branchCode)) {
            throw new \InvalidArgumentException('non-nullable branchCode cannot be null');
        }
        if (mb_strlen($branchCode) > 3) {
            throw new \InvalidArgumentException('invalid length for $branchCode when calling ContractBankAccountInfo., must be smaller than or equal to 3.');
        }
        if (mb_strlen($branchCode) < 3) {
            throw new \InvalidArgumentException('invalid length for $branchCode when calling ContractBankAccountInfo., must be bigger than or equal to 3.');
        }
        $this->container['branchCode'] = $branchCode;

        return $this;
    }

    /**
     * Gets branchName.
     *
     * @return string|null
     */
    public function getBranchName(): mixed
    {
        return $this->container['branchName'];
    }

    /**
     * Sets branchName.
     *
     * @param string $branchName 支店名
     */
    public function setBranchName(mixed $branchName): static
    {
        if (is_null($branchName)) {
            throw new \InvalidArgumentException('non-nullable branchName cannot be null');
        }
        if (mb_strlen($branchName) > 100) {
            throw new \InvalidArgumentException('invalid length for $branchName when calling ContractBankAccountInfo., must be smaller than or equal to 100.');
        }
        if (mb_strlen($branchName) < 1) {
            throw new \InvalidArgumentException('invalid length for $branchName when calling ContractBankAccountInfo., must be bigger than or equal to 1.');
        }
        $this->container['branchName'] = $branchName;

        return $this;
    }

    /**
     * Gets branchNameKana.
     *
     * @return string|null
     */
    public function getBranchNameKana(): mixed
    {
        return $this->container['branchNameKana'];
    }

    /**
     * Sets branchNameKana.
     *
     * @param string $branchNameKana 支店名（カナ）
     */
    public function setBranchNameKana(mixed $branchNameKana): static
    {
        if (is_null($branchNameKana)) {
            throw new \InvalidArgumentException('non-nullable branchNameKana cannot be null');
        }
        if (mb_strlen($branchNameKana) > 100) {
            throw new \InvalidArgumentException('invalid length for $branchNameKana when calling ContractBankAccountInfo., must be smaller than or equal to 100.');
        }
        if (mb_strlen($branchNameKana) < 1) {
            throw new \InvalidArgumentException('invalid length for $branchNameKana when calling ContractBankAccountInfo., must be bigger than or equal to 1.');
        }
        $this->container['branchNameKana'] = $branchNameKana;

        return $this;
    }

    /**
     * Gets accountKind.
     *
     * @return float|null
     */
    public function getAccountKind(): mixed
    {
        return $this->container['accountKind'];
    }

    /**
     * Sets accountKind.
     *
     * @param float $accountKind 口座種別  - `0`: 普通 - `1`: 当座
     */
    public function setAccountKind(mixed $accountKind): static
    {
        if (is_null($accountKind)) {
            throw new \InvalidArgumentException('non-nullable accountKind cannot be null');
        }
        $allowedValues = $this->getAccountKindAllowableValues();
        if (!in_array($accountKind, $allowedValues, true)) {
            throw new \InvalidArgumentException(sprintf("Invalid value '%s' for 'accountKind', must be one of '%s'", $accountKind, implode("', '", $allowedValues)));
        }
        $this->container['accountKind'] = $accountKind;

        return $this;
    }

    /**
     * Gets accountNumber.
     *
     * @return string|null
     */
    public function getAccountNumber(): mixed
    {
        return $this->container['accountNumber'];
    }

    /**
     * Sets accountNumber.
     *
     * @param string $accountNumber 口座番号
     */
    public function setAccountNumber(mixed $accountNumber): static
    {
        if (is_null($accountNumber)) {
            throw new \InvalidArgumentException('non-nullable accountNumber cannot be null');
        }
        if (mb_strlen($accountNumber) > 7) {
            throw new \InvalidArgumentException('invalid length for $accountNumber when calling ContractBankAccountInfo., must be smaller than or equal to 7.');
        }
        if (mb_strlen($accountNumber) < 7) {
            throw new \InvalidArgumentException('invalid length for $accountNumber when calling ContractBankAccountInfo., must be bigger than or equal to 7.');
        }
        $this->container['accountNumber'] = $accountNumber;

        return $this;
    }

    /**
     * Gets accountName.
     *
     * @return string|null
     */
    public function getAccountName(): mixed
    {
        return $this->container['accountName'];
    }

    /**
     * Sets accountName.
     *
     * @param string $accountName 口座名義（カタカナ）
     */
    public function setAccountName(mixed $accountName): static
    {
        if (is_null($accountName)) {
            throw new \InvalidArgumentException('non-nullable accountName cannot be null');
        }
        if (mb_strlen($accountName) > 47) {
            throw new \InvalidArgumentException('invalid length for $accountName when calling ContractBankAccountInfo., must be smaller than or equal to 47.');
        }
        if (mb_strlen($accountName) < 1) {
            throw new \InvalidArgumentException('invalid length for $accountName when calling ContractBankAccountInfo., must be bigger than or equal to 1.');
        }
        $this->container['accountName'] = $accountName;

        return $this;
    }

    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @see https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    public function jsonSerialize(): mixed
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object.
     */
    public function __toString(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
    }

    /**
     * Gets a header-safe presentation of the object.
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
