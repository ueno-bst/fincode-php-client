<?php

declare(strict_types=1);
/**
 * fincode API.
 *
 * fincodeのAPIリファレンスです。\\ fincodeは決済情報のほか様々なリソースを管理できるため、リソース指向なREST APIをベースとしたインターフェイス設計のもとでAPIを提供しています。\\ APIの呼び出しにはAPIキーによる認証が必要であり、リクエストの際に`Authorization`ヘッダーに有効なAPIキーをセットすることで認証できます。
 *
 * The version of the OpenAPI document: 1.2.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Fincode\Model;

use OpenAPI\Fincode\ObjectSerializer;

/**
 * @implements \ArrayAccess<string, mixed>
 */
class PlanCreatingRequest implements ModelInterface, \ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;
    /**
     * The original name of the model.
     */
    protected static string $openAPIModelName = 'Plan.Creating.Request';
    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var array<string, string>
     */
    protected static array $openAPITypes = ['id' => 'string', 'planName' => 'string', 'description' => 'string', 'amount' => 'string', 'tax' => 'string', 'intervalPattern' => '\OpenAPI\Fincode\Model\IntervalPattern', 'intervalCount' => '\OpenAPI\Fincode\Model\IntervalCount'];
    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var array<string, string|null>
     */
    protected static array $openAPIFormats = ['id' => null, 'planName' => null, 'description' => null, 'amount' => null, 'tax' => null, 'intervalPattern' => null, 'intervalCount' => null];
    /**
     * Array of nullable properties. Used for (de)serialization.
     *
     * @var array<string, bool>
     */
    protected static array $openAPINullables = ['id' => false, 'planName' => false, 'description' => true, 'amount' => false, 'tax' => false, 'intervalPattern' => false, 'intervalCount' => false];
    /**
     * If a nullable field gets set to null, insert it here.
     *
     * @var array<string, bool>
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return array<string, string|null>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties.
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null.
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null.
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable.
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }
    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = ['id' => 'id', 'planName' => 'plan_name', 'description' => 'description', 'amount' => 'amount', 'tax' => 'tax', 'intervalPattern' => 'interval_pattern', 'intervalCount' => 'interval_count'];
    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var array<string, string>
     */
    protected static array $setters = ['id' => 'setId', 'planName' => 'setPlanName', 'description' => 'setDescription', 'amount' => 'setAmount', 'tax' => 'setTax', 'intervalPattern' => 'setIntervalPattern', 'intervalCount' => 'setIntervalCount'];
    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var array<string, string>
     */
    protected static array $getters = ['id' => 'getId', 'planName' => 'getPlanName', 'description' => 'getDescription', 'amount' => 'getAmount', 'tax' => 'getTax', 'intervalPattern' => 'getIntervalPattern', 'intervalCount' => 'getIntervalCount'];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }
    /**
     * Associative array for storing property values.
     *
     * @phpstan-var array<string, mixed>
     *
     * @psalm-var array<string, mixed>
     */
    protected array $container = [];

    /**
     * Constructor.
     *
     * @param array<string, mixed> $data Associated array of property values
     *                                   initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('planName', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('tax', $data ?? [], null);
        $this->setIfExists('intervalPattern', $data ?? [], null);
        $this->setIfExists('intervalCount', $data ?? [], null);
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array.
     *
     * @param array<string, mixed> $fields
     */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }
        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return list<string> invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];
        if (!is_null($this->container['id']) && mb_strlen($this->container['id']) > 25) {
            $invalidProperties[] = "invalid value for 'id', the character length must be smaller than or equal to 25.";
        }
        if (!is_null($this->container['id']) && mb_strlen($this->container['id']) < 1) {
            $invalidProperties[] = "invalid value for 'id', the character length must be bigger than or equal to 1.";
        }
        if (null === $this->container['planName']) {
            $invalidProperties[] = "'planName' can't be null";
        }
        if (mb_strlen($this->container['planName']) > 200) {
            $invalidProperties[] = "invalid value for 'planName', the character length must be smaller than or equal to 200.";
        }
        if (!is_null($this->container['description']) && mb_strlen($this->container['description']) > 400) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 400.";
        }
        if (null === $this->container['amount']) {
            $invalidProperties[] = "'amount' can't be null";
        }
        if (mb_strlen($this->container['amount']) > 7) {
            $invalidProperties[] = "invalid value for 'amount', the character length must be smaller than or equal to 7.";
        }
        if (mb_strlen($this->container['amount']) < 1) {
            $invalidProperties[] = "invalid value for 'amount', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['tax']) && mb_strlen($this->container['tax']) > 7) {
            $invalidProperties[] = "invalid value for 'tax', the character length must be smaller than or equal to 7.";
        }
        if (!is_null($this->container['tax']) && mb_strlen($this->container['tax']) < 1) {
            $invalidProperties[] = "invalid value for 'tax', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return 0 === count($this->listInvalidProperties());
    }

    /**
     * Gets id.
     *
     * @return string|null
     */
    public function getId(): mixed
    {
        return $this->container['id'];
    }

    /**
     * Sets id.
     *
     * @param string $id プランID
     */
    public function setId(mixed $id): static
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        if (mb_strlen($id) > 25) {
            throw new \InvalidArgumentException('invalid length for $id when calling PlanCreatingRequest., must be smaller than or equal to 25.');
        }
        if (mb_strlen($id) < 1) {
            throw new \InvalidArgumentException('invalid length for $id when calling PlanCreatingRequest., must be bigger than or equal to 1.');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets planName.
     *
     * @return string
     */
    public function getPlanName(): mixed
    {
        return $this->container['planName'];
    }

    /**
     * Sets planName.
     *
     * @param string $planName プラン名
     */
    public function setPlanName(mixed $planName): static
    {
        if (is_null($planName)) {
            throw new \InvalidArgumentException('non-nullable planName cannot be null');
        }
        if (mb_strlen($planName) > 200) {
            throw new \InvalidArgumentException('invalid length for $planName when calling PlanCreatingRequest., must be smaller than or equal to 200.');
        }
        $this->container['planName'] = $planName;

        return $this;
    }

    /**
     * Gets description.
     *
     * @return string|null
     */
    public function getDescription(): mixed
    {
        return $this->container['description'];
    }

    /**
     * Sets description.
     *
     * @param string|null $description プランの説明
     */
    public function setDescription(mixed $description): static
    {
        if (is_null($description)) {
            $this->openAPINullablesSetToNull[] = 'description';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($description) && mb_strlen($description) > 400) {
            throw new \InvalidArgumentException('invalid length for $description when calling PlanCreatingRequest., must be smaller than or equal to 400.');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets amount.
     *
     * @return string
     */
    public function getAmount(): mixed
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount.
     *
     * @param string $amount 利用金額\\ `tax`との合計値が決済手段ごとに定められた決済金額の範囲内に収まる必要があります
     */
    public function setAmount(mixed $amount): static
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        if (mb_strlen($amount) > 7) {
            throw new \InvalidArgumentException('invalid length for $amount when calling PlanCreatingRequest., must be smaller than or equal to 7.');
        }
        if (mb_strlen($amount) < 1) {
            throw new \InvalidArgumentException('invalid length for $amount when calling PlanCreatingRequest., must be bigger than or equal to 1.');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets tax.
     *
     * @return string|null
     */
    public function getTax(): mixed
    {
        return $this->container['tax'];
    }

    /**
     * Sets tax.
     *
     * @param string $tax 税送料\\ `amount`との合計値が決済手段ごとに定められた決済金額の範囲内に収まる必要があります
     */
    public function setTax(mixed $tax): static
    {
        if (is_null($tax)) {
            throw new \InvalidArgumentException('non-nullable tax cannot be null');
        }
        if (mb_strlen($tax) > 7) {
            throw new \InvalidArgumentException('invalid length for $tax when calling PlanCreatingRequest., must be smaller than or equal to 7.');
        }
        if (mb_strlen($tax) < 1) {
            throw new \InvalidArgumentException('invalid length for $tax when calling PlanCreatingRequest., must be bigger than or equal to 1.');
        }
        $this->container['tax'] = $tax;

        return $this;
    }

    /**
     * Gets intervalPattern.
     *
     * @return IntervalPattern|null
     */
    public function getIntervalPattern(): mixed
    {
        return $this->container['intervalPattern'];
    }

    /**
     * Sets intervalPattern.
     *
     * @param IntervalPattern $intervalPattern intervalPattern
     */
    public function setIntervalPattern(mixed $intervalPattern): static
    {
        if (is_null($intervalPattern)) {
            throw new \InvalidArgumentException('non-nullable intervalPattern cannot be null');
        }
        $this->container['intervalPattern'] = $intervalPattern;

        return $this;
    }

    /**
     * Gets intervalCount.
     *
     * @return IntervalCount|null
     */
    public function getIntervalCount(): mixed
    {
        return $this->container['intervalCount'];
    }

    /**
     * Sets intervalCount.
     *
     * @param IntervalCount $intervalCount intervalCount
     */
    public function setIntervalCount(mixed $intervalCount): static
    {
        if (is_null($intervalCount)) {
            throw new \InvalidArgumentException('non-nullable intervalCount cannot be null');
        }
        $this->container['intervalCount'] = $intervalCount;

        return $this;
    }

    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @see https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    public function jsonSerialize(): mixed
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object.
     */
    public function __toString(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
    }

    /**
     * Gets a header-safe presentation of the object.
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
