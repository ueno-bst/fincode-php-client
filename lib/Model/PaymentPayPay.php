<?php

declare(strict_types=1);
/**
 * fincode API.
 *
 * fincodeのAPIリファレンスです。\\ fincodeは決済情報のほか様々なリソースを管理できるため、リソース指向なREST APIをベースとしたインターフェイス設計のもとでAPIを提供しています。\\ APIの呼び出しにはAPIキーによる認証が必要であり、リクエストの際に`Authorization`ヘッダーに有効なAPIキーをセットすることで認証できます。
 *
 * The version of the OpenAPI document: 1.2.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Fincode\Model;

use OpenAPI\Fincode\ObjectSerializer;

/**
 * @implements \ArrayAccess<string, mixed>
 */
class PaymentPayPay implements ModelInterface, \ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;
    /**
     * The original name of the model.
     */
    protected static string $openAPIModelName = 'Payment.PayPay';
    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var array<string, string>
     */
    protected static array $openAPITypes = ['payType' => '\OpenAPI\Fincode\Model\PayType', 'jobCode' => '\OpenAPI\Fincode\Model\PayPayPaymentJobCode', 'status' => '\OpenAPI\Fincode\Model\PaymentStatus', 'codeUrl' => 'string', 'codeExpiryDate' => 'string', 'redirectUrl' => 'string', 'redirectType' => 'string', 'authMaxDate' => 'string', 'orderDescription' => 'string', 'captureDescription' => 'string', 'updateDescription' => 'string', 'cancelDescription' => 'string', 'storeId' => 'string', 'codeId' => 'string', 'paymentId' => 'string', 'paypayResultCode' => 'string', 'merchantPaymentId' => 'string', 'merchantCaptureId' => 'string', 'merchantUpdateId' => 'string', 'merchantRevertId' => 'string', 'merchantRefundId' => 'string', 'paymentDate' => 'string'];
    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var array<string, string|null>
     */
    protected static array $openAPIFormats = ['payType' => null, 'jobCode' => null, 'status' => null, 'codeUrl' => null, 'codeExpiryDate' => null, 'redirectUrl' => null, 'redirectType' => null, 'authMaxDate' => null, 'orderDescription' => null, 'captureDescription' => null, 'updateDescription' => null, 'cancelDescription' => null, 'storeId' => null, 'codeId' => null, 'paymentId' => null, 'paypayResultCode' => null, 'merchantPaymentId' => null, 'merchantCaptureId' => null, 'merchantUpdateId' => null, 'merchantRevertId' => null, 'merchantRefundId' => null, 'paymentDate' => null];
    /**
     * Array of nullable properties. Used for (de)serialization.
     *
     * @var array<string, bool>
     */
    protected static array $openAPINullables = ['payType' => false, 'jobCode' => false, 'status' => false, 'codeUrl' => true, 'codeExpiryDate' => true, 'redirectUrl' => true, 'redirectType' => true, 'authMaxDate' => true, 'orderDescription' => true, 'captureDescription' => true, 'updateDescription' => true, 'cancelDescription' => true, 'storeId' => true, 'codeId' => true, 'paymentId' => true, 'paypayResultCode' => true, 'merchantPaymentId' => true, 'merchantCaptureId' => true, 'merchantUpdateId' => true, 'merchantRevertId' => true, 'merchantRefundId' => true, 'paymentDate' => true];
    /**
     * If a nullable field gets set to null, insert it here.
     *
     * @var array<string, bool>
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return array<string, string|null>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties.
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null.
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null.
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable.
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }
    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = ['payType' => 'pay_type', 'jobCode' => 'job_code', 'status' => 'status', 'codeUrl' => 'code_url', 'codeExpiryDate' => 'code_expiry_date', 'redirectUrl' => 'redirect_url', 'redirectType' => 'redirect_type', 'authMaxDate' => 'auth_max_date', 'orderDescription' => 'order_description', 'captureDescription' => 'capture_description', 'updateDescription' => 'update_description', 'cancelDescription' => 'cancel_description', 'storeId' => 'store_id', 'codeId' => 'code_id', 'paymentId' => 'payment_id', 'paypayResultCode' => 'paypay_result_code', 'merchantPaymentId' => 'merchant_payment_id', 'merchantCaptureId' => 'merchant_capture_id', 'merchantUpdateId' => 'merchant_update_id', 'merchantRevertId' => 'merchant_revert_id', 'merchantRefundId' => 'merchant_refund_id', 'paymentDate' => 'payment_date'];
    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var array<string, string>
     */
    protected static array $setters = ['payType' => 'setPayType', 'jobCode' => 'setJobCode', 'status' => 'setStatus', 'codeUrl' => 'setCodeUrl', 'codeExpiryDate' => 'setCodeExpiryDate', 'redirectUrl' => 'setRedirectUrl', 'redirectType' => 'setRedirectType', 'authMaxDate' => 'setAuthMaxDate', 'orderDescription' => 'setOrderDescription', 'captureDescription' => 'setCaptureDescription', 'updateDescription' => 'setUpdateDescription', 'cancelDescription' => 'setCancelDescription', 'storeId' => 'setStoreId', 'codeId' => 'setCodeId', 'paymentId' => 'setPaymentId', 'paypayResultCode' => 'setPaypayResultCode', 'merchantPaymentId' => 'setMerchantPaymentId', 'merchantCaptureId' => 'setMerchantCaptureId', 'merchantUpdateId' => 'setMerchantUpdateId', 'merchantRevertId' => 'setMerchantRevertId', 'merchantRefundId' => 'setMerchantRefundId', 'paymentDate' => 'setPaymentDate'];
    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var array<string, string>
     */
    protected static array $getters = ['payType' => 'getPayType', 'jobCode' => 'getJobCode', 'status' => 'getStatus', 'codeUrl' => 'getCodeUrl', 'codeExpiryDate' => 'getCodeExpiryDate', 'redirectUrl' => 'getRedirectUrl', 'redirectType' => 'getRedirectType', 'authMaxDate' => 'getAuthMaxDate', 'orderDescription' => 'getOrderDescription', 'captureDescription' => 'getCaptureDescription', 'updateDescription' => 'getUpdateDescription', 'cancelDescription' => 'getCancelDescription', 'storeId' => 'getStoreId', 'codeId' => 'getCodeId', 'paymentId' => 'getPaymentId', 'paypayResultCode' => 'getPaypayResultCode', 'merchantPaymentId' => 'getMerchantPaymentId', 'merchantCaptureId' => 'getMerchantCaptureId', 'merchantUpdateId' => 'getMerchantUpdateId', 'merchantRevertId' => 'getMerchantRevertId', 'merchantRefundId' => 'getMerchantRefundId', 'paymentDate' => 'getPaymentDate'];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }
    public const REDIRECT_TYPE__1 = '1';
    public const REDIRECT_TYPE__2 = '2';

    /**
     * Gets allowable values of the enum.
     *
     * @return list<string>
     */
    public function getRedirectTypeAllowableValues(): array
    {
        return [self::REDIRECT_TYPE__1, self::REDIRECT_TYPE__2];
    }
    /**
     * Associative array for storing property values.
     *
     * @phpstan-var array<string, mixed>
     *
     * @psalm-var array<string, mixed>
     */
    protected array $container = [];

    /**
     * Constructor.
     *
     * @param array<string, mixed> $data Associated array of property values
     *                                   initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('payType', $data ?? [], null);
        $this->setIfExists('jobCode', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('codeUrl', $data ?? [], null);
        $this->setIfExists('codeExpiryDate', $data ?? [], null);
        $this->setIfExists('redirectUrl', $data ?? [], null);
        $this->setIfExists('redirectType', $data ?? [], null);
        $this->setIfExists('authMaxDate', $data ?? [], null);
        $this->setIfExists('orderDescription', $data ?? [], null);
        $this->setIfExists('captureDescription', $data ?? [], null);
        $this->setIfExists('updateDescription', $data ?? [], null);
        $this->setIfExists('cancelDescription', $data ?? [], null);
        $this->setIfExists('storeId', $data ?? [], null);
        $this->setIfExists('codeId', $data ?? [], null);
        $this->setIfExists('paymentId', $data ?? [], null);
        $this->setIfExists('paypayResultCode', $data ?? [], null);
        $this->setIfExists('merchantPaymentId', $data ?? [], null);
        $this->setIfExists('merchantCaptureId', $data ?? [], null);
        $this->setIfExists('merchantUpdateId', $data ?? [], null);
        $this->setIfExists('merchantRevertId', $data ?? [], null);
        $this->setIfExists('merchantRefundId', $data ?? [], null);
        $this->setIfExists('paymentDate', $data ?? [], null);
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array.
     *
     * @param array<string, mixed> $fields
     */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }
        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return list<string> invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];
        if (!is_null($this->container['codeUrl']) && mb_strlen($this->container['codeUrl']) > 256) {
            $invalidProperties[] = "invalid value for 'codeUrl', the character length must be smaller than or equal to 256.";
        }
        if (!is_null($this->container['codeUrl']) && mb_strlen($this->container['codeUrl']) < 1) {
            $invalidProperties[] = "invalid value for 'codeUrl', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['redirectUrl']) && mb_strlen($this->container['redirectUrl']) > 256) {
            $invalidProperties[] = "invalid value for 'redirectUrl', the character length must be smaller than or equal to 256.";
        }
        if (!is_null($this->container['redirectUrl']) && mb_strlen($this->container['redirectUrl']) < 1) {
            $invalidProperties[] = "invalid value for 'redirectUrl', the character length must be bigger than or equal to 1.";
        }
        $allowedValues = $this->getRedirectTypeAllowableValues();
        if (!is_null($this->container['redirectType']) && !in_array($this->container['redirectType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf("invalid value '%s' for 'redirectType', must be one of '%s'", $this->container['redirectType'], implode("', '", $allowedValues));
        }
        if (!is_null($this->container['orderDescription']) && mb_strlen($this->container['orderDescription']) > 100) {
            $invalidProperties[] = "invalid value for 'orderDescription', the character length must be smaller than or equal to 100.";
        }
        if (!is_null($this->container['captureDescription']) && mb_strlen($this->container['captureDescription']) > 100) {
            $invalidProperties[] = "invalid value for 'captureDescription', the character length must be smaller than or equal to 100.";
        }
        if (!is_null($this->container['updateDescription']) && mb_strlen($this->container['updateDescription']) > 100) {
            $invalidProperties[] = "invalid value for 'updateDescription', the character length must be smaller than or equal to 100.";
        }
        if (!is_null($this->container['cancelDescription']) && mb_strlen($this->container['cancelDescription']) > 100) {
            $invalidProperties[] = "invalid value for 'cancelDescription', the character length must be smaller than or equal to 100.";
        }
        if (!is_null($this->container['storeId']) && mb_strlen($this->container['storeId']) > 18) {
            $invalidProperties[] = "invalid value for 'storeId', the character length must be smaller than or equal to 18.";
        }
        if (!is_null($this->container['storeId']) && mb_strlen($this->container['storeId']) < 1) {
            $invalidProperties[] = "invalid value for 'storeId', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['codeId']) && mb_strlen($this->container['codeId']) > 64) {
            $invalidProperties[] = "invalid value for 'codeId', the character length must be smaller than or equal to 64.";
        }
        if (!is_null($this->container['codeId']) && mb_strlen($this->container['codeId']) < 1) {
            $invalidProperties[] = "invalid value for 'codeId', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['paymentId']) && mb_strlen($this->container['paymentId']) > 64) {
            $invalidProperties[] = "invalid value for 'paymentId', the character length must be smaller than or equal to 64.";
        }
        if (!is_null($this->container['paymentId']) && mb_strlen($this->container['paymentId']) < 1) {
            $invalidProperties[] = "invalid value for 'paymentId', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['paypayResultCode']) && mb_strlen($this->container['paypayResultCode']) > 256) {
            $invalidProperties[] = "invalid value for 'paypayResultCode', the character length must be smaller than or equal to 256.";
        }
        if (!is_null($this->container['paypayResultCode']) && mb_strlen($this->container['paypayResultCode']) < 1) {
            $invalidProperties[] = "invalid value for 'paypayResultCode', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['merchantPaymentId']) && mb_strlen($this->container['merchantPaymentId']) > 64) {
            $invalidProperties[] = "invalid value for 'merchantPaymentId', the character length must be smaller than or equal to 64.";
        }
        if (!is_null($this->container['merchantPaymentId']) && mb_strlen($this->container['merchantPaymentId']) < 1) {
            $invalidProperties[] = "invalid value for 'merchantPaymentId', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['merchantCaptureId']) && mb_strlen($this->container['merchantCaptureId']) > 64) {
            $invalidProperties[] = "invalid value for 'merchantCaptureId', the character length must be smaller than or equal to 64.";
        }
        if (!is_null($this->container['merchantCaptureId']) && mb_strlen($this->container['merchantCaptureId']) < 1) {
            $invalidProperties[] = "invalid value for 'merchantCaptureId', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['merchantUpdateId']) && mb_strlen($this->container['merchantUpdateId']) > 64) {
            $invalidProperties[] = "invalid value for 'merchantUpdateId', the character length must be smaller than or equal to 64.";
        }
        if (!is_null($this->container['merchantUpdateId']) && mb_strlen($this->container['merchantUpdateId']) < 1) {
            $invalidProperties[] = "invalid value for 'merchantUpdateId', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['merchantRevertId']) && mb_strlen($this->container['merchantRevertId']) > 64) {
            $invalidProperties[] = "invalid value for 'merchantRevertId', the character length must be smaller than or equal to 64.";
        }
        if (!is_null($this->container['merchantRevertId']) && mb_strlen($this->container['merchantRevertId']) < 1) {
            $invalidProperties[] = "invalid value for 'merchantRevertId', the character length must be bigger than or equal to 1.";
        }
        if (!is_null($this->container['merchantRefundId']) && mb_strlen($this->container['merchantRefundId']) > 64) {
            $invalidProperties[] = "invalid value for 'merchantRefundId', the character length must be smaller than or equal to 64.";
        }
        if (!is_null($this->container['merchantRefundId']) && mb_strlen($this->container['merchantRefundId']) < 1) {
            $invalidProperties[] = "invalid value for 'merchantRefundId', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return 0 === count($this->listInvalidProperties());
    }

    /**
     * Gets payType.
     *
     * @return PayType|null
     */
    public function getPayType(): mixed
    {
        return $this->container['payType'];
    }

    /**
     * Sets payType.
     *
     * @param PayType $payType 決済種別\\ この決済で利用する決済手段です。  - `Paypay`: PayPay
     */
    public function setPayType(mixed $payType): static
    {
        if (is_null($payType)) {
            throw new \InvalidArgumentException('non-nullable payType cannot be null');
        }
        $this->container['payType'] = $payType;

        return $this;
    }

    /**
     * Gets jobCode.
     *
     * @return PayPayPaymentJobCode|null
     */
    public function getJobCode(): mixed
    {
        return $this->container['jobCode'];
    }

    /**
     * Sets jobCode.
     *
     * @param PayPayPaymentJobCode $jobCode jobCode
     */
    public function setJobCode(mixed $jobCode): static
    {
        if (is_null($jobCode)) {
            throw new \InvalidArgumentException('non-nullable jobCode cannot be null');
        }
        $this->container['jobCode'] = $jobCode;

        return $this;
    }

    /**
     * Gets status.
     *
     * @return PaymentStatus|null
     */
    public function getStatus(): mixed
    {
        return $this->container['status'];
    }

    /**
     * Sets status.
     *
     * @param PaymentStatus $status 決済ステータス  - `UNPROCESSED`: 未処理<br /><span class=\"smallText\">請求はまだ実行されていません。</span> - `AWAITING_CUSTOMER_PAYMENT`: 購入者の支払い待ち<br /><span class=\"smallText\">購入者によるPayPay上での取引承認を待っている状態。</span> - `AUTHORIZED`: 仮売上<br /><span class=\"smallText\">仮売上としてPayPay残高の確保が完了しており、売上確定により請求を完了できます。</span> - `CAPTURED`: 売上確定<br /><span class=\"smallText\">請求が完了し、売上が確定しています。</span> - `CANCELED`: キャンセル<br /><span class=\"smallText\">この決済はキャンセルされました。</span> - `EXPIRED`: 決済の期限切れ<br /><span class=\"smallText\">この決済は期限が切れています。</span>
     */
    public function setStatus(mixed $status): static
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets codeUrl.
     *
     * @return string|null
     */
    public function getCodeUrl(): mixed
    {
        return $this->container['codeUrl'];
    }

    /**
     * Sets codeUrl.
     *
     * @param string|null $codeUrl payPay支払いURL\\ 購入者をこのURLにリダイレクトすることでPayPay上での取引を開始します
     */
    public function setCodeUrl(mixed $codeUrl): static
    {
        if (is_null($codeUrl)) {
            $this->openAPINullablesSetToNull[] = 'codeUrl';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('codeUrl', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($codeUrl) && mb_strlen($codeUrl) > 256) {
            throw new \InvalidArgumentException('invalid length for $codeUrl when calling PaymentPayPay., must be smaller than or equal to 256.');
        }
        if (!is_null($codeUrl) && mb_strlen($codeUrl) < 1) {
            throw new \InvalidArgumentException('invalid length for $codeUrl when calling PaymentPayPay., must be bigger than or equal to 1.');
        }
        $this->container['codeUrl'] = $codeUrl;

        return $this;
    }

    /**
     * Gets codeExpiryDate.
     *
     * @return string|null
     */
    public function getCodeExpiryDate(): mixed
    {
        return $this->container['codeExpiryDate'];
    }

    /**
     * Sets codeExpiryDate.
     *
     * @param string|null $codeExpiryDate 支払期限\\ 形式： `yyyy/MM/dd HH:mm:ss.SSS`
     */
    public function setCodeExpiryDate(mixed $codeExpiryDate): static
    {
        if (is_null($codeExpiryDate)) {
            $this->openAPINullablesSetToNull[] = 'codeExpiryDate';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('codeExpiryDate', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['codeExpiryDate'] = $codeExpiryDate;

        return $this;
    }

    /**
     * Gets redirectUrl.
     *
     * @return string|null
     */
    public function getRedirectUrl(): mixed
    {
        return $this->container['redirectUrl'];
    }

    /**
     * Sets redirectUrl.
     *
     * @param string|null $redirectUrl リダイレクトURL\\ 決済が完了した際のPayPayからのリダイレクト先URL
     */
    public function setRedirectUrl(mixed $redirectUrl): static
    {
        if (is_null($redirectUrl)) {
            $this->openAPINullablesSetToNull[] = 'redirectUrl';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('redirectUrl', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($redirectUrl) && mb_strlen($redirectUrl) > 256) {
            throw new \InvalidArgumentException('invalid length for $redirectUrl when calling PaymentPayPay., must be smaller than or equal to 256.');
        }
        if (!is_null($redirectUrl) && mb_strlen($redirectUrl) < 1) {
            throw new \InvalidArgumentException('invalid length for $redirectUrl when calling PaymentPayPay., must be bigger than or equal to 1.');
        }
        $this->container['redirectUrl'] = $redirectUrl;

        return $this;
    }

    /**
     * Gets redirectType.
     *
     * @return string|null
     */
    public function getRedirectType(): mixed
    {
        return $this->container['redirectType'];
    }

    /**
     * Sets redirectType.
     *
     * @param string|null $redirectType リダイレクト先種別\\ `redirect_url`の種別  - `1`： Webページ／Webアプリケーション - `2`： ネイティブアプリ
     */
    public function setRedirectType(mixed $redirectType): static
    {
        if (is_null($redirectType)) {
            $this->openAPINullablesSetToNull[] = 'redirectType';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('redirectType', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getRedirectTypeAllowableValues();
        if (!is_null($redirectType) && !in_array($redirectType, $allowedValues, true)) {
            throw new \InvalidArgumentException(sprintf("Invalid value '%s' for 'redirectType', must be one of '%s'", $redirectType, implode("', '", $allowedValues)));
        }
        $this->container['redirectType'] = $redirectType;

        return $this;
    }

    /**
     * Gets authMaxDate.
     *
     * @return string|null
     */
    public function getAuthMaxDate(): mixed
    {
        return $this->container['authMaxDate'];
    }

    /**
     * Sets authMaxDate.
     *
     * @param string|null $authMaxDate 仮売上期限\\ 形式： `yyyy/MM/dd`
     */
    public function setAuthMaxDate(mixed $authMaxDate): static
    {
        if (is_null($authMaxDate)) {
            $this->openAPINullablesSetToNull[] = 'authMaxDate';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('authMaxDate', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['authMaxDate'] = $authMaxDate;

        return $this;
    }

    /**
     * Gets orderDescription.
     *
     * @return string|null
     */
    public function getOrderDescription(): mixed
    {
        return $this->container['orderDescription'];
    }

    /**
     * Sets orderDescription.
     *
     * @param string|null $orderDescription 注文内容の説明\\ 購入者のPayPayアプリ上で表示される注文内容の説明
     */
    public function setOrderDescription(mixed $orderDescription): static
    {
        if (is_null($orderDescription)) {
            $this->openAPINullablesSetToNull[] = 'orderDescription';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('orderDescription', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($orderDescription) && mb_strlen($orderDescription) > 100) {
            throw new \InvalidArgumentException('invalid length for $orderDescription when calling PaymentPayPay., must be smaller than or equal to 100.');
        }
        $this->container['orderDescription'] = $orderDescription;

        return $this;
    }

    /**
     * Gets captureDescription.
     *
     * @return string|null
     */
    public function getCaptureDescription(): mixed
    {
        return $this->container['captureDescription'];
    }

    /**
     * Sets captureDescription.
     *
     * @param string|null $captureDescription 売上確定の説明\\ 購入者のPayPayアプリ上で表示される売上確定の説明
     */
    public function setCaptureDescription(mixed $captureDescription): static
    {
        if (is_null($captureDescription)) {
            $this->openAPINullablesSetToNull[] = 'captureDescription';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('captureDescription', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($captureDescription) && mb_strlen($captureDescription) > 100) {
            throw new \InvalidArgumentException('invalid length for $captureDescription when calling PaymentPayPay., must be smaller than or equal to 100.');
        }
        $this->container['captureDescription'] = $captureDescription;

        return $this;
    }

    /**
     * Gets updateDescription.
     *
     * @return string|null
     */
    public function getUpdateDescription(): mixed
    {
        return $this->container['updateDescription'];
    }

    /**
     * Sets updateDescription.
     *
     * @param string|null $updateDescription 金額変更の説明\\ 購入者のPayPayアプリ上で表示される金額変更の説明
     */
    public function setUpdateDescription(mixed $updateDescription): static
    {
        if (is_null($updateDescription)) {
            $this->openAPINullablesSetToNull[] = 'updateDescription';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('updateDescription', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($updateDescription) && mb_strlen($updateDescription) > 100) {
            throw new \InvalidArgumentException('invalid length for $updateDescription when calling PaymentPayPay., must be smaller than or equal to 100.');
        }
        $this->container['updateDescription'] = $updateDescription;

        return $this;
    }

    /**
     * Gets cancelDescription.
     *
     * @return string|null
     */
    public function getCancelDescription(): mixed
    {
        return $this->container['cancelDescription'];
    }

    /**
     * Sets cancelDescription.
     *
     * @param string|null $cancelDescription キャンセルの説明\\ 購入者のPayPayアプリ上で表示されるキャンセルの説明
     */
    public function setCancelDescription(mixed $cancelDescription): static
    {
        if (is_null($cancelDescription)) {
            $this->openAPINullablesSetToNull[] = 'cancelDescription';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cancelDescription', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($cancelDescription) && mb_strlen($cancelDescription) > 100) {
            throw new \InvalidArgumentException('invalid length for $cancelDescription when calling PaymentPayPay., must be smaller than or equal to 100.');
        }
        $this->container['cancelDescription'] = $cancelDescription;

        return $this;
    }

    /**
     * Gets storeId.
     *
     * @return string|null
     */
    public function getStoreId(): mixed
    {
        return $this->container['storeId'];
    }

    /**
     * Sets storeId.
     *
     * @param string|null $storeId 店舗ID\\ PayPayによって発行された店舗ID
     */
    public function setStoreId(mixed $storeId): static
    {
        if (is_null($storeId)) {
            $this->openAPINullablesSetToNull[] = 'storeId';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('storeId', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($storeId) && mb_strlen($storeId) > 18) {
            throw new \InvalidArgumentException('invalid length for $storeId when calling PaymentPayPay., must be smaller than or equal to 18.');
        }
        if (!is_null($storeId) && mb_strlen($storeId) < 1) {
            throw new \InvalidArgumentException('invalid length for $storeId when calling PaymentPayPay., must be bigger than or equal to 1.');
        }
        $this->container['storeId'] = $storeId;

        return $this;
    }

    /**
     * Gets codeId.
     *
     * @return string|null
     */
    public function getCodeId(): mixed
    {
        return $this->container['codeId'];
    }

    /**
     * Sets codeId.
     *
     * @param string|null $codeId PayPayの支払いコードID
     */
    public function setCodeId(mixed $codeId): static
    {
        if (is_null($codeId)) {
            $this->openAPINullablesSetToNull[] = 'codeId';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('codeId', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($codeId) && mb_strlen($codeId) > 64) {
            throw new \InvalidArgumentException('invalid length for $codeId when calling PaymentPayPay., must be smaller than or equal to 64.');
        }
        if (!is_null($codeId) && mb_strlen($codeId) < 1) {
            throw new \InvalidArgumentException('invalid length for $codeId when calling PaymentPayPay., must be bigger than or equal to 1.');
        }
        $this->container['codeId'] = $codeId;

        return $this;
    }

    /**
     * Gets paymentId.
     *
     * @return string|null
     */
    public function getPaymentId(): mixed
    {
        return $this->container['paymentId'];
    }

    /**
     * Sets paymentId.
     *
     * @param string|null $paymentId PayPay 決済ID
     */
    public function setPaymentId(mixed $paymentId): static
    {
        if (is_null($paymentId)) {
            $this->openAPINullablesSetToNull[] = 'paymentId';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('paymentId', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($paymentId) && mb_strlen($paymentId) > 64) {
            throw new \InvalidArgumentException('invalid length for $paymentId when calling PaymentPayPay., must be smaller than or equal to 64.');
        }
        if (!is_null($paymentId) && mb_strlen($paymentId) < 1) {
            throw new \InvalidArgumentException('invalid length for $paymentId when calling PaymentPayPay., must be bigger than or equal to 1.');
        }
        $this->container['paymentId'] = $paymentId;

        return $this;
    }

    /**
     * Gets paypayResultCode.
     *
     * @return string|null
     */
    public function getPaypayResultCode(): mixed
    {
        return $this->container['paypayResultCode'];
    }

    /**
     * Sets paypayResultCode.
     *
     * @param string|null $paypayResultCode PayPay処理結果コード
     */
    public function setPaypayResultCode(mixed $paypayResultCode): static
    {
        if (is_null($paypayResultCode)) {
            $this->openAPINullablesSetToNull[] = 'paypayResultCode';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('paypayResultCode', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($paypayResultCode) && mb_strlen($paypayResultCode) > 256) {
            throw new \InvalidArgumentException('invalid length for $paypayResultCode when calling PaymentPayPay., must be smaller than or equal to 256.');
        }
        if (!is_null($paypayResultCode) && mb_strlen($paypayResultCode) < 1) {
            throw new \InvalidArgumentException('invalid length for $paypayResultCode when calling PaymentPayPay., must be bigger than or equal to 1.');
        }
        $this->container['paypayResultCode'] = $paypayResultCode;

        return $this;
    }

    /**
     * Gets merchantPaymentId.
     *
     * @return string|null
     */
    public function getMerchantPaymentId(): mixed
    {
        return $this->container['merchantPaymentId'];
    }

    /**
     * Sets merchantPaymentId.
     *
     * @param string|null $merchantPaymentId PayPay トランザクションID
     */
    public function setMerchantPaymentId(mixed $merchantPaymentId): static
    {
        if (is_null($merchantPaymentId)) {
            $this->openAPINullablesSetToNull[] = 'merchantPaymentId';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('merchantPaymentId', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($merchantPaymentId) && mb_strlen($merchantPaymentId) > 64) {
            throw new \InvalidArgumentException('invalid length for $merchantPaymentId when calling PaymentPayPay., must be smaller than or equal to 64.');
        }
        if (!is_null($merchantPaymentId) && mb_strlen($merchantPaymentId) < 1) {
            throw new \InvalidArgumentException('invalid length for $merchantPaymentId when calling PaymentPayPay., must be bigger than or equal to 1.');
        }
        $this->container['merchantPaymentId'] = $merchantPaymentId;

        return $this;
    }

    /**
     * Gets merchantCaptureId.
     *
     * @return string|null
     */
    public function getMerchantCaptureId(): mixed
    {
        return $this->container['merchantCaptureId'];
    }

    /**
     * Sets merchantCaptureId.
     *
     * @param string|null $merchantCaptureId PayPay 売上確定ID
     */
    public function setMerchantCaptureId(mixed $merchantCaptureId): static
    {
        if (is_null($merchantCaptureId)) {
            $this->openAPINullablesSetToNull[] = 'merchantCaptureId';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('merchantCaptureId', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($merchantCaptureId) && mb_strlen($merchantCaptureId) > 64) {
            throw new \InvalidArgumentException('invalid length for $merchantCaptureId when calling PaymentPayPay., must be smaller than or equal to 64.');
        }
        if (!is_null($merchantCaptureId) && mb_strlen($merchantCaptureId) < 1) {
            throw new \InvalidArgumentException('invalid length for $merchantCaptureId when calling PaymentPayPay., must be bigger than or equal to 1.');
        }
        $this->container['merchantCaptureId'] = $merchantCaptureId;

        return $this;
    }

    /**
     * Gets merchantUpdateId.
     *
     * @return string|null
     */
    public function getMerchantUpdateId(): mixed
    {
        return $this->container['merchantUpdateId'];
    }

    /**
     * Sets merchantUpdateId.
     *
     * @param string|null $merchantUpdateId PayPay 金額変更ID
     */
    public function setMerchantUpdateId(mixed $merchantUpdateId): static
    {
        if (is_null($merchantUpdateId)) {
            $this->openAPINullablesSetToNull[] = 'merchantUpdateId';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('merchantUpdateId', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($merchantUpdateId) && mb_strlen($merchantUpdateId) > 64) {
            throw new \InvalidArgumentException('invalid length for $merchantUpdateId when calling PaymentPayPay., must be smaller than or equal to 64.');
        }
        if (!is_null($merchantUpdateId) && mb_strlen($merchantUpdateId) < 1) {
            throw new \InvalidArgumentException('invalid length for $merchantUpdateId when calling PaymentPayPay., must be bigger than or equal to 1.');
        }
        $this->container['merchantUpdateId'] = $merchantUpdateId;

        return $this;
    }

    /**
     * Gets merchantRevertId.
     *
     * @return string|null
     */
    public function getMerchantRevertId(): mixed
    {
        return $this->container['merchantRevertId'];
    }

    /**
     * Sets merchantRevertId.
     *
     * @param string|null $merchantRevertId PayPay キャンセルID
     */
    public function setMerchantRevertId(mixed $merchantRevertId): static
    {
        if (is_null($merchantRevertId)) {
            $this->openAPINullablesSetToNull[] = 'merchantRevertId';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('merchantRevertId', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($merchantRevertId) && mb_strlen($merchantRevertId) > 64) {
            throw new \InvalidArgumentException('invalid length for $merchantRevertId when calling PaymentPayPay., must be smaller than or equal to 64.');
        }
        if (!is_null($merchantRevertId) && mb_strlen($merchantRevertId) < 1) {
            throw new \InvalidArgumentException('invalid length for $merchantRevertId when calling PaymentPayPay., must be bigger than or equal to 1.');
        }
        $this->container['merchantRevertId'] = $merchantRevertId;

        return $this;
    }

    /**
     * Gets merchantRefundId.
     *
     * @return string|null
     */
    public function getMerchantRefundId(): mixed
    {
        return $this->container['merchantRefundId'];
    }

    /**
     * Sets merchantRefundId.
     *
     * @param string|null $merchantRefundId PayPay 返金ID
     */
    public function setMerchantRefundId(mixed $merchantRefundId): static
    {
        if (is_null($merchantRefundId)) {
            $this->openAPINullablesSetToNull[] = 'merchantRefundId';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('merchantRefundId', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($merchantRefundId) && mb_strlen($merchantRefundId) > 64) {
            throw new \InvalidArgumentException('invalid length for $merchantRefundId when calling PaymentPayPay., must be smaller than or equal to 64.');
        }
        if (!is_null($merchantRefundId) && mb_strlen($merchantRefundId) < 1) {
            throw new \InvalidArgumentException('invalid length for $merchantRefundId when calling PaymentPayPay., must be bigger than or equal to 1.');
        }
        $this->container['merchantRefundId'] = $merchantRefundId;

        return $this;
    }

    /**
     * Gets paymentDate.
     *
     * @return string|null
     */
    public function getPaymentDate(): mixed
    {
        return $this->container['paymentDate'];
    }

    /**
     * Sets paymentDate.
     *
     * @param string|null $paymentDate 支払日時\\ 形式： `yyyy/MM/dd HH:mm:ss.SSS`
     */
    public function setPaymentDate(mixed $paymentDate): static
    {
        if (is_null($paymentDate)) {
            $this->openAPINullablesSetToNull[] = 'paymentDate';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('paymentDate', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['paymentDate'] = $paymentDate;

        return $this;
    }

    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @see https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    public function jsonSerialize(): mixed
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object.
     */
    public function __toString(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
    }

    /**
     * Gets a header-safe presentation of the object.
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
