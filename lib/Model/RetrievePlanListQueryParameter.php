<?php

declare(strict_types=1);
/**
 * fincode API.
 *
 * fincodeのAPIリファレンスです。\\ fincodeは決済情報のほか様々なリソースを管理できるため、リソース指向なREST APIをベースとしたインターフェイス設計のもとでAPIを提供しています。\\ APIの呼び出しにはAPIキーによる認証が必要であり、リクエストの際に`Authorization`ヘッダーに有効なAPIキーをセットすることで認証できます。
 *
 * The version of the OpenAPI document: 1.2.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Fincode\Model;

use OpenAPI\Fincode\ObjectSerializer;

/**
 * @implements \ArrayAccess<string, mixed>
 */
class RetrievePlanListQueryParameter implements ModelInterface, \ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;
    /**
     * The original name of the model.
     */
    protected static string $openAPIModelName = 'retrievePlanList_query_parameter';
    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var array<string, string>
     */
    protected static array $openAPITypes = ['page' => 'int', 'limit' => 'int', 'countOnly' => 'bool', 'totalAmountMin' => 'int', 'totalAmountMax' => 'int', 'intervalPattern' => 'string', 'updateDateFrom' => 'string', 'updateDateTo' => 'string', 'planName' => 'string', 'deleteFlag' => 'string', 'sort' => 'string'];
    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var array<string, string|null>
     */
    protected static array $openAPIFormats = ['page' => null, 'limit' => null, 'countOnly' => null, 'totalAmountMin' => 'int64', 'totalAmountMax' => 'int64', 'intervalPattern' => null, 'updateDateFrom' => null, 'updateDateTo' => null, 'planName' => null, 'deleteFlag' => null, 'sort' => null];
    /**
     * Array of nullable properties. Used for (de)serialization.
     *
     * @var array<string, bool>
     */
    protected static array $openAPINullables = ['page' => true, 'limit' => true, 'countOnly' => true, 'totalAmountMin' => false, 'totalAmountMax' => false, 'intervalPattern' => false, 'updateDateFrom' => false, 'updateDateTo' => false, 'planName' => true, 'deleteFlag' => true, 'sort' => true];
    /**
     * If a nullable field gets set to null, insert it here.
     *
     * @var array<string, bool>
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return array<string, string|null>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties.
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null.
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null.
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable.
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }
    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = ['page' => 'page', 'limit' => 'limit', 'countOnly' => 'count_only', 'totalAmountMin' => 'total_amount_min', 'totalAmountMax' => 'total_amount_max', 'intervalPattern' => 'interval_pattern', 'updateDateFrom' => 'update_date_from', 'updateDateTo' => 'update_date_to', 'planName' => 'plan_name', 'deleteFlag' => 'delete_flag', 'sort' => 'sort'];
    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var array<string, string>
     */
    protected static array $setters = ['page' => 'setPage', 'limit' => 'setLimit', 'countOnly' => 'setCountOnly', 'totalAmountMin' => 'setTotalAmountMin', 'totalAmountMax' => 'setTotalAmountMax', 'intervalPattern' => 'setIntervalPattern', 'updateDateFrom' => 'setUpdateDateFrom', 'updateDateTo' => 'setUpdateDateTo', 'planName' => 'setPlanName', 'deleteFlag' => 'setDeleteFlag', 'sort' => 'setSort'];
    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var array<string, string>
     */
    protected static array $getters = ['page' => 'getPage', 'limit' => 'getLimit', 'countOnly' => 'getCountOnly', 'totalAmountMin' => 'getTotalAmountMin', 'totalAmountMax' => 'getTotalAmountMax', 'intervalPattern' => 'getIntervalPattern', 'updateDateFrom' => 'getUpdateDateFrom', 'updateDateTo' => 'getUpdateDateTo', 'planName' => 'getPlanName', 'deleteFlag' => 'getDeleteFlag', 'sort' => 'getSort'];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }
    public const INTERVAL_PATTERN_MONTH = 'month';
    public const INTERVAL_PATTERN_YEAR = 'year';
    public const DELETE_FLAG__0 = '0';
    public const DELETE_FLAG__1 = '1';

    /**
     * Gets allowable values of the enum.
     *
     * @return list<string>
     */
    public function getIntervalPatternAllowableValues(): array
    {
        return [self::INTERVAL_PATTERN_MONTH, self::INTERVAL_PATTERN_YEAR];
    }

    /**
     * Gets allowable values of the enum.
     *
     * @return list<string>
     */
    public function getDeleteFlagAllowableValues(): array
    {
        return [self::DELETE_FLAG__0, self::DELETE_FLAG__1];
    }
    /**
     * Associative array for storing property values.
     *
     * @phpstan-var array<string, mixed>
     *
     * @psalm-var array<string, mixed>
     */
    protected array $container = [];

    /**
     * Constructor.
     *
     * @param array<string, mixed> $data Associated array of property values
     *                                   initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('page', $data ?? [], null);
        $this->setIfExists('limit', $data ?? [], null);
        $this->setIfExists('countOnly', $data ?? [], null);
        $this->setIfExists('totalAmountMin', $data ?? [], null);
        $this->setIfExists('totalAmountMax', $data ?? [], null);
        $this->setIfExists('intervalPattern', $data ?? [], null);
        $this->setIfExists('updateDateFrom', $data ?? [], null);
        $this->setIfExists('updateDateTo', $data ?? [], null);
        $this->setIfExists('planName', $data ?? [], null);
        $this->setIfExists('deleteFlag', $data ?? [], null);
        $this->setIfExists('sort', $data ?? [], null);
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array.
     *
     * @param array<string, mixed> $fields
     */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }
        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return list<string> invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];
        $allowedValues = $this->getIntervalPatternAllowableValues();
        if (!is_null($this->container['intervalPattern']) && !in_array($this->container['intervalPattern'], $allowedValues, true)) {
            $invalidProperties[] = sprintf("invalid value '%s' for 'intervalPattern', must be one of '%s'", $this->container['intervalPattern'], implode("', '", $allowedValues));
        }
        if (!is_null($this->container['planName']) && mb_strlen($this->container['planName']) > 25) {
            $invalidProperties[] = "invalid value for 'planName', the character length must be smaller than or equal to 25.";
        }
        if (!is_null($this->container['planName']) && mb_strlen($this->container['planName']) < 1) {
            $invalidProperties[] = "invalid value for 'planName', the character length must be bigger than or equal to 1.";
        }
        $allowedValues = $this->getDeleteFlagAllowableValues();
        if (!is_null($this->container['deleteFlag']) && !in_array($this->container['deleteFlag'], $allowedValues, true)) {
            $invalidProperties[] = sprintf("invalid value '%s' for 'deleteFlag', must be one of '%s'", $this->container['deleteFlag'], implode("', '", $allowedValues));
        }
        if (!is_null($this->container['deleteFlag']) && mb_strlen($this->container['deleteFlag']) > 1) {
            $invalidProperties[] = "invalid value for 'deleteFlag', the character length must be smaller than or equal to 1.";
        }
        if (!is_null($this->container['deleteFlag']) && mb_strlen($this->container['deleteFlag']) < 1) {
            $invalidProperties[] = "invalid value for 'deleteFlag', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return 0 === count($this->listInvalidProperties());
    }

    /**
     * Gets page.
     *
     * @return int|null
     */
    public function getPage(): mixed
    {
        return $this->container['page'];
    }

    /**
     * Sets page.
     *
     * @param int|null $page ページ番号
     */
    public function setPage(mixed $page): static
    {
        if (is_null($page)) {
            $this->openAPINullablesSetToNull[] = 'page';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('page', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['page'] = $page;

        return $this;
    }

    /**
     * Gets limit.
     *
     * @return int|null
     */
    public function getLimit(): mixed
    {
        return $this->container['limit'];
    }

    /**
     * Sets limit.
     *
     * @param int|null $limit 1回で取得するデータの最大件数
     */
    public function setLimit(mixed $limit): static
    {
        if (is_null($limit)) {
            $this->openAPINullablesSetToNull[] = 'limit';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('limit', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['limit'] = $limit;

        return $this;
    }

    /**
     * Gets countOnly.
     *
     * @return bool|null
     */
    public function getCountOnly(): mixed
    {
        return $this->container['countOnly'];
    }

    /**
     * Sets countOnly.
     *
     * @param bool|null $countOnly 総件数のみ取得するか。\\ `true`を指定した場合、検索結果の総件数（`total_count`）のみ取得します。
     */
    public function setCountOnly(mixed $countOnly): static
    {
        if (is_null($countOnly)) {
            $this->openAPINullablesSetToNull[] = 'countOnly';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('countOnly', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['countOnly'] = $countOnly;

        return $this;
    }

    /**
     * Gets totalAmountMin.
     *
     * @return int|null
     */
    public function getTotalAmountMin(): mixed
    {
        return $this->container['totalAmountMin'];
    }

    /**
     * Sets totalAmountMin.
     *
     * @param int $totalAmountMin 合計金額（始値）\\ 利用金額と税送料の合計額（`total_amount`）を対象に範囲検索を行います。この値以上の合計金額を持つプラン情報を取得します。
     */
    public function setTotalAmountMin(mixed $totalAmountMin): static
    {
        if (is_null($totalAmountMin)) {
            throw new \InvalidArgumentException('non-nullable totalAmountMin cannot be null');
        }
        $this->container['totalAmountMin'] = $totalAmountMin;

        return $this;
    }

    /**
     * Gets totalAmountMax.
     *
     * @return int|null
     */
    public function getTotalAmountMax(): mixed
    {
        return $this->container['totalAmountMax'];
    }

    /**
     * Sets totalAmountMax.
     *
     * @param int $totalAmountMax 合計金額（終値）\\ 利用金額と税送料の合計額（`total_amount`）を対象に範囲検索を行います。この値以下の合計金額を持つプラン情報を取得します。
     */
    public function setTotalAmountMax(mixed $totalAmountMax): static
    {
        if (is_null($totalAmountMax)) {
            throw new \InvalidArgumentException('non-nullable totalAmountMax cannot be null');
        }
        $this->container['totalAmountMax'] = $totalAmountMax;

        return $this;
    }

    /**
     * Gets intervalPattern.
     *
     * @return string|null
     */
    public function getIntervalPattern(): mixed
    {
        return $this->container['intervalPattern'];
    }

    /**
     * Sets intervalPattern.
     *
     * @param string $intervalPattern 課金間隔  - `month`: 月 - `year`: 年
     */
    public function setIntervalPattern(mixed $intervalPattern): static
    {
        if (is_null($intervalPattern)) {
            throw new \InvalidArgumentException('non-nullable intervalPattern cannot be null');
        }
        $allowedValues = $this->getIntervalPatternAllowableValues();
        if (!in_array($intervalPattern, $allowedValues, true)) {
            throw new \InvalidArgumentException(sprintf("Invalid value '%s' for 'intervalPattern', must be one of '%s'", $intervalPattern, implode("', '", $allowedValues)));
        }
        $this->container['intervalPattern'] = $intervalPattern;

        return $this;
    }

    /**
     * Gets updateDateFrom.
     *
     * @return string|null
     */
    public function getUpdateDateFrom(): mixed
    {
        return $this->container['updateDateFrom'];
    }

    /**
     * Sets updateDateFrom.
     *
     * @param string $updateDateFrom 更新日時（始値）\\ 更新日時（`updated`）を対象に範囲検索を行います。この日付以降に更新された決済情報を取得します。\\ \\ 形式：`yyyy/MM/dd`
     */
    public function setUpdateDateFrom(mixed $updateDateFrom): static
    {
        if (is_null($updateDateFrom)) {
            throw new \InvalidArgumentException('non-nullable updateDateFrom cannot be null');
        }
        $this->container['updateDateFrom'] = $updateDateFrom;

        return $this;
    }

    /**
     * Gets updateDateTo.
     *
     * @return string|null
     */
    public function getUpdateDateTo(): mixed
    {
        return $this->container['updateDateTo'];
    }

    /**
     * Sets updateDateTo.
     *
     * @param string $updateDateTo 更新日時（終値）\\ 更新日時（`updated`）を対象に範囲検索を行います。この日付以前に更新された決済情報を取得します。\\ \\ 形式：`yyyy/MM/dd`
     */
    public function setUpdateDateTo(mixed $updateDateTo): static
    {
        if (is_null($updateDateTo)) {
            throw new \InvalidArgumentException('non-nullable updateDateTo cannot be null');
        }
        $this->container['updateDateTo'] = $updateDateTo;

        return $this;
    }

    /**
     * Gets planName.
     *
     * @return string|null
     */
    public function getPlanName(): mixed
    {
        return $this->container['planName'];
    }

    /**
     * Sets planName.
     *
     * @param string|null $planName プラン名\\ `plan_name`に対する部分一致検索を行います
     */
    public function setPlanName(mixed $planName): static
    {
        if (is_null($planName)) {
            $this->openAPINullablesSetToNull[] = 'planName';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('planName', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($planName) && mb_strlen($planName) > 25) {
            throw new \InvalidArgumentException('invalid length for $planName when calling RetrievePlanListQueryParameter., must be smaller than or equal to 25.');
        }
        if (!is_null($planName) && mb_strlen($planName) < 1) {
            throw new \InvalidArgumentException('invalid length for $planName when calling RetrievePlanListQueryParameter., must be bigger than or equal to 1.');
        }
        $this->container['planName'] = $planName;

        return $this;
    }

    /**
     * Gets deleteFlag.
     *
     * @return string|null
     */
    public function getDeleteFlag(): mixed
    {
        return $this->container['deleteFlag'];
    }

    /**
     * Sets deleteFlag.
     *
     * @param string|null $deleteFlag 削除済みフラグ
     */
    public function setDeleteFlag(mixed $deleteFlag): static
    {
        if (is_null($deleteFlag)) {
            $this->openAPINullablesSetToNull[] = 'deleteFlag';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('deleteFlag', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getDeleteFlagAllowableValues();
        if (!is_null($deleteFlag) && !in_array($deleteFlag, $allowedValues, true)) {
            throw new \InvalidArgumentException(sprintf("Invalid value '%s' for 'deleteFlag', must be one of '%s'", $deleteFlag, implode("', '", $allowedValues)));
        }
        if (!is_null($deleteFlag) && mb_strlen($deleteFlag) > 1) {
            throw new \InvalidArgumentException('invalid length for $deleteFlag when calling RetrievePlanListQueryParameter., must be smaller than or equal to 1.');
        }
        if (!is_null($deleteFlag) && mb_strlen($deleteFlag) < 1) {
            throw new \InvalidArgumentException('invalid length for $deleteFlag when calling RetrievePlanListQueryParameter., must be bigger than or equal to 1.');
        }
        $this->container['deleteFlag'] = $deleteFlag;

        return $this;
    }

    /**
     * Gets sort.
     *
     * @return string|null
     */
    public function getSort(): mixed
    {
        return $this->container['sort'];
    }

    /**
     * Sets sort.
     *
     * @param string|null $sort ソートする項目と順序を指定します。\\ 例： `?sort=updated␣desc,created␣asc`\\ \\ ソート可能な項目  - `total_amount`: 合計金額 - `created`: 作成日時 - `updated`: 更新日時
     */
    public function setSort(mixed $sort): static
    {
        if (is_null($sort)) {
            $this->openAPINullablesSetToNull[] = 'sort';
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sort', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sort'] = $sort;

        return $this;
    }

    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @see https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    public function jsonSerialize(): mixed
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object.
     */
    public function __toString(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
    }

    /**
     * Gets a header-safe presentation of the object.
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
